ChoiceNet -- rnudechu -- Rob Udechukwu
https://github.com/rnudechu/ChoiceNet.git
git clone https://github.com/rnudechu/ChoiceNet.git
.\ChoiceNet\
.\ChoiceNet\.git
0
Project cloned!
Rob Udechukwu is responsible for commit 6837fbc0a5ae5a8f15c2b66e5ee95b11ed5b82ec
Rob Udechukwu is responsible for commit 49cdf6da5bdf164ddf459798bc7fa4dcaebc5d43
Rob Udechukwu is responsible for commit 61369259b0b401327386d18663116e7ddff11e95
Rob Udechukwu is responsible for commit 0b66e8611790613f5a6075fcd1040ac3d58d4f47
Rob Udechukwu is responsible for commit 5b4b969ed415b0b7022e398948ea8cf0303d057e
Rob Udechukwu is responsible for commit a0486bcd862c43d41f4ad78b9eb9cc3318833cf2
Rob Udechukwu is responsible for commit db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f
Rob Udechukwu is responsible for commit 510f413a883ae59efa45042001251a95c911ea4e
Rob Udechukwu is responsible for commit e17e6bae5e6f161198e8302ee620b84361d6cf4d
Rob Udechukwu is responsible for commit 6d74e3ae9956129bb123d858dad57fef3ffaf179
Rob Udechukwu is responsible for commit 92370795154e43fb2a2270fe071fb21e96e79103
Rob Udechukwu is responsible for commit d39040c27cce9f69cd8471221e2ec3f535580019
Rob Udechukwu is responsible for commit 0f2e3df7d3e5a218f27655f4f0eb6201d5db3657
Rob Udechukwu is responsible for commit 139a752b2930765bd81ae21ae378d0d296fabb76
Rob Udechukwu is responsible for commit 44481d9e7650c705e268366fac1a608d8e759b7a
Rob Udechukwu is responsible for commit 13b880d0b909109c52dfdcee1dbf78759685bb2a
Rob Udechukwu is responsible for commit 8bad721e19a95451ecb9fb4e8f3a65b5b701f858
Rob Udechukwu is responsible for commit 80adfc1adb5cc701c2fd676bd5ce894fcdcde0a6
Rob Udechukwu is responsible for commit 597588c0237a91d98f63a44c9c1cd3a439062015
Rob Udechukwu is responsible for commit 9be6d9bdaa9f7a7c6b8f67aa0a39b3b2d5120b55
Rob Udechukwu is responsible for commit 3448798d92ac2836d8643eb7f7ddbf040b07a1e0
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementPrice.java to .\ChoiceNet\ repository source files.
Added AdvertisementPurchasePortal.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeaker.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeakerGUI.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessage.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessageManager.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added PlannerGraphMatrix.java to .\ChoiceNet\ repository source files.
Added PlannerNode.java to .\ChoiceNet\ repository source files.
Added PlannerSearchParameter.java to .\ChoiceNet\ repository source files.
Added PlannerServiceRecipe.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
Added Utility.java to .\ChoiceNet\ repository source files.

 ************ ANALYZING FOR USAGE PATTERN ADDITION ************


****Parsing for addition at revision 6837fbc0a5ae5a8f15c2b66e5ee95b11ed5b82ec****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementPrice.java to .\ChoiceNet\ repository source files.
Added AdvertisementPurchasePortal.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeaker.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeakerGUI.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessage.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessageManager.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added PlannerGraphMatrix.java to .\ChoiceNet\ repository source files.
Added PlannerNode.java to .\ChoiceNet\ repository source files.
Added PlannerSearchParameter.java to .\ChoiceNet\ repository source files.
Added PlannerServiceRecipe.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
Added Utility.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
type=doc.createElement("type")
Element type = doc.createElement("type");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("source_location")
Element generalLocation = doc.createElement("source_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
Token token;
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType,providerID;
int temp;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 20;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue,
			performanceMetricUnit,  performanceMetricValue, performanceMetricScheme;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, 
						dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, 
						performanceMetricScheme,performanceMetricValue,performanceMetricUnit,  
						sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getPrice().getMethod(), myAd.getPrice().getValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getPurchasePortal().getScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getPurchasePortal().getValue(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getproviderID(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
myToken=extractTokenContent(token)
Token myToken = extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
trafficProp=getChoiceNetMessage(pktXML,"Traffic Properties")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Traffic Properties");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
trafficProp=getChoiceNetMessage(pktXML,"Handle ID")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Handle ID");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
boolean result = true;
File f = new File(Server.marketplaceListing);
Advertisement myAd;
adXML=server.readFile(Server.marketplaceListing)
String adXML = server.readFile(Server.marketplaceListing);
adList=server.cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ChoiceNetSpeakerGUI gui = new ChoiceNetSpeakerGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(listingPanel)
int returnVal = fc.showOpenDialog(listingPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
providerID=textFieldProviderIDMktpl.getText().toString()
String providerID = textFieldProviderIDMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
url=paymentURLTextField.getText()
String url = paymentURLTextField.getText();
paymentMethod=getSelectedButtonText(group)
String paymentMethod = getSelectedButtonText(group);
account=accountTextField.getText()
String account = accountTextField.getText();
amount=amountTextField.getText()
String amount = amountTextField.getText();
String currency = "USD";
service=paymentServiceNameTextField.getText()
String service = paymentServiceNameTextField.getText();
considerationConfirmation=server.makePayment(url,paymentMethod,account,amount,currency,service)
String considerationConfirmation = server.makePayment(url, paymentMethod, account, amount, currency, service);
returnVal=fc.showOpenDialog(provisionPanel)
int returnVal = fc.showOpenDialog(provisionPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
gwType=txtProvisionGWType.getText()
String gwType = txtProvisionGWType.getText();
gwAddr=txtProvisionGWAddr.getText()
String gwAddr = txtProvisionGWAddr.getText();
trafficPropFile=txtProvisionTrafficProp.getText()
String trafficPropFile = txtProvisionTrafficProp.getText();
token=txtProvisionToken.getText()
String token = txtProvisionToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel provisionMenuPanel = new JPanel();
JLabel title = new JLabel("Trigger: Provisioning Interaction");
JPanel listingPanel = new JPanel();
JLabel title = new JLabel("Trigger: Listing Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Interaction");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel paymentPanel = new JPanel();
JLabel title = new JLabel("Trigger: Make Payment Plane");
JScrollPane scroll = new JScrollPane(textAreaPayment);
JPanel provisionPanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Provisioning");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblToken = new JLabel("Token ID");
JLabel lblChuserProvision = new JLabel("Traffic Properties");
JScrollPane scroll = new JScrollPane (textAreaProvision);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Listing Service";
String cMethod = "Bitcoin:555acf41a0c013059d00001b";
String cValue = "20";
String cUnit = "USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
String reason = targetServiceName;
String fileNameFirewall = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/firewallSettings.xml";
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
button=buttons.nextElement()
AbstractButton button = buttons.nextElement();
String argument = "";
int loopCount = 0;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String result = "#  Consideration ID\t\tAccount:Purchased Service\n";
int count = 1;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String message = "";
myAd=getValue()
AdvertisementDisplay myAd = getValue();
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
String result = "";
int count = 1;
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
PlannerNode srcNode, dstNode = null;
PlannerNode node = new PlannerNode(nodeName, cost);
int index = 0;
PlannerNode srcNode, dstNode = null;
srcIndex=getNodeIndex(src,nodeGraph)
int srcIndex = getNodeIndex(src, nodeGraph);
int currIndex, parameterIndex = -1;
adjNodes=srcNode.getAdjancies()
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
boolean result = false;
boolean[] itemizedResult = new boolean[4];
int index = 0;
srcLocationType=parameters.getSrcTypeLocation()
ArrayList<String> srcLocationType = parameters.getSrcTypeLocation();
ArrayList<String> srcLocationType = parameters.getSrcTypeLocation();
srcLocation=parameters.getSrcLocation()
ArrayList<String> srcLocation = parameters.getSrcLocation();
ArrayList<String> srcLocation = parameters.getSrcLocation();
dstLocationType=parameters.getDstTypeLocation()
ArrayList<String> dstLocationType = parameters.getDstTypeLocation();
ArrayList<String> dstLocationType = parameters.getDstTypeLocation();
dstLocation=parameters.getDstLocation()
ArrayList<String> dstLocation = parameters.getDstLocation();
ArrayList<String> dstLocation = parameters.getDstLocation();
srcFormatType=parameters.getSrcTypeFormat()
ArrayList<String> srcFormatType = parameters.getSrcTypeFormat();
ArrayList<String> srcFormatType = parameters.getSrcTypeFormat();
srcFormat=parameters.getSrcFormat()
ArrayList<String> srcFormat = parameters.getSrcFormat();
ArrayList<String> srcFormat = parameters.getSrcFormat();
dstFormatType=parameters.getDstTypeFormat()
ArrayList<String> dstFormatType = parameters.getDstTypeFormat();
ArrayList<String> dstFormatType = parameters.getDstTypeFormat();
dstFormat=parameters.getDstFormat()
ArrayList<String> dstFormat = parameters.getDstFormat();
ArrayList<String> dstFormat = parameters.getDstFormat();
boolean resultVal = false;
size=srcLocation.size()
int size = srcLocation.size();
int count = 0;
int total = 0;
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameter = new ArrayList<String>();
PlannerServiceRecipe myRecipe = new PlannerServiceRecipe(advertisementList, total, provisioningParameter);
String[] dstLocX;
String[] srcLocY;
String[] dstFormatX;
String[] srcFormatY;
boolean alreadyCreatedEdge = false;
size=nodeGraph.size()
int size = nodeGraph.size();
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameter = new ArrayList<String>();
PlannerServiceRecipe myRecipe = new PlannerServiceRecipe(advertisementList, nodeX.getResourceCost(), provisioningParameter);
myAd=getAdvertisement()
AdvertisementDisplay myAd = getAdvertisement();
String result = "";
String[] values = {}, types = {};
int size = types.length;
boolean check = false;
myAd=getAdvertisement()
AdvertisementDisplay myAd = getAdvertisement();
String[] values = {}, types = {};
int size = types.length;
boolean check = false;
boolean result = false;
String searchParameter = "";
searchedFormat=getSearchedParameterFormat()
String searchedFormat = getSearchedParameterFormat();
searchedLocation=getSearchedParameterLocation()
String searchedLocation = getSearchedParameterLocation();
int i = 0;
int i = 0;
int i = 0;
int i = 0;
int count = getTotalQueries() - 1;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder docBuilder;
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("recipe")
Element rootElement = doc.createElement("recipe");
cost=doc.createElement("cost")
Element cost = doc.createElement("cost");
attr=doc.createAttribute("value")
Attr attr = doc.createAttribute("value");
services=doc.createElement("serviceAdvertisements")
Element services = doc.createElement("serviceAdvertisements");
size=getAdvertisementList().size()
int size = getAdvertisementList().size();
String adName, provisionParameter;
Element advertisement;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
Document doc = null;
nList=doc.getElementsByTagName("recipe")
NodeList nList = doc.getElementsByTagName("recipe");
NodeList myList = null;
Node myNode = null;
Element myElement = null;
recipeCount=nList.getLength()
int recipeCount = nList.getLength();
int totalCost, size = -1;
String cValue = "";
String advertisement, provisionParameter;
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameters = new ArrayList<String>();
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String temp = "";
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
payload=cnLibrary.createPlannerRequest(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createPlannerRequest(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
String response = "";
Service listingService  = new Service("Listing Service", "Listing",
				new String[]{"IPv4"},new String[]{providerAddress+"/32"},
				new String[]{},new String[]{},
				new String[]{"service"},new String[]{"listing"},
				new String[]{},new String[]{},
				null,"Advertisement Listing Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
String paymentPortal = "";
String paymentType = "Free";
int paymentValue = 0;
Advertisement myAd = new Advertisement("USD", paymentValue, myName, listingService, paymentPortal, paymentType);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
payload=cnLibrary.createRendevouzMessage(target,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] payload = cnLibrary.createRendevouzMessage(target, acceptedConsideration, availableConsideration);
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TOKEN_REQUEST,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
String considerationConfirmation = "";
String reason = "ChoiceNet Entity: "+myName+" purchased service: "+service;
temp=considerationConfirmation.split("Confirmation: ")
String[] temp = considerationConfirmation.split("Confirmation: ");
String confirmationID = temp[1];
id=System.currentTimeMillis()
long id = System.currentTimeMillis();
Consideration consideration = new Consideration(id, paymentMethod, account, amount, reason, confirmationID, service);
String trafficProp = "";
String result = "";
Scanner sc = new Scanner(new FileReader(trafficPropFile));
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
openflowFirewallMsg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage openflowFirewallMsg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
issuedBy=tempToken.getIssuedBy()
String issuedBy = tempToken.getIssuedBy();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField properties = new ChoiceNetMessageField("Traffic Properties", trafficProp, "");
ChoiceNetMessageField[] payload = {properties,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
byte[] ipAddrBytes = new byte[]{10, 0, 1, 100};
addr=InetAddress.getByAddress(ipAddrBytes)
InetAddress addr = InetAddress.getByAddress(ipAddrBytes);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String[] temp;
String originatorName = (String) packet.getOriginatorName().getValue();
PlannerSearchParameter searchParameter = new PlannerSearchParameter(originatorName, Server.numberOfFreeQueries, 0);
PlannerSearchParameter searchParameterRecord = new PlannerSearchParameter(originatorName, Server.numberOfFreeQueries, 0);
String originatorProviderType = (String) packet.getOriginatorProviderType().getValue();
rendezvousPayload=cnLibrary.createRendevouzMessage(originatorProviderType,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] rendezvousPayload = cnLibrary.createRendevouzMessage(originatorProviderType, acceptedConsideration, availableConsideration);
Packet rendezvousPacket = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,rendezvousPayload);
total=Integer.parseInt(value)
int total = Integer.parseInt(value);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
String parsedResults = results;
PlannerServiceRecipe recipe = new PlannerServiceRecipe();
size=recipe.getAdvertisementList().size()
int size = recipe.getAdvertisementList().size();
boolean readyToSendPacket = false;
PlannerServiceRecipe selectedRecipe = null;
serviceParameter=Server.searchParameterList.get(0)
PlannerSearchParameter serviceParameter = Server.searchParameterList.get(0);
Packet packet = null;
boolean check = true;
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String cost = "";
String cMethod = "";
String adID = "";
String providerID = "";
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
						sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
id=serviceParameter.getIdentifier()
long id = serviceParameter.getIdentifier();
recipes=serviceParameter.getGraphMatrix().getRecipes()
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
int lowestPrice = Integer.MAX_VALUE;
int currCost;
svcParameterCost=serviceParameter.getCost()
int svcParameterCost = serviceParameter.getCost();
entity=dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName())
DiscoveredEntities entity = dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName());
Packet packet = null;
String message = "";
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = queryValue;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
id=Server.searchParameterList.get(0).getIdentifier()
long id = Server.searchParameterList.get(0).getIdentifier();
searchParameter=Server.getSearchParameter(id)
PlannerSearchParameter searchParameter = Server.getSearchParameter(id);
PlannerNode advertisementNode;
result=advertisementNode.findMatchingSearchCriteria("Location",Server.searchedParameterLocation,Server.searchedParameterLocationType)
String result = advertisementNode.findMatchingSearchCriteria("Location", Server.searchedParameterLocation, Server.searchedParameterLocationType);
result=advertisementNode.findMatchingSearchCriteria("Format",Server.searchedParameterFormat,Server.searchedParameterFormatType)
String result = advertisementNode.findMatchingSearchCriteria("Format", Server.searchedParameterFormat, Server.searchedParameterFormatType);
result=advertisementNode.findMatchingSearchCriteria("Location",Server.searchedParameterLocation,Server.searchedParameterLocationType)
String result = advertisementNode.findMatchingSearchCriteria("Location", Server.searchedParameterLocation, Server.searchedParameterLocationType);
result=advertisementNode.findMatchingSearchCriteria("Format",Server.searchedParameterFormat,Server.searchedParameterFormatType)
String result = advertisementNode.findMatchingSearchCriteria("Format", Server.searchedParameterFormat, Server.searchedParameterFormatType);
CouchDBResponse cResponse;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
String message = "<html>Received an Use Attempt Acknowlegdement for the Token: "+myToken.getId()+"<br>" +
				"Service: "+myToken.getServiceName()+" is activated</html>";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = "Failed: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
String message = ("WARNING: "+targetedProvider+" does not match "+providerType);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String message = "";
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
ipAddr=clientIPAddress.toString()
String ipAddr = clientIPAddress.toString();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, ipAddr, clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
myPayload=createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(), 1, message);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet Entity: "+packet.getOriginatorName()+" purchased "+myName+": "+sName;
String url = Server.purchasePortalValidator+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&transactionID="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 15;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField[] newPayload = {transactionNum,token};
String reasonVal;
int opCodeVal = 4;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
String reasonVal;
int opCodeVal;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
int opCodeVal = 3;
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
String msg = "";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String trafficProp = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
creationTimeID=tokenMgr.getTokenCreationTime(tokenID)
long creationTimeID = tokenMgr.getTokenCreationTime(tokenID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
String message = "";
Packet newPacket = null;
msg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage msg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
long result = myToken.getExpirationTime()-System.currentTimeMillis();
serviceName=myToken.getServiceName()
String serviceName = myToken.getServiceName();
activatedAd=adMgr.getAdvertisementByName(serviceName)
Advertisement activatedAd = adMgr.getAdvertisementByName(serviceName);
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField[] newPayload = {handleID,token};
myPayload=createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(), 1, message);
myPayload=createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(), 1, message);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
String query = "/_design/marketplace/_view/";
String url = Server.marketplaceRESTAPI+query;
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", nackType, "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", operationCode, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] payload = {type,opCode,reason};
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
OpenFlowFirewallMessage request = new OpenFlowFirewallMessage(1,"ACCEPT","IPv4","ANY","10.10.10.1/32","ANY","ANY","ANY");
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
parts=subnet.split("/")
String[] parts = subnet.split("/");
String ip = parts[0];
int prefix;
Inet4Address a =null;
Inet4Address a1 =null;
b=a.getAddress()
byte[] b = a.getAddress();
int subnetBytes = ((b[0] & 0xFF) << 24) |
                         ((b[1] & 0xFF) << 16) |
                         ((b[2] & 0xFF) << 8)  |
                         ((b[3] & 0xFF) << 0);
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int ipBytes = ((b1[0] & 0xFF) << 24) |
                         ((b1[1] & 0xFF) << 16) |
                         ((b1[2] & 0xFF) << 8)  |
                         ((b1[3] & 0xFF) << 0);
int mask = ~((1 << (32 - prefix)) - 1);
TestUtility tu = new TestUtility();
String url = "http://152.54.14.45:5984/marketplace-rangehelper";
String ipAddr = "127.0.0.1";
mask=new String(new char[31]).replace("\0","1")
String mask = new String(new char[31]).replace("\0", "1");
a1=InetAddress.getByName("10.1.3.0")
InetAddress a1 = InetAddress.getByName("10.1.3.0");
a2=InetAddress.getByName("10.1.0.0")
InetAddress a2 = InetAddress.getByName("10.1.0.0");
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int yo1 = ((b1[0] & 0xFF) << 24) |
                ((b1[1] & 0xFF) << 16) |
                ((b1[2] & 0xFF) << 8)  |
                ((b1[3] & 0xFF) << 0);
a=InetAddress.getByName("10.1.2.255")
InetAddress a = InetAddress.getByName("10.1.2.255");
b=a.getAddress()
byte[] b = a.getAddress();
int yo = ((b[0] & 0xFF) << 24) |
                ((b[1] & 0xFF) << 16) |
                ((b[2] & 0xFF) << 8)  |
                ((b[3] & 0xFF) << 0);
int mask1 = -1 << (32 - 24);
val=String.format("%32s",Integer.toBinaryString(1)).replace(' ','0')
String val = String.format("%32s", Integer.toBinaryString(1)).replace(' ', '0');
val0=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val0 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
val1=String.format("%8s",Integer.toBinaryString(168)).replace(' ','0')
String val1 = String.format("%8s", Integer.toBinaryString(168)).replace(' ', '0');
val2=String.format("%8s",Integer.toBinaryString(2)).replace(' ','0')
String val2 = String.format("%8s", Integer.toBinaryString(2)).replace(' ', '0');
val3=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val3 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
String binary = val0+val1+val2+val3;
i1=Integer.parseInt(val0,2)
int i1 = Integer.parseInt(val0, 2);
i2=Integer.parseInt(val1,2)
int i2 = Integer.parseInt(val1, 2);
i3=Integer.parseInt(val2,2)
int i3 = Integer.parseInt(val2, 2);
i4=Integer.parseInt(val3,2)
int i4 = Integer.parseInt(val3, 2);
j1=Integer.parseInt("11111111",2)
int j1 = Integer.parseInt("11111111", 2);
j2=Integer.parseInt("11110000",2)
int j2 = Integer.parseInt("11110000", 2);
String ipAddr1 = "10.0.0.0/25";
result=tu.netMatch(ipAddr1,"10.0.0.128")
boolean result = tu.netMatch(ipAddr1, "10.0.0.128");
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
long result = System.currentTimeMillis()-eTime;
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\t\tStatus\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";
parts=addr.split("/")
String[] parts = addr.split("/");
String ip = parts[0];
int prefix;
Inet4Address a =null;
Inet4Address a1 =null;
b=a.getAddress()
byte[] b = a.getAddress();
int subnetBytes = ((b[0] & 0xFF) << 24) |
	                         ((b[1] & 0xFF) << 16) |
	                         ((b[2] & 0xFF) << 8)  |
	                         ((b[3] & 0xFF) << 0);
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int ipBytes = ((b1[0] & 0xFF) << 24) |
	                         ((b1[1] & 0xFF) << 16) |
	                         ((b1[2] & 0xFF) << 8)  |
	                         ((b1[3] & 0xFF) << 0);
int mask = ~((1 << (32 - prefix)) - 1);

Diff of 6837fbc0a5ae5a8f15c2b66e5ee95b11ed5b82ec and 49cdf6da5bdf164ddf459798bc7fa4dcaebc5d43:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 6837fbc0a5ae5a8f15c2b66e5ee95b11ed5b82ec to 49cdf6da5bdf164ddf459798bc7fa4dcaebc5d43


****Parsing for addition at revision 49cdf6da5bdf164ddf459798bc7fa4dcaebc5d43****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementPrice.java to .\ChoiceNet\ repository source files.
Added AdvertisementPurchasePortal.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeaker.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeakerGUI.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessage.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessageManager.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added PlannerGraphMatrix.java to .\ChoiceNet\ repository source files.
Added PlannerNode.java to .\ChoiceNet\ repository source files.
Added PlannerSearchParameter.java to .\ChoiceNet\ repository source files.
Added PlannerServiceRecipe.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
Added Utility.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
type=doc.createElement("type")
Element type = doc.createElement("type");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("source_location")
Element generalLocation = doc.createElement("source_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
Token token;
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType,providerID;
int temp;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 20;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue,
			performanceMetricUnit,  performanceMetricValue, performanceMetricScheme;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, 
						dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, 
						performanceMetricScheme,performanceMetricValue,performanceMetricUnit,  
						sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getPrice().getMethod(), myAd.getPrice().getValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getPurchasePortal().getScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getPurchasePortal().getValue(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getproviderID(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
myToken=extractTokenContent(token)
Token myToken = extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
trafficProp=getChoiceNetMessage(pktXML,"Traffic Properties")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Traffic Properties");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
trafficProp=getChoiceNetMessage(pktXML,"Handle ID")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Handle ID");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
boolean result = true;
File f = new File(Server.marketplaceListing);
Advertisement myAd;
adXML=server.readFile(Server.marketplaceListing)
String adXML = server.readFile(Server.marketplaceListing);
adList=server.cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ChoiceNetSpeakerGUI gui = new ChoiceNetSpeakerGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(listingPanel)
int returnVal = fc.showOpenDialog(listingPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
providerID=textFieldProviderIDMktpl.getText().toString()
String providerID = textFieldProviderIDMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
url=paymentURLTextField.getText()
String url = paymentURLTextField.getText();
paymentMethod=getSelectedButtonText(group)
String paymentMethod = getSelectedButtonText(group);
account=accountTextField.getText()
String account = accountTextField.getText();
amount=amountTextField.getText()
String amount = amountTextField.getText();
String currency = "USD";
service=paymentServiceNameTextField.getText()
String service = paymentServiceNameTextField.getText();
considerationConfirmation=server.makePayment(url,paymentMethod,account,amount,currency,service)
String considerationConfirmation = server.makePayment(url, paymentMethod, account, amount, currency, service);
returnVal=fc.showOpenDialog(provisionPanel)
int returnVal = fc.showOpenDialog(provisionPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
gwType=txtProvisionGWType.getText()
String gwType = txtProvisionGWType.getText();
gwAddr=txtProvisionGWAddr.getText()
String gwAddr = txtProvisionGWAddr.getText();
trafficPropFile=txtProvisionTrafficProp.getText()
String trafficPropFile = txtProvisionTrafficProp.getText();
token=txtProvisionToken.getText()
String token = txtProvisionToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel provisionMenuPanel = new JPanel();
JLabel title = new JLabel("Trigger: Provisioning Interaction");
JPanel listingPanel = new JPanel();
JLabel title = new JLabel("Trigger: Listing Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Interaction");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel paymentPanel = new JPanel();
JLabel title = new JLabel("Trigger: Make Payment Plane");
JScrollPane scroll = new JScrollPane(textAreaPayment);
JPanel provisionPanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Provisioning");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblToken = new JLabel("Token ID");
JLabel lblChuserProvision = new JLabel("Traffic Properties");
JScrollPane scroll = new JScrollPane (textAreaProvision);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Listing Service";
String cMethod = "Bitcoin:555acf41a0c013059d00001b";
String cValue = "20";
String cUnit = "USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
String reason = targetServiceName;
String fileNameFirewall = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/firewallSettings.xml";
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
button=buttons.nextElement()
AbstractButton button = buttons.nextElement();
String argument = "";
int loopCount = 0;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String result = "#  Consideration ID\t\tAccount:Purchased Service\n";
int count = 1;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String message = "";
myAd=getValue()
AdvertisementDisplay myAd = getValue();
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
String result = "";
int count = 1;
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
PlannerNode srcNode, dstNode = null;
PlannerNode node = new PlannerNode(nodeName, cost);
int index = 0;
PlannerNode srcNode, dstNode = null;
srcIndex=getNodeIndex(src,nodeGraph)
int srcIndex = getNodeIndex(src, nodeGraph);
int currIndex, parameterIndex = -1;
adjNodes=srcNode.getAdjancies()
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
boolean result = false;
boolean[] itemizedResult = new boolean[4];
int index = 0;
srcLocationType=parameters.getSrcTypeLocation()
ArrayList<String> srcLocationType = parameters.getSrcTypeLocation();
ArrayList<String> srcLocationType = parameters.getSrcTypeLocation();
srcLocation=parameters.getSrcLocation()
ArrayList<String> srcLocation = parameters.getSrcLocation();
ArrayList<String> srcLocation = parameters.getSrcLocation();
dstLocationType=parameters.getDstTypeLocation()
ArrayList<String> dstLocationType = parameters.getDstTypeLocation();
ArrayList<String> dstLocationType = parameters.getDstTypeLocation();
dstLocation=parameters.getDstLocation()
ArrayList<String> dstLocation = parameters.getDstLocation();
ArrayList<String> dstLocation = parameters.getDstLocation();
srcFormatType=parameters.getSrcTypeFormat()
ArrayList<String> srcFormatType = parameters.getSrcTypeFormat();
ArrayList<String> srcFormatType = parameters.getSrcTypeFormat();
srcFormat=parameters.getSrcFormat()
ArrayList<String> srcFormat = parameters.getSrcFormat();
ArrayList<String> srcFormat = parameters.getSrcFormat();
dstFormatType=parameters.getDstTypeFormat()
ArrayList<String> dstFormatType = parameters.getDstTypeFormat();
ArrayList<String> dstFormatType = parameters.getDstTypeFormat();
dstFormat=parameters.getDstFormat()
ArrayList<String> dstFormat = parameters.getDstFormat();
ArrayList<String> dstFormat = parameters.getDstFormat();
boolean resultVal = false;
size=srcLocation.size()
int size = srcLocation.size();
int count = 0;
int total = 0;
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameter = new ArrayList<String>();
PlannerServiceRecipe myRecipe = new PlannerServiceRecipe(advertisementList, total, provisioningParameter);
String[] dstLocX;
String[] srcLocY;
String[] dstFormatX;
String[] srcFormatY;
boolean alreadyCreatedEdge = false;
size=nodeGraph.size()
int size = nodeGraph.size();
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameter = new ArrayList<String>();
PlannerServiceRecipe myRecipe = new PlannerServiceRecipe(advertisementList, nodeX.getResourceCost(), provisioningParameter);
myAd=getAdvertisement()
AdvertisementDisplay myAd = getAdvertisement();
String result = "";
String[] values = {}, types = {};
int size = types.length;
boolean check = false;
myAd=getAdvertisement()
AdvertisementDisplay myAd = getAdvertisement();
String[] values = {}, types = {};
int size = types.length;
boolean check = false;
boolean result = false;
String searchParameter = "";
searchedFormat=getSearchedParameterFormat()
String searchedFormat = getSearchedParameterFormat();
searchedLocation=getSearchedParameterLocation()
String searchedLocation = getSearchedParameterLocation();
int i = 0;
int i = 0;
int i = 0;
int i = 0;
int count = getTotalQueries() - 1;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder docBuilder;
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("recipe")
Element rootElement = doc.createElement("recipe");
cost=doc.createElement("cost")
Element cost = doc.createElement("cost");
attr=doc.createAttribute("value")
Attr attr = doc.createAttribute("value");
services=doc.createElement("serviceAdvertisements")
Element services = doc.createElement("serviceAdvertisements");
size=getAdvertisementList().size()
int size = getAdvertisementList().size();
String adName, provisionParameter;
Element advertisement;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
Document doc = null;
nList=doc.getElementsByTagName("recipe")
NodeList nList = doc.getElementsByTagName("recipe");
NodeList myList = null;
Node myNode = null;
Element myElement = null;
recipeCount=nList.getLength()
int recipeCount = nList.getLength();
int totalCost, size = -1;
String cValue = "";
String advertisement, provisionParameter;
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameters = new ArrayList<String>();
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String temp = "";
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
payload=cnLibrary.createPlannerRequest(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createPlannerRequest(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
String response = "";
Service listingService  = new Service("Listing Service", "Listing",
				new String[]{"IPv4"},new String[]{providerAddress+"/32"},
				new String[]{},new String[]{},
				new String[]{"service"},new String[]{"listing"},
				new String[]{},new String[]{},
				null,"Advertisement Listing Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
String paymentPortal = "";
String paymentType = "Free";
int paymentValue = 0;
Advertisement myAd = new Advertisement("USD", paymentValue, myName, listingService, paymentPortal, paymentType);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
payload=cnLibrary.createRendevouzMessage(target,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] payload = cnLibrary.createRendevouzMessage(target, acceptedConsideration, availableConsideration);
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TOKEN_REQUEST,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
String considerationConfirmation = "";
String reason = "ChoiceNet Entity: "+myName+" purchased service: "+service;
temp=considerationConfirmation.split("Confirmation: ")
String[] temp = considerationConfirmation.split("Confirmation: ");
String confirmationID = temp[1];
id=System.currentTimeMillis()
long id = System.currentTimeMillis();
Consideration consideration = new Consideration(id, paymentMethod, account, amount, reason, confirmationID, service);
String trafficProp = "";
String result = "";
Scanner sc = new Scanner(new FileReader(trafficPropFile));
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
openflowFirewallMsg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage openflowFirewallMsg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
issuedBy=tempToken.getIssuedBy()
String issuedBy = tempToken.getIssuedBy();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField properties = new ChoiceNetMessageField("Traffic Properties", trafficProp, "");
ChoiceNetMessageField[] payload = {properties,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
byte[] ipAddrBytes = new byte[]{10, 0, 1, 100};
addr=InetAddress.getByAddress(ipAddrBytes)
InetAddress addr = InetAddress.getByAddress(ipAddrBytes);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String[] temp;
String originatorName = (String) packet.getOriginatorName().getValue();
PlannerSearchParameter searchParameter = new PlannerSearchParameter(originatorName, Server.numberOfFreeQueries, 0);
PlannerSearchParameter searchParameterRecord = new PlannerSearchParameter(originatorName, Server.numberOfFreeQueries, 0);
String originatorProviderType = (String) packet.getOriginatorProviderType().getValue();
rendezvousPayload=cnLibrary.createRendevouzMessage(originatorProviderType,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] rendezvousPayload = cnLibrary.createRendevouzMessage(originatorProviderType, acceptedConsideration, availableConsideration);
Packet rendezvousPacket = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,rendezvousPayload);
total=Integer.parseInt(value)
int total = Integer.parseInt(value);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
String parsedResults = results;
PlannerServiceRecipe recipe = new PlannerServiceRecipe();
size=recipe.getAdvertisementList().size()
int size = recipe.getAdvertisementList().size();
boolean readyToSendPacket = false;
PlannerServiceRecipe selectedRecipe = null;
serviceParameter=Server.searchParameterList.get(0)
PlannerSearchParameter serviceParameter = Server.searchParameterList.get(0);
Packet packet = null;
boolean check = true;
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String cost = "";
String cMethod = "";
String adID = "";
String providerID = "";
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
						sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
id=serviceParameter.getIdentifier()
long id = serviceParameter.getIdentifier();
recipes=serviceParameter.getGraphMatrix().getRecipes()
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
int lowestPrice = Integer.MAX_VALUE;
int currCost;
svcParameterCost=serviceParameter.getCost()
int svcParameterCost = serviceParameter.getCost();
entity=dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName())
DiscoveredEntities entity = dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName());
Packet packet = null;
String message = "";
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = queryValue;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
id=Server.searchParameterList.get(0).getIdentifier()
long id = Server.searchParameterList.get(0).getIdentifier();
searchParameter=Server.getSearchParameter(id)
PlannerSearchParameter searchParameter = Server.getSearchParameter(id);
PlannerNode advertisementNode;
result=advertisementNode.findMatchingSearchCriteria("Location",Server.searchedParameterLocation,Server.searchedParameterLocationType)
String result = advertisementNode.findMatchingSearchCriteria("Location", Server.searchedParameterLocation, Server.searchedParameterLocationType);
result=advertisementNode.findMatchingSearchCriteria("Format",Server.searchedParameterFormat,Server.searchedParameterFormatType)
String result = advertisementNode.findMatchingSearchCriteria("Format", Server.searchedParameterFormat, Server.searchedParameterFormatType);
result=advertisementNode.findMatchingSearchCriteria("Location",Server.searchedParameterLocation,Server.searchedParameterLocationType)
String result = advertisementNode.findMatchingSearchCriteria("Location", Server.searchedParameterLocation, Server.searchedParameterLocationType);
result=advertisementNode.findMatchingSearchCriteria("Format",Server.searchedParameterFormat,Server.searchedParameterFormatType)
String result = advertisementNode.findMatchingSearchCriteria("Format", Server.searchedParameterFormat, Server.searchedParameterFormatType);
CouchDBResponse cResponse;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
String message = "<html>Received an Use Attempt Acknowlegdement for the Token: "+myToken.getId()+"<br>" +
				"Service: "+myToken.getServiceName()+" is activated</html>";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = "Failed: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
String message = ("WARNING: "+targetedProvider+" does not match "+providerType);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String message = "";
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
ipAddr=clientIPAddress.toString()
String ipAddr = clientIPAddress.toString();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, ipAddr, clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
myPayload=createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(), 1, message);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet Entity: "+packet.getOriginatorName()+" purchased "+myName+": "+sName;
String url = Server.purchasePortalValidator+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&transactionID="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 15;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField[] newPayload = {transactionNum,token};
String reasonVal;
int opCodeVal = 4;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
String reasonVal;
int opCodeVal;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
int opCodeVal = 3;
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
String msg = "";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String trafficProp = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
creationTimeID=tokenMgr.getTokenCreationTime(tokenID)
long creationTimeID = tokenMgr.getTokenCreationTime(tokenID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
String message = "";
Packet newPacket = null;
msg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage msg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
long result = myToken.getExpirationTime()-System.currentTimeMillis();
serviceName=myToken.getServiceName()
String serviceName = myToken.getServiceName();
activatedAd=adMgr.getAdvertisementByName(serviceName)
Advertisement activatedAd = adMgr.getAdvertisementByName(serviceName);
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField[] newPayload = {handleID,token};
myPayload=createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(), 1, message);
myPayload=createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(), 1, message);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
String query = "/_design/marketplace/_view/";
String url = Server.marketplaceRESTAPI+query;
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", nackType, "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", operationCode, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] payload = {type,opCode,reason};
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
OpenFlowFirewallMessage request = new OpenFlowFirewallMessage(1,"ACCEPT","IPv4","ANY","10.10.10.1/32","ANY","ANY","ANY");
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
parts=subnet.split("/")
String[] parts = subnet.split("/");
String ip = parts[0];
int prefix;
Inet4Address a =null;
Inet4Address a1 =null;
b=a.getAddress()
byte[] b = a.getAddress();
int subnetBytes = ((b[0] & 0xFF) << 24) |
                         ((b[1] & 0xFF) << 16) |
                         ((b[2] & 0xFF) << 8)  |
                         ((b[3] & 0xFF) << 0);
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int ipBytes = ((b1[0] & 0xFF) << 24) |
                         ((b1[1] & 0xFF) << 16) |
                         ((b1[2] & 0xFF) << 8)  |
                         ((b1[3] & 0xFF) << 0);
int mask = ~((1 << (32 - prefix)) - 1);
TestUtility tu = new TestUtility();
String url = "http://152.54.14.45:5984/marketplace-rangehelper";
String ipAddr = "127.0.0.1";
mask=new String(new char[31]).replace("\0","1")
String mask = new String(new char[31]).replace("\0", "1");
a1=InetAddress.getByName("10.1.3.0")
InetAddress a1 = InetAddress.getByName("10.1.3.0");
a2=InetAddress.getByName("10.1.0.0")
InetAddress a2 = InetAddress.getByName("10.1.0.0");
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int yo1 = ((b1[0] & 0xFF) << 24) |
                ((b1[1] & 0xFF) << 16) |
                ((b1[2] & 0xFF) << 8)  |
                ((b1[3] & 0xFF) << 0);
a=InetAddress.getByName("10.1.2.255")
InetAddress a = InetAddress.getByName("10.1.2.255");
b=a.getAddress()
byte[] b = a.getAddress();
int yo = ((b[0] & 0xFF) << 24) |
                ((b[1] & 0xFF) << 16) |
                ((b[2] & 0xFF) << 8)  |
                ((b[3] & 0xFF) << 0);
int mask1 = -1 << (32 - 24);
val=String.format("%32s",Integer.toBinaryString(1)).replace(' ','0')
String val = String.format("%32s", Integer.toBinaryString(1)).replace(' ', '0');
val0=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val0 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
val1=String.format("%8s",Integer.toBinaryString(168)).replace(' ','0')
String val1 = String.format("%8s", Integer.toBinaryString(168)).replace(' ', '0');
val2=String.format("%8s",Integer.toBinaryString(2)).replace(' ','0')
String val2 = String.format("%8s", Integer.toBinaryString(2)).replace(' ', '0');
val3=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val3 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
String binary = val0+val1+val2+val3;
i1=Integer.parseInt(val0,2)
int i1 = Integer.parseInt(val0, 2);
i2=Integer.parseInt(val1,2)
int i2 = Integer.parseInt(val1, 2);
i3=Integer.parseInt(val2,2)
int i3 = Integer.parseInt(val2, 2);
i4=Integer.parseInt(val3,2)
int i4 = Integer.parseInt(val3, 2);
j1=Integer.parseInt("11111111",2)
int j1 = Integer.parseInt("11111111", 2);
j2=Integer.parseInt("11110000",2)
int j2 = Integer.parseInt("11110000", 2);
String ipAddr1 = "10.0.0.0/25";
result=tu.netMatch(ipAddr1,"10.0.0.128")
boolean result = tu.netMatch(ipAddr1, "10.0.0.128");
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
long result = System.currentTimeMillis()-eTime;
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\t\tStatus\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";
parts=addr.split("/")
String[] parts = addr.split("/");
String ip = parts[0];
int prefix;
Inet4Address a =null;
Inet4Address a1 =null;
b=a.getAddress()
byte[] b = a.getAddress();
int subnetBytes = ((b[0] & 0xFF) << 24) |
	                         ((b[1] & 0xFF) << 16) |
	                         ((b[2] & 0xFF) << 8)  |
	                         ((b[3] & 0xFF) << 0);
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int ipBytes = ((b1[0] & 0xFF) << 24) |
	                         ((b1[1] & 0xFF) << 16) |
	                         ((b1[2] & 0xFF) << 8)  |
	                         ((b1[3] & 0xFF) << 0);
int mask = ~((1 << (32 - prefix)) - 1);

Diff of 49cdf6da5bdf164ddf459798bc7fa4dcaebc5d43 and 61369259b0b401327386d18663116e7ddff11e95:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 49cdf6da5bdf164ddf459798bc7fa4dcaebc5d43 to 61369259b0b401327386d18663116e7ddff11e95


****Parsing for addition at revision 61369259b0b401327386d18663116e7ddff11e95****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementPrice.java to .\ChoiceNet\ repository source files.
Added AdvertisementPurchasePortal.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeaker.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeakerGUI.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessage.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessageManager.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added PlannerGraphMatrix.java to .\ChoiceNet\ repository source files.
Added PlannerNode.java to .\ChoiceNet\ repository source files.
Added PlannerSearchParameter.java to .\ChoiceNet\ repository source files.
Added PlannerServiceRecipe.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
Added Utility.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
type=doc.createElement("type")
Element type = doc.createElement("type");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("source_location")
Element generalLocation = doc.createElement("source_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
Token token;
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType,providerID;
int temp;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 20;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue,
			performanceMetricUnit,  performanceMetricValue, performanceMetricScheme;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, 
						dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, 
						performanceMetricScheme,performanceMetricValue,performanceMetricUnit,  
						sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getPrice().getMethod(), myAd.getPrice().getValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getPurchasePortal().getScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getPurchasePortal().getValue(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getproviderID(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
myToken=extractTokenContent(token)
Token myToken = extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
trafficProp=getChoiceNetMessage(pktXML,"Traffic Properties")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Traffic Properties");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
trafficProp=getChoiceNetMessage(pktXML,"Handle ID")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Handle ID");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
boolean result = true;
File f = new File(Server.marketplaceListing);
Advertisement myAd;
adXML=server.readFile(Server.marketplaceListing)
String adXML = server.readFile(Server.marketplaceListing);
adList=server.cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ChoiceNetSpeakerGUI gui = new ChoiceNetSpeakerGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(listingPanel)
int returnVal = fc.showOpenDialog(listingPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
providerID=textFieldProviderIDMktpl.getText().toString()
String providerID = textFieldProviderIDMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
url=paymentURLTextField.getText()
String url = paymentURLTextField.getText();
paymentMethod=getSelectedButtonText(group)
String paymentMethod = getSelectedButtonText(group);
account=accountTextField.getText()
String account = accountTextField.getText();
amount=amountTextField.getText()
String amount = amountTextField.getText();
String currency = "USD";
service=paymentServiceNameTextField.getText()
String service = paymentServiceNameTextField.getText();
considerationConfirmation=server.makePayment(url,paymentMethod,account,amount,currency,service)
String considerationConfirmation = server.makePayment(url, paymentMethod, account, amount, currency, service);
returnVal=fc.showOpenDialog(provisionPanel)
int returnVal = fc.showOpenDialog(provisionPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
gwType=txtProvisionGWType.getText()
String gwType = txtProvisionGWType.getText();
gwAddr=txtProvisionGWAddr.getText()
String gwAddr = txtProvisionGWAddr.getText();
trafficPropFile=txtProvisionTrafficProp.getText()
String trafficPropFile = txtProvisionTrafficProp.getText();
token=txtProvisionToken.getText()
String token = txtProvisionToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel provisionMenuPanel = new JPanel();
JLabel title = new JLabel("Trigger: Provisioning Interaction");
JPanel listingPanel = new JPanel();
JLabel title = new JLabel("Trigger: Listing Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Interaction");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel paymentPanel = new JPanel();
JLabel title = new JLabel("Trigger: Make Payment Plane");
JScrollPane scroll = new JScrollPane(textAreaPayment);
JPanel provisionPanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Provisioning");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblToken = new JLabel("Token ID");
JLabel lblChuserProvision = new JLabel("Traffic Properties");
JScrollPane scroll = new JScrollPane (textAreaProvision);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Listing Service";
String cMethod = "Bitcoin:555acf41a0c013059d00001b";
String cValue = "20";
String cUnit = "USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
String reason = targetServiceName;
String fileNameFirewall = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/firewallSettings.xml";
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
button=buttons.nextElement()
AbstractButton button = buttons.nextElement();
String argument = "";
int loopCount = 0;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String result = "#  Consideration ID\t\tAccount:Purchased Service\n";
int count = 1;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String message = "";
myAd=getValue()
AdvertisementDisplay myAd = getValue();
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
String result = "";
int count = 1;
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
PlannerNode srcNode, dstNode = null;
PlannerNode node = new PlannerNode(nodeName, cost);
int index = 0;
PlannerNode srcNode, dstNode = null;
srcIndex=getNodeIndex(src,nodeGraph)
int srcIndex = getNodeIndex(src, nodeGraph);
int currIndex, parameterIndex = -1;
adjNodes=srcNode.getAdjancies()
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
boolean result = false;
boolean[] itemizedResult = new boolean[4];
int index = 0;
srcLocationType=parameters.getSrcTypeLocation()
ArrayList<String> srcLocationType = parameters.getSrcTypeLocation();
ArrayList<String> srcLocationType = parameters.getSrcTypeLocation();
srcLocation=parameters.getSrcLocation()
ArrayList<String> srcLocation = parameters.getSrcLocation();
ArrayList<String> srcLocation = parameters.getSrcLocation();
dstLocationType=parameters.getDstTypeLocation()
ArrayList<String> dstLocationType = parameters.getDstTypeLocation();
ArrayList<String> dstLocationType = parameters.getDstTypeLocation();
dstLocation=parameters.getDstLocation()
ArrayList<String> dstLocation = parameters.getDstLocation();
ArrayList<String> dstLocation = parameters.getDstLocation();
srcFormatType=parameters.getSrcTypeFormat()
ArrayList<String> srcFormatType = parameters.getSrcTypeFormat();
ArrayList<String> srcFormatType = parameters.getSrcTypeFormat();
srcFormat=parameters.getSrcFormat()
ArrayList<String> srcFormat = parameters.getSrcFormat();
ArrayList<String> srcFormat = parameters.getSrcFormat();
dstFormatType=parameters.getDstTypeFormat()
ArrayList<String> dstFormatType = parameters.getDstTypeFormat();
ArrayList<String> dstFormatType = parameters.getDstTypeFormat();
dstFormat=parameters.getDstFormat()
ArrayList<String> dstFormat = parameters.getDstFormat();
ArrayList<String> dstFormat = parameters.getDstFormat();
boolean resultVal = false;
size=srcLocation.size()
int size = srcLocation.size();
int count = 0;
int total = 0;
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameter = new ArrayList<String>();
PlannerServiceRecipe myRecipe = new PlannerServiceRecipe(advertisementList, total, provisioningParameter);
String[] dstLocX;
String[] srcLocY;
String[] dstFormatX;
String[] srcFormatY;
boolean alreadyCreatedEdge = false;
size=nodeGraph.size()
int size = nodeGraph.size();
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameter = new ArrayList<String>();
PlannerServiceRecipe myRecipe = new PlannerServiceRecipe(advertisementList, nodeX.getResourceCost(), provisioningParameter);
myAd=getAdvertisement()
AdvertisementDisplay myAd = getAdvertisement();
String result = "";
String[] values = {}, types = {};
int size = types.length;
boolean check = false;
myAd=getAdvertisement()
AdvertisementDisplay myAd = getAdvertisement();
String[] values = {}, types = {};
int size = types.length;
boolean check = false;
boolean result = false;
String searchParameter = "";
searchedFormat=getSearchedParameterFormat()
String searchedFormat = getSearchedParameterFormat();
searchedLocation=getSearchedParameterLocation()
String searchedLocation = getSearchedParameterLocation();
int i = 0;
int i = 0;
int i = 0;
int i = 0;
int count = getTotalQueries() - 1;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder docBuilder;
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("recipe")
Element rootElement = doc.createElement("recipe");
cost=doc.createElement("cost")
Element cost = doc.createElement("cost");
attr=doc.createAttribute("value")
Attr attr = doc.createAttribute("value");
services=doc.createElement("serviceAdvertisements")
Element services = doc.createElement("serviceAdvertisements");
size=getAdvertisementList().size()
int size = getAdvertisementList().size();
String adName, provisionParameter;
Element advertisement;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
Document doc = null;
nList=doc.getElementsByTagName("recipe")
NodeList nList = doc.getElementsByTagName("recipe");
NodeList myList = null;
Node myNode = null;
Element myElement = null;
recipeCount=nList.getLength()
int recipeCount = nList.getLength();
int totalCost, size = -1;
String cValue = "";
String advertisement, provisionParameter;
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameters = new ArrayList<String>();
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String temp = "";
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
payload=cnLibrary.createPlannerRequest(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createPlannerRequest(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
String response = "";
Service listingService  = new Service("Listing Service", "Listing",
				new String[]{"IPv4"},new String[]{providerAddress+"/32"},
				new String[]{},new String[]{},
				new String[]{"service"},new String[]{"listing"},
				new String[]{},new String[]{},
				null,"Advertisement Listing Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
String paymentPortal = "";
String paymentType = "Free";
int paymentValue = 0;
Advertisement myAd = new Advertisement("USD", paymentValue, myName, listingService, paymentPortal, paymentType);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
payload=cnLibrary.createRendevouzMessage(target,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] payload = cnLibrary.createRendevouzMessage(target, acceptedConsideration, availableConsideration);
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TOKEN_REQUEST,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
String considerationConfirmation = "";
String reason = "ChoiceNet Entity: "+myName+" purchased service: "+service;
temp=considerationConfirmation.split("Confirmation: ")
String[] temp = considerationConfirmation.split("Confirmation: ");
String confirmationID = temp[1];
id=System.currentTimeMillis()
long id = System.currentTimeMillis();
Consideration consideration = new Consideration(id, paymentMethod, account, amount, reason, confirmationID, service);
String trafficProp = "";
String result = "";
Scanner sc = new Scanner(new FileReader(trafficPropFile));
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
openflowFirewallMsg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage openflowFirewallMsg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
issuedBy=tempToken.getIssuedBy()
String issuedBy = tempToken.getIssuedBy();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField properties = new ChoiceNetMessageField("Traffic Properties", trafficProp, "");
ChoiceNetMessageField[] payload = {properties,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
byte[] ipAddrBytes = new byte[]{10, 0, 1, 100};
addr=InetAddress.getByAddress(ipAddrBytes)
InetAddress addr = InetAddress.getByAddress(ipAddrBytes);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String[] temp;
String originatorName = (String) packet.getOriginatorName().getValue();
PlannerSearchParameter searchParameter = new PlannerSearchParameter(originatorName, Server.numberOfFreeQueries, 0);
PlannerSearchParameter searchParameterRecord = new PlannerSearchParameter(originatorName, Server.numberOfFreeQueries, 0);
String originatorProviderType = (String) packet.getOriginatorProviderType().getValue();
rendezvousPayload=cnLibrary.createRendevouzMessage(originatorProviderType,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] rendezvousPayload = cnLibrary.createRendevouzMessage(originatorProviderType, acceptedConsideration, availableConsideration);
Packet rendezvousPacket = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,rendezvousPayload);
total=Integer.parseInt(value)
int total = Integer.parseInt(value);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
String parsedResults = results;
PlannerServiceRecipe recipe = new PlannerServiceRecipe();
size=recipe.getAdvertisementList().size()
int size = recipe.getAdvertisementList().size();
boolean readyToSendPacket = false;
PlannerServiceRecipe selectedRecipe = null;
serviceParameter=Server.searchParameterList.get(0)
PlannerSearchParameter serviceParameter = Server.searchParameterList.get(0);
Packet packet = null;
boolean check = true;
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String cost = "";
String cMethod = "";
String adID = "";
String providerID = "";
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
						sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
id=serviceParameter.getIdentifier()
long id = serviceParameter.getIdentifier();
recipes=serviceParameter.getGraphMatrix().getRecipes()
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
int lowestPrice = Integer.MAX_VALUE;
int currCost;
svcParameterCost=serviceParameter.getCost()
int svcParameterCost = serviceParameter.getCost();
entity=dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName())
DiscoveredEntities entity = dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName());
Packet packet = null;
String message = "";
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = queryValue;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
id=Server.searchParameterList.get(0).getIdentifier()
long id = Server.searchParameterList.get(0).getIdentifier();
searchParameter=Server.getSearchParameter(id)
PlannerSearchParameter searchParameter = Server.getSearchParameter(id);
PlannerNode advertisementNode;
result=advertisementNode.findMatchingSearchCriteria("Location",Server.searchedParameterLocation,Server.searchedParameterLocationType)
String result = advertisementNode.findMatchingSearchCriteria("Location", Server.searchedParameterLocation, Server.searchedParameterLocationType);
result=advertisementNode.findMatchingSearchCriteria("Format",Server.searchedParameterFormat,Server.searchedParameterFormatType)
String result = advertisementNode.findMatchingSearchCriteria("Format", Server.searchedParameterFormat, Server.searchedParameterFormatType);
result=advertisementNode.findMatchingSearchCriteria("Location",Server.searchedParameterLocation,Server.searchedParameterLocationType)
String result = advertisementNode.findMatchingSearchCriteria("Location", Server.searchedParameterLocation, Server.searchedParameterLocationType);
result=advertisementNode.findMatchingSearchCriteria("Format",Server.searchedParameterFormat,Server.searchedParameterFormatType)
String result = advertisementNode.findMatchingSearchCriteria("Format", Server.searchedParameterFormat, Server.searchedParameterFormatType);
CouchDBResponse cResponse;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
String message = "<html>Received an Use Attempt Acknowlegdement for the Token: "+myToken.getId()+"<br>" +
				"Service: "+myToken.getServiceName()+" is activated</html>";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = "Failed: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
String message = ("WARNING: "+targetedProvider+" does not match "+providerType);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String message = "";
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
ipAddr=clientIPAddress.toString()
String ipAddr = clientIPAddress.toString();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, ipAddr, clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
myPayload=createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(), 1, message);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet Entity: "+packet.getOriginatorName()+" purchased "+myName+": "+sName;
String url = Server.purchasePortalValidator+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&transactionID="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 15;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField[] newPayload = {transactionNum,token};
String reasonVal;
int opCodeVal = 4;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
String reasonVal;
int opCodeVal;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
int opCodeVal = 3;
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
String msg = "";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String trafficProp = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
creationTimeID=tokenMgr.getTokenCreationTime(tokenID)
long creationTimeID = tokenMgr.getTokenCreationTime(tokenID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
String message = "";
Packet newPacket = null;
msg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage msg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
long result = myToken.getExpirationTime()-System.currentTimeMillis();
serviceName=myToken.getServiceName()
String serviceName = myToken.getServiceName();
activatedAd=adMgr.getAdvertisementByName(serviceName)
Advertisement activatedAd = adMgr.getAdvertisementByName(serviceName);
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField[] newPayload = {handleID,token};
myPayload=createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(), 1, message);
myPayload=createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(), 1, message);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
String query = "/_design/marketplace/_view/";
String url = Server.marketplaceRESTAPI+query;
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", nackType, "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", operationCode, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] payload = {type,opCode,reason};
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
OpenFlowFirewallMessage request = new OpenFlowFirewallMessage(1,"ACCEPT","IPv4","ANY","10.10.10.1/32","ANY","ANY","ANY");
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
parts=subnet.split("/")
String[] parts = subnet.split("/");
String ip = parts[0];
int prefix;
Inet4Address a =null;
Inet4Address a1 =null;
b=a.getAddress()
byte[] b = a.getAddress();
int subnetBytes = ((b[0] & 0xFF) << 24) |
                         ((b[1] & 0xFF) << 16) |
                         ((b[2] & 0xFF) << 8)  |
                         ((b[3] & 0xFF) << 0);
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int ipBytes = ((b1[0] & 0xFF) << 24) |
                         ((b1[1] & 0xFF) << 16) |
                         ((b1[2] & 0xFF) << 8)  |
                         ((b1[3] & 0xFF) << 0);
int mask = ~((1 << (32 - prefix)) - 1);
TestUtility tu = new TestUtility();
String url = "http://152.54.14.45:5984/marketplace-rangehelper";
String ipAddr = "127.0.0.1";
mask=new String(new char[31]).replace("\0","1")
String mask = new String(new char[31]).replace("\0", "1");
a1=InetAddress.getByName("10.1.3.0")
InetAddress a1 = InetAddress.getByName("10.1.3.0");
a2=InetAddress.getByName("10.1.0.0")
InetAddress a2 = InetAddress.getByName("10.1.0.0");
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int yo1 = ((b1[0] & 0xFF) << 24) |
                ((b1[1] & 0xFF) << 16) |
                ((b1[2] & 0xFF) << 8)  |
                ((b1[3] & 0xFF) << 0);
a=InetAddress.getByName("10.1.2.255")
InetAddress a = InetAddress.getByName("10.1.2.255");
b=a.getAddress()
byte[] b = a.getAddress();
int yo = ((b[0] & 0xFF) << 24) |
                ((b[1] & 0xFF) << 16) |
                ((b[2] & 0xFF) << 8)  |
                ((b[3] & 0xFF) << 0);
int mask1 = -1 << (32 - 24);
val=String.format("%32s",Integer.toBinaryString(1)).replace(' ','0')
String val = String.format("%32s", Integer.toBinaryString(1)).replace(' ', '0');
val0=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val0 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
val1=String.format("%8s",Integer.toBinaryString(168)).replace(' ','0')
String val1 = String.format("%8s", Integer.toBinaryString(168)).replace(' ', '0');
val2=String.format("%8s",Integer.toBinaryString(2)).replace(' ','0')
String val2 = String.format("%8s", Integer.toBinaryString(2)).replace(' ', '0');
val3=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val3 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
String binary = val0+val1+val2+val3;
i1=Integer.parseInt(val0,2)
int i1 = Integer.parseInt(val0, 2);
i2=Integer.parseInt(val1,2)
int i2 = Integer.parseInt(val1, 2);
i3=Integer.parseInt(val2,2)
int i3 = Integer.parseInt(val2, 2);
i4=Integer.parseInt(val3,2)
int i4 = Integer.parseInt(val3, 2);
j1=Integer.parseInt("11111111",2)
int j1 = Integer.parseInt("11111111", 2);
j2=Integer.parseInt("11110000",2)
int j2 = Integer.parseInt("11110000", 2);
String ipAddr1 = "10.0.0.0/25";
result=tu.netMatch(ipAddr1,"10.0.0.128")
boolean result = tu.netMatch(ipAddr1, "10.0.0.128");
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
long result = System.currentTimeMillis()-eTime;
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\t\tStatus\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";
parts=addr.split("/")
String[] parts = addr.split("/");
String ip = parts[0];
int prefix;
Inet4Address a =null;
Inet4Address a1 =null;
b=a.getAddress()
byte[] b = a.getAddress();
int subnetBytes = ((b[0] & 0xFF) << 24) |
	                         ((b[1] & 0xFF) << 16) |
	                         ((b[2] & 0xFF) << 8)  |
	                         ((b[3] & 0xFF) << 0);
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int ipBytes = ((b1[0] & 0xFF) << 24) |
	                         ((b1[1] & 0xFF) << 16) |
	                         ((b1[2] & 0xFF) << 8)  |
	                         ((b1[3] & 0xFF) << 0);
int mask = ~((1 << (32 - prefix)) - 1);

Diff of 61369259b0b401327386d18663116e7ddff11e95 and 0b66e8611790613f5a6075fcd1040ac3d58d4f47:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 61369259b0b401327386d18663116e7ddff11e95 to 0b66e8611790613f5a6075fcd1040ac3d58d4f47


****Parsing for addition at revision 0b66e8611790613f5a6075fcd1040ac3d58d4f47****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementPrice.java to .\ChoiceNet\ repository source files.
Added AdvertisementPurchasePortal.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeaker.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeakerGUI.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessage.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessageManager.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added PlannerGraphMatrix.java to .\ChoiceNet\ repository source files.
Added PlannerNode.java to .\ChoiceNet\ repository source files.
Added PlannerSearchParameter.java to .\ChoiceNet\ repository source files.
Added PlannerServiceRecipe.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
Added Utility.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
type=doc.createElement("type")
Element type = doc.createElement("type");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("source_location")
Element generalLocation = doc.createElement("source_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
Token token;
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType,providerID;
int temp;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 20;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue,
			performanceMetricUnit,  performanceMetricValue, performanceMetricScheme;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, 
						dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, 
						performanceMetricScheme,performanceMetricValue,performanceMetricUnit,  
						sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getPrice().getMethod(), myAd.getPrice().getValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getPurchasePortal().getScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getPurchasePortal().getValue(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getproviderID(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
myToken=extractTokenContent(token)
Token myToken = extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
trafficProp=getChoiceNetMessage(pktXML,"Traffic Properties")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Traffic Properties");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
trafficProp=getChoiceNetMessage(pktXML,"Handle ID")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Handle ID");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
boolean result = true;
File f = new File(Server.marketplaceListing);
Advertisement myAd;
adXML=server.readFile(Server.marketplaceListing)
String adXML = server.readFile(Server.marketplaceListing);
adList=server.cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ChoiceNetSpeakerGUI gui = new ChoiceNetSpeakerGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(listingPanel)
int returnVal = fc.showOpenDialog(listingPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
providerID=textFieldProviderIDMktpl.getText().toString()
String providerID = textFieldProviderIDMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
url=paymentURLTextField.getText()
String url = paymentURLTextField.getText();
paymentMethod=getSelectedButtonText(group)
String paymentMethod = getSelectedButtonText(group);
account=accountTextField.getText()
String account = accountTextField.getText();
amount=amountTextField.getText()
String amount = amountTextField.getText();
String currency = "USD";
service=paymentServiceNameTextField.getText()
String service = paymentServiceNameTextField.getText();
considerationConfirmation=server.makePayment(url,paymentMethod,account,amount,currency,service)
String considerationConfirmation = server.makePayment(url, paymentMethod, account, amount, currency, service);
returnVal=fc.showOpenDialog(provisionPanel)
int returnVal = fc.showOpenDialog(provisionPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
gwType=txtProvisionGWType.getText()
String gwType = txtProvisionGWType.getText();
gwAddr=txtProvisionGWAddr.getText()
String gwAddr = txtProvisionGWAddr.getText();
trafficPropFile=txtProvisionTrafficProp.getText()
String trafficPropFile = txtProvisionTrafficProp.getText();
token=txtProvisionToken.getText()
String token = txtProvisionToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel provisionMenuPanel = new JPanel();
JLabel title = new JLabel("Trigger: Provisioning Interaction");
JPanel listingPanel = new JPanel();
JLabel title = new JLabel("Trigger: Listing Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Interaction");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel paymentPanel = new JPanel();
JLabel title = new JLabel("Trigger: Make Payment Plane");
JScrollPane scroll = new JScrollPane(textAreaPayment);
JPanel provisionPanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Provisioning");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblToken = new JLabel("Token ID");
JLabel lblChuserProvision = new JLabel("Traffic Properties");
JScrollPane scroll = new JScrollPane (textAreaProvision);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Listing Service";
String cMethod = "Bitcoin:555acf41a0c013059d00001b";
String cValue = "20";
String cUnit = "USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
String reason = targetServiceName;
String fileNameFirewall = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/firewallSettings.xml";
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
button=buttons.nextElement()
AbstractButton button = buttons.nextElement();
String argument = "";
int loopCount = 0;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String result = "#  Consideration ID\t\tAccount:Purchased Service\n";
int count = 1;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String message = "";
myAd=getValue()
AdvertisementDisplay myAd = getValue();
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
String result = "";
int count = 1;
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
PlannerNode srcNode, dstNode = null;
PlannerNode node = new PlannerNode(nodeName, cost);
int index = 0;
PlannerNode srcNode, dstNode = null;
srcIndex=getNodeIndex(src,nodeGraph)
int srcIndex = getNodeIndex(src, nodeGraph);
int currIndex, parameterIndex = -1;
adjNodes=srcNode.getAdjancies()
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
boolean result = false;
boolean[] itemizedResult = new boolean[4];
int index = 0;
srcLocationType=parameters.getSrcTypeLocation()
ArrayList<String> srcLocationType = parameters.getSrcTypeLocation();
ArrayList<String> srcLocationType = parameters.getSrcTypeLocation();
srcLocation=parameters.getSrcLocation()
ArrayList<String> srcLocation = parameters.getSrcLocation();
ArrayList<String> srcLocation = parameters.getSrcLocation();
dstLocationType=parameters.getDstTypeLocation()
ArrayList<String> dstLocationType = parameters.getDstTypeLocation();
ArrayList<String> dstLocationType = parameters.getDstTypeLocation();
dstLocation=parameters.getDstLocation()
ArrayList<String> dstLocation = parameters.getDstLocation();
ArrayList<String> dstLocation = parameters.getDstLocation();
srcFormatType=parameters.getSrcTypeFormat()
ArrayList<String> srcFormatType = parameters.getSrcTypeFormat();
ArrayList<String> srcFormatType = parameters.getSrcTypeFormat();
srcFormat=parameters.getSrcFormat()
ArrayList<String> srcFormat = parameters.getSrcFormat();
ArrayList<String> srcFormat = parameters.getSrcFormat();
dstFormatType=parameters.getDstTypeFormat()
ArrayList<String> dstFormatType = parameters.getDstTypeFormat();
ArrayList<String> dstFormatType = parameters.getDstTypeFormat();
dstFormat=parameters.getDstFormat()
ArrayList<String> dstFormat = parameters.getDstFormat();
ArrayList<String> dstFormat = parameters.getDstFormat();
boolean resultVal = false;
size=srcLocation.size()
int size = srcLocation.size();
int count = 0;
int total = 0;
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameter = new ArrayList<String>();
PlannerServiceRecipe myRecipe = new PlannerServiceRecipe(advertisementList, total, provisioningParameter);
String[] dstLocX;
String[] srcLocY;
String[] dstFormatX;
String[] srcFormatY;
boolean alreadyCreatedEdge = false;
size=nodeGraph.size()
int size = nodeGraph.size();
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameter = new ArrayList<String>();
PlannerServiceRecipe myRecipe = new PlannerServiceRecipe(advertisementList, nodeX.getResourceCost(), provisioningParameter);

 Generics pattern ArrayList<String> srcLocationType = parameters.getSrcTypeLocation(); was added at revision 0b66e8611790613f5a6075fcd1040ac3d58d4f47


 Generics pattern ArrayList<String> srcLocation = parameters.getSrcLocation(); was added at revision 0b66e8611790613f5a6075fcd1040ac3d58d4f47


 Generics pattern ArrayList<String> dstLocationType = parameters.getDstTypeLocation(); was added at revision 0b66e8611790613f5a6075fcd1040ac3d58d4f47


 Generics pattern ArrayList<String> dstLocation = parameters.getDstLocation(); was added at revision 0b66e8611790613f5a6075fcd1040ac3d58d4f47


 Generics pattern ArrayList<String> srcFormatType = parameters.getSrcTypeFormat(); was added at revision 0b66e8611790613f5a6075fcd1040ac3d58d4f47


 Generics pattern ArrayList<String> srcFormat = parameters.getSrcFormat(); was added at revision 0b66e8611790613f5a6075fcd1040ac3d58d4f47


 Generics pattern ArrayList<String> dstFormatType = parameters.getDstTypeFormat(); was added at revision 0b66e8611790613f5a6075fcd1040ac3d58d4f47


 Generics pattern ArrayList<String> dstFormat = parameters.getDstFormat(); was added at revision 0b66e8611790613f5a6075fcd1040ac3d58d4f47

myAd=getAdvertisement()
AdvertisementDisplay myAd = getAdvertisement();
String result = "";
String[] values = {}, types = {};
int size = types.length;
boolean check = false;
myAd=getAdvertisement()
AdvertisementDisplay myAd = getAdvertisement();
String[] values = {}, types = {};
int size = types.length;
boolean check = false;
boolean result = false;
String searchParameter = "";
searchedFormat=getSearchedParameterFormat()
String searchedFormat = getSearchedParameterFormat();
searchedLocation=getSearchedParameterLocation()
String searchedLocation = getSearchedParameterLocation();
int i = 0;
int i = 0;
int i = 0;
int i = 0;
int count = getTotalQueries() - 1;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder docBuilder;
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("recipe")
Element rootElement = doc.createElement("recipe");
cost=doc.createElement("cost")
Element cost = doc.createElement("cost");
attr=doc.createAttribute("value")
Attr attr = doc.createAttribute("value");
services=doc.createElement("serviceAdvertisements")
Element services = doc.createElement("serviceAdvertisements");
size=getAdvertisementList().size()
int size = getAdvertisementList().size();
String adName, provisionParameter;
Element advertisement;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
Document doc = null;
nList=doc.getElementsByTagName("recipe")
NodeList nList = doc.getElementsByTagName("recipe");
NodeList myList = null;
Node myNode = null;
Element myElement = null;
recipeCount=nList.getLength()
int recipeCount = nList.getLength();
int totalCost, size = -1;
String cValue = "";
String advertisement, provisionParameter;
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameters = new ArrayList<String>();
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String temp = "";
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
payload=cnLibrary.createPlannerRequest(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createPlannerRequest(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
String response = "";
Service listingService  = new Service("Listing Service", "Listing",
				new String[]{"IPv4"},new String[]{providerAddress+"/32"},
				new String[]{},new String[]{},
				new String[]{"service"},new String[]{"listing"},
				new String[]{},new String[]{},
				null,"Advertisement Listing Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
String paymentPortal = "";
String paymentType = "Free";
int paymentValue = 0;
Advertisement myAd = new Advertisement("USD", paymentValue, myName, listingService, paymentPortal, paymentType);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
payload=cnLibrary.createRendevouzMessage(target,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] payload = cnLibrary.createRendevouzMessage(target, acceptedConsideration, availableConsideration);
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TOKEN_REQUEST,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
String considerationConfirmation = "";
String reason = "ChoiceNet Entity: "+myName+" purchased service: "+service;
temp=considerationConfirmation.split("Confirmation: ")
String[] temp = considerationConfirmation.split("Confirmation: ");
String confirmationID = temp[1];
id=System.currentTimeMillis()
long id = System.currentTimeMillis();
Consideration consideration = new Consideration(id, paymentMethod, account, amount, reason, confirmationID, service);
String trafficProp = "";
String result = "";
Scanner sc = new Scanner(new FileReader(trafficPropFile));
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
openflowFirewallMsg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage openflowFirewallMsg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
issuedBy=tempToken.getIssuedBy()
String issuedBy = tempToken.getIssuedBy();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField properties = new ChoiceNetMessageField("Traffic Properties", trafficProp, "");
ChoiceNetMessageField[] payload = {properties,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
byte[] ipAddrBytes = new byte[]{10, 0, 1, 100};
addr=InetAddress.getByAddress(ipAddrBytes)
InetAddress addr = InetAddress.getByAddress(ipAddrBytes);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String[] temp;
String originatorName = (String) packet.getOriginatorName().getValue();
PlannerSearchParameter searchParameter = new PlannerSearchParameter(originatorName, Server.numberOfFreeQueries, 0);
PlannerSearchParameter searchParameterRecord = new PlannerSearchParameter(originatorName, Server.numberOfFreeQueries, 0);
String originatorProviderType = (String) packet.getOriginatorProviderType().getValue();
rendezvousPayload=cnLibrary.createRendevouzMessage(originatorProviderType,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] rendezvousPayload = cnLibrary.createRendevouzMessage(originatorProviderType, acceptedConsideration, availableConsideration);
Packet rendezvousPacket = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,rendezvousPayload);
total=Integer.parseInt(value)
int total = Integer.parseInt(value);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
String parsedResults = results;
PlannerServiceRecipe recipe = new PlannerServiceRecipe();
size=recipe.getAdvertisementList().size()
int size = recipe.getAdvertisementList().size();
boolean readyToSendPacket = false;
PlannerServiceRecipe selectedRecipe = null;
serviceParameter=Server.searchParameterList.get(0)
PlannerSearchParameter serviceParameter = Server.searchParameterList.get(0);
Packet packet = null;
boolean check = true;
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String cost = "";
String cMethod = "";
String adID = "";
String providerID = "";
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
						sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
id=serviceParameter.getIdentifier()
long id = serviceParameter.getIdentifier();
recipes=serviceParameter.getGraphMatrix().getRecipes()
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
int lowestPrice = Integer.MAX_VALUE;
int currCost;
svcParameterCost=serviceParameter.getCost()
int svcParameterCost = serviceParameter.getCost();
entity=dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName())
DiscoveredEntities entity = dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName());
Packet packet = null;
String message = "";
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = queryValue;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
id=Server.searchParameterList.get(0).getIdentifier()
long id = Server.searchParameterList.get(0).getIdentifier();
searchParameter=Server.getSearchParameter(id)
PlannerSearchParameter searchParameter = Server.getSearchParameter(id);
PlannerNode advertisementNode;
result=advertisementNode.findMatchingSearchCriteria("Location",Server.searchedParameterLocation,Server.searchedParameterLocationType)
String result = advertisementNode.findMatchingSearchCriteria("Location", Server.searchedParameterLocation, Server.searchedParameterLocationType);
result=advertisementNode.findMatchingSearchCriteria("Format",Server.searchedParameterFormat,Server.searchedParameterFormatType)
String result = advertisementNode.findMatchingSearchCriteria("Format", Server.searchedParameterFormat, Server.searchedParameterFormatType);
result=advertisementNode.findMatchingSearchCriteria("Location",Server.searchedParameterLocation,Server.searchedParameterLocationType)
String result = advertisementNode.findMatchingSearchCriteria("Location", Server.searchedParameterLocation, Server.searchedParameterLocationType);
result=advertisementNode.findMatchingSearchCriteria("Format",Server.searchedParameterFormat,Server.searchedParameterFormatType)
String result = advertisementNode.findMatchingSearchCriteria("Format", Server.searchedParameterFormat, Server.searchedParameterFormatType);
CouchDBResponse cResponse;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
String message = "<html>Received an Use Attempt Acknowlegdement for the Token: "+myToken.getId()+"<br>" +
				"Service: "+myToken.getServiceName()+" is activated</html>";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = "Failed: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
String message = ("WARNING: "+targetedProvider+" does not match "+providerType);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String message = "";
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
ipAddr=clientIPAddress.toString()
String ipAddr = clientIPAddress.toString();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, ipAddr, clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
myPayload=createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(), 1, message);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet Entity: "+packet.getOriginatorName()+" purchased "+myName+": "+sName;
String url = Server.purchasePortalValidator+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&transactionID="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 15;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField[] newPayload = {transactionNum,token};
String reasonVal;
int opCodeVal = 4;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
String reasonVal;
int opCodeVal;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
int opCodeVal = 3;
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
String msg = "";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String trafficProp = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
creationTimeID=tokenMgr.getTokenCreationTime(tokenID)
long creationTimeID = tokenMgr.getTokenCreationTime(tokenID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
String message = "";
Packet newPacket = null;
msg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage msg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
long result = myToken.getExpirationTime()-System.currentTimeMillis();
serviceName=myToken.getServiceName()
String serviceName = myToken.getServiceName();
activatedAd=adMgr.getAdvertisementByName(serviceName)
Advertisement activatedAd = adMgr.getAdvertisementByName(serviceName);
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField[] newPayload = {handleID,token};
myPayload=createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(), 1, message);
myPayload=createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.USE_ATTEMPT_CONFIRMATION.toString(), 1, message);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
String query = "/_design/marketplace/_view/";
String url = Server.marketplaceRESTAPI+query;
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", nackType, "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", operationCode, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] payload = {type,opCode,reason};
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
OpenFlowFirewallMessage request = new OpenFlowFirewallMessage(1,"ACCEPT","IPv4","ANY","10.10.10.1/32","ANY","ANY","ANY");
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
parts=subnet.split("/")
String[] parts = subnet.split("/");
String ip = parts[0];
int prefix;
Inet4Address a =null;
Inet4Address a1 =null;
b=a.getAddress()
byte[] b = a.getAddress();
int subnetBytes = ((b[0] & 0xFF) << 24) |
                         ((b[1] & 0xFF) << 16) |
                         ((b[2] & 0xFF) << 8)  |
                         ((b[3] & 0xFF) << 0);
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int ipBytes = ((b1[0] & 0xFF) << 24) |
                         ((b1[1] & 0xFF) << 16) |
                         ((b1[2] & 0xFF) << 8)  |
                         ((b1[3] & 0xFF) << 0);
int mask = ~((1 << (32 - prefix)) - 1);
TestUtility tu = new TestUtility();
String url = "http://152.54.14.45:5984/marketplace-rangehelper";
String ipAddr = "127.0.0.1";
mask=new String(new char[31]).replace("\0","1")
String mask = new String(new char[31]).replace("\0", "1");
a1=InetAddress.getByName("10.1.3.0")
InetAddress a1 = InetAddress.getByName("10.1.3.0");
a2=InetAddress.getByName("10.1.0.0")
InetAddress a2 = InetAddress.getByName("10.1.0.0");
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int yo1 = ((b1[0] & 0xFF) << 24) |
                ((b1[1] & 0xFF) << 16) |
                ((b1[2] & 0xFF) << 8)  |
                ((b1[3] & 0xFF) << 0);
a=InetAddress.getByName("10.1.2.255")
InetAddress a = InetAddress.getByName("10.1.2.255");
b=a.getAddress()
byte[] b = a.getAddress();
int yo = ((b[0] & 0xFF) << 24) |
                ((b[1] & 0xFF) << 16) |
                ((b[2] & 0xFF) << 8)  |
                ((b[3] & 0xFF) << 0);
int mask1 = -1 << (32 - 24);
val=String.format("%32s",Integer.toBinaryString(1)).replace(' ','0')
String val = String.format("%32s", Integer.toBinaryString(1)).replace(' ', '0');
val0=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val0 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
val1=String.format("%8s",Integer.toBinaryString(168)).replace(' ','0')
String val1 = String.format("%8s", Integer.toBinaryString(168)).replace(' ', '0');
val2=String.format("%8s",Integer.toBinaryString(2)).replace(' ','0')
String val2 = String.format("%8s", Integer.toBinaryString(2)).replace(' ', '0');
val3=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val3 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
String binary = val0+val1+val2+val3;
i1=Integer.parseInt(val0,2)
int i1 = Integer.parseInt(val0, 2);
i2=Integer.parseInt(val1,2)
int i2 = Integer.parseInt(val1, 2);
i3=Integer.parseInt(val2,2)
int i3 = Integer.parseInt(val2, 2);
i4=Integer.parseInt(val3,2)
int i4 = Integer.parseInt(val3, 2);
j1=Integer.parseInt("11111111",2)
int j1 = Integer.parseInt("11111111", 2);
j2=Integer.parseInt("11110000",2)
int j2 = Integer.parseInt("11110000", 2);
String ipAddr1 = "10.0.0.0/25";
result=tu.netMatch(ipAddr1,"10.0.0.128")
boolean result = tu.netMatch(ipAddr1, "10.0.0.128");
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
long result = System.currentTimeMillis()-eTime;
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\t\tStatus\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";
parts=addr.split("/")
String[] parts = addr.split("/");
String ip = parts[0];
int prefix;
Inet4Address a =null;
Inet4Address a1 =null;
b=a.getAddress()
byte[] b = a.getAddress();
int subnetBytes = ((b[0] & 0xFF) << 24) |
	                         ((b[1] & 0xFF) << 16) |
	                         ((b[2] & 0xFF) << 8)  |
	                         ((b[3] & 0xFF) << 0);
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int ipBytes = ((b1[0] & 0xFF) << 24) |
	                         ((b1[1] & 0xFF) << 16) |
	                         ((b1[2] & 0xFF) << 8)  |
	                         ((b1[3] & 0xFF) << 0);
int mask = ~((1 << (32 - prefix)) - 1);

Diff of 0b66e8611790613f5a6075fcd1040ac3d58d4f47 and 5b4b969ed415b0b7022e398948ea8cf0303d057e:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 8
	--> recency = months
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 0b66e8611790613f5a6075fcd1040ac3d58d4f47 to 5b4b969ed415b0b7022e398948ea8cf0303d057e


****Parsing for addition at revision 5b4b969ed415b0b7022e398948ea8cf0303d057e****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementPrice.java to .\ChoiceNet\ repository source files.
Added AdvertisementPurchasePortal.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeaker.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeakerGUI.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessage.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessageManager.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added PlannerGraphMatrix.java to .\ChoiceNet\ repository source files.
Added PlannerNode.java to .\ChoiceNet\ repository source files.
Added PlannerSearchParameter.java to .\ChoiceNet\ repository source files.
Added PlannerServiceRecipe.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
Added Utility.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
type=doc.createElement("type")
Element type = doc.createElement("type");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("source_location")
Element generalLocation = doc.createElement("source_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
Token token;
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType,providerID;
int temp;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 20;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue,
			performanceMetricUnit,  performanceMetricValue, performanceMetricScheme;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, 
						dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, 
						performanceMetricScheme,performanceMetricValue,performanceMetricUnit,  
						sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getPrice().getMethod(), myAd.getPrice().getValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getPurchasePortal().getScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getPurchasePortal().getValue(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getproviderID(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
myToken=extractTokenContent(token)
Token myToken = extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
trafficProp=getChoiceNetMessage(pktXML,"Traffic Properties")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Traffic Properties");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
trafficProp=getChoiceNetMessage(pktXML,"Handle ID")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Handle ID");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
boolean result = true;
File f = new File(Server.marketplaceListing);
Advertisement myAd;
adXML=server.readFile(Server.marketplaceListing)
String adXML = server.readFile(Server.marketplaceListing);
adList=server.cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ChoiceNetSpeakerGUI gui = new ChoiceNetSpeakerGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(listingPanel)
int returnVal = fc.showOpenDialog(listingPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
providerID=textFieldProviderIDMktpl.getText().toString()
String providerID = textFieldProviderIDMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
url=paymentURLTextField.getText()
String url = paymentURLTextField.getText();
paymentMethod=getSelectedButtonText(group)
String paymentMethod = getSelectedButtonText(group);
account=accountTextField.getText()
String account = accountTextField.getText();
amount=amountTextField.getText()
String amount = amountTextField.getText();
String currency = "USD";
service=paymentServiceNameTextField.getText()
String service = paymentServiceNameTextField.getText();
considerationConfirmation=server.makePayment(url,paymentMethod,account,amount,currency,service)
String considerationConfirmation = server.makePayment(url, paymentMethod, account, amount, currency, service);
returnVal=fc.showOpenDialog(provisionPanel)
int returnVal = fc.showOpenDialog(provisionPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
gwType=txtProvisionGWType.getText()
String gwType = txtProvisionGWType.getText();
gwAddr=txtProvisionGWAddr.getText()
String gwAddr = txtProvisionGWAddr.getText();
trafficPropFile=txtProvisionTrafficProp.getText()
String trafficPropFile = txtProvisionTrafficProp.getText();
token=txtProvisionToken.getText()
String token = txtProvisionToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel provisionMenuPanel = new JPanel();
JLabel title = new JLabel("Trigger: Provisioning Interaction");
JPanel listingPanel = new JPanel();
JLabel title = new JLabel("Trigger: Listing Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Interaction");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel paymentPanel = new JPanel();
JLabel title = new JLabel("Trigger: Make Payment Plane");
JScrollPane scroll = new JScrollPane(textAreaPayment);
JPanel provisionPanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Provisioning");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblToken = new JLabel("Token ID");
JLabel lblChuserProvision = new JLabel("Traffic Properties");
JScrollPane scroll = new JScrollPane (textAreaProvision);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Listing Service";
String cMethod = "Bitcoin:555acf41a0c013059d00001b";
String cValue = "20";
String cUnit = "USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
String reason = targetServiceName;
String fileNameFirewall = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/firewallSettings.xml";
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
button=buttons.nextElement()
AbstractButton button = buttons.nextElement();
String argument = "";
int loopCount = 0;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String result = "#  Consideration ID\t\tAccount:Purchased Service\n";
int count = 1;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String message = "";
myAd=getValue()
AdvertisementDisplay myAd = getValue();
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
String result = "";
int count = 1;
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
PlannerNode srcNode, dstNode = null;
PlannerNode node = new PlannerNode(nodeName, cost);
int index = 0;
PlannerNode srcNode, dstNode = null;
srcIndex=getNodeIndex(src,nodeGraph)
int srcIndex = getNodeIndex(src, nodeGraph);
int currIndex, parameterIndex = -1;
adjNodes=srcNode.getAdjancies()
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
int total = 0;
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameter = new ArrayList<String>();
PlannerServiceRecipe myRecipe = new PlannerServiceRecipe(advertisementList, total, provisioningParameter);
String[] dstLocX;
String[] srcLocY;
String[] dstFormatX;
String[] srcFormatY;
boolean alreadyCreatedEdge = false;
size=nodeGraph.size()
int size = nodeGraph.size();
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameter = new ArrayList<String>();
PlannerServiceRecipe myRecipe = new PlannerServiceRecipe(advertisementList, nodeX.getResourceCost(), provisioningParameter);
myAd=getAdvertisement()
AdvertisementDisplay myAd = getAdvertisement();
String result = "";
String[] values = {}, types = {};
int size = types.length;
boolean check = false;
boolean result = false;
String searchParameter = "";
searchedFormat=getSearchedParameterFormat()
String searchedFormat = getSearchedParameterFormat();
searchedLocation=getSearchedParameterLocation()
String searchedLocation = getSearchedParameterLocation();
int i = 0;
int i = 0;
int i = 0;
int i = 0;
int count = getTotalQueries() - 1;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder docBuilder;
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("recipe")
Element rootElement = doc.createElement("recipe");
cost=doc.createElement("cost")
Element cost = doc.createElement("cost");
attr=doc.createAttribute("value")
Attr attr = doc.createAttribute("value");
services=doc.createElement("serviceAdvertisements")
Element services = doc.createElement("serviceAdvertisements");
size=getAdvertisementList().size()
int size = getAdvertisementList().size();
String adName, provisionParameter;
Element advertisement;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
Document doc = null;
nList=doc.getElementsByTagName("recipe")
NodeList nList = doc.getElementsByTagName("recipe");
NodeList myList = null;
Node myNode = null;
Element myElement = null;
recipeCount=nList.getLength()
int recipeCount = nList.getLength();
int totalCost, size = -1;
String cValue = "";
String advertisement, provisionParameter;
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameters = new ArrayList<String>();
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String temp = "";
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
payload=cnLibrary.createPlannerRequest(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createPlannerRequest(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
String response = "";
Service listingService  = new Service("Listing Service", "Listing",
				new String[]{"IPv4"},new String[]{providerAddress+"/32"},
				new String[]{},new String[]{},
				new String[]{"service"},new String[]{"listing"},
				new String[]{},new String[]{},
				null,"Advertisement Listing Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
String paymentPortal = "";
String paymentType = "Free";
int paymentValue = 0;
Advertisement myAd = new Advertisement("USD", paymentValue, myName, listingService, paymentPortal, paymentType);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
payload=cnLibrary.createRendevouzMessage(target,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] payload = cnLibrary.createRendevouzMessage(target, acceptedConsideration, availableConsideration);
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TOKEN_REQUEST,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
String considerationConfirmation = "";
String reason = "ChoiceNet Entity: "+myName+" purchased service: "+service;
temp=considerationConfirmation.split("Confirmation: ")
String[] temp = considerationConfirmation.split("Confirmation: ");
String confirmationID = temp[1];
id=System.currentTimeMillis()
long id = System.currentTimeMillis();
Consideration consideration = new Consideration(id, paymentMethod, account, amount, reason, confirmationID, service);
String trafficProp = "";
String result = "";
Scanner sc = new Scanner(new FileReader(trafficPropFile));
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
openflowFirewallMsg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage openflowFirewallMsg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
issuedBy=tempToken.getIssuedBy()
String issuedBy = tempToken.getIssuedBy();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField properties = new ChoiceNetMessageField("Traffic Properties", trafficProp, "");
ChoiceNetMessageField[] payload = {properties,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
byte[] ipAddrBytes = new byte[]{10, 0, 1, 100};
addr=InetAddress.getByAddress(ipAddrBytes)
InetAddress addr = InetAddress.getByAddress(ipAddrBytes);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String[] temp;
String originatorName = (String) packet.getOriginatorName().getValue();
PlannerSearchParameter searchParameter = new PlannerSearchParameter(originatorName, Server.numberOfFreeQueries, 0);
String originatorProviderType = (String) packet.getOriginatorProviderType().getValue();
rendezvousPayload=cnLibrary.createRendevouzMessage(originatorProviderType,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] rendezvousPayload = cnLibrary.createRendevouzMessage(originatorProviderType, acceptedConsideration, availableConsideration);
Packet rendezvousPacket = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,rendezvousPayload);
total=Integer.parseInt(value)
int total = Integer.parseInt(value);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
String parsedResults = results;
PlannerServiceRecipe recipe = new PlannerServiceRecipe();
size=recipe.getAdvertisementList().size()
int size = recipe.getAdvertisementList().size();
boolean readyToSendPacket = false;
PlannerServiceRecipe selectedRecipe = null;
serviceParameter=Server.searchParameterList.get(0)
PlannerSearchParameter serviceParameter = Server.searchParameterList.get(0);
Packet packet = null;
boolean check = true;
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String cost = "";
String cMethod = "";
String adID = "";
String providerID = "";
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
						sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
id=serviceParameter.getIdentifier()
long id = serviceParameter.getIdentifier();
recipes=serviceParameter.getGraphMatrix().getRecipes()
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
int lowestPrice = Integer.MAX_VALUE;
int currCost;
svcParameterCost=serviceParameter.getCost()
int svcParameterCost = serviceParameter.getCost();
entity=dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName())
DiscoveredEntities entity = dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName());
Packet packet = null;
String message = "";
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = queryValue;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
id=Server.searchParameterList.get(0).getIdentifier()
long id = Server.searchParameterList.get(0).getIdentifier();
searchParameter=Server.getSearchParameter(id)
PlannerSearchParameter searchParameter = Server.getSearchParameter(id);
PlannerNode advertisementNode;
result=advertisementNode.findMatchingSearchCriteria("Location",Server.searchedParameterLocation,Server.searchedParameterLocationType)
String result = advertisementNode.findMatchingSearchCriteria("Location", Server.searchedParameterLocation, Server.searchedParameterLocationType);
result=advertisementNode.findMatchingSearchCriteria("Format",Server.searchedParameterFormat,Server.searchedParameterFormatType)
String result = advertisementNode.findMatchingSearchCriteria("Format", Server.searchedParameterFormat, Server.searchedParameterFormatType);
result=advertisementNode.findMatchingSearchCriteria("Location",Server.searchedParameterLocation,Server.searchedParameterLocationType)
String result = advertisementNode.findMatchingSearchCriteria("Location", Server.searchedParameterLocation, Server.searchedParameterLocationType);
result=advertisementNode.findMatchingSearchCriteria("Format",Server.searchedParameterFormat,Server.searchedParameterFormatType)
String result = advertisementNode.findMatchingSearchCriteria("Format", Server.searchedParameterFormat, Server.searchedParameterFormatType);
CouchDBResponse cResponse;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
String message = "<html>Received an Use Attempt Acknowlegdement for the Token: "+myToken.getId()+"with an Handle ID: "+handleID+"</html>";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = "Failed: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String message = "";
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
ipAddr=clientIPAddress.toString()
String ipAddr = clientIPAddress.toString();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, ipAddr, clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
myPayload=createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(), 1, message);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet Entity: "+packet.getOriginatorName()+" purchased "+myName+": "+sName;
String url = Server.purchasePortalValidator+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&transactionID="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 15;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField[] newPayload = {transactionNum,token};
String reasonVal;
int opCodeVal = 4;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
String reasonVal;
int opCodeVal;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
int opCodeVal = 3;
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String trafficProp = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
creationTimeID=tokenMgr.getTokenCreationTime(tokenID)
long creationTimeID = tokenMgr.getTokenCreationTime(tokenID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
msg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage msg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
long result = myToken.getExpirationTime()-System.currentTimeMillis();
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField[] newPayload = {handleID,token};
Packet newPacket = new Packet(PacketType.USE_ATTEMPT_CONFIRMATION,myName,"",myType,providerType,newPayload);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
String query = "/_design/marketplace/_view/";
String url = Server.marketplaceRESTAPI+query;
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", nackType, "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", operationCode, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] payload = {type,opCode,reason};
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
OpenFlowFirewallMessage request = new OpenFlowFirewallMessage(1,"ACCEPT","IPv4","ANY","10.10.10.1/32","ANY","ANY","ANY");
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
parts=subnet.split("/")
String[] parts = subnet.split("/");
String ip = parts[0];
int prefix;
Inet4Address a =null;
Inet4Address a1 =null;
b=a.getAddress()
byte[] b = a.getAddress();
int subnetBytes = ((b[0] & 0xFF) << 24) |
                         ((b[1] & 0xFF) << 16) |
                         ((b[2] & 0xFF) << 8)  |
                         ((b[3] & 0xFF) << 0);
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int ipBytes = ((b1[0] & 0xFF) << 24) |
                         ((b1[1] & 0xFF) << 16) |
                         ((b1[2] & 0xFF) << 8)  |
                         ((b1[3] & 0xFF) << 0);
int mask = ~((1 << (32 - prefix)) - 1);
TestUtility tu = new TestUtility();
String url = "http://152.54.14.45:5984/marketplace-rangehelper";
String ipAddr = "127.0.0.1";
mask=new String(new char[31]).replace("\0","1")
String mask = new String(new char[31]).replace("\0", "1");
a1=InetAddress.getByName("10.1.3.0")
InetAddress a1 = InetAddress.getByName("10.1.3.0");
a2=InetAddress.getByName("10.1.0.0")
InetAddress a2 = InetAddress.getByName("10.1.0.0");
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int yo1 = ((b1[0] & 0xFF) << 24) |
                ((b1[1] & 0xFF) << 16) |
                ((b1[2] & 0xFF) << 8)  |
                ((b1[3] & 0xFF) << 0);
a=InetAddress.getByName("10.1.2.255")
InetAddress a = InetAddress.getByName("10.1.2.255");
b=a.getAddress()
byte[] b = a.getAddress();
int yo = ((b[0] & 0xFF) << 24) |
                ((b[1] & 0xFF) << 16) |
                ((b[2] & 0xFF) << 8)  |
                ((b[3] & 0xFF) << 0);
int mask1 = -1 << (32 - 24);
val=String.format("%32s",Integer.toBinaryString(1)).replace(' ','0')
String val = String.format("%32s", Integer.toBinaryString(1)).replace(' ', '0');
val0=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val0 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
val1=String.format("%8s",Integer.toBinaryString(168)).replace(' ','0')
String val1 = String.format("%8s", Integer.toBinaryString(168)).replace(' ', '0');
val2=String.format("%8s",Integer.toBinaryString(2)).replace(' ','0')
String val2 = String.format("%8s", Integer.toBinaryString(2)).replace(' ', '0');
val3=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val3 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
String binary = val0+val1+val2+val3;
i1=Integer.parseInt(val0,2)
int i1 = Integer.parseInt(val0, 2);
i2=Integer.parseInt(val1,2)
int i2 = Integer.parseInt(val1, 2);
i3=Integer.parseInt(val2,2)
int i3 = Integer.parseInt(val2, 2);
i4=Integer.parseInt(val3,2)
int i4 = Integer.parseInt(val3, 2);
j1=Integer.parseInt("11111111",2)
int j1 = Integer.parseInt("11111111", 2);
j2=Integer.parseInt("11110000",2)
int j2 = Integer.parseInt("11110000", 2);
String ipAddr1 = "10.0.0.0/25";
result=tu.netMatch(ipAddr1,"10.0.0.128")
boolean result = tu.netMatch(ipAddr1, "10.0.0.128");
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
long result = System.currentTimeMillis()-eTime;
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\t\tStatus\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";
parts=addr.split("/")
String[] parts = addr.split("/");
String ip = parts[0];
int prefix;
Inet4Address a =null;
Inet4Address a1 =null;
b=a.getAddress()
byte[] b = a.getAddress();
int subnetBytes = ((b[0] & 0xFF) << 24) |
	                         ((b[1] & 0xFF) << 16) |
	                         ((b[2] & 0xFF) << 8)  |
	                         ((b[3] & 0xFF) << 0);
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int ipBytes = ((b1[0] & 0xFF) << 24) |
	                         ((b1[1] & 0xFF) << 16) |
	                         ((b1[2] & 0xFF) << 8)  |
	                         ((b1[3] & 0xFF) << 0);
int mask = ~((1 << (32 - prefix)) - 1);

 Generics pattern public class Utility was added at revision 5b4b969ed415b0b7022e398948ea8cf0303d057e


Diff of 5b4b969ed415b0b7022e398948ea8cf0303d057e and a0486bcd862c43d41f4ad78b9eb9cc3318833cf2:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 8
	--> recency = months
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5b4b969ed415b0b7022e398948ea8cf0303d057e to a0486bcd862c43d41f4ad78b9eb9cc3318833cf2


****Parsing for addition at revision a0486bcd862c43d41f4ad78b9eb9cc3318833cf2****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementPrice.java to .\ChoiceNet\ repository source files.
Added AdvertisementPurchasePortal.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeaker.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeakerGUI.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessage.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessageManager.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added PlannerGraphMatrix.java to .\ChoiceNet\ repository source files.
Added PlannerNode.java to .\ChoiceNet\ repository source files.
Added PlannerSearchParameter.java to .\ChoiceNet\ repository source files.
Added PlannerServiceRecipe.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
rangeHelperAddr=txtRangehelper.getText()
String rangeHelperAddr = txtRangehelper.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
type=doc.createElement("type")
Element type = doc.createElement("type");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("source_location")
Element generalLocation = doc.createElement("source_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
Token token;
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType,providerID;
int temp;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 20;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue,
			performanceMetricUnit,  performanceMetricValue, performanceMetricScheme;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, 
						dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, 
						performanceMetricScheme,performanceMetricValue,performanceMetricUnit,  
						sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getPrice().getMethod(), myAd.getPrice().getValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getPurchasePortal().getScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getPurchasePortal().getValue(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getproviderID(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
myToken=extractTokenContent(token)
Token myToken = extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
trafficProp=getChoiceNetMessage(pktXML,"Traffic Properties")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Traffic Properties");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
trafficProp=getChoiceNetMessage(pktXML,"Handle ID")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Handle ID");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
boolean result = true;
File f = new File(Server.marketplaceListing);
Advertisement myAd;
adXML=server.readFile(Server.marketplaceListing)
String adXML = server.readFile(Server.marketplaceListing);
adList=server.cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ChoiceNetSpeakerGUI gui = new ChoiceNetSpeakerGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(listingPanel)
int returnVal = fc.showOpenDialog(listingPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
providerID=textFieldProviderIDMktpl.getText().toString()
String providerID = textFieldProviderIDMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
url=paymentURLTextField.getText()
String url = paymentURLTextField.getText();
paymentMethod=getSelectedButtonText(group)
String paymentMethod = getSelectedButtonText(group);
account=accountTextField.getText()
String account = accountTextField.getText();
amount=amountTextField.getText()
String amount = amountTextField.getText();
String currency = "USD";
service=paymentServiceNameTextField.getText()
String service = paymentServiceNameTextField.getText();
considerationConfirmation=server.makePayment(url,paymentMethod,account,amount,currency,service)
String considerationConfirmation = server.makePayment(url, paymentMethod, account, amount, currency, service);
returnVal=fc.showOpenDialog(provisionPanel)
int returnVal = fc.showOpenDialog(provisionPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
gwType=txtProvisionGWType.getText()
String gwType = txtProvisionGWType.getText();
gwAddr=txtProvisionGWAddr.getText()
String gwAddr = txtProvisionGWAddr.getText();
trafficPropFile=txtProvisionTrafficProp.getText()
String trafficPropFile = txtProvisionTrafficProp.getText();
token=txtProvisionToken.getText()
String token = txtProvisionToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel provisionMenuPanel = new JPanel();
JLabel title = new JLabel("Trigger: Provisioning Interaction");
JPanel listingPanel = new JPanel();
JLabel title = new JLabel("Trigger: Listing Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Interaction");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel paymentPanel = new JPanel();
JLabel title = new JLabel("Trigger: Make Payment Plane");
JScrollPane scroll = new JScrollPane(textAreaPayment);
JPanel provisionPanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Provisioning");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblToken = new JLabel("Token ID");
JLabel lblChuserProvision = new JLabel("Traffic Properties");
JScrollPane scroll = new JScrollPane (textAreaProvision);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Listing Service";
String cMethod = "Bitcoin:555acf41a0c013059d00001b";
String cValue = "20";
String cUnit = "USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
String reason = targetServiceName;
String fileNameFirewall = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/firewallSettings.xml";
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
button=buttons.nextElement()
AbstractButton button = buttons.nextElement();
String argument = "";
int loopCount = 0;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String result = "#  Consideration ID\t\tAccount:Purchased Service\n";
int count = 1;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String message = "";
myAd=getValue()
AdvertisementDisplay myAd = getValue();
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
String result = "";
int count = 1;
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
PlannerNode srcNode, dstNode = null;
PlannerNode node = new PlannerNode(nodeName, cost);
int index = 0;
PlannerNode srcNode, dstNode = null;
srcIndex=getNodeIndex(src,nodeGraph)
int srcIndex = getNodeIndex(src, nodeGraph);
int currIndex, parameterIndex = -1;
adjNodes=srcNode.getAdjancies()
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
int total = 0;
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameter = new ArrayList<String>();
PlannerServiceRecipe myRecipe = new PlannerServiceRecipe(advertisementList, total, provisioningParameter);
String[] dstLocX;
String[] srcLocY;
String[] dstFormatX;
String[] srcFormatY;
boolean alreadyCreatedEdge = false;
parts=subnet.split("/")
String[] parts = subnet.split("/");
String ip = parts[0];
int prefix;
Inet4Address a =null;
Inet4Address a1 =null;
b=a.getAddress()
byte[] b = a.getAddress();
int subnetBytes = ((b[0] & 0xFF) << 24) |
	                         ((b[1] & 0xFF) << 16) |
	                         ((b[2] & 0xFF) << 8)  |
	                         ((b[3] & 0xFF) << 0);
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int ipBytes = ((b1[0] & 0xFF) << 24) |
	                         ((b1[1] & 0xFF) << 16) |
	                         ((b1[2] & 0xFF) << 8)  |
	                         ((b1[3] & 0xFF) << 0);
int mask = ~((1 << (32 - prefix)) - 1);
size=nodeGraph.size()
int size = nodeGraph.size();
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameter = new ArrayList<String>();
PlannerServiceRecipe myRecipe = new PlannerServiceRecipe(advertisementList, nodeX.getResourceCost(), provisioningParameter);
String searchParameter = "";
searchedFormat=getSearchedParameterFormat()
String searchedFormat = getSearchedParameterFormat();
searchedLocation=getSearchedParameterLocation()
String searchedLocation = getSearchedParameterLocation();
int i = 0;
int i = 0;
int i = 0;
int i = 0;
int count = getTotalQueries() - 1;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder docBuilder;
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("recipe")
Element rootElement = doc.createElement("recipe");
cost=doc.createElement("cost")
Element cost = doc.createElement("cost");
attr=doc.createAttribute("value")
Attr attr = doc.createAttribute("value");
services=doc.createElement("serviceAdvertisements")
Element services = doc.createElement("serviceAdvertisements");
size=getAdvertisementList().size()
int size = getAdvertisementList().size();
String adName, provisionParameter;
Element advertisement;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
Document doc = null;
nList=doc.getElementsByTagName("recipe")
NodeList nList = doc.getElementsByTagName("recipe");
NodeList myList = null;
Node myNode = null;
Element myElement = null;
recipeCount=nList.getLength()
int recipeCount = nList.getLength();
int totalCost, size = -1;
String cValue = "";
String advertisement, provisionParameter;
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameters = new ArrayList<String>();
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String temp = "";
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
payload=cnLibrary.createPlannerRequest(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createPlannerRequest(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
String response = "";
Service listingService  = new Service("Advertisement Listing", "Listing",
				new String[]{"IPv4"},new String[]{providerAddress+"/32"},
				new String[]{},new String[]{},
				new String[]{"service"},new String[]{"listing"},
				new String[]{},new String[]{},
				null,"Advertisement Listing Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
String paymentPortal = "";
String paymentType = "Free";
int paymentValue = 0;
Advertisement myAd = new Advertisement("USD", paymentValue, myName, listingService, paymentPortal, paymentType);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
payload=cnLibrary.createRendevouzMessage(target,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] payload = cnLibrary.createRendevouzMessage(target, acceptedConsideration, availableConsideration);
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TOKEN_REQUEST,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
String considerationConfirmation = "";
String reason = "ChoiceNet Entity: "+myName+" purchased service: "+service;
temp=considerationConfirmation.split("Confirmation: ")
String[] temp = considerationConfirmation.split("Confirmation: ");
String confirmationID = temp[1];
id=System.currentTimeMillis()
long id = System.currentTimeMillis();
Consideration consideration = new Consideration(id, paymentMethod, account, amount, reason, confirmationID, service);
String trafficProp = "";
String result = "";
Scanner sc = new Scanner(new FileReader(trafficPropFile));
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
openflowFirewallMsg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage openflowFirewallMsg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
issuedBy=tempToken.getIssuedBy()
String issuedBy = tempToken.getIssuedBy();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField properties = new ChoiceNetMessageField("Traffic Properties", trafficProp, "");
ChoiceNetMessageField[] payload = {properties,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
byte[] ipAddrBytes = new byte[]{10, 0, 1, 100};
addr=InetAddress.getByAddress(ipAddrBytes)
InetAddress addr = InetAddress.getByAddress(ipAddrBytes);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String[] temp;
String originatorName = (String) packet.getOriginatorName().getValue();
PlannerSearchParameter searchParameter = new PlannerSearchParameter(originatorName, Server.numberOfFreeQueries, 0);
String originatorProviderType = (String) packet.getOriginatorProviderType().getValue();
rendezvousPayload=cnLibrary.createRendevouzMessage(originatorProviderType,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] rendezvousPayload = cnLibrary.createRendevouzMessage(originatorProviderType, acceptedConsideration, availableConsideration);
Packet rendezvousPacket = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,rendezvousPayload);
total=Integer.parseInt(value)
int total = Integer.parseInt(value);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
String parsedResults = results;
PlannerServiceRecipe recipe = new PlannerServiceRecipe();
size=recipe.getAdvertisementList().size()
int size = recipe.getAdvertisementList().size();
boolean readyToSendPacket = false;
PlannerServiceRecipe selectedRecipe = null;
serviceParameter=Server.searchParameterList.get(0)
PlannerSearchParameter serviceParameter = Server.searchParameterList.get(0);
Packet packet = null;
boolean check = true;
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String cost = "";
String cMethod = "";
String adID = "";
String providerID = "";
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
						sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
id=serviceParameter.getIdentifier()
long id = serviceParameter.getIdentifier();
recipes=serviceParameter.getGraphMatrix().getRecipes()
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
int lowestPrice = Integer.MAX_VALUE;
int currCost;
svcParameterCost=serviceParameter.getCost()
int svcParameterCost = serviceParameter.getCost();
entity=dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName())
DiscoveredEntities entity = dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName());
Packet packet = null;
String message = "";
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = Server.marketplaceRESTAPI+query;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
id=Server.searchParameterList.get(0).getIdentifier()
long id = Server.searchParameterList.get(0).getIdentifier();
searchParameter=Server.getSearchParameter(id)
PlannerSearchParameter searchParameter = Server.getSearchParameter(id);
PlannerNode advertisementNode;
CouchDBResponse cResponse;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
String message = "<html>Received an Use Attempt Acknowlegdement for the Token: "+myToken.getId()+"with an Handle ID: "+handleID+"</html>";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = "Failed: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String message = "";
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
ipAddr=clientIPAddress.toString()
String ipAddr = clientIPAddress.toString();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, ipAddr, clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
myPayload=createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(), 1, message);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet Entity: "+packet.getOriginatorName()+" purchased "+myName+": "+sName;
String url = Server.purchasePortalValidator+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&transactionID="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 15;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField[] newPayload = {transactionNum,token};
String reasonVal;
int opCodeVal = 4;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
String reasonVal;
int opCodeVal;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
int opCodeVal = 3;
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String trafficProp = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
creationTimeID=tokenMgr.getTokenCreationTime(tokenID)
long creationTimeID = tokenMgr.getTokenCreationTime(tokenID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
msg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage msg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
long result = myToken.getExpirationTime()-System.currentTimeMillis();
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField[] newPayload = {handleID,token};
Packet newPacket = new Packet(PacketType.USE_ATTEMPT_CONFIRMATION,myName,"",myType,providerType,newPayload);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", nackType, "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", operationCode, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] payload = {type,opCode,reason};
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
OpenFlowFirewallMessage request = new OpenFlowFirewallMessage(1,"ACCEPT","IPv4","ANY","10.10.10.1/32","ANY","ANY","ANY");
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
parts=subnet.split("/")
String[] parts = subnet.split("/");
String ip = parts[0];
int prefix;
Inet4Address a =null;
Inet4Address a1 =null;
b=a.getAddress()
byte[] b = a.getAddress();
int subnetBytes = ((b[0] & 0xFF) << 24) |
                         ((b[1] & 0xFF) << 16) |
                         ((b[2] & 0xFF) << 8)  |
                         ((b[3] & 0xFF) << 0);
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int ipBytes = ((b1[0] & 0xFF) << 24) |
                         ((b1[1] & 0xFF) << 16) |
                         ((b1[2] & 0xFF) << 8)  |
                         ((b1[3] & 0xFF) << 0);
int mask = ~((1 << (32 - prefix)) - 1);
TestUtility tu = new TestUtility();
String url = "http://152.54.14.45:5984/marketplace-rangehelper";
String ipAddr = "127.0.0.1";
mask=new String(new char[31]).replace("\0","1")
String mask = new String(new char[31]).replace("\0", "1");
a1=InetAddress.getByName("10.1.3.0")
InetAddress a1 = InetAddress.getByName("10.1.3.0");
a2=InetAddress.getByName("10.1.0.0")
InetAddress a2 = InetAddress.getByName("10.1.0.0");
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int yo1 = ((b1[0] & 0xFF) << 24) |
                ((b1[1] & 0xFF) << 16) |
                ((b1[2] & 0xFF) << 8)  |
                ((b1[3] & 0xFF) << 0);
a=InetAddress.getByName("10.1.2.255")
InetAddress a = InetAddress.getByName("10.1.2.255");
b=a.getAddress()
byte[] b = a.getAddress();
int yo = ((b[0] & 0xFF) << 24) |
                ((b[1] & 0xFF) << 16) |
                ((b[2] & 0xFF) << 8)  |
                ((b[3] & 0xFF) << 0);
int mask1 = -1 << (32 - 24);
val=String.format("%32s",Integer.toBinaryString(1)).replace(' ','0')
String val = String.format("%32s", Integer.toBinaryString(1)).replace(' ', '0');
val0=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val0 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
val1=String.format("%8s",Integer.toBinaryString(168)).replace(' ','0')
String val1 = String.format("%8s", Integer.toBinaryString(168)).replace(' ', '0');
val2=String.format("%8s",Integer.toBinaryString(2)).replace(' ','0')
String val2 = String.format("%8s", Integer.toBinaryString(2)).replace(' ', '0');
val3=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val3 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
String binary = val0+val1+val2+val3;
i1=Integer.parseInt(val0,2)
int i1 = Integer.parseInt(val0, 2);
i2=Integer.parseInt(val1,2)
int i2 = Integer.parseInt(val1, 2);
i3=Integer.parseInt(val2,2)
int i3 = Integer.parseInt(val2, 2);
i4=Integer.parseInt(val3,2)
int i4 = Integer.parseInt(val3, 2);
j1=Integer.parseInt("11111111",2)
int j1 = Integer.parseInt("11111111", 2);
j2=Integer.parseInt("11110000",2)
int j2 = Integer.parseInt("11110000", 2);
String ipAddr1 = "10.0.0.0/25";
result=tu.netMatch(ipAddr1,"10.0.0.128")
boolean result = tu.netMatch(ipAddr1, "10.0.0.128");
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
long result = System.currentTimeMillis()-eTime;
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\t\tStatus\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";

Diff of a0486bcd862c43d41f4ad78b9eb9cc3318833cf2 and db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 8
	--> recency = months
	--> Added class instantiations = 16
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision a0486bcd862c43d41f4ad78b9eb9cc3318833cf2 to db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f


****Parsing for addition at revision db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementPrice.java to .\ChoiceNet\ repository source files.
Added AdvertisementPurchasePortal.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeaker.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeakerGUI.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessage.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessageManager.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added PlannerGraphMatrix.java to .\ChoiceNet\ repository source files.
Added PlannerNode.java to .\ChoiceNet\ repository source files.
Added PlannerSearchParameter.java to .\ChoiceNet\ repository source files.
Added PlannerServiceRecipe.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
rangeHelperAddr=txtRangehelper.getText()
String rangeHelperAddr = txtRangehelper.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
type=doc.createElement("type")
Element type = doc.createElement("type");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("source_location")
Element generalLocation = doc.createElement("source_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
Token token;
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType,providerID;
int temp;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 20;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getPrice().getMethod(), myAd.getPrice().getValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getPurchasePortal().getScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getPurchasePortal().getValue(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getproviderID(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
myToken=extractTokenContent(token)
Token myToken = extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
trafficProp=getChoiceNetMessage(pktXML,"Traffic Properties")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Traffic Properties");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
trafficProp=getChoiceNetMessage(pktXML,"Handle ID")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Handle ID");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
boolean result = true;
File f = new File(Server.marketplaceListing);
Advertisement myAd;
adXML=server.readFile(Server.marketplaceListing)
String adXML = server.readFile(Server.marketplaceListing);
adList=server.cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ChoiceNetSpeakerGUI gui = new ChoiceNetSpeakerGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(listingPanel)
int returnVal = fc.showOpenDialog(listingPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
providerID=textFieldProviderIDMktpl.getText().toString()
String providerID = textFieldProviderIDMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
url=paymentURLTextField.getText()
String url = paymentURLTextField.getText();
paymentMethod=getSelectedButtonText(group)
String paymentMethod = getSelectedButtonText(group);
account=accountTextField.getText()
String account = accountTextField.getText();
amount=amountTextField.getText()
String amount = amountTextField.getText();
String currency = "USD";
service=paymentServiceNameTextField.getText()
String service = paymentServiceNameTextField.getText();
considerationConfirmation=server.makePayment(url,paymentMethod,account,amount,currency,service)
String considerationConfirmation = server.makePayment(url, paymentMethod, account, amount, currency, service);
returnVal=fc.showOpenDialog(provisionPanel)
int returnVal = fc.showOpenDialog(provisionPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
gwType=txtProvisionGWType.getText()
String gwType = txtProvisionGWType.getText();
gwAddr=txtProvisionGWAddr.getText()
String gwAddr = txtProvisionGWAddr.getText();
trafficPropFile=txtProvisionTrafficProp.getText()
String trafficPropFile = txtProvisionTrafficProp.getText();
token=txtProvisionToken.getText()
String token = txtProvisionToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel provisionMenuPanel = new JPanel();
JLabel title = new JLabel("Trigger: Provisioning Interaction");
JPanel listingPanel = new JPanel();
JLabel title = new JLabel("Trigger: Listing Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Interaction");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel paymentPanel = new JPanel();
JLabel title = new JLabel("Trigger: Make Payment Plane");
JScrollPane scroll = new JScrollPane(textAreaPayment);
JPanel provisionPanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Provisioning");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblToken = new JLabel("Token ID");
JLabel lblChuserProvision = new JLabel("Traffic Properties");
JScrollPane scroll = new JScrollPane (textAreaProvision);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Listing Service";
String cMethod = "Bitcoin:555acf41a0c013059d00001b";
String cValue = "20";
String cUnit = "USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
String reason = targetServiceName;
String fileNameFirewall = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/firewallSettings.xml";
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
button=buttons.nextElement()
AbstractButton button = buttons.nextElement();
String argument = "";
int loopCount = 0;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String result = "#  Consideration ID\t\tAccount:Purchased Service\n";
int count = 1;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String message = "";
myAd=getValue()
AdvertisementDisplay myAd = getValue();
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
String result = "";
int count = 1;
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
PlannerNode srcNode, dstNode = null;
PlannerNode node = new PlannerNode(nodeName, cost);
int index = 0;
PlannerNode srcNode, dstNode = null;
srcIndex=getNodeIndex(src,nodeGraph)
int srcIndex = getNodeIndex(src, nodeGraph);
int currIndex, parameterIndex = -1;
adjNodes=srcNode.getAdjancies()
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
int total = 0;
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameter = new ArrayList<String>();
PlannerServiceRecipe myRecipe = new PlannerServiceRecipe(advertisementList, total, provisioningParameter);
String[] dstLocX;
String[] srcLocY;
String[] dstFormatX;
String[] srcFormatY;
boolean alreadyCreatedEdge = false;
size=nodeGraph.size()
int size = nodeGraph.size();
String searchParameter = "";
searchedFormat=getSearchedParameterFormat()
String searchedFormat = getSearchedParameterFormat();
searchedLocation=getSearchedParameterLocation()
String searchedLocation = getSearchedParameterLocation();

 Generics pattern public ArrayList<String> getProvisionParameter() was added at revision db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f

int i = 0;
int i = 0;
int i = 0;
int i = 0;
int count = getTotalQueries() - 1;

 Generics pattern public ArrayList<String> getDiscoveredSrcLocation() was added at revision db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f


 Generics pattern public ArrayList<String> getDiscoveredSrcTypeLocation() was added at revision db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f


 Generics pattern public ArrayList<String> getDiscoveredDstLocation() was added at revision db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f


 Generics pattern public ArrayList<String> getDiscoveredDstTypeLocation() was added at revision db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f


 Generics pattern public ArrayList<String> getDiscoveredSrcFormat() was added at revision db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f


 Generics pattern public ArrayList<String> getDiscoveredSrcTypeFormat() was added at revision db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f


 Generics pattern public ArrayList<String> getDiscoveredDstFormat() was added at revision db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f


 Generics pattern public ArrayList<String> getDiscoveredDstTypeFormat() was added at revision db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f

String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder docBuilder;
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("recipe")
Element rootElement = doc.createElement("recipe");
cost=doc.createElement("cost")
Element cost = doc.createElement("cost");
attr=doc.createAttribute("value")
Attr attr = doc.createAttribute("value");
services=doc.createElement("serviceAdvertisements")
Element services = doc.createElement("serviceAdvertisements");
size=getAdvertisementList().size()
int size = getAdvertisementList().size();
String adName, provisionParameter;
Element advertisement;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
PlannerServiceRecipe recipe = new PlannerServiceRecipe();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
Document doc = null;
nList=doc.getElementsByTagName("recipe")
NodeList nList = doc.getElementsByTagName("recipe");
NodeList myList = null;
Node myNode = null;
Element myElement = null;
recipeCount=nList.getLength()
int recipeCount = nList.getLength();
int totalCost, size = -1;
String cValue = "";
String advertisement, provisionParameter;
ArrayList<String> advertisementList = new ArrayList<String>();
ArrayList<String> provisioningParameters = new ArrayList<String>();
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);

 Generics pattern public ArrayList<String> getAdvertisementList() was added at revision db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f


 Generics pattern public ArrayList<String> getProvisioningParameters() was added at revision db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f

String temp = "";
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
payload=cnLibrary.createPlannerRequest(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createPlannerRequest(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
String response = "";
Service listingService  = new Service("Advertisement Listing", "Listing",
				new String[]{"IPv4"},new String[]{providerAddress+"/32"},
				new String[]{},new String[]{},
				new String[]{"service"},new String[]{"listing"},
				new String[]{},new String[]{},
				null,"Advertisement Listing Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
String paymentPortal = "";
String paymentType = "Free";
int paymentValue = 0;
Advertisement myAd = new Advertisement("USD", paymentValue, myName, listingService, paymentPortal, paymentType);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
payload=cnLibrary.createRendevouzMessage(target,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] payload = cnLibrary.createRendevouzMessage(target, acceptedConsideration, availableConsideration);
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TOKEN_REQUEST,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
String considerationConfirmation = "";
String reason = "ChoiceNet Entity: "+myName+" purchased service: "+service;
temp=considerationConfirmation.split("Confirmation: ")
String[] temp = considerationConfirmation.split("Confirmation: ");
String confirmationID = temp[1];
id=System.currentTimeMillis()
long id = System.currentTimeMillis();
Consideration consideration = new Consideration(id, paymentMethod, account, amount, reason, confirmationID, service);
String trafficProp = "";
String result = "";
Scanner sc = new Scanner(new FileReader(trafficPropFile));
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
openflowFirewallMsg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage openflowFirewallMsg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
issuedBy=tempToken.getIssuedBy()
String issuedBy = tempToken.getIssuedBy();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField properties = new ChoiceNetMessageField("Traffic Properties", trafficProp, "");
ChoiceNetMessageField[] payload = {properties,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
byte[] ipAddrBytes = new byte[]{10, 0, 1, 100};
addr=InetAddress.getByAddress(ipAddrBytes)
InetAddress addr = InetAddress.getByAddress(ipAddrBytes);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String[] temp;
String originatorName = (String) packet.getOriginatorName().getValue();
PlannerSearchParameter searchParameter = new PlannerSearchParameter(originatorName, Server.numberOfFreeQueries, 0);
String originatorProviderType = (String) packet.getOriginatorProviderType().getValue();
rendezvousPayload=cnLibrary.createRendevouzMessage(originatorProviderType,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] rendezvousPayload = cnLibrary.createRendevouzMessage(originatorProviderType, acceptedConsideration, availableConsideration);
Packet rendezvousPacket = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,rendezvousPayload);
total=Integer.parseInt(value)
int total = Integer.parseInt(value);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
String parsedResults = results;
PlannerServiceRecipe recipe = new PlannerServiceRecipe();
size=recipe.getAdvertisementList().size()
int size = recipe.getAdvertisementList().size();
boolean readyToSendPacket = false;
PlannerServiceRecipe selectedRecipe = null;
serviceParameter=Server.searchParameterList.get(0)
PlannerSearchParameter serviceParameter = Server.searchParameterList.get(0);
Packet packet = null;
boolean check = true;
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String cost = "";
String cMethod = "";
String adID = "";
String providerID = "";
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
						sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
id=serviceParameter.getIdentifier()
long id = serviceParameter.getIdentifier();
recipes=serviceParameter.getGraphMatrix().getRecipes()
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
int lowestPrice = Integer.MAX_VALUE;
int currCost;
svcParameterCost=serviceParameter.getCost()
int svcParameterCost = serviceParameter.getCost();
entity=dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName())
DiscoveredEntities entity = dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName());
Packet packet = null;
String message = "";
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = Server.marketplaceRESTAPI+query;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
id=Server.searchParameterList.get(0).getIdentifier()
long id = Server.searchParameterList.get(0).getIdentifier();
searchParameter=Server.getSearchParameter(id)
PlannerSearchParameter searchParameter = Server.getSearchParameter(id);
PlannerNode advertisementNode;
CouchDBResponse cResponse;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
String message = "<html>Received an Use Attempt Acknowlegdement for the Token: "+myToken.getId()+"with an Handle ID: "+handleID+"</html>";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = "Failed: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String message = "";
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
ipAddr=clientIPAddress.toString()
String ipAddr = clientIPAddress.toString();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, ipAddr, clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
myPayload=createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(), 1, message);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet Entity: "+packet.getOriginatorName()+" purchased "+myName+": "+sName;
String url = Server.purchasePortalValidator+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&transactionID="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 15;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField[] newPayload = {transactionNum,token};
String reasonVal;
int opCodeVal = 4;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
String reasonVal;
int opCodeVal;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
int opCodeVal = 3;
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String trafficProp = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
creationTimeID=tokenMgr.getTokenCreationTime(tokenID)
long creationTimeID = tokenMgr.getTokenCreationTime(tokenID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
msg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage msg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
long result = myToken.getExpirationTime()-System.currentTimeMillis();
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField[] newPayload = {handleID,token};
Packet newPacket = new Packet(PacketType.USE_ATTEMPT_CONFIRMATION,myName,"",myType,providerType,newPayload);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", nackType, "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", operationCode, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] payload = {type,opCode,reason};
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
OpenFlowFirewallMessage request = new OpenFlowFirewallMessage(1,"ACCEPT","IPv4","ANY","10.10.10.1/32","ANY","ANY","ANY");
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
TestUtility tu = new TestUtility();
text=tu.testXMLWriter()
String text = tu.testXMLWriter();
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
long result = System.currentTimeMillis()-eTime;
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\t\tStatus\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";

Diff of db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f and 510f413a883ae59efa45042001251a95c911ea4e:
	--> Added type argument methods = 11
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 8
	--> recency = months
	--> Added class instantiations = 24
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision db97a1d0f0cf3d5f08bc0166cb7083092c3b2b0f to 510f413a883ae59efa45042001251a95c911ea4e


****Parsing for addition at revision 510f413a883ae59efa45042001251a95c911ea4e****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementPrice.java to .\ChoiceNet\ repository source files.
Added AdvertisementPurchasePortal.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeaker.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeakerGUI.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessage.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessageManager.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added PlannerGraphMatrix.java to .\ChoiceNet\ repository source files.
Added PlannerNode.java to .\ChoiceNet\ repository source files.
Added PlannerSearchParameter.java to .\ChoiceNet\ repository source files.
Added PlannerServiceRecipe.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added ServiceProperty.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
rangeHelperAddr=txtRangehelper.getText()
String rangeHelperAddr = txtRangehelper.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
type=doc.createElement("type")
Element type = doc.createElement("type");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("source_location")
Element generalLocation = doc.createElement("source_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
Token token;
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType,providerID;
int temp;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 20;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getPrice().getMethod(), myAd.getPrice().getValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getPurchasePortal().getScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getPurchasePortal().getValue(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getproviderID(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
myToken=extractTokenContent(token)
Token myToken = extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
trafficProp=getChoiceNetMessage(pktXML,"Traffic Properties")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Traffic Properties");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
trafficProp=getChoiceNetMessage(pktXML,"Handle ID")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Handle ID");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
boolean result = true;
File f = new File(Server.marketplaceListing);
Advertisement myAd;
adXML=server.readFile(Server.marketplaceListing)
String adXML = server.readFile(Server.marketplaceListing);
adList=server.cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ChoiceNetSpeakerGUI gui = new ChoiceNetSpeakerGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(listingPanel)
int returnVal = fc.showOpenDialog(listingPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
providerID=textFieldProviderIDMktpl.getText().toString()
String providerID = textFieldProviderIDMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
url=paymentURLTextField.getText()
String url = paymentURLTextField.getText();
paymentMethod=getSelectedButtonText(group)
String paymentMethod = getSelectedButtonText(group);
account=accountTextField.getText()
String account = accountTextField.getText();
amount=amountTextField.getText()
String amount = amountTextField.getText();
String currency = "USD";
service=paymentServiceNameTextField.getText()
String service = paymentServiceNameTextField.getText();
considerationConfirmation=server.makePayment(url,paymentMethod,account,amount,currency,service)
String considerationConfirmation = server.makePayment(url, paymentMethod, account, amount, currency, service);
returnVal=fc.showOpenDialog(provisionPanel)
int returnVal = fc.showOpenDialog(provisionPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
gwType=txtProvisionGWType.getText()
String gwType = txtProvisionGWType.getText();
gwAddr=txtProvisionGWAddr.getText()
String gwAddr = txtProvisionGWAddr.getText();
trafficPropFile=txtProvisionTrafficProp.getText()
String trafficPropFile = txtProvisionTrafficProp.getText();
token=txtProvisionToken.getText()
String token = txtProvisionToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel provisionMenuPanel = new JPanel();
JLabel title = new JLabel("Trigger: Provisioning Interaction");
JPanel listingPanel = new JPanel();
JLabel title = new JLabel("Trigger: Listing Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Interaction");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel paymentPanel = new JPanel();
JLabel title = new JLabel("Trigger: Make Payment Plane");
JScrollPane scroll = new JScrollPane(textAreaPayment);
JPanel provisionPanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Provisioning");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblToken = new JLabel("Token ID");
JLabel lblChuserProvision = new JLabel("Traffic Properties");
JScrollPane scroll = new JScrollPane (textAreaProvision);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Listing Service";
String cMethod = "Bitcoin:555acf41a0c013059d00001b";
String cValue = "20";
String cUnit = "USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
String reason = targetServiceName;
String fileNameFirewall = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/firewallSettings.xml";
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
button=buttons.nextElement()
AbstractButton button = buttons.nextElement();
String argument = "";
int loopCount = 0;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String result = "#  Consideration ID\t\tAccount:Purchased Service\n";
int count = 1;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String message = "";
myAd=getValue()
AdvertisementDisplay myAd = getValue();
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
String result = "";
int count = 1;
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
PlannerNode srcNode, dstNode = null;
PlannerNode node = new PlannerNode(nodeName, cost);
int index = 0;
PlannerNode srcNode, dstNode = null;
srcIndex=getNodeIndex(src)
int srcIndex = getNodeIndex(src);
int currIndex = -1;
adjNodes=srcNode.getAdjancies()
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
int total = 0;
String advertisementList = "";
PlannerServiceRecipe myRecipe = new PlannerServiceRecipe(advertisementList, total);
String[] dstLocX;
String[] srcLocY;
String[] dstFormatX;
String[] srcFormatY;
boolean alreadyCreatedEdge = false;
size=nodeGraph.size()
int size = nodeGraph.size();

 Generics pattern public ArrayList<PlannerNode> getNodeGraph() was added at revision 510f413a883ae59efa45042001251a95c911ea4e

String temp = "";
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
payload=cnLibrary.createPlannerRequest(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createPlannerRequest(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
String response = "";
Service listingService  = new Service("Advertisement Listing", "Listing",
				new String[]{"IPv4"},new String[]{providerAddress+"/32"},
				new String[]{},new String[]{},
				new String[]{"service"},new String[]{"listing"},
				new String[]{},new String[]{},
				null,"Advertisement Listing Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
String paymentPortal = "";
String paymentType = "Free";
int paymentValue = 0;
Advertisement myAd = new Advertisement("USD", paymentValue, myName, listingService, paymentPortal, paymentType);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
payload=cnLibrary.createRendevouzMessage(target,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] payload = cnLibrary.createRendevouzMessage(target, acceptedConsideration, availableConsideration);
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TOKEN_REQUEST,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
String considerationConfirmation = "";
String reason = "ChoiceNet Entity: "+myName+" purchased service: "+service;
temp=considerationConfirmation.split("Confirmation: ")
String[] temp = considerationConfirmation.split("Confirmation: ");
String confirmationID = temp[1];
id=System.currentTimeMillis()
long id = System.currentTimeMillis();
Consideration consideration = new Consideration(id, paymentMethod, account, amount, reason, confirmationID, service);
String trafficProp = "";
String result = "";
Scanner sc = new Scanner(new FileReader(trafficPropFile));
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
openflowFirewallMsg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage openflowFirewallMsg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
issuedBy=tempToken.getIssuedBy()
String issuedBy = tempToken.getIssuedBy();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField properties = new ChoiceNetMessageField("Traffic Properties", trafficProp, "");
ChoiceNetMessageField[] payload = {properties,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
byte[] ipAddrBytes = new byte[]{10, 0, 1, 100};
addr=InetAddress.getByAddress(ipAddrBytes)
InetAddress addr = InetAddress.getByAddress(ipAddrBytes);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String[] temp;
String originatorName = (String) packet.getOriginatorName().getValue();
PlannerSearchParameter searchParameter = new PlannerSearchParameter(originatorName);
String originatorProviderType = (String) packet.getOriginatorProviderType().getValue();
rendezvousPayload=cnLibrary.createRendevouzMessage(originatorProviderType,acceptedConsideration,availableConsideration)
ChoiceNetMessageField[] rendezvousPayload = cnLibrary.createRendevouzMessage(originatorProviderType, acceptedConsideration, availableConsideration);
Packet rendezvousPacket = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,rendezvousPayload);
total=Integer.parseInt(value)
int total = Integer.parseInt(value);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
boolean readyToSendPacket = false;
PlannerServiceRecipe selectedRecipe = null;
serviceParameter=Server.searchParameterList.get(0)
PlannerSearchParameter serviceParameter = Server.searchParameterList.get(0);
Packet packet = null;
boolean check = true;
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String cost = "";
String cMethod = "";
String adID = "";
String providerID = "";
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
						sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
id=serviceParameter.getIdentifier()
long id = serviceParameter.getIdentifier();
recipes=serviceParameter.getGraphMatrix().getRecipes()
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
int lowestPrice = Integer.MAX_VALUE;
int currCost;
svcParameterCost=serviceParameter.getCost()
int svcParameterCost = serviceParameter.getCost();
entity=dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName())
DiscoveredEntities entity = dEMgr.getDiscoveredEntityByName(serviceParameter.getOriginatorName());
Packet packet = null;
String message = "";
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = Server.marketplaceRESTAPI+query;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
id=Server.searchParameterList.get(0).getIdentifier()
long id = Server.searchParameterList.get(0).getIdentifier();
searchParameter=Server.getSearchParameter(id)
PlannerSearchParameter searchParameter = Server.getSearchParameter(id);
PlannerNode advertisementNode;
CouchDBResponse cResponse;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
String message = "<html>Received an Use Attempt Acknowlegdement for the Token: "+myToken.getId()+"with an Handle ID: "+handleID+"</html>";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = "Failed: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String message = "";
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
ipAddr=clientIPAddress.toString()
String ipAddr = clientIPAddress.toString();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, ipAddr, clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
myPayload=createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.RENDEZVOUS_RESPONSE.toString(), 1, message);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet Entity: "+packet.getOriginatorName()+" purchased "+myName+": "+sName;
String url = Server.purchasePortalValidator+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&transactionID="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 15;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField[] newPayload = {transactionNum,token};
String reasonVal;
int opCodeVal = 4;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
String reasonVal;
int opCodeVal;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
int opCodeVal = 3;
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String trafficProp = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
creationTimeID=tokenMgr.getTokenCreationTime(tokenID)
long creationTimeID = tokenMgr.getTokenCreationTime(tokenID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
msg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage msg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
long result = myToken.getExpirationTime()-System.currentTimeMillis();
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField[] newPayload = {handleID,token};
Packet newPacket = new Packet(PacketType.USE_ATTEMPT_CONFIRMATION,myName,"",myType,providerType,newPayload);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", nackType, "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", operationCode, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] payload = {type,opCode,reason};
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
OpenFlowFirewallMessage request = new OpenFlowFirewallMessage(1,"ACCEPT","IPv4","ANY","10.10.10.1/32","ANY","ANY","ANY");
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
TestUtility tu = new TestUtility();
text=tu.testXMLWriter()
String text = tu.testXMLWriter();
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
long result = System.currentTimeMillis()-eTime;
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\t\tStatus\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";

Diff of 510f413a883ae59efa45042001251a95c911ea4e and e17e6bae5e6f161198e8302ee620b84361d6cf4d:
	--> Added type argument methods = 12
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 8
	--> recency = months
	--> Added class instantiations = 24
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 510f413a883ae59efa45042001251a95c911ea4e to e17e6bae5e6f161198e8302ee620b84361d6cf4d


****Parsing for addition at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementPrice.java to .\ChoiceNet\ repository source files.
Added AdvertisementPurchasePortal.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeaker.java to .\ChoiceNet\ repository source files.
Added ChoiceNetSpeakerGUI.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessage.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessageManager.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added PlannerGraphMatrix.java to .\ChoiceNet\ repository source files.
Added PlannerNode.java to .\ChoiceNet\ repository source files.
Added PlannerSearchParameter.java to .\ChoiceNet\ repository source files.
Added PlannerServiceRecipe.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added ServiceProperty.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
rangeHelperAddr=txtRangehelper.getText()
String rangeHelperAddr = txtRangehelper.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;

 Generics pattern public class AdvertisementPrice was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d


 Generics pattern public class AdvertisementPurchasePortal was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d

details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
type=doc.createElement("type")
Element type = doc.createElement("type");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("source_location")
Element generalLocation = doc.createElement("source_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
Token token;
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType,providerID;
int temp;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 20;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getPrice().getMethod(), myAd.getPrice().getValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getPurchasePortal().getScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getPurchasePortal().getValue(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getproviderID(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
myToken=extractTokenContent(token)
Token myToken = extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID, providerID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];

 Generics pattern new ArrayList<ChoiceNetMessageField>() was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d

ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
trafficProp=getChoiceNetMessage(pktXML,"Traffic Properties")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Traffic Properties");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
trafficProp=getChoiceNetMessage(pktXML,"Handle ID")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Handle ID");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
boolean result = true;
File f = new File(Server.marketplaceListing);
Advertisement myAd;
adXML=server.readFile(Server.marketplaceListing)
String adXML = server.readFile(Server.marketplaceListing);
adList=server.cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String");
int loop = 0;

 Generics pattern ArrayList<Advertisement> adList = server.cnLibrary.getAdvertisementsFromXML(adXML, "String"); was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d

JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ChoiceNetSpeakerGUI gui = new ChoiceNetSpeakerGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(listingPanel)
int returnVal = fc.showOpenDialog(listingPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
providerID=textFieldProviderIDMktpl.getText().toString()
String providerID = textFieldProviderIDMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
url=paymentURLTextField.getText()
String url = paymentURLTextField.getText();
paymentMethod=getSelectedButtonText(group)
String paymentMethod = getSelectedButtonText(group);
account=accountTextField.getText()
String account = accountTextField.getText();
amount=amountTextField.getText()
String amount = amountTextField.getText();
String currency = "USD";
service=paymentServiceNameTextField.getText()
String service = paymentServiceNameTextField.getText();
considerationConfirmation=server.makePayment(url,paymentMethod,account,amount,currency,service)
String considerationConfirmation = server.makePayment(url, paymentMethod, account, amount, currency, service);
returnVal=fc.showOpenDialog(provisionPanel)
int returnVal = fc.showOpenDialog(provisionPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
gwType=txtProvisionGWType.getText()
String gwType = txtProvisionGWType.getText();
gwAddr=txtProvisionGWAddr.getText()
String gwAddr = txtProvisionGWAddr.getText();
trafficPropFile=txtProvisionTrafficProp.getText()
String trafficPropFile = txtProvisionTrafficProp.getText();
token=txtProvisionToken.getText()
String token = txtProvisionToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel provisionMenuPanel = new JPanel();
JLabel title = new JLabel("Trigger: Provisioning Interaction");
JPanel listingPanel = new JPanel();
JLabel title = new JLabel("Trigger: Listing Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Interaction");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel paymentPanel = new JPanel();
JLabel title = new JLabel("Trigger: Make Payment Plane");
JScrollPane scroll = new JScrollPane(textAreaPayment);
JPanel provisionPanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Provisioning");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblToken = new JLabel("Token ID");
JLabel lblChuserProvision = new JLabel("Traffic Properties");
JScrollPane scroll = new JScrollPane (textAreaProvision);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Listing Service";
String cMethod = "Bitcoin:555acf41a0c013059d00001b";
String cValue = "20";
String cUnit = "USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
String reason = targetServiceName;
String fileNameFirewall = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/firewallSettings.xml";
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
button=buttons.nextElement()
AbstractButton button = buttons.nextElement();
String argument = "";
int loopCount = 0;

 Generics pattern public class ChoiceNetSpeakerGUI was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d

myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String result = "#  Consideration ID\t\tAccount:Purchased Service\n";
int count = 1;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
String result = "";
int count = 1;
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
PlannerNode srcNode, dstNode = null;
PlannerNode node = new PlannerNode(nodeName, cost);
int index = 0;
PlannerNode srcNode, dstNode = null;
srcIndex=getNodeIndex(src)
int srcIndex = getNodeIndex(src);
int currIndex = -1;
adjNodes=srcNode.getAdjancies()
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies();
int total = 0;
String advertisementList = "";
PlannerServiceRecipe myRecipe = new PlannerServiceRecipe(advertisementList, total);

 Generics pattern public class PlannerGraphMatrix was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d


 Generics pattern ArrayList<PlannerNode> adjNodes = srcNode.getAdjancies(); was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d


 Generics pattern public ArrayList<PlannerServiceRecipe> getRecipes() was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d


 Generics pattern public class PlannerNode was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d


 Generics pattern public ArrayList<PlannerNode> getAdjancies() was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d


 Generics pattern public class PlannerSearchParameter was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d


 Generics pattern public ArrayList<String> getSrcTypeLocation() was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d


 Generics pattern public ArrayList<String> getDstTypeLocation() was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d


 Generics pattern public ArrayList<String> getSrcTypeFormat() was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d


 Generics pattern public ArrayList<String> getDstTypeFormat() was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d


 Generics pattern public ArrayList<String> getSrcLocation() was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d


 Generics pattern public ArrayList<String> getDstLocation() was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d


 Generics pattern public ArrayList<String> getSrcFormat() was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d


 Generics pattern public ArrayList<String> getDstFormat() was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d


 Generics pattern public class PlannerServiceRecipe was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d

String temp = "";
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
payload=cnLibrary.createPlannerRequest(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createPlannerRequest(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
				sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
String response = "";
Service listingService  = new Service("Advertisement Listing", "Listing",
				new String[]{"IPv4"},new String[]{providerAddress+"/32"},
				new String[]{},new String[]{},
				new String[]{"service"},new String[]{"listing"},
				new String[]{},new String[]{},
				null,"Advertisement Listing Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
String paymentPortal = "";
String paymentType = "Free";
int paymentValue = 0;
Advertisement myAd = new Advertisement("USD", paymentValue, myName, listingService, paymentPortal, paymentType);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TOKEN_REQUEST,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
String considerationConfirmation = "";
String reason = "ChoiceNet Entity: "+myName+" purchased service: "+service;
temp=considerationConfirmation.split("Confirmation: ")
String[] temp = considerationConfirmation.split("Confirmation: ");
String confirmationID = temp[1];
id=System.currentTimeMillis()
long id = System.currentTimeMillis();
Consideration consideration = new Consideration(id, paymentMethod, account, amount, reason, confirmationID, service);
String trafficProp = "";
String result = "";
Scanner sc = new Scanner(new FileReader(trafficPropFile));
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
openflowFirewallMsg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage openflowFirewallMsg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
issuedBy=tempToken.getIssuedBy()
String issuedBy = tempToken.getIssuedBy();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField properties = new ChoiceNetMessageField("Traffic Properties", trafficProp, "");
ChoiceNetMessageField[] payload = {properties,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
byte[] ipAddrBytes = new byte[]{10, 0, 1, 100};
addr=InetAddress.getByAddress(ipAddrBytes)
InetAddress addr = InetAddress.getByAddress(ipAddrBytes);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String[] temp;
String originatorName = (String) packet.getOriginatorName().getValue();
PlannerSearchParameter searchParameter = new PlannerSearchParameter(originatorName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
boolean readyToSendPacket = false;
PlannerServiceRecipe selectedRecipe = null;
serviceParameter=Server.searchParameterList.get(0)
PlannerSearchParameter serviceParameter = Server.searchParameterList.get(0);
Packet packet = null;
boolean check = true;
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String cost = "";
String cMethod = "";
String adID = "";
String providerID = "";
payload=cnLibrary.createMarketplaceQuery(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID,providerID)
ChoiceNetMessageField[] payload = cnLibrary.createMarketplaceQuery(sourceLoc, destinationLoc, sourceFormat, destinationFormat, sourceLocType, destinationLocType, 
						sourceFormatType, destinationFormatType, cost, cMethod, adID, providerID);
recipes=serviceParameter.getGraphMatrix().getRecipes()
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes();
int lowestPrice = Integer.MAX_VALUE;
int currCost;
svcParameterCost=serviceParameter.getCost()
int svcParameterCost = serviceParameter.getCost();
Packet packet = null;
String message = "";
boolean testing = true;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
myPayload=createNACKPayload(PacketType.PLANNER_REQUEST.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.PLANNER_REQUEST.toString(), 1, message);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = Server.marketplaceRESTAPI+query;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
String message = "<html>Received an Use Attempt Acknowlegdement for the Token: "+myToken.getId()+"with an Handle ID: "+handleID+"</html>";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = "Failed: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, clientIPAddress.toString(), clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
String message = "Entity: "+originatorName+" has been included in the Known Entity list";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet Entity: "+packet.getOriginatorName()+" purchased "+myName+": "+sName;
String url = Server.purchasePortalValidator+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&transactionID="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 15;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField[] newPayload = {transactionNum,token};
String reasonVal;
int opCodeVal = 4;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
String reasonVal;
int opCodeVal;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
int opCodeVal = 3;
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String trafficProp = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
creationTimeID=tokenMgr.getTokenCreationTime(tokenID)
long creationTimeID = tokenMgr.getTokenCreationTime(tokenID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
msg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage msg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
long result = myToken.getExpirationTime()-System.currentTimeMillis();
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField[] newPayload = {handleID,token};
Packet newPacket = new Packet(PacketType.USE_ATTEMPT_CONFIRMATION,myName,"",myType,providerType,newPayload);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", nackType, "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", operationCode, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] payload = {type,opCode,reason};
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);

 Generics pattern ArrayList<PlannerServiceRecipe> recipes = serviceParameter.getGraphMatrix().getRecipes(); was added at revision e17e6bae5e6f161198e8302ee620b84361d6cf4d

ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, portalType);
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
OpenFlowFirewallMessage request = new OpenFlowFirewallMessage(1,"ACCEPT","IPv4","ANY","10.10.10.1/32","ANY","ANY","ANY");
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
TestUtility tu = new TestUtility();
text=tu.testXMLWriter()
String text = tu.testXMLWriter();
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
long result = System.currentTimeMillis()-eTime;
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\t\tStatus\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";

Diff of e17e6bae5e6f161198e8302ee620b84361d6cf4d and 6d74e3ae9956129bb123d858dad57fef3ffaf179:
	--> Added type argument methods = 22
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 10
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 11
	--> recency = months
	--> Added class instantiations = 25
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision e17e6bae5e6f161198e8302ee620b84361d6cf4d to 6d74e3ae9956129bb123d858dad57fef3ffaf179


****Parsing for addition at revision 6d74e3ae9956129bb123d858dad57fef3ffaf179****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added Advertisementv0.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessage.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessageManager.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added Provider.java to .\ChoiceNet\ repository source files.
Added ProviderGUI.java to .\ChoiceNet\ repository source files.
Added ProviderRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added ServiceProperty.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
rangeHelperAddr=txtRangehelper.getText()
String rangeHelperAddr = txtRangehelper.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("destination_location")
Element generalLocation = doc.createElement("destination_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 10;
File folder = new File("generated/");
String marketplaceIPAddr = "127.0.0.1";
int marketplacePort = 4040;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getConsiderationMethod(), myAd.getConsiderationValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getAdvertiserAddressScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getAdvertiserAddress()+":"+myAd.getAdvertiserPortAddress(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getEntityName(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
myToken=extractTokenContent(token)
Token myToken = extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
trafficProp=getChoiceNetMessage(pktXML,"Traffic Properties")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Traffic Properties");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
trafficProp=getChoiceNetMessage(pktXML,"Handle ID")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Handle ID");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String result = "#  Consideration ID\t\tAccount:Purchased Service\n";
int count = 1;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
String result = "";
int count = 1;
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ProviderGUI gui = new ProviderGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(listingPanel)
int returnVal = fc.showOpenDialog(listingPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
url=paymentURLTextField.getText()
String url = paymentURLTextField.getText();
paymentMethod=getSelectedButtonText(group)
String paymentMethod = getSelectedButtonText(group);
account=accountTextField.getText()
String account = accountTextField.getText();
amount=amountTextField.getText()
String amount = amountTextField.getText();
String currency = "USD";
service=paymentServiceNameTextField.getText()
String service = paymentServiceNameTextField.getText();
considerationConfirmation=server.makePayment(url,paymentMethod,account,amount,currency,service)
String considerationConfirmation = server.makePayment(url, paymentMethod, account, amount, currency, service);
returnVal=fc.showOpenDialog(usePlanePanel)
int returnVal = fc.showOpenDialog(usePlanePanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
gwType=txtUsePlaneGWType.getText()
String gwType = txtUsePlaneGWType.getText();
gwAddr=txtUsePlaneGWAddr.getText()
String gwAddr = txtUsePlaneGWAddr.getText();
trafficPropFile=txtUsePlaneTrafficProp.getText()
String trafficPropFile = txtUsePlaneTrafficProp.getText();
token=txtUsePlaneToken.getText()
String token = txtUsePlaneToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel usePlaneMenuPanel = new JPanel();
JLabel title = new JLabel("Trigger: Use Plane Interaction");
JPanel listingPanel = new JPanel();
JLabel title = new JLabel("Trigger: Listing Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Interaction");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel paymentPanel = new JPanel();
JLabel title = new JLabel("Trigger: Make Payment Plane");
JScrollPane scroll = new JScrollPane(textAreaPayment);
JPanel usePlanePanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Use Plane");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblToken = new JLabel("Token ID");
JLabel lblChuserUsePlane = new JLabel("Traffic Properties");
JScrollPane scroll = new JScrollPane (textAreaUsePlane);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Advertisement Listing";
String cMethod = "Bitcoin:555acf41a0c013059d00001b";
String cValue = "20";
String cUnit = "USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
String reason = targetServiceName;
String fileNameFirewall = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/firewallSettings.xml";
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
button=buttons.nextElement()
AbstractButton button = buttons.nextElement();
String argument = "";
int loopCount = 0;
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
String temp = "";
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
items=temp.split("#")
String[] items = temp.split("#");
String[] res;
int size = items.length;
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
ad1=createListingServiceAdvertisement()
Advertisement ad1 = createListingServiceAdvertisement();
String response = "";
Service listingService  = new Service("Advertisement Listing", "Listing", "List Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
Advertisement myAd = new Advertisement("Free", 0, myName, listingService, providerAddress, port, "UDPv4", System.currentTimeMillis()+moreTime, "UDPv4", providerAddress+":"+port);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TOKEN_REQUEST,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
String considerationConfirmation = "";
String reason = "ChoiceNet Entity: "+myName+" purchased service: "+service;
temp=considerationConfirmation.split("Confirmation: ")
String[] temp = considerationConfirmation.split("Confirmation: ");
String confirmationID = temp[1];
id=System.currentTimeMillis()
long id = System.currentTimeMillis();
Consideration consideration = new Consideration(id, paymentMethod, account, amount, reason, confirmationID, service);
String trafficProp = "";
String result = "";
Scanner sc = new Scanner(new FileReader(trafficPropFile));
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
openflowFirewallMsg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage openflowFirewallMsg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
issuedBy=tempToken.getIssuedBy()
String issuedBy = tempToken.getIssuedBy();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField properties = new ChoiceNetMessageField("Traffic Properties", trafficProp, "");
ChoiceNetMessageField[] payload = {properties,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
byte[] ipAddrBytes = new byte[]{10, 0, 1, 100};
addr=InetAddress.getByAddress(ipAddrBytes)
InetAddress addr = InetAddress.getByAddress(ipAddrBytes);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String message = "";
boolean testing = true;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
myPayload=createNACKPayload(PacketType.PLANNER_REQUEST.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.PLANNER_REQUEST.toString(), 1, message);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = Server.marketplaceRESTAPI+query;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
String message = "<html>Received an Use Attempt Acknowlegdement for the Token: "+myToken.getId()+"with an Handle ID: "+handleID+"</html>";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = "Failed: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, clientIPAddress.toString(), clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
String message = "Entity: "+originatorName+" has been included in the Known Entity list";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet Entity: "+packet.getOriginatorName()+" purchased "+myName+": "+sName;
String url = Server.purchasePortalValidator+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&transactionID="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 15;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField[] newPayload = {transactionNum,token};
String reasonVal;
int opCodeVal = 4;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
String reasonVal;
int opCodeVal;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
int opCodeVal = 3;
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String trafficProp = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
creationTimeID=tokenMgr.getTokenCreationTime(tokenID)
long creationTimeID = tokenMgr.getTokenCreationTime(tokenID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
msg=cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage msg = cnLibrary.convertXMLtoOpenFlowFireWallMessage(trafficProp);
destinationPort=Server.adSwitchPort.get(myToken.getServiceName())
String destinationPort = Server.adSwitchPort.get(myToken.getServiceName());
long result = myToken.getExpirationTime()-System.currentTimeMillis();
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField[] newPayload = {handleID,token};
Packet newPacket = new Packet(PacketType.USE_ATTEMPT_CONFIRMATION,myName,"",myType,providerType,newPayload);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", nackType, "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", operationCode, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] payload = {type,opCode,reason};
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
OpenFlowFirewallMessage request = new OpenFlowFirewallMessage(1,"ACCEPT","IPv4","ANY","10.10.10.1/32","ANY","ANY","ANY");
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
TestUtility tu = new TestUtility();
text=tu.testXMLWriter()
String text = tu.testXMLWriter();
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
long result = System.currentTimeMillis()-eTime;
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\t\tStatus\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";

Diff of 6d74e3ae9956129bb123d858dad57fef3ffaf179 and 92370795154e43fb2a2270fe071fb21e96e79103:
	--> Added type argument methods = 22
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 10
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 11
	--> recency = months
	--> Added class instantiations = 25
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 6d74e3ae9956129bb123d858dad57fef3ffaf179 to 92370795154e43fb2a2270fe071fb21e96e79103


****Parsing for addition at revision 92370795154e43fb2a2270fe071fb21e96e79103****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added Advertisementv0.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessage.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessageManager.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added Provider.java to .\ChoiceNet\ repository source files.
Added ProviderGUI.java to .\ChoiceNet\ repository source files.
Added ProviderRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added ServiceProperty.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
rangeHelperAddr=txtRangehelper.getText()
String rangeHelperAddr = txtRangehelper.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("destination_location")
Element generalLocation = doc.createElement("destination_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 10;
File folder = new File("generated/");
String marketplaceIPAddr = "127.0.0.1";
int marketplacePort = 4040;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getConsiderationMethod(), myAd.getConsiderationValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getAdvertiserAddressScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getAdvertiserAddress()+":"+myAd.getAdvertiserPortAddress(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getEntityName(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
myToken=extractTokenContent(token)
Token myToken = extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
trafficProp=getChoiceNetMessage(pktXML,"Traffic Properties")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Traffic Properties");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
trafficProp=getChoiceNetMessage(pktXML,"Handle ID")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Handle ID");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String result = "#  Consideration ID\t\tAccount:Purchased Service\n";
int count = 1;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();
String result = "";
int count = 1;
myOpenFlowFirewallMessage=entry.getValue()
OpenFlowFirewallMessage myOpenFlowFirewallMessage = entry.getValue();

 Generics pattern public class OpenFlowFirewallMessageManager was added at revision 92370795154e43fb2a2270fe071fb21e96e79103

Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ProviderGUI gui = new ProviderGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(listingPanel)
int returnVal = fc.showOpenDialog(listingPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
url=paymentURLTextField.getText()
String url = paymentURLTextField.getText();
paymentMethod=getSelectedButtonText(group)
String paymentMethod = getSelectedButtonText(group);
account=accountTextField.getText()
String account = accountTextField.getText();
amount=amountTextField.getText()
String amount = amountTextField.getText();
String currency = "USD";
service=paymentServiceNameTextField.getText()
String service = paymentServiceNameTextField.getText();
considerationConfirmation=server.makePayment(url,paymentMethod,account,amount,currency,service)
String considerationConfirmation = server.makePayment(url, paymentMethod, account, amount, currency, service);
returnVal=fc.showOpenDialog(usePlanePanel)
int returnVal = fc.showOpenDialog(usePlanePanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
gwType=txtUsePlaneGWType.getText()
String gwType = txtUsePlaneGWType.getText();
gwAddr=txtUsePlaneGWAddr.getText()
String gwAddr = txtUsePlaneGWAddr.getText();
trafficPropFile=txtUsePlaneTrafficProp.getText()
String trafficPropFile = txtUsePlaneTrafficProp.getText();
token=txtUsePlaneToken.getText()
String token = txtUsePlaneToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel usePlaneMenuPanel = new JPanel();
JLabel title = new JLabel("Trigger: Use Plane Interaction");
JPanel listingPanel = new JPanel();
JLabel title = new JLabel("Trigger: Listing Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Interaction");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel paymentPanel = new JPanel();
JLabel title = new JLabel("Trigger: Make Payment Plane");
JScrollPane scroll = new JScrollPane(textAreaPayment);
JPanel usePlanePanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Use Plane");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblToken = new JLabel("Token ID");
JLabel lblChuserUsePlane = new JLabel("Traffic Properties");
JScrollPane scroll = new JScrollPane (textAreaUsePlane);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Advertisement Listing";
String cMethod = "Bitcoin:555acf41a0c013059d00001b";
String cValue = "20";
String cUnit = "USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
String reason = targetServiceName;
String fileNameFirewall = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/firewallSettings.xml";
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
button=buttons.nextElement()
AbstractButton button = buttons.nextElement();
String argument = "";
int loopCount = 0;
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
ad1=createListingServiceAdvertisement()
Advertisement ad1 = createListingServiceAdvertisement();
String response = "";
Service listingService  = new Service("Advertisement Listing", "Listing", "List Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
Advertisement myAd = new Advertisement("Free", 0, myName, listingService, providerAddress, port, "UDPv4", System.currentTimeMillis()+moreTime, "UDPv4", providerAddress+":"+port);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TOKEN_REQUEST,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
String considerationConfirmation = "";
String reason = "ChoiceNet Entity: "+myName+" purchased service: "+service;
temp=considerationConfirmation.split("Confirmation: ")
String[] temp = considerationConfirmation.split("Confirmation: ");
String confirmationID = temp[1];
id=System.currentTimeMillis()
long id = System.currentTimeMillis();
Consideration consideration = new Consideration(id, paymentMethod, account, amount, reason, confirmationID, service);
String trafficProp = "";
String result = "";
Scanner sc = new Scanner(new FileReader(trafficPropFile));
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
openflowFirewallMsg=convertXMLtoOpenFlowFireWallMessage(trafficProp)
OpenFlowFirewallMessage openflowFirewallMsg = convertXMLtoOpenFlowFireWallMessage(trafficProp);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
issuedBy=tempToken.getIssuedBy()
String issuedBy = tempToken.getIssuedBy();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField properties = new ChoiceNetMessageField("Traffic Properties", trafficProp, "");
ChoiceNetMessageField[] payload = {properties,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
byte[] ipAddrBytes = new byte[]{10, 0, 1, 100};
addr=InetAddress.getByAddress(ipAddrBytes)
InetAddress addr = InetAddress.getByAddress(ipAddrBytes);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String message = "";
boolean testing = true;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
myPayload=createNACKPayload(PacketType.PLANNER_REQUEST.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.PLANNER_REQUEST.toString(), 1, message);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = Server.marketplaceRESTAPI+query;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
String message = "<html>Received an Use Attempt Acknowlegdement for the Token: "+myToken.getId()+"with an Handle ID: "+handleID+"</html>";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = "Failed: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, clientIPAddress.toString(), clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
String message = "Entity: "+originatorName+" has been included in the Known Entity list";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet Entity: "+packet.getOriginatorName()+" purchased "+myName+": "+sName;
String url = Server.purchasePortalValidator+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&transactionID="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 15;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField gatewayCredentials = new ChoiceNetMessageField("ChoiceNet Gateway Credentials", "", "");
ChoiceNetMessageField[] newPayload = {transactionNum,token,gatewayCredentials};
InetAddress providerIPAddress = clientIPAddress;
int providerPort = clientPort;
String reasonVal;
int opCodeVal = 4;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
String reasonVal;
int opCodeVal;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
int opCodeVal = 3;
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String trafficProp = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
creationTimeID=tokenMgr.getTokenCreationTime(tokenID)
long creationTimeID = tokenMgr.getTokenCreationTime(tokenID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField[] newPayload = {handleID,token};
Packet newPacket = new Packet(PacketType.USE_ATTEMPT_CONFIRMATION,myName,"",myType,providerType,newPayload);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", nackType, "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", operationCode, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] payload = {type,opCode,reason};
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
OpenFlowFirewallMessage request = new OpenFlowFirewallMessage(1,"ACCEPT","IPv4","ANY","10.10.10.1/32","ANY","ANY","ANY");
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
TestUtility tu = new TestUtility();
text=tu.testXMLWriter()
String text = tu.testXMLWriter();
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
long result = System.currentTimeMillis()-eTime;
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\t\tIs Token Valid\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";

Diff of 92370795154e43fb2a2270fe071fb21e96e79103 and d39040c27cce9f69cd8471221e2ec3f535580019:
	--> Added type argument methods = 22
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 11
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 11
	--> recency = months
	--> Added class instantiations = 25
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 92370795154e43fb2a2270fe071fb21e96e79103 to d39040c27cce9f69cd8471221e2ec3f535580019


****Parsing for addition at revision d39040c27cce9f69cd8471221e2ec3f535580019****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added Advertisementv0.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessage.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added Provider.java to .\ChoiceNet\ repository source files.
Added ProviderGUI.java to .\ChoiceNet\ repository source files.
Added ProviderRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added ServiceProperty.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
rangeHelperAddr=txtRangehelper.getText()
String rangeHelperAddr = txtRangehelper.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("destination_location")
Element generalLocation = doc.createElement("destination_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 10;
File folder = new File("generated/");
String marketplaceIPAddr = "127.0.0.1";
int marketplacePort = 4040;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getConsiderationMethod(), myAd.getConsiderationValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getAdvertiserAddressScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getAdvertiserAddress()+":"+myAd.getAdvertiserPortAddress(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getEntityName(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
myToken=extractTokenContent(token)
Token myToken = extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
trafficProp=getChoiceNetMessage(pktXML,"Traffic Properties")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Traffic Properties");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
trafficProp=getChoiceNetMessage(pktXML,"Handle ID")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Handle ID");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String result = "#  Consideration ID\t\tAccount:Purchased Service\n";
int count = 1;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ProviderGUI gui = new ProviderGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(listingPanel)
int returnVal = fc.showOpenDialog(listingPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
url=paymentURLTextField.getText()
String url = paymentURLTextField.getText();
paymentMethod=getSelectedButtonText(group)
String paymentMethod = getSelectedButtonText(group);
account=accountTextField.getText()
String account = accountTextField.getText();
amount=amountTextField.getText()
String amount = amountTextField.getText();
String currency = "USD";
service=paymentServiceNameTextField.getText()
String service = paymentServiceNameTextField.getText();
considerationConfirmation=server.makePayment(url,paymentMethod,account,amount,currency,service)
String considerationConfirmation = server.makePayment(url, paymentMethod, account, amount, currency, service);
returnVal=fc.showOpenDialog(usePlanePanel)
int returnVal = fc.showOpenDialog(usePlanePanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
gwType=txtUsePlaneGWType.getText()
String gwType = txtUsePlaneGWType.getText();
gwAddr=txtUsePlaneGWAddr.getText()
String gwAddr = txtUsePlaneGWAddr.getText();
trafficPropFile=txtUsePlaneTrafficProp.getText()
String trafficPropFile = txtUsePlaneTrafficProp.getText();
token=txtUsePlaneToken.getText()
String token = txtUsePlaneToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel usePlaneMenuPanel = new JPanel();
JLabel title = new JLabel("Trigger: Use Plane Interaction");
JPanel listingPanel = new JPanel();
JLabel title = new JLabel("Trigger: Listing Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Interaction");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel paymentPanel = new JPanel();
JLabel title = new JLabel("Trigger: Make Payment Plane");
JScrollPane scroll = new JScrollPane(textAreaPayment);
JPanel usePlanePanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Use Plane");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblToken = new JLabel("Token ID");
JLabel lblChuserUsePlane = new JLabel("Traffic Properties");
JScrollPane scroll = new JScrollPane (textAreaUsePlane);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Advertisement Listing";
String cMethod = "Bitcoin:555acf41a0c013059d00001b";
String cValue = "20";
String cUnit = "USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
String reason = targetServiceName;
String fileNameFirewall = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/firewallSettings.xml";
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
button=buttons.nextElement()
AbstractButton button = buttons.nextElement();
String argument = "";
int loopCount = 0;
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
ad1=createListingServiceAdvertisement()
Advertisement ad1 = createListingServiceAdvertisement();
String response = "";
Service listingService  = new Service("Advertisement Listing", "Listing", "List Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
Advertisement myAd = new Advertisement("Free", 0, myName, listingService, providerAddress, port, "UDPv4", System.currentTimeMillis()+moreTime, "UDPv4", providerAddress+":"+port);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TOKEN_REQUEST,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
String considerationConfirmation = "";
String reason = "ChoiceNet Entity: "+myName+" purchased service: "+service;
temp=considerationConfirmation.split("Confirmation: ")
String[] temp = considerationConfirmation.split("Confirmation: ");
String confirmationID = temp[1];
id=System.currentTimeMillis()
long id = System.currentTimeMillis();
Consideration consideration = new Consideration(id, paymentMethod, account, amount, reason, confirmationID, service);
String trafficProp = "";
Scanner sc = new Scanner(new FileReader(trafficPropFile));
ChoiceNetMessageField properties = new ChoiceNetMessageField("Traffic Properties", trafficProp, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
issuedBy=tempToken.getIssuedBy()
String issuedBy = tempToken.getIssuedBy();
token=cnLibrary.createToken(tID,issuedTo,issuedBy,tokenType,eTime)
ChoiceNetMessageField token = cnLibrary.createToken(tID, issuedTo, issuedBy,tokenType,eTime);
ChoiceNetMessageField[] payload = {properties,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
byte[] ipAddrBytes = new byte[]{10, 0, 1, 100};
addr=InetAddress.getByAddress(ipAddrBytes)
InetAddress addr = InetAddress.getByAddress(ipAddrBytes);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String message = "";
boolean testing = true;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
myPayload=createNACKPayload(PacketType.PLANNER_REQUEST.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.PLANNER_REQUEST.toString(), 1, message);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = Server.marketplaceRESTAPI+query;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
String message = "Handle ID: "+handleID+" Token: "+myToken;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = "Failed: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, clientIPAddress.toString(), clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
String message = "Entity: "+originatorName+" has been included in the Known Entity list";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet Entity: "+packet.getOriginatorName()+" purchased "+myName+": "+sName;
String url = Server.purchasePortalValidator+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&transactionID="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 5;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField gatewayCredentials = new ChoiceNetMessageField("ChoiceNet Gateway Credentials", "", "");
ChoiceNetMessageField[] newPayload = {transactionNum,token,gatewayCredentials};
InetAddress providerIPAddress = clientIPAddress;
int providerPort = clientPort;
String reasonVal;
int opCodeVal = 4;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
String reasonVal;
int opCodeVal;
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
int opCodeVal = 3;
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
newPayload=createNACKPayload(PacketType.TOKEN_REQUEST.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TOKEN_REQUEST.toString(),  opCodeVal, reasonVal);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String trafficProp = (String) payload[0].getValue();
ChoiceNetMessageField token = payload[1];
int tokenID = (Integer) payload[0].getValue();
creationTimeID=tokenMgr.getTokenCreationTime(tokenID)
long creationTimeID = tokenMgr.getTokenCreationTime(tokenID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField[] newPayload = {handleID,token};
Packet newPacket = new Packet(PacketType.USE_ATTEMPT_CONFIRMATION,myName,"",myType,providerType,newPayload);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", nackType, "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", operationCode, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] payload = {type,opCode,reason};
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
OpenFlowFirewallMessage request = new OpenFlowFirewallMessage(1,"ACCEPT","IPv4","ANY","10.10.10.1/32","ANY","ANY","ANY");
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
TestUtility tu = new TestUtility();
text=tu.testXMLWriter()
String text = tu.testXMLWriter();
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";

Diff of d39040c27cce9f69cd8471221e2ec3f535580019 and 0f2e3df7d3e5a218f27655f4f0eb6201d5db3657:
	--> Added type argument methods = 22
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 11
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 11
	--> recency = months
	--> Added class instantiations = 25
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision d39040c27cce9f69cd8471221e2ec3f535580019 to 0f2e3df7d3e5a218f27655f4f0eb6201d5db3657


****Parsing for addition at revision 0f2e3df7d3e5a218f27655f4f0eb6201d5db3657****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added Advertisementv0.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessage.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added Provider.java to .\ChoiceNet\ repository source files.
Added ProviderGUI.java to .\ChoiceNet\ repository source files.
Added ProviderRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added ServiceProperty.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
rangeHelperAddr=txtRangehelper.getText()
String rangeHelperAddr = txtRangehelper.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("destination_location")
Element generalLocation = doc.createElement("destination_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 10;
File folder = new File("generated/");
String marketplaceIPAddr = "127.0.0.1";
int marketplacePort = 4040;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getConsiderationMethod(), myAd.getConsiderationValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getAdvertiserAddressScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getAdvertiserAddress()+":"+myAd.getAdvertiserPortAddress(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getEntityName(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
trafficProp=getChoiceNetMessage(pktXML,"Traffic Properties")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Traffic Properties");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String result = "#  Consideration ID\t\tAccount:Purchased Service\n";
int count = 1;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ProviderGUI gui = new ProviderGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(listingPanel)
int returnVal = fc.showOpenDialog(listingPanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
url=paymentURLTextField.getText()
String url = paymentURLTextField.getText();
paymentMethod=getSelectedButtonText(group)
String paymentMethod = getSelectedButtonText(group);
account=accountTextField.getText()
String account = accountTextField.getText();
amount=amountTextField.getText()
String amount = amountTextField.getText();
String currency = "USD";
service=paymentServiceNameTextField.getText()
String service = paymentServiceNameTextField.getText();
considerationConfirmation=server.makePayment(url,paymentMethod,account,amount,currency,service)
String considerationConfirmation = server.makePayment(url, paymentMethod, account, amount, currency, service);
returnVal=fc.showOpenDialog(usePlanePanel)
int returnVal = fc.showOpenDialog(usePlanePanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
gwType=txtUsePlaneGWType.getText()
String gwType = txtUsePlaneGWType.getText();
gwAddr=txtUsePlaneGWAddr.getText()
String gwAddr = txtUsePlaneGWAddr.getText();
trafficPropFile=txtUsePlaneTrafficProp.getText()
String trafficPropFile = txtUsePlaneTrafficProp.getText();
token=txtUsePlaneToken.getText()
String token = txtUsePlaneToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel usePlaneMenuPanel = new JPanel();
JLabel title = new JLabel("Trigger: Use Plane Interaction");
JPanel listingPanel = new JPanel();
JLabel title = new JLabel("Trigger: Listing Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Interaction");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel paymentPanel = new JPanel();
JLabel title = new JLabel("Trigger: Make Payment Plane");
JScrollPane scroll = new JScrollPane(textAreaPayment);
JPanel usePlanePanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Use Plane");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblToken = new JLabel("Token ID");
JLabel lblChuserUsePlane = new JLabel("Traffic Properties");
JScrollPane scroll = new JScrollPane (textAreaUsePlane);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Advertisement Listing";
String cMethod = "Bitcoin:555acf41a0c013059d00001b";
String cValue = "20";
String cUnit = "USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
String reason = targetServiceName;
String fileNameFirewall = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/firewallSettings.xml";
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
button=buttons.nextElement()
AbstractButton button = buttons.nextElement();
String argument = "";
int loopCount = 0;
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
ad1=createListingServiceAdvertisement()
Advertisement ad1 = createListingServiceAdvertisement();
String response = "";
Service listingService  = new Service("Advertisement Listing", "Listing", "List Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
Advertisement myAd = new Advertisement("Free", 0, myName, listingService, providerAddress, port, "UDPv4", System.currentTimeMillis()+moreTime, "UDPv4", providerAddress+":"+port);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TRANSFER_CONSIDERATION,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(issuedTo,issuedBy,tokenType,eTime,false)
ChoiceNetMessageField token = cnLibrary.createToken(issuedTo, issuedBy,tokenType,eTime, false);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
String considerationConfirmation = "";
String reason = "ChoiceNet Entity: "+myName+" purchased service: "+service;
temp=considerationConfirmation.split("Confirmation: ")
String[] temp = considerationConfirmation.split("Confirmation: ");
String confirmationID = temp[1];
id=System.currentTimeMillis()
long id = System.currentTimeMillis();
Consideration consideration = new Consideration(id, paymentMethod, account, amount, reason, confirmationID, service);
String trafficProp = "";
Scanner sc = new Scanner(new FileReader(trafficPropFile));
ChoiceNetMessageField properties = new ChoiceNetMessageField("Traffic Prop", trafficProp, "");
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", myToken, "");
ChoiceNetMessageField[] payload = {properties,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String message = "";
boolean testing = true;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
myPayload=createNACKPayload(PacketType.PLANNER_REQUEST.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.PLANNER_REQUEST.toString(), 1, message);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = Server.marketplaceRESTAPI+query;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
String usePlanePortal = (String) payload[1].getValue();
String usePlanePlugIn = (String) payload[2].getValue();
String message = "Handle ID: "+handleID+" Use Plane Portal: "+usePlanePortal+" Use Plane PlugIn: "+usePlanePlugIn;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = "Failed: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, clientIPAddress.toString(), clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
String message = "Entity: "+originatorName+" has been included in the Known Entity list";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet Entity: "+packet.getOriginatorName()+" purchased "+myName+": "+sName;
String url = Server.purchasePortalValidator+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&transactionID="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 5;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField gatewayCredentials = new ChoiceNetMessageField("ChoiceNet Gateway Credentials", "", "");
ChoiceNetMessageField[] newPayload = {transactionNum,token,gatewayCredentials};
InetAddress providerIPAddress = clientIPAddress;
int providerPort = clientPort;
String reasonVal;
int opCodeVal = 4;
newPayload=createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),  opCodeVal, reasonVal);
String reasonVal;
int opCodeVal;
newPayload=createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),  opCodeVal, reasonVal);
int opCodeVal = 3;
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
newPayload=createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),  opCodeVal, reasonVal);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField userAddrInfo = payload[0];
ChoiceNetMessageField token = payload[1];
String tokenID = (String) token.getValue();
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
addrType=userAddrInfo.getAttributeName()
String addrType = userAddrInfo.getAttributeName();
String addrName = (String) userAddrInfo.getValue();
String command = "";
String portal = "rtsp://"+Server.providerAddress;
String portalHelpURL = "http://www4.ncsu.edu/~rnudechu/files/GENI/EPB/VLC/help.html";
String plugInHelpURL = "http://www.vlc.com";
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField usePlanePortal = new ChoiceNetMessageField("Use Plane Portal", portal, portalHelpURL);
ChoiceNetMessageField usePlanePlugIn = new ChoiceNetMessageField("Use Plane Plugin", "Download VLC Player", plugInHelpURL);
ChoiceNetMessageField[] newPayload = {handleID,usePlanePortal,usePlanePlugIn};
Packet newPacket = new Packet(PacketType.ACK_USE_ATTEMPT,myName,"",myType,providerType,newPayload);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", nackType, "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", operationCode, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] payload = {type,opCode,reason};
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
OpenFlowFirewallMessage request = new OpenFlowFirewallMessage(1,"ACCEPT","IPv4","ANY","10.10.10.1/32","ANY","ANY","ANY");
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
TestUtility tu = new TestUtility();
text=tu.testXMLWriter()
String text = tu.testXMLWriter();
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";

Diff of 0f2e3df7d3e5a218f27655f4f0eb6201d5db3657 and 139a752b2930765bd81ae21ae378d0d296fabb76:
	--> Added type argument methods = 22
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 11
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 11
	--> recency = months
	--> Added class instantiations = 25
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 0f2e3df7d3e5a218f27655f4f0eb6201d5db3657 to 139a752b2930765bd81ae21ae378d0d296fabb76


****Parsing for addition at revision 139a752b2930765bd81ae21ae378d0d296fabb76****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added Advertisementv0.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added OpenFlowFirewallMessage.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added Provider.java to .\ChoiceNet\ repository source files.
Added ProviderGUI.java to .\ChoiceNet\ repository source files.
Added ProviderRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added ServiceProperty.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
rangeHelperAddr=txtRangehelper.getText()
String rangeHelperAddr = txtRangehelper.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("destination_location")
Element generalLocation = doc.createElement("destination_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 10;
File folder = new File("generated/");
String marketplaceIPAddr = "127.0.0.1";
int marketplacePort = 4040;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getConsiderationMethod(), myAd.getConsiderationValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getAdvertiserAddressScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getAdvertiserAddress()+":"+myAd.getAdvertiserPortAddress(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getEntityName(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
trafficProp=getChoiceNetMessage(pktXML,"Traffic Properties")
ChoiceNetMessageField trafficProp = getChoiceNetMessage(pktXML,"Traffic Properties");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {trafficProp,token};
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String result = "#  Consideration ID\t\tAccount:Purchased Service\n";
int count = 1;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ProviderGUI gui = new ProviderGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(purchasePanel)
int returnVal = fc.showOpenDialog(purchasePanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
url=paymentURLTextField.getText()
String url = paymentURLTextField.getText();
paymentMethod=getSelectedButtonText(group)
String paymentMethod = getSelectedButtonText(group);
account=accountTextField.getText()
String account = accountTextField.getText();
amount=amountTextField.getText()
String amount = amountTextField.getText();
String currency = "USD";
service=paymentServiceNameTextField.getText()
String service = paymentServiceNameTextField.getText();
considerationConfirmation=server.makePayment(url,paymentMethod,account,amount,currency,service)
String considerationConfirmation = server.makePayment(url, paymentMethod, account, amount, currency, service);
returnVal=fc.showOpenDialog(usePlanePanel)
int returnVal = fc.showOpenDialog(usePlanePanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
gwType=txtUsePlaneGWType.getText()
String gwType = txtUsePlaneGWType.getText();
gwAddr=txtUsePlaneGWAddr.getText()
String gwAddr = txtUsePlaneGWAddr.getText();
trafficPropFile=txtUsePlaneTrafficProp.getText()
String trafficPropFile = txtUsePlaneTrafficProp.getText();
token=txtUsePlaneToken.getText()
String token = txtUsePlaneToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel purchasePanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Send Consideration");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel paymentPanel = new JPanel();
JLabel title = new JLabel("Trigger: Make Payment Plane");
JScrollPane scroll = new JScrollPane(textAreaPayment);
JPanel usePlanePanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Use Plane");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblToken = new JLabel("Token");
JLabel lblChuserUsePlane = new JLabel("Traffic Properties");
JScrollPane scroll = new JScrollPane (textAreaUsePlane);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Advertisement Listing";
String cMethod = "Bitcoin:555acf41a0c013059d00001b";
String cValue = "20";
String cUnit = "USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
String reason = targetServiceName;
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
button=buttons.nextElement()
AbstractButton button = buttons.nextElement();
String argument = "";
int loopCount = 0;
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
ad1=createListingServiceAdvertisement()
Advertisement ad1 = createListingServiceAdvertisement();
String response = "";
Service listingService  = new Service("Advertisement Listing", "Listing", "List Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
Advertisement myAd = new Advertisement("Free", 0, myName, listingService, providerAddress, port, "UDPv4", System.currentTimeMillis()+moreTime, "UDPv4", providerAddress+":"+port);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TRANSFER_CONSIDERATION,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(issuedTo,issuedBy,tokenType,eTime,false)
ChoiceNetMessageField token = cnLibrary.createToken(issuedTo, issuedBy,tokenType,eTime, false);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
String considerationConfirmation = "";
String reason = "ChoiceNet Entity: "+myName+" purchased service: "+service;
temp=considerationConfirmation.split("Confirmation: ")
String[] temp = considerationConfirmation.split("Confirmation: ");
String confirmationID = temp[1];
id=System.currentTimeMillis()
long id = System.currentTimeMillis();
Consideration consideration = new Consideration(id, paymentMethod, account, amount, reason, confirmationID, service);
String trafficProp = "";
Scanner sc = new Scanner(new FileReader(trafficPropFile));
ChoiceNetMessageField properties = new ChoiceNetMessageField("Traffic Prop", trafficProp, "");
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", myToken, "");
ChoiceNetMessageField[] payload = {properties,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String message = "";
boolean testing = true;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
myPayload=createNACKPayload(PacketType.PLANNER_REQUEST.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.PLANNER_REQUEST.toString(), 1, message);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = Server.marketplaceRESTAPI+query;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
String usePlanePortal = (String) payload[1].getValue();
String usePlanePlugIn = (String) payload[2].getValue();
String message = "Handle ID: "+handleID+" Use Plane Portal: "+usePlanePortal+" Use Plane PlugIn: "+usePlanePlugIn;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = "Failed: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, clientIPAddress.toString(), clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
String message = "Entity: "+originatorName+" has been included in the Known Entity list";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet Entity: "+packet.getOriginatorName()+" purchased "+myName+": "+sName;
String url = Server.purchasePortalValidator+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&transactionID="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 5;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField gatewayCredentials = new ChoiceNetMessageField("ChoiceNet Gateway Credentials", "", "");
ChoiceNetMessageField[] newPayload = {transactionNum,token,gatewayCredentials};
InetAddress providerIPAddress = clientIPAddress;
int providerPort = clientPort;
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
usePlaneAddrType=myAd.getUsePlaneType()
String usePlaneAddrType = myAd.getUsePlaneType();
usePlaneAddr=myAd.getUsePlaneAddress()
String usePlaneAddr = myAd.getUsePlaneAddress();
ChoiceNetMessageField gatewayAddrType = new ChoiceNetMessageField("Addressing Scheme", usePlaneAddrType, "");
ChoiceNetMessageField gatewayAddr = new ChoiceNetMessageField("Addressing Value", usePlaneAddr, "");
ChoiceNetMessageField[] info = {gatewayAddrType,gatewayAddr};
addr=usePlaneAddr.split(":")
String[] addr = usePlaneAddr.split(":");
ChoiceNetMessageField[] signalingPayload = {token};
String reasonVal;
int opCodeVal = 4;
newPayload=createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),  opCodeVal, reasonVal);
String reasonVal;
int opCodeVal;
newPayload=createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),  opCodeVal, reasonVal);
int opCodeVal = 3;
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
newPayload=createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),  opCodeVal, reasonVal);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField userAddrInfo = payload[0];
ChoiceNetMessageField token = payload[1];
String tokenID = (String) token.getValue();
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
addrType=userAddrInfo.getAttributeName()
String addrType = userAddrInfo.getAttributeName();
String addrName = (String) userAddrInfo.getValue();
String command = "";
String portal = "rtsp://"+Server.providerAddress;
String portalHelpURL = "http://www4.ncsu.edu/~rnudechu/files/GENI/EPB/VLC/help.html";
String plugInHelpURL = "http://www.vlc.com";
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField usePlanePortal = new ChoiceNetMessageField("Use Plane Portal", portal, portalHelpURL);
ChoiceNetMessageField usePlanePlugIn = new ChoiceNetMessageField("Use Plane Plugin", "Download VLC Player", plugInHelpURL);
ChoiceNetMessageField[] newPayload = {handleID,usePlanePortal,usePlanePlugIn};
Packet newPacket = new Packet(PacketType.ACK_USE_ATTEMPT,myName,"",myType,providerType,newPayload);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", nackType, "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", operationCode, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] payload = {type,opCode,reason};
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
OpenFlowFirewallMessage request = new OpenFlowFirewallMessage(1,"ACCEPT","IPv4","ANY","10.10.10.1/32","ANY","ANY","ANY");
StringWriter writer = new StringWriter();
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbMarshaller=jaxbContext.createMarshaller()
Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
OpenFlowFirewallMessage openflowFirewallMsg = null;
jaxbContext=JAXBContext.newInstance(OpenFlowFirewallMessage.class)
JAXBContext jaxbContext = JAXBContext.newInstance(OpenFlowFirewallMessage.class);
jaxbUnmarshaller=jaxbContext.createUnmarshaller()
Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
TestUtility tu = new TestUtility();
text=tu.testXMLWriter()
String text = tu.testXMLWriter();
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";

Diff of 139a752b2930765bd81ae21ae378d0d296fabb76 and 44481d9e7650c705e268366fac1a608d8e759b7a:
	--> Added type argument methods = 22
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 11
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 11
	--> recency = months
	--> Added class instantiations = 25
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 139a752b2930765bd81ae21ae378d0d296fabb76 to 44481d9e7650c705e268366fac1a608d8e759b7a


****Parsing for addition at revision 44481d9e7650c705e268366fac1a608d8e759b7a****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added Advertisementv0.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added Consideration.java to .\ChoiceNet\ repository source files.
Added ConsiderationManager.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added Provider.java to .\ChoiceNet\ repository source files.
Added ProviderGUI.java to .\ChoiceNet\ repository source files.
Added ProviderRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added ServiceProperty.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
rangeHelperAddr=txtRangehelper.getText()
String rangeHelperAddr = txtRangehelper.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("destination_location")
Element generalLocation = doc.createElement("destination_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 10;
File folder = new File("generated/");
String marketplaceIPAddr = "127.0.0.1";
int marketplacePort = 4040;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getConsiderationMethod(), myAd.getConsiderationValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getAdvertiserAddressScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getAdvertiserAddress()+":"+myAd.getAdvertiserPortAddress(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getEntityName(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();
String result = "#  Consideration ID\t\tAccount:Purchased Service\n";
int count = 1;
myConsideration=entry.getValue()
Consideration myConsideration = entry.getValue();

 Generics pattern public class ConsiderationManager was added at revision 44481d9e7650c705e268366fac1a608d8e759b7a

URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ProviderGUI gui = new ProviderGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(purchasePanel)
int returnVal = fc.showOpenDialog(purchasePanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
url=paymentURLTextField.getText()
String url = paymentURLTextField.getText();
paymentMethod=getSelectedButtonText(group)
String paymentMethod = getSelectedButtonText(group);
account=accountTextField.getText()
String account = accountTextField.getText();
amount=amountTextField.getText()
String amount = amountTextField.getText();
String currency = "USD";
service=paymentServiceNameTextField.getText()
String service = paymentServiceNameTextField.getText();
considerationConfirmation=server.makePayment(url,paymentMethod,account,amount,currency,service)
String considerationConfirmation = server.makePayment(url, paymentMethod, account, amount, currency, service);
gwType=txtUsePlaneGWType.getText()
String gwType = txtUsePlaneGWType.getText();
gwAddr=txtUsePlaneGWAddr.getText()
String gwAddr = txtUsePlaneGWAddr.getText();
clientType=txtUsePlaneClientType.getText()
String clientType = txtUsePlaneClientType.getText();
clientAddr=txtUsePlaneClientAddr.getText()
String clientAddr = txtUsePlaneClientAddr.getText();
token=txtUsePlaneToken.getText()
String token = txtUsePlaneToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel purchasePanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Send Consideration");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel paymentPanel = new JPanel();
JLabel title = new JLabel("Trigger: Make Payment Plane");
JScrollPane scroll = new JScrollPane(textAreaPayment);
JPanel usePlanePanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Use Plane");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblChuserAddressType = new JLabel("Chuser Use Plane Agent Type");
JLabel lblChuserUsePlane = new JLabel("Chuser Use Plane Agent Address");
JLabel lblToken = new JLabel("Token");
JScrollPane scroll = new JScrollPane (textAreaUsePlane);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Advertisement Listing";
String cMethod = "Bitcoin:555acf41a0c013059d00001b";
String cValue = "20";
String cUnit = "USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
String reason = targetServiceName;
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
button=buttons.nextElement()
AbstractButton button = buttons.nextElement();
String argument = "";
int loopCount = 0;
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
ad1=createListingServiceAdvertisement()
Advertisement ad1 = createListingServiceAdvertisement();
String response = "";
Service listingService  = new Service("Advertisement Listing", "Listing", "List Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
Advertisement myAd = new Advertisement("Free", 0, myName, listingService, providerAddress, port, "UDPv4", System.currentTimeMillis()+moreTime, "UDPv4", providerAddress+":"+port);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TRANSFER_CONSIDERATION,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(issuedTo,issuedBy,tokenType,eTime,false)
ChoiceNetMessageField token = cnLibrary.createToken(issuedTo, issuedBy,tokenType,eTime, false);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
String considerationConfirmation = "";
String reason = "ChoiceNet Entity: "+myName+" purchased service: "+service;
temp=considerationConfirmation.split("Confirmation: ")
String[] temp = considerationConfirmation.split("Confirmation: ");
String confirmationID = temp[1];
id=System.currentTimeMillis()
long id = System.currentTimeMillis();
Consideration consideration = new Consideration(id, paymentMethod, account, amount, reason, confirmationID, service);
ChoiceNetMessageField userInfo = new ChoiceNetMessageField(clientType, clientAddr, "");
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", myToken, "");
ChoiceNetMessageField[] payload = {userInfo,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String message = "";
boolean testing = true;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
myPayload=createNACKPayload(PacketType.PLANNER_REQUEST.toString(),1,message)
ChoiceNetMessageField[] myPayload = createNACKPayload(PacketType.PLANNER_REQUEST.toString(), 1, message);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = Server.marketplaceRESTAPI+query;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
String usePlanePortal = (String) payload[1].getValue();
String usePlanePlugIn = (String) payload[2].getValue();
String message = "Handle ID: "+handleID+" Use Plane Portal: "+usePlanePortal+" Use Plane PlugIn: "+usePlanePlugIn;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = "Failed: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, clientIPAddress.toString(), clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
String message = "Entity: "+originatorName+" has been included in the Known Entity list";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet Entity: "+packet.getOriginatorName()+" purchased "+myName+": "+sName;
String url = Server.purchasePortalValidator+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&transactionID="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 5;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField gatewayCredentials = new ChoiceNetMessageField("ChoiceNet Gateway Credentials", "", "");
ChoiceNetMessageField[] newPayload = {transactionNum,token,gatewayCredentials};
InetAddress providerIPAddress = clientIPAddress;
int providerPort = clientPort;
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
usePlaneAddrType=myAd.getUsePlaneType()
String usePlaneAddrType = myAd.getUsePlaneType();
usePlaneAddr=myAd.getUsePlaneAddress()
String usePlaneAddr = myAd.getUsePlaneAddress();
ChoiceNetMessageField gatewayAddrType = new ChoiceNetMessageField("Addressing Scheme", usePlaneAddrType, "");
ChoiceNetMessageField gatewayAddr = new ChoiceNetMessageField("Addressing Value", usePlaneAddr, "");
ChoiceNetMessageField[] info = {gatewayAddrType,gatewayAddr};
addr=usePlaneAddr.split(":")
String[] addr = usePlaneAddr.split(":");
ChoiceNetMessageField[] signalingPayload = {token};
String reasonVal;
int opCodeVal = 4;
newPayload=createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),  opCodeVal, reasonVal);
String reasonVal;
int opCodeVal;
newPayload=createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),  opCodeVal, reasonVal);
int opCodeVal = 3;
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
newPayload=createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),opCodeVal,reasonVal)
ChoiceNetMessageField[] newPayload = createNACKPayload(PacketType.TRANSFER_CONSIDERATION.toString(),  opCodeVal, reasonVal);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField userAddrInfo = payload[0];
ChoiceNetMessageField token = payload[1];
String tokenID = (String) token.getValue();
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
addrType=userAddrInfo.getAttributeName()
String addrType = userAddrInfo.getAttributeName();
String addrName = (String) userAddrInfo.getValue();
String command = "";
Random generator = new Random();
int low = 49152;
int high = 65536;
int generatedPort = generator.nextInt(high-low) + low;
String portal = "rtsp://"+Server.providerAddress+":"+generatedPort+"/";
String portalHelpURL = "http://www4.ncsu.edu/~rnudechu/files/GENI/EPB/VLC/help.html";
String plugInHelpURL = "http://www.vlc.com";
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField usePlanePortal = new ChoiceNetMessageField("Use Plane Portal", portal, portalHelpURL);
ChoiceNetMessageField usePlanePlugIn = new ChoiceNetMessageField("Use Plane Plugin", "Download VLC Player", plugInHelpURL);
ChoiceNetMessageField[] newPayload = {handleID,usePlanePortal,usePlanePlugIn};
Packet newPacket = new Packet(PacketType.ACK_USE_ATTEMPT,myName,"",myType,providerType,newPayload);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", nackType, "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", operationCode, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] payload = {type,opCode,reason};
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
TestUtility tu = new TestUtility();
text=tu.couchDB.getRestInterface("http://192.168.1.10/bitcoin/processPayment.php?unit=Bitcoin&currency=USD&amount=1&account=mxezaksWcv9J6JJfgLDkH6eFvJ1XucWgbp&reason=3")
String text = tu.couchDB.getRestInterface("http://192.168.1.10/bitcoin/processPayment.php?unit=Bitcoin&currency=USD&amount=1&account=mxezaksWcv9J6JJfgLDkH6eFvJ1XucWgbp&reason=3");
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";

Diff of 44481d9e7650c705e268366fac1a608d8e759b7a and 13b880d0b909109c52dfdcee1dbf78759685bb2a:
	--> Added type argument methods = 22
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 14
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 11
	--> recency = months
	--> Added class instantiations = 25
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 44481d9e7650c705e268366fac1a608d8e759b7a to 13b880d0b909109c52dfdcee1dbf78759685bb2a


****Parsing for addition at revision 13b880d0b909109c52dfdcee1dbf78759685bb2a****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added Advertisementv0.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added Provider.java to .\ChoiceNet\ repository source files.
Added ProviderGUI.java to .\ChoiceNet\ repository source files.
Added ProviderRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added ServiceProperty.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
rangeHelperAddr=txtRangehelper.getText()
String rangeHelperAddr = txtRangehelper.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("destination_location")
Element generalLocation = doc.createElement("destination_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 10;
File folder = new File("generated/");
String marketplaceIPAddr = "127.0.0.1";
int marketplacePort = 4040;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getConsiderationMethod(), myAd.getConsiderationValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getAdvertiserAddressScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getAdvertiserAddress()+":"+myAd.getAdvertiserPortAddress(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getEntityName(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
adList=getChoiceNetMessage(pktXML,"Advertisement List")
ChoiceNetMessageField adList = getChoiceNetMessage(pktXML,"Advertisement List");
costType=getChoiceNetMessage(pktXML,"COST_TYPE")
ChoiceNetMessageField costType = getChoiceNetMessage(pktXML,"COST_TYPE");
costValue=getChoiceNetMessage(pktXML,"COST")
ChoiceNetMessageField costValue = getChoiceNetMessage(pktXML,"COST");
ChoiceNetMessageField[] payload = {adList, costType, costValue};
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ProviderGUI gui = new ProviderGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(purchasePanel)
int returnVal = fc.showOpenDialog(purchasePanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
gwType=txtUsePlaneGWType.getText()
String gwType = txtUsePlaneGWType.getText();
gwAddr=txtUsePlaneGWAddr.getText()
String gwAddr = txtUsePlaneGWAddr.getText();
clientType=txtUsePlaneClientType.getText()
String clientType = txtUsePlaneClientType.getText();
clientAddr=txtUsePlaneClientAddr.getText()
String clientAddr = txtUsePlaneClientAddr.getText();
token=txtUsePlaneToken.getText()
String token = txtUsePlaneToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel purchasePanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Send Consideration");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel usePlanePanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Use Plane");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblChuserAddressType = new JLabel("Chuser Use Plane Agent Type");
JLabel lblChuserUsePlane = new JLabel("Chuser Use Plane Agent Address");
JLabel lblToken = new JLabel("Token");
JScrollPane scroll = new JScrollPane (textAreaUsePlane);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Advertisement Listing";
String cMethod = "Bitcoin:mxezaksWcv9J6JJfgLDkH6eFvJ1XucWgbp";
String cValue = "20 USD";
String fileNameAd = "/Users/rudechuk/Documents/CSC/Research/JUNO/workspace/ChoiceNetArchitecture/test3.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
String argument = "";
int loopCount = 0;
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
ad1=createListingServiceAdvertisement()
Advertisement ad1 = createListingServiceAdvertisement();
String response = "";
Service listingService  = new Service("Advertisement Listing", "Listing", "List Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
Advertisement myAd = new Advertisement("Free", 0, myName, listingService, providerAddress, port, "UDPv4", System.currentTimeMillis()+moreTime, "UDPv4", providerAddress+":"+port);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TRANSFER_CONSIDERATION,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(issuedTo,issuedBy,tokenType,eTime,false)
ChoiceNetMessageField token = cnLibrary.createToken(issuedTo, issuedBy,tokenType,eTime, false);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
ChoiceNetMessageField userInfo = new ChoiceNetMessageField(clientType, clientAddr, "");
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", myToken, "");
ChoiceNetMessageField[] payload = {userInfo,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String message = "";
boolean testing = true;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", "Planner Request", "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", message, "");
ChoiceNetMessageField[] myPayload = {type,opCode,reason};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = Server.marketplaceRESTAPI+query;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
String usePlanePortal = (String) payload[1].getValue();
String usePlanePlugIn = (String) payload[2].getValue();
String message = "Handle ID: "+handleID+" Use Plane Portal: "+usePlanePortal+" Use Plane PlugIn: "+usePlanePlugIn;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = (String) nackType.getValue()+": Operation Code="+(Integer)opCode.getValue()+" due to: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, clientIPAddress.toString(), clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
String message = "Entity: "+originatorName+" has been included in the Known Entity list";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationContent = (String) payload[3].getValue();
consideration=targetConsiderationContent.split(":")
String[] consideration = targetConsiderationContent.split(":");
String targetConsiderationMethod = consideration[0];
String targetConsiderationAccount = consideration[1];
Packet newPacket;
String sName = (String) payload[2].getValue();
String targetConsiderationAmount = consideration[0];
String targetConsiderationCurrency = consideration[1];
String reason = "ChoiceNet "+myType+" Provider: "+myName+" purchased Service: "+sName;
String url = Server.purchasePortal+"?paymentMethod="+targetConsiderationMethod+"&currency="+targetConsiderationCurrency+
						"&amount="+targetConsiderationAmount+"&account="+targetConsiderationAccount+"&reason="+reason;
considerationConfirmation=couchDBsocket.getRestInterface(url)
String considerationConfirmation = couchDBsocket.getRestInterface(url);
int tNumber = (Integer) payload[0].getValue();
long eTime = 5;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField gatewayCredentials = new ChoiceNetMessageField("ChoiceNet Gateway Credentials", "", "");
ChoiceNetMessageField[] newPayload = {transactionNum,token,gatewayCredentials};
InetAddress providerIPAddress = clientIPAddress;
int providerPort = clientPort;
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
usePlaneAddrType=myAd.getUsePlaneType()
String usePlaneAddrType = myAd.getUsePlaneType();
usePlaneAddr=myAd.getUsePlaneAddress()
String usePlaneAddr = myAd.getUsePlaneAddress();
ChoiceNetMessageField gatewayAddrType = new ChoiceNetMessageField("Addressing Scheme", usePlaneAddrType, "");
ChoiceNetMessageField gatewayAddr = new ChoiceNetMessageField("Addressing Value", usePlaneAddr, "");
ChoiceNetMessageField[] info = {gatewayAddrType,gatewayAddr};
addr=usePlaneAddr.split(":")
String[] addr = usePlaneAddr.split(":");
ChoiceNetMessageField[] signalingPayload = {token};
ChoiceNetMessageField type, opCode, nackReason;
String reasonVal;
int opCodeVal = 3;
ChoiceNetMessageField[] newPayload = {type,opCode,nackReason};
ChoiceNetMessageField type, opCode, reason;
String reasonVal;
int opCodeVal;
ChoiceNetMessageField[] newPayload = {type,opCode,reason};
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", "Transfer Consideration", "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", 3, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] newPayload = {type,opCode,reason};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField userAddrInfo = payload[0];
ChoiceNetMessageField token = payload[1];
String tokenID = (String) token.getValue();
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
addrType=userAddrInfo.getAttributeName()
String addrType = userAddrInfo.getAttributeName();
String addrName = (String) userAddrInfo.getValue();
String command = "";
Random generator = new Random();
int low = 49152;
int high = 65536;
int generatedPort = generator.nextInt(high-low) + low;
String portal = "rtsp://"+Server.providerAddress+":"+generatedPort+"/";
String portalHelpURL = "http://www4.ncsu.edu/~rnudechu/files/GENI/EPB/VLC/help.html";
String plugInHelpURL = "http://www.vlc.com";
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField usePlanePortal = new ChoiceNetMessageField("Use Plane Portal", portal, portalHelpURL);
ChoiceNetMessageField usePlanePlugIn = new ChoiceNetMessageField("Use Plane Plugin", "Download VLC Player", plugInHelpURL);
ChoiceNetMessageField[] newPayload = {handleID,usePlanePortal,usePlanePlugIn};
Packet newPacket = new Packet(PacketType.ACK_USE_ATTEMPT,myName,"",myType,providerType,newPayload);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
TestUtility tu = new TestUtility();
text=tu.couchDB.getRestInterface("http://192.168.1.10/bitcoin/processPayment.php?unit=Bitcoin&currency=USD&amount=1&account=mxezaksWcv9J6JJfgLDkH6eFvJ1XucWgbp&reason=3")
String text = tu.couchDB.getRestInterface("http://192.168.1.10/bitcoin/processPayment.php?unit=Bitcoin&currency=USD&amount=1&account=mxezaksWcv9J6JJfgLDkH6eFvJ1XucWgbp&reason=3");
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";

Diff of 13b880d0b909109c52dfdcee1dbf78759685bb2a and 8bad721e19a95451ecb9fb4e8f3a65b5b701f858:
	--> Added type argument methods = 22
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 14
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 11
	--> recency = months
	--> Added class instantiations = 25
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 13b880d0b909109c52dfdcee1dbf78759685bb2a to 8bad721e19a95451ecb9fb4e8f3a65b5b701f858


****Parsing for addition at revision 8bad721e19a95451ecb9fb4e8f3a65b5b701f858****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added Advertisementv0.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added Provider.java to .\ChoiceNet\ repository source files.
Added ProviderGUI.java to .\ChoiceNet\ repository source files.
Added ProviderRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added ServiceProperty.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
rangeHelperAddr=txtRangehelper.getText()
String rangeHelperAddr = txtRangehelper.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("source_location")
Element srcLocation = doc.createElement("source_location");
dstLocation=doc.createElement("destination_location")
Element dstLocation = doc.createElement("destination_location");
srcFormat=doc.createElement("source_format")
Element srcFormat = doc.createElement("source_format");
dstFormat=doc.createElement("destination_format")
Element dstFormat = doc.createElement("destination_format");
String timestamp = ""+System.currentTimeMillis();
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
details=createServiceDetails(doc,serviceType,srcLoc,dstLoc,srcForm,dstForm)
Element details = createServiceDetails(doc, serviceType, srcLoc,  dstLoc,  srcForm,  dstForm);
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
priceValue=randomNum(1,100)
int priceValue = randomNum(1, 100);
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("destination_location")
Element generalLocation = doc.createElement("destination_location");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
configurableParameters=doc.createElement("configurableParameters")
Element configurableParameters = doc.createElement("configurableParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+timestamp+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
Server server = new Server("transport.properties");
String serviceName = "Advertisement Listing";
String target = "ABC Marketplace";
String exchangeType = "Bitcoin";
String exchangeAmount = "USD 200";
String fileName = "";
String message = "";
File folder = new File("generated/");
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
String adName, srcLoc, dstLoc, srcFormat, dstFormat, serviceType;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
int max = 10;
File folder = new File("generated/");
String marketplaceIPAddr = "127.0.0.1";
int marketplacePort = 4040;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getConsiderationMethod(), myAd.getConsiderationValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getAdvertiserAddressScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getAdvertiserAddress()+":"+myAd.getAdvertiserPortAddress(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getEntityName(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
payload=getChoiceNetMessageArray(pktXML,"Advertisement List")
ChoiceNetMessageField[] payload = getChoiceNetMessageArray(pktXML,"Advertisement List");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ProviderGUI gui = new ProviderGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
String exchangeType = addr[0];
String exchangeValue = addr[1];
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(purchasePanel)
int returnVal = fc.showOpenDialog(purchasePanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
gwType=txtUsePlaneGWType.getText()
String gwType = txtUsePlaneGWType.getText();
gwAddr=txtUsePlaneGWAddr.getText()
String gwAddr = txtUsePlaneGWAddr.getText();
clientType=txtUsePlaneClientType.getText()
String clientType = txtUsePlaneClientType.getText();
clientAddr=txtUsePlaneClientAddr.getText()
String clientAddr = txtUsePlaneClientAddr.getText();
token=txtUsePlaneToken.getText()
String token = txtUsePlaneToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel purchasePanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Send Consideration");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel usePlanePanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Use Plane");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblChuserAddressType = new JLabel("Chuser Use Plane Agent Type");
JLabel lblChuserUsePlane = new JLabel("Chuser Use Plane Agent Address");
JLabel lblToken = new JLabel("Token");
JScrollPane scroll = new JScrollPane (textAreaUsePlane);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Advertisement Listing";
String cMethod = "Bitcoin:123456";
String cValue = "USD 200";
String fileNameAd = "/Users/rudechuk/service.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
message=Logger.display(0)
String message = Logger.display(0);
boolean setting = testOn;
File folder = new File("generated/");
String fileName;
token=server.tokenMgr.getFirstTokenFromMapping()
Token token = server.tokenMgr.getFirstTokenFromMapping();
String tokenID = ""+token.getId();
String argument = "";
int loopCount = 0;
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
ad1=createListingServiceAdvertisement()
Advertisement ad1 = createListingServiceAdvertisement();
String response = "";
Service listingService  = new Service("Advertisement Listing", "Listing", "List Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
Advertisement myAd = new Advertisement("Free", 0, myName, listingService, providerAddress, port, "UDPv4", System.currentTimeMillis()+moreTime, "UDPv4", providerAddress+":"+port);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TRANSFER_CONSIDERATION,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(issuedTo,issuedBy,tokenType,eTime,false)
ChoiceNetMessageField token = cnLibrary.createToken(issuedTo, issuedBy,tokenType,eTime, false);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
ChoiceNetMessageField userInfo = new ChoiceNetMessageField(clientType, clientAddr, "");
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", myToken, "");
ChoiceNetMessageField[] payload = {userInfo,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String message = "";
boolean testing = true;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", "Planner Request", "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", message, "");
ChoiceNetMessageField[] myPayload = {type,opCode,reason};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = Server.marketplaceRESTAPI+query;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
String usePlanePortal = (String) payload[1].getValue();
String usePlanePlugIn = (String) payload[2].getValue();
String message = "Handle ID: "+handleID+" Use Plane Portal: "+usePlanePortal+" Use Plane PlugIn: "+usePlanePlugIn;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = (String) nackType.getValue()+": Operation Code="+(Integer)opCode.getValue()+" due to: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, clientIPAddress.toString(), clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
String message = "Entity: "+originatorName+" has been included in the Known Entity list";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationMethod = (String) payload[3].getValue();
Packet newPacket;
String sName = (String) payload[2].getValue();
int tNumber = (Integer) payload[0].getValue();
long eTime = 5;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField gatewayCredentials = new ChoiceNetMessageField("ChoiceNet Gateway Credentials", "", "");
ChoiceNetMessageField[] newPayload = {transactionNum,token,gatewayCredentials};
InetAddress providerIPAddress = clientIPAddress;
int providerPort = clientPort;
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
usePlaneAddrType=myAd.getUsePlaneType()
String usePlaneAddrType = myAd.getUsePlaneType();
usePlaneAddr=myAd.getUsePlaneAddress()
String usePlaneAddr = myAd.getUsePlaneAddress();
ChoiceNetMessageField gatewayAddrType = new ChoiceNetMessageField("Addressing Scheme", usePlaneAddrType, "");
ChoiceNetMessageField gatewayAddr = new ChoiceNetMessageField("Addressing Value", usePlaneAddr, "");
ChoiceNetMessageField[] info = {gatewayAddrType,gatewayAddr};
addr=usePlaneAddr.split(":")
String[] addr = usePlaneAddr.split(":");
ChoiceNetMessageField[] signalingPayload = {token};
ChoiceNetMessageField type, opCode, reason;
String reasonVal;
int opCodeVal;
ChoiceNetMessageField[] newPayload = {type,opCode,reason};
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", "Transfer Consideration", "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", 3, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] newPayload = {type,opCode,reason};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField userAddrInfo = payload[0];
ChoiceNetMessageField token = payload[1];
String tokenID = (String) token.getValue();
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
addrType=userAddrInfo.getAttributeName()
String addrType = userAddrInfo.getAttributeName();
String addrName = (String) userAddrInfo.getValue();
String command = "";
Random generator = new Random();
int low = 49152;
int high = 65536;
int generatedPort = generator.nextInt(high-low) + low;
String portal = "rtsp://"+Server.providerAddress+":"+generatedPort+"/";
String portalHelpURL = "http://www4.ncsu.edu/~rnudechu/files/GENI/EPB/VLC/help.html";
String plugInHelpURL = "http://www.vlc.com";
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField usePlanePortal = new ChoiceNetMessageField("Use Plane Portal", portal, portalHelpURL);
ChoiceNetMessageField usePlanePlugIn = new ChoiceNetMessageField("Use Plane Plugin", "Download VLC Player", plugInHelpURL);
ChoiceNetMessageField[] newPayload = {handleID,usePlanePortal,usePlanePlugIn};
Packet newPacket = new Packet(PacketType.ACK_USE_ATTEMPT,myName,"",myType,providerType,newPayload);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
TestUtility tu = new TestUtility();
String url = "http://152.54.14.45:5984/marketplace-rangehelper";
String ipAddr = "127.0.0.1";
mask=new String(new char[31]).replace("\0","1")
String mask = new String(new char[31]).replace("\0", "1");
a1=InetAddress.getByName("10.1.3.0")
InetAddress a1 = InetAddress.getByName("10.1.3.0");
a2=InetAddress.getByName("10.1.0.0")
InetAddress a2 = InetAddress.getByName("10.1.0.0");
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int yo1 = ((b1[0] & 0xFF) << 24) |
                ((b1[1] & 0xFF) << 16) |
                ((b1[2] & 0xFF) << 8)  |
                ((b1[3] & 0xFF) << 0);
a=InetAddress.getByName("10.1.2.255")
InetAddress a = InetAddress.getByName("10.1.2.255");
b=a.getAddress()
byte[] b = a.getAddress();
int yo = ((b[0] & 0xFF) << 24) |
                ((b[1] & 0xFF) << 16) |
                ((b[2] & 0xFF) << 8)  |
                ((b[3] & 0xFF) << 0);
int mask1 = -1 << (32 - 24);
val=String.format("%32s",Integer.toBinaryString(1)).replace(' ','0')
String val = String.format("%32s", Integer.toBinaryString(1)).replace(' ', '0');
val0=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val0 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
val1=String.format("%8s",Integer.toBinaryString(168)).replace(' ','0')
String val1 = String.format("%8s", Integer.toBinaryString(168)).replace(' ', '0');
val2=String.format("%8s",Integer.toBinaryString(2)).replace(' ','0')
String val2 = String.format("%8s", Integer.toBinaryString(2)).replace(' ', '0');
val3=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val3 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
String binary = val0+val1+val2+val3;
i1=Integer.parseInt(val0,2)
int i1 = Integer.parseInt(val0, 2);
i2=Integer.parseInt(val1,2)
int i2 = Integer.parseInt(val1, 2);
i3=Integer.parseInt(val2,2)
int i3 = Integer.parseInt(val2, 2);
i4=Integer.parseInt(val3,2)
int i4 = Integer.parseInt(val3, 2);
j1=Integer.parseInt("11111111",2)
int j1 = Integer.parseInt("11111111", 2);
j2=Integer.parseInt("11110000",2)
int j2 = Integer.parseInt("11110000", 2);
String ipAddr1 = "10.0.0.0/25";
myToken=entry.getValue()
Token myToken = entry.getValue();
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";

Diff of 8bad721e19a95451ecb9fb4e8f3a65b5b701f858 and 80adfc1adb5cc701c2fd676bd5ce894fcdcde0a6:
	--> Added type argument methods = 22
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 14
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 11
	--> recency = months
	--> Added class instantiations = 25
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 8bad721e19a95451ecb9fb4e8f3a65b5b701f858 to 80adfc1adb5cc701c2fd676bd5ce894fcdcde0a6


****Parsing for addition at revision 80adfc1adb5cc701c2fd676bd5ce894fcdcde0a6****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added Advertisementv0.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added Node.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added Provider.java to .\ChoiceNet\ repository source files.
Added ProviderCLI.java to .\ChoiceNet\ repository source files.
Added ProviderGUI.java to .\ChoiceNet\ repository source files.
Added ProviderPortal.java to .\ChoiceNet\ repository source files.
Added ProviderRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added ServiceProperty.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
rangeHelperAddr=txtRangehelper.getText()
String rangeHelperAddr = txtRangehelper.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("location")
Element srcLocation = doc.createElement("location");
srcIP=doc.createElement("ip")
Element srcIP = doc.createElement("ip");
dstLocation=doc.createElement("location")
Element dstLocation = doc.createElement("location");
dstIP=doc.createElement("ip")
Element dstIP = doc.createElement("ip");
srcFormat=doc.createElement("format")
Element srcFormat = doc.createElement("format");
srcMedia=doc.createElement("media")
Element srcMedia = doc.createElement("media");
dstFormat=doc.createElement("format")
Element dstFormat = doc.createElement("format");
dstMedia=doc.createElement("media")
Element dstMedia = doc.createElement("media");
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
method=doc.createElement("method")
Element method = doc.createElement("method");
value=doc.createElement("value")
Element value = doc.createElement("value");
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("location")
Element generalLocation = doc.createElement("location");
generalIP=doc.createElement("ip")
Element generalIP = doc.createElement("ip");
generalPort=doc.createElement("port")
Element generalPort = doc.createElement("port");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+System.currentTimeMillis()+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
String adName, srcLoc, dstLoc, srcFormat, dstFormat;
int max = 10;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getConsiderationMethod(), myAd.getConsiderationValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getAdvertiserAddressScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getAdvertiserAddress()+":"+myAd.getAdvertiserPortAddress(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getEntityName(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
payload=getChoiceNetMessageArray(pktXML,"Advertisement List")
ChoiceNetMessageField[] payload = getChoiceNetMessageArray(pktXML,"Advertisement List");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
int sum = getOpticalCircuitSwitchCapacity()+getOpticalPacketSwitchCapacity();
int sum = getOpticalCircuitSwitchResidualCapacity()+getOpticalPacketSwitchResidualCapacity();
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
int port = -1;
boolean err = false;
target=sc.nextLine()
String target = sc.nextLine();
ipAddr=sc.nextLine()
String ipAddr = sc.nextLine();
int port = -1;
boolean err = false;
target=sc.nextLine()
String target = sc.nextLine();
fileName=sc.nextLine()
String fileName = sc.nextLine();
method=sc.nextLine()
String method = sc.nextLine();
value=sc.nextLine()
String value = sc.nextLine();
ipAddr=sc.nextLine()
String ipAddr = sc.nextLine();
int port = -1;
boolean err = false;
fileName=sc.nextLine()
String fileName = sc.nextLine();
listingServer=sc.nextLine()
String listingServer = sc.nextLine();
ipAddr=sc.nextLine()
String ipAddr = sc.nextLine();
ProviderCLI cli = new ProviderCLI();
Scanner sc = new Scanner(System.in);
int option = -1;
String menu = 
				"1: Send Rendezvous \n" +
						"2: Transfer Contribution \n" +
						"3: Transfer Listing \n" +
						"";
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ProviderGUI gui = new ProviderGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
String exchangeType = addr[0];
String exchangeValue = addr[1];
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(purchasePanel)
int returnVal = fc.showOpenDialog(purchasePanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
gwType=txtUsePlaneGWType.getText()
String gwType = txtUsePlaneGWType.getText();
gwAddr=txtUsePlaneGWAddr.getText()
String gwAddr = txtUsePlaneGWAddr.getText();
clientType=txtUsePlaneClientType.getText()
String clientType = txtUsePlaneClientType.getText();
clientAddr=txtUsePlaneClientAddr.getText()
String clientAddr = txtUsePlaneClientAddr.getText();
token=txtUsePlaneToken.getText()
String token = txtUsePlaneToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel purchasePanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Send Consideration");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel usePlanePanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Use Plane");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblChuserAddressType = new JLabel("Chuser Use Plane Agent Type");
JLabel lblChuserUsePlane = new JLabel("Chuser Use Plane Agent Address");
JLabel lblToken = new JLabel("Token");
JScrollPane scroll = new JScrollPane (textAreaUsePlane);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Advertisement Listing";
String cMethod = "BitCoin:123456";
String cValue = "USD 200";
String fileNameAd = "/Users/rudechuk/service.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
message=Logger.display(0)
String message = Logger.display(0);
String argument = "";
int loopCount = 0;
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
ad1=createListingServiceAdvertisement()
Advertisement ad1 = createListingServiceAdvertisement();
String response = "";
Service listingService  = new Service("Advertisement Listing", "Listing", "List Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
Advertisement myAd = new Advertisement("Free", 0, myName, listingService, providerAddress, port, "UDPv4", System.currentTimeMillis()+moreTime, "UDPv4", providerAddress+":"+port);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TRANSFER_CONSIDERATION,myName,"",myType, providerType,payload);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(issuedTo,issuedBy,tokenType,eTime,false)
ChoiceNetMessageField token = cnLibrary.createToken(issuedTo, issuedBy,tokenType,eTime, false);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
ChoiceNetMessageField userInfo = new ChoiceNetMessageField(clientType, clientAddr, "");
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", myToken, "");
ChoiceNetMessageField[] payload = {userInfo,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
String pktXML = new String(receivePacket.getData(), receivePacket.getOffset(),receivePacket.getLength(), "UTF-8");
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
int size = payload.length;
String content = "";
String attr = "";
String value = "";
String message = "";
boolean testing = true;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Advertisement List", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", "Planner Request", "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", message, "");
ChoiceNetMessageField[] myPayload = {type,opCode,reason};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = Server.marketplaceRESTAPI+query;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
String usePlanePortal = (String) payload[1].getValue();
String usePlanePlugIn = (String) payload[2].getValue();
String message = "Handle ID: "+handleID+" Use Plane Portal: "+usePlanePortal+" Use Plane PlugIn: "+usePlanePlugIn;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = (String) nackType.getValue()+": Operation Code="+(Integer)opCode.getValue()+" due to: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, clientIPAddress.toString(), clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
String message = "Entity: "+originatorName+" has been included in the Known Entity list";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationMethod = (String) payload[3].getValue();
Packet newPacket;
String sName = (String) payload[2].getValue();
int tNumber = (Integer) payload[0].getValue();
long eTime = 5;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField gatewayCredentials = new ChoiceNetMessageField("ChoiceNet Gateway Credentials", "", "");
ChoiceNetMessageField[] newPayload = {transactionNum,token,gatewayCredentials};
InetAddress providerIPAddress = clientIPAddress;
int providerPort = clientPort;
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
usePlaneAddrType=myAd.getUsePlaneType()
String usePlaneAddrType = myAd.getUsePlaneType();
usePlaneAddr=myAd.getUsePlaneAddress()
String usePlaneAddr = myAd.getUsePlaneAddress();
ChoiceNetMessageField gatewayAddrType = new ChoiceNetMessageField("Addressing Scheme", usePlaneAddrType, "");
ChoiceNetMessageField gatewayAddr = new ChoiceNetMessageField("Addressing Value", usePlaneAddr, "");
ChoiceNetMessageField[] info = {gatewayAddrType,gatewayAddr};
addr=usePlaneAddr.split(":")
String[] addr = usePlaneAddr.split(":");
ChoiceNetMessageField[] signalingPayload = {token};
ChoiceNetMessageField type, opCode, reason;
String reasonVal;
int opCodeVal;
ChoiceNetMessageField[] newPayload = {type,opCode,reason};
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", "Transfer Consideration", "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", 3, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] newPayload = {type,opCode,reason};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
String msg = "<html>";
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField userAddrInfo = payload[0];
ChoiceNetMessageField token = payload[1];
String tokenID = (String) token.getValue();
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
addrType=userAddrInfo.getAttributeName()
String addrType = userAddrInfo.getAttributeName();
String addrName = (String) userAddrInfo.getValue();
String command = "";
Random generator = new Random();
int low = 49152;
int high = 65536;
int generatedPort = generator.nextInt(high-low) + low;
String portal = "rtsp://"+Server.providerAddress+":"+generatedPort+"/";
String portalHelpURL = "http://www4.ncsu.edu/~rnudechu/files/GENI/EPB/VLC/help.html";
String plugInHelpURL = "http://www.vlc.com";
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField usePlanePortal = new ChoiceNetMessageField("Use Plane Portal", portal, portalHelpURL);
ChoiceNetMessageField usePlanePlugIn = new ChoiceNetMessageField("Use Plane Plugin", "Download VLC Player", plugInHelpURL);
ChoiceNetMessageField[] newPayload = {handleID,usePlanePortal,usePlanePlugIn};
Packet newPacket = new Packet(PacketType.ACK_USE_ATTEMPT,myName,"",myType,providerType,newPayload);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
String[] result = new String[2];
String network = "";
int hostMask;
String hostAddr = "";
String broadcastAddr = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
mask=Integer.parseInt(ipAddrArr[1])
int mask = Integer.parseInt(ipAddrArr[1]);
int val = 0;
int rem = 0;
String binaryMask;
String remMask;
int octectMask = 0;
TestUtility tu = new TestUtility();
String url = "http://152.54.14.45:5984/marketplace-rangehelper";
String ipAddr = "127.0.0.1";
mask=new String(new char[31]).replace("\0","1")
String mask = new String(new char[31]).replace("\0", "1");
a1=InetAddress.getByName("10.1.3.0")
InetAddress a1 = InetAddress.getByName("10.1.3.0");
a2=InetAddress.getByName("10.1.0.0")
InetAddress a2 = InetAddress.getByName("10.1.0.0");
b1=a1.getAddress()
byte[] b1 = a1.getAddress();
int yo1 = ((b1[0] & 0xFF) << 24) |
                ((b1[1] & 0xFF) << 16) |
                ((b1[2] & 0xFF) << 8)  |
                ((b1[3] & 0xFF) << 0);
a=InetAddress.getByName("10.1.2.255")
InetAddress a = InetAddress.getByName("10.1.2.255");
b=a.getAddress()
byte[] b = a.getAddress();
int yo = ((b[0] & 0xFF) << 24) |
                ((b[1] & 0xFF) << 16) |
                ((b[2] & 0xFF) << 8)  |
                ((b[3] & 0xFF) << 0);
int mask1 = -1 << (32 - 24);
val=String.format("%32s",Integer.toBinaryString(1)).replace(' ','0')
String val = String.format("%32s", Integer.toBinaryString(1)).replace(' ', '0');
val0=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val0 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
val1=String.format("%8s",Integer.toBinaryString(168)).replace(' ','0')
String val1 = String.format("%8s", Integer.toBinaryString(168)).replace(' ', '0');
val2=String.format("%8s",Integer.toBinaryString(2)).replace(' ','0')
String val2 = String.format("%8s", Integer.toBinaryString(2)).replace(' ', '0');
val3=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val3 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
String binary = val0+val1+val2+val3;
i1=Integer.parseInt(val0,2)
int i1 = Integer.parseInt(val0, 2);
i2=Integer.parseInt(val1,2)
int i2 = Integer.parseInt(val1, 2);
i3=Integer.parseInt(val2,2)
int i3 = Integer.parseInt(val2, 2);
i4=Integer.parseInt(val3,2)
int i4 = Integer.parseInt(val3, 2);
j1=Integer.parseInt("11111111",2)
int j1 = Integer.parseInt("11111111", 2);
j2=Integer.parseInt("11110000",2)
int j2 = Integer.parseInt("11110000", 2);
String ipAddr1 = "10.0.0.0/25";
totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";

Diff of 80adfc1adb5cc701c2fd676bd5ce894fcdcde0a6 and 597588c0237a91d98f63a44c9c1cd3a439062015:
	--> Added type argument methods = 22
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 14
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 11
	--> recency = months
	--> Added class instantiations = 25
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 80adfc1adb5cc701c2fd676bd5ce894fcdcde0a6 to 597588c0237a91d98f63a44c9c1cd3a439062015


****Parsing for addition at revision 597588c0237a91d98f63a44c9c1cd3a439062015****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added Advertisementv0.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added Node.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added Provider.java to .\ChoiceNet\ repository source files.
Added ProviderCLI.java to .\ChoiceNet\ repository source files.
Added ProviderGUI.java to .\ChoiceNet\ repository source files.
Added ProviderPortal.java to .\ChoiceNet\ repository source files.
Added ProviderRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added ServiceProperty.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
rangeHelperAddr=txtRangehelper.getText()
String rangeHelperAddr = txtRangehelper.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("location")
Element srcLocation = doc.createElement("location");
srcIP=doc.createElement("ip")
Element srcIP = doc.createElement("ip");
dstLocation=doc.createElement("location")
Element dstLocation = doc.createElement("location");
dstIP=doc.createElement("ip")
Element dstIP = doc.createElement("ip");
srcFormat=doc.createElement("format")
Element srcFormat = doc.createElement("format");
srcMedia=doc.createElement("media")
Element srcMedia = doc.createElement("media");
dstFormat=doc.createElement("format")
Element dstFormat = doc.createElement("format");
dstMedia=doc.createElement("media")
Element dstMedia = doc.createElement("media");
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
method=doc.createElement("method")
Element method = doc.createElement("method");
value=doc.createElement("value")
Element value = doc.createElement("value");
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("location")
Element generalLocation = doc.createElement("location");
generalIP=doc.createElement("ip")
Element generalIP = doc.createElement("ip");
generalPort=doc.createElement("port")
Element generalPort = doc.createElement("port");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+System.currentTimeMillis()+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
String adName, srcLoc, dstLoc, srcFormat, dstFormat;
int max = 10;
String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getConsiderationMethod(), myAd.getConsiderationValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getAdvertiserAddressScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getAdvertiserAddress()+":"+myAd.getAdvertiserPortAddress(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getEntityName(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[queries.size()];
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
queryPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] queryPayload = getRequestElements(pktXML);
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
requestPayload=getRequestElements(pktXML)
ChoiceNetMessageField[] requestPayload = getRequestElements(pktXML);
ChoiceNetMessageField serviceReq = new ChoiceNetMessageField("Service Requirement", requestPayload, "");
ChoiceNetMessageField[] payload = {serviceReq};
payload=getChoiceNetMessageArray(pktXML,"Advertisement List")
ChoiceNetMessageField[] payload = getChoiceNetMessageArray(pktXML,"Advertisement List");
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
int sum = getOpticalCircuitSwitchCapacity()+getOpticalPacketSwitchCapacity();
int sum = getOpticalCircuitSwitchResidualCapacity()+getOpticalPacketSwitchResidualCapacity();
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
int port = -1;
boolean err = false;
target=sc.nextLine()
String target = sc.nextLine();
ipAddr=sc.nextLine()
String ipAddr = sc.nextLine();
int port = -1;
boolean err = false;
target=sc.nextLine()
String target = sc.nextLine();
fileName=sc.nextLine()
String fileName = sc.nextLine();
method=sc.nextLine()
String method = sc.nextLine();
value=sc.nextLine()
String value = sc.nextLine();
ipAddr=sc.nextLine()
String ipAddr = sc.nextLine();
int port = -1;
boolean err = false;
fileName=sc.nextLine()
String fileName = sc.nextLine();
listingServer=sc.nextLine()
String listingServer = sc.nextLine();
ipAddr=sc.nextLine()
String ipAddr = sc.nextLine();
ProviderCLI cli = new ProviderCLI();
Scanner sc = new Scanner(System.in);
int option = -1;
String menu = 
				"1: Send Rendezvous \n" +
						"2: Transfer Contribution \n" +
						"3: Transfer Listing \n" +
						"";
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ProviderGUI gui = new ProviderGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
String exchangeType = addr[0];
String exchangeValue = addr[1];
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(purchasePanel)
int returnVal = fc.showOpenDialog(purchasePanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
method=txtCostMethodMktpl.getText().toString()
String method = txtCostMethodMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
gwType=txtUsePlaneGWType.getText()
String gwType = txtUsePlaneGWType.getText();
gwAddr=txtUsePlaneGWAddr.getText()
String gwAddr = txtUsePlaneGWAddr.getText();
clientType=txtUsePlaneClientType.getText()
String clientType = txtUsePlaneClientType.getText();
clientAddr=txtUsePlaneClientAddr.getText()
String clientAddr = txtUsePlaneClientAddr.getText();
token=txtUsePlaneToken.getText()
String token = txtUsePlaneToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel purchasePanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Send Consideration");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel usePlanePanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Use Plane");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblChuserAddressType = new JLabel("Chuser Use Plane Agent Type");
JLabel lblChuserUsePlane = new JLabel("Chuser Use Plane Agent Address");
JLabel lblToken = new JLabel("Token");
JScrollPane scroll = new JScrollPane (textAreaUsePlane);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Advertisement Listing";
String cMethod = "BitCoin:123456";
String cValue = "USD 200";
String fileNameAd = "/Users/rudechuk/service.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
message=Logger.display(0)
String message = Logger.display(0);
String argument = "";
int loopCount = 0;
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
HelloWorld helloWorld = new HelloWorld();
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				 destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Service Requirement", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
dataPayload=createGeneralRequestPayload(sourceLoc,destinationLoc,sourceFormat,destinationFormat,sourceLocType,destinationLocType,sourceFormatType,destinationFormatType,cost,cMethod,adID)
ChoiceNetMessageField[] dataPayload = createGeneralRequestPayload( sourceLoc,  destinationLoc,  sourceFormat,  destinationFormat,  sourceLocType, 
				 destinationLocType,  sourceFormatType,  destinationFormatType,  cost,  cMethod, adID);
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
Scanner sc;
String response = "";
String content = "";
ad1=createListingServiceAdvertisement()
Advertisement ad1 = createListingServiceAdvertisement();
String response = "";
Service listingService  = new Service("Advertisement Listing", "Listing", "List Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
Advertisement myAd = new Advertisement("Free", 0, myName, listingService, providerAddress, port, "UDPv4", System.currentTimeMillis()+moreTime, "UDPv4", providerAddress+":"+port);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TRANSFER_CONSIDERATION,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(issuedTo,issuedBy,tokenType,eTime,false)
ChoiceNetMessageField token = cnLibrary.createToken(issuedTo, issuedBy,tokenType,eTime, false);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
ChoiceNetMessageField userInfo = new ChoiceNetMessageField(clientType, clientAddr, "");
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", myToken, "");
ChoiceNetMessageField[] payload = {userInfo,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
String pktXML = (String) inFromClient.readObject();
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
String content = (String) reqParameters.getValue();
p=Runtime.getRuntime().exec("./localchoicenet")
Process p = Runtime.getRuntime().exec("./localchoicenet");
String message = "";
boolean testing = true;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", "Planner Request", "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", message, "");
ChoiceNetMessageField[] myPayload = {type,opCode,reason};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
String message = "";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String queryValue, adID, query, response = "";
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = Server.marketplaceRESTAPI+query;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
String usePlanePortal = (String) payload[1].getValue();
String usePlanePlugIn = (String) payload[2].getValue();
String message = "Handle ID: "+handleID+" Use Plane Portal: "+usePlanePortal+" Use Plane PlugIn: "+usePlanePlugIn;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = (String) nackType.getValue()+": Operation Code="+(Integer)opCode.getValue()+" due to: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, clientIPAddress.toString(), clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
String message = "Entity: "+originatorName+" has been included in the Known Entity list";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationMethod = (String) payload[3].getValue();
Packet newPacket;
String sName = (String) payload[2].getValue();
int tNumber = (Integer) payload[0].getValue();
long eTime = 5;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField gatewayCredentials = new ChoiceNetMessageField("ChoiceNet Gateway Credentials", "", "");
ChoiceNetMessageField[] newPayload = {transactionNum,token,gatewayCredentials};
InetAddress providerIPAddress = clientIPAddress;
int providerPort = clientPort;
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
usePlaneAddrType=myAd.getUsePlaneType()
String usePlaneAddrType = myAd.getUsePlaneType();
usePlaneAddr=myAd.getUsePlaneAddress()
String usePlaneAddr = myAd.getUsePlaneAddress();
ChoiceNetMessageField gatewayAddrType = new ChoiceNetMessageField("Addressing Scheme", usePlaneAddrType, "");
ChoiceNetMessageField gatewayAddr = new ChoiceNetMessageField("Addressing Value", usePlaneAddr, "");
ChoiceNetMessageField[] info = {gatewayAddrType,gatewayAddr};
addr=usePlaneAddr.split(":")
String[] addr = usePlaneAddr.split(":");
ChoiceNetMessageField[] signalingPayload = {token};
ChoiceNetMessageField type, opCode, reason;
String reasonVal;
int opCodeVal;
ChoiceNetMessageField[] newPayload = {type,opCode,reason};
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", "Transfer Consideration", "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", 3, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] newPayload = {type,opCode,reason};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
String msg = "Token "+myToken.getId()+" has been added to the system database";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
srcAddrType=myAd.getService().getSrcLocationAddrScheme()
String[] srcAddrType = myAd.getService().getSrcLocationAddrScheme();
srcAddrVal=myAd.getService().getSrcLocationAddrValue()
String[] srcAddrVal = myAd.getService().getSrcLocationAddrValue();
int srcAddrSize = srcAddrVal.length;
dstAddrType=myAd.getService().getDstLocationAddrScheme()
String[] dstAddrType = myAd.getService().getDstLocationAddrScheme();
dstAddrVal=myAd.getService().getDstLocationAddrValue()
String[] dstAddrVal = myAd.getService().getDstLocationAddrValue();
int dstAddrSize = dstAddrVal.length;
String value = "";
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
ChoiceNetMessageField advertisedService = payload[i];
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField userAddrInfo = payload[0];
ChoiceNetMessageField token = payload[1];
String tokenID = (String) token.getValue();
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
addrType=userAddrInfo.getAttributeName()
String addrType = userAddrInfo.getAttributeName();
String addrName = (String) userAddrInfo.getValue();
String command = "";
Random generator = new Random();
int low = 49152;
int high = 65536;
int generatedPort = generator.nextInt(high-low) + low;
String portal = "rtsp://"+Server.providerAddress+":"+generatedPort+"/";
String portalHelpURL = "http://www4.ncsu.edu/~rnudechu/files/GENI/EPB/VLC/help.html";
String plugInHelpURL = "http://www.vlc.com";
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField usePlanePortal = new ChoiceNetMessageField("Use Plane Portal", portal, portalHelpURL);
ChoiceNetMessageField usePlanePlugIn = new ChoiceNetMessageField("Use Plane Plugin", "Download VLC Player", plugInHelpURL);
ChoiceNetMessageField[] newPayload = {handleID,usePlanePortal,usePlanePlugIn};
Packet newPacket = new Packet(PacketType.ACK_USE_ATTEMPT,myName,"",myType,providerType,newPayload);
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String costType = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
String data = "";
String queryField = "";
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
String queryField = "";
String result = "";
ipAddrArr=ipAddr.split("/")
String[] ipAddrArr = ipAddr.split("/");
String subnet = ipAddrArr[1];
int val = 0;
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription;
String[] srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
int size = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
TestUtility tu = new TestUtility();
adArray=tu.getAdvertisementsFromXML("test3.xml","File")
ArrayList<Advertisement> adArray = tu.getAdvertisementsFromXML("test3.xml", "File");
ArrayList<Advertisement> adArray = tu.getAdvertisementsFromXML("test3.xml", "File");
String ipAddr = "127.0.0.1";
int value = 0xffffffff << (32 - 24);
byte[] bytes = new byte[]{ 
	            (byte)(value >>> 24), (byte)(value >> 16 & 0xff), (byte)(value >> 8 & 0xff), (byte)(value & 0xff) };
val=String.format("%32s",Integer.toBinaryString(192)).replace(' ','0')
String val = String.format("%32s", Integer.toBinaryString(192)).replace(' ', '0');
val0=String.format("%8s",Integer.toBinaryString(192)).replace(' ','0')
String val0 = String.format("%8s", Integer.toBinaryString(192)).replace(' ', '0');
val1=String.format("%8s",Integer.toBinaryString(168)).replace(' ','0')
String val1 = String.format("%8s", Integer.toBinaryString(168)).replace(' ', '0');
val2=String.format("%8s",Integer.toBinaryString(2)).replace(' ','0')
String val2 = String.format("%8s", Integer.toBinaryString(2)).replace(' ', '0');
val3=String.format("%8s",Integer.toBinaryString(1)).replace(' ','0')
String val3 = String.format("%8s", Integer.toBinaryString(1)).replace(' ', '0');

 Generics pattern ArrayList<Advertisement> adArray = tu.getAdvertisementsFromXML("test3.xml", "File"); was added at revision 597588c0237a91d98f63a44c9c1cd3a439062015

totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\t\tToken Service\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String cMethod = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, costMethod, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";

Diff of 597588c0237a91d98f63a44c9c1cd3a439062015 and 9be6d9bdaa9f7a7c6b8f67aa0a39b3b2d5120b55:
	--> Added type argument methods = 22
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 14
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 12
	--> recency = months
	--> Added class instantiations = 28
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 597588c0237a91d98f63a44c9c1cd3a439062015 to 9be6d9bdaa9f7a7c6b8f67aa0a39b3b2d5120b55


****Parsing for addition at revision 9be6d9bdaa9f7a7c6b8f67aa0a39b3b2d5120b55****

Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added AdminGUI.java to .\ChoiceNet\ repository source files.
Added Advertisement.java to .\ChoiceNet\ repository source files.
Added AdvertisementDisplay.java to .\ChoiceNet\ repository source files.
Added AdvertisementManager.java to .\ChoiceNet\ repository source files.
Added AdvertisementRandomGenerator.java to .\ChoiceNet\ repository source files.
Added Advertisementv0.java to .\ChoiceNet\ repository source files.
Added ChoiceNetLibrary.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageField.java to .\ChoiceNet\ repository source files.
Added ChoiceNetMessageParser.java to .\ChoiceNet\ repository source files.
Added Cost.java to .\ChoiceNet\ repository source files.
Added CouchDBContainer.java to .\ChoiceNet\ repository source files.
Added CouchDBOperations.java to .\ChoiceNet\ repository source files.
Added CouchDBResponse.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntities.java to .\ChoiceNet\ repository source files.
Added DiscoveredEntitiesManager.java to .\ChoiceNet\ repository source files.
Added HelloWorld.java to .\ChoiceNet\ repository source files.
Added InternalMessageField.java to .\ChoiceNet\ repository source files.
Added Logger.java to .\ChoiceNet\ repository source files.
Added Node.java to .\ChoiceNet\ repository source files.
Added Packet.java to .\ChoiceNet\ repository source files.
Added PacketType.java to .\ChoiceNet\ repository source files.
Added Provider.java to .\ChoiceNet\ repository source files.
Added ProviderCLI.java to .\ChoiceNet\ repository source files.
Added ProviderGUI.java to .\ChoiceNet\ repository source files.
Added ProviderPortal.java to .\ChoiceNet\ repository source files.
Added ProviderRandomGenerator.java to .\ChoiceNet\ repository source files.
Added ProvisioningProperty.java to .\ChoiceNet\ repository source files.
Added Purchase.java to .\ChoiceNet\ repository source files.
Added PurchaseManager.java to .\ChoiceNet\ repository source files.
Added PurchaseType.java to .\ChoiceNet\ repository source files.
Added QueryType.java to .\ChoiceNet\ repository source files.
Added RequestType.java to .\ChoiceNet\ repository source files.
Added Server.java to .\ChoiceNet\ repository source files.
Added ServerThread.java to .\ChoiceNet\ repository source files.
Added Service.java to .\ChoiceNet\ repository source files.
Added ServiceManager.java to .\ChoiceNet\ repository source files.
Added ServiceProperty.java to .\ChoiceNet\ repository source files.
Added ServiceRequirement.java to .\ChoiceNet\ repository source files.
Added TestUtility.java to .\ChoiceNet\ repository source files.
Added Token.java to .\ChoiceNet\ repository source files.
Added TokenManager.java to .\ChoiceNet\ repository source files.
Added Transaction.java to .\ChoiceNet\ repository source files.
Added TransactionManager.java to .\ChoiceNet\ repository source files.
Added UserMarketplaceCLI.java to .\ChoiceNet\ repository source files.
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
AdminGUI gui = new AdminGUI();
panelHome=createMenuPanel()
JPanel panelHome = createMenuPanel();
marketplaceAddr=txtSettingsMktAddr.getText()
String marketplaceAddr = txtSettingsMktAddr.getText();
rangeHelperAddr=txtRangehelper.getText()
String rangeHelperAddr = txtRangehelper.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel settingsPanel = new JPanel();
JLabel title = new JLabel("Settings Menu");
JLabel lblIpAddress = new JLabel("Marketplace Address");
JScrollPane scroll = new JScrollPane (textAreaSettings);
String addr = "";
addrArr=Server.marketplaceRESTAPI.split("/")
String[] addrArr = Server.marketplaceRESTAPI.split("/");
int size = addrArr.length;
message=Logger.display(0)
String message = Logger.display(0);
int loopCount = 0;
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("listings")
Element rootElement = doc.createElement("listings");
advertisement=doc.createElement("advertisement")
Element advertisement = doc.createElement("advertisement");
attr=doc.createAttribute("id")
Attr attr = doc.createAttribute("id");
service=doc.createElement("service")
Element service = doc.createElement("service");
name=doc.createElement("name")
Element name = doc.createElement("name");
details=doc.createElement("details")
Element details = doc.createElement("details");
srcLocation=doc.createElement("location")
Element srcLocation = doc.createElement("location");
srcIP=doc.createElement("ip")
Element srcIP = doc.createElement("ip");
dstLocation=doc.createElement("location")
Element dstLocation = doc.createElement("location");
dstIP=doc.createElement("ip")
Element dstIP = doc.createElement("ip");
srcFormat=doc.createElement("format")
Element srcFormat = doc.createElement("format");
srcMedia=doc.createElement("media")
Element srcMedia = doc.createElement("media");
dstFormat=doc.createElement("format")
Element dstFormat = doc.createElement("format");
dstMedia=doc.createElement("media")
Element dstMedia = doc.createElement("media");
description=doc.createElement("description")
Element description = doc.createElement("description");
price=doc.createElement("price")
Element price = doc.createElement("price");
method=doc.createElement("method")
Element method = doc.createElement("method");
value=doc.createElement("value")
Element value = doc.createElement("value");
providerID=doc.createElement("providerID")
Element providerID = doc.createElement("providerID");
purchasePortal=doc.createElement("purchasePortal")
Element purchasePortal = doc.createElement("purchasePortal");
generalLocation=doc.createElement("location")
Element generalLocation = doc.createElement("location");
generalIP=doc.createElement("ip")
Element generalIP = doc.createElement("ip");
generalPort=doc.createElement("port")
Element generalPort = doc.createElement("port");
provisioningParameters=doc.createElement("provisioningParameters")
Element provisioningParameters = doc.createElement("provisioningParameters");
ports=doc.createElement("ports")
Element ports = doc.createElement("ports");
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult result = new StreamResult(new File("generated/genAdvertisement_"+System.currentTimeMillis()+".xml"));
Random rand = new Random();
int randomNum = rand.nextInt((max - min) + 1) + min;
AdvertisementRandomGenerator advRG = new AdvertisementRandomGenerator();
String adName, srcLoc, dstLoc, srcFormat, dstFormat;
int max = 10;

 Generics pattern public class Advertisementv0 was added at revision 9be6d9bdaa9f7a7c6b8f67aa0a39b3b2d5120b55

String xml = "";
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
StreamResult sResult = new StreamResult(writer);
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
boolean containsCDATA = false;
int temp = (Integer) pkt.getValue();
long temp = (Long) pkt.getValue();
Element result;
Packet packet = null;
int count = 0;
ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Cost myCost = new Cost(priceMethod, pValue);
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
String serviceName = "";
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
service=createService(myAd.getService())
ChoiceNetMessageField service = createService(myAd.getService());
ChoiceNetMessageField cPayload = new ChoiceNetMessageField(myAd.getConsiderationMethod(), myAd.getConsiderationValue(), "");
ChoiceNetMessageField consideration = new ChoiceNetMessageField("Consideration", cPayload, "");
ChoiceNetMessageField addressingScheme = new ChoiceNetMessageField("Addressing Scheme", myAd.getAdvertiserAddressScheme(), "");
ChoiceNetMessageField addressingValue = new ChoiceNetMessageField("Addressing Value", myAd.getAdvertiserAddress()+":"+myAd.getAdvertiserPortAddress(), "");
ChoiceNetMessageField entityName = new ChoiceNetMessageField("Entity's Name", myAd.getEntityName(), "");
ChoiceNetMessageField[] value = {addressingScheme,addressingValue,entityName};
ChoiceNetMessageField economyAddress = new ChoiceNetMessageField("Provider Economy Plane Address", value, "");
ChoiceNetMessageField[] payload = {service,consideration,economyAddress};
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", myService.getName(), "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", myService.getType(), "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", myService.getDescription(), "");
prop=myService.getProperty()
ProvisioningProperty[] prop = myService.getProperty();
ChoiceNetMessageField[] property = new ChoiceNetMessageField[prop.length*2];
int j = 0;
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", prop[i].getType(), "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", prop[i].getValue(), "");
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocation = null;
ChoiceNetMessageField dstLocation = null;
ChoiceNetMessageField srcFormat = null;
ChoiceNetMessageField dstFormat = null;
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcLocationAddrScheme(), "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcLocationAddrValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstLocationAddrScheme(), "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", myService.getDstLocationAddrValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField srcFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getSrcFormatScheme(), "");
ChoiceNetMessageField srcFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getSrcFormatValue(), "");
ChoiceNetMessageField[] srcLocationVal = {srcFormatScheme,srcFormatVal};
ChoiceNetMessageField dstFormatScheme = new ChoiceNetMessageField("Addressing Scheme", myService.getDstFormatScheme(), "");
ChoiceNetMessageField dstFormatVal = new ChoiceNetMessageField("Addressing Value", myService.getDstFormatValue(), "");
ChoiceNetMessageField[] dstLocationVal = {dstFormatScheme,dstFormatVal};
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation,srcFormat,dstFormat};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", name, "");
ChoiceNetMessageField serviceType = new ChoiceNetMessageField("Service Type", type, "");
ChoiceNetMessageField serviceDescription = new ChoiceNetMessageField("Description", description, "");
ChoiceNetMessageField propertyName = new ChoiceNetMessageField("Property Name", pName, "");
ChoiceNetMessageField propertyValue = new ChoiceNetMessageField("Property Value", pValue, "");
ChoiceNetMessageField[] property = {propertyName,propertyValue};
ChoiceNetMessageField serviceProperty = new ChoiceNetMessageField("Service Specific Property", property, "");
ChoiceNetMessageField srcLocScheme = new ChoiceNetMessageField("Addressing Scheme", srcAddrScheme, "");
ChoiceNetMessageField srcLocVal = new ChoiceNetMessageField("Addressing Value", srcAddrVal, "");
ChoiceNetMessageField[] srcLocationVal = {srcLocScheme,srcLocVal};
ChoiceNetMessageField srcLocation = new ChoiceNetMessageField("Location", srcLocationVal, "");
ChoiceNetMessageField dstLocScheme = new ChoiceNetMessageField("Addressing Scheme", dstAddrScheme, "");
ChoiceNetMessageField dstLocVal = new ChoiceNetMessageField("Addressing Value", dstAddrVal, "");
ChoiceNetMessageField[] dstLocationVal = {dstLocScheme,dstLocVal};
ChoiceNetMessageField dstLocation = new ChoiceNetMessageField("Location", dstLocationVal, "");
ChoiceNetMessageField[] payload = {serviceName,serviceType,serviceDescription,serviceProperty,srcLocation,dstLocation};
ChoiceNetMessageField service = new ChoiceNetMessageField("Service", payload, "");
tID=tokenMgr.createTokenID()
int tID = tokenMgr.createTokenID();
ChoiceNetMessageField tokenID = new ChoiceNetMessageField("Token ID", tID, "");
ChoiceNetMessageField issuedTo = new ChoiceNetMessageField("Issued To", issuedToVal, "");
ChoiceNetMessageField issuedBy = new ChoiceNetMessageField("Issued By", myName, "");
ChoiceNetMessageField expirationTme = new ChoiceNetMessageField("Expiration Time", eTime, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField[] payload = {tokenID,issuedTo,issuedBy,serviceName,expirationTme};
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", payload, "");
ChoiceNetMessageField[] tPayload;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) advertisement.getValue();
ChoiceNetMessageField myService = (ChoiceNetMessageField) payload[0];
service=extractServiceContent(myService)
Service service = extractServiceContent(myService);
ChoiceNetMessageField consideration = (ChoiceNetMessageField) payload[1];
ChoiceNetMessageField contents = (ChoiceNetMessageField) consideration.getValue();
String considerationMethod = (String) contents.getAttributeName();
int considerationValue = (Integer) contents.getValue();
ChoiceNetMessageField economyAddrProp = (ChoiceNetMessageField) payload[2];
String advertiserAddressScheme = (String) tPayload[0].getValue();
String advertiserAddress = (String) tPayload[1].getValue();
int advertiserPortAddress = -1;
addr=advertiserAddress.split(":")
String[] addr = advertiserAddress.split(":");
String entityName = (String) tPayload[2].getValue();
Advertisement myAd = new Advertisement(considerationMethod, considerationValue, entityName, service, advertiserAddress, advertiserPortAddress, advertiserAddressScheme, expirationTime, null,null);
ChoiceNetMessageField[] tPayload;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) service.getValue();
String name = (String) payload[0].getValue();
String type = (String) payload[1].getValue();
String description = (String) payload[2].getValue();
ChoiceNetMessageField property = (ChoiceNetMessageField) payload[3];
String propertyType = (String) tPayload[0].getValue();
String propertyValue = (String) tPayload[1].getValue();
ProvisioningProperty sProp = new ProvisioningProperty(propertyType, propertyValue);
ProvisioningProperty serviceProperties[] = {sProp};
String srcLocationAddrScheme = "";
String srcLocationAddrValue = "";
String dstLocationAddrScheme = "";
String dstLocationAddrValue = "";
String srcFormatScheme = "";
String srcFormatValue = "";
String dstFormatScheme = "";
String dstFormatValue = "";
ChoiceNetMessageField srcLocation = (ChoiceNetMessageField) payload[4];
ChoiceNetMessageField dstLocation = (ChoiceNetMessageField) payload[5];
ChoiceNetMessageField srcFormat = (ChoiceNetMessageField) payload[6];
ChoiceNetMessageField dstFormat = (ChoiceNetMessageField) payload[7];
Service myService = new Service(name, type, srcLocationAddrScheme, srcLocationAddrValue, dstLocationAddrScheme, dstLocationAddrValue, 
				srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, serviceProperties, description);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) token.getValue();
int tokenID = (Integer) payload[0].getValue();
String issuedTo = (String) payload[1].getValue();
String issuedBy = (String) payload[2].getValue();
String serviceName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
Token myToken = new Token(tokenID, issuedTo, issuedBy, serviceName, expirationTime);
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(new InputSource(new StringReader(packetXML)))
Document doc = dBuilder.parse(new InputSource(new StringReader(packetXML)));
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
oName=getChoiceNetMessage(pktXML,"Originator Name")
ChoiceNetMessageField oName = getChoiceNetMessage(pktXML,"Originator Name");
oSign=getChoiceNetMessage(pktXML,"Originator Signature")
ChoiceNetMessageField oSign = getChoiceNetMessage(pktXML,"Originator Signature");
oType=getChoiceNetMessage(pktXML,"Originator Type")
ChoiceNetMessageField oType = getChoiceNetMessage(pktXML,"Originator Type");
oProviderType=getChoiceNetMessage(pktXML,"Originator Provider Type")
ChoiceNetMessageField oProviderType = getChoiceNetMessage(pktXML,"Originator Provider Type");
messageType=getChoiceNetMessage(pktXML,"Message Type")
ChoiceNetMessageField messageType = getChoiceNetMessage(pktXML,"Message Type");
String myPktType = (String) messageType.getValue();
packetType=findPacketType(myPktType)
PacketType packetType = findPacketType(myPktType);
String myName = (String) oName.getValue();
String myType = (String) oType.getValue();
String mySignature = (String) oSign.getValue();
String providerType = (String) oProviderType.getValue();
payload=parseMessageSpecific(packetType,pktXML)
ChoiceNetMessageField[] payload = parseMessageSpecific(packetType, pktXML);
Packet packet = new Packet(packetType,myName,mySignature,myType, providerType,payload);
ChoiceNetMessageField[] payload = null;
rendezvousTarget=getChoiceNetMessage(pktXML,"Rendezvous Target")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Rendezvous Target");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
rendezvousTarget=getChoiceNetMessage(pktXML,"Target's Originator Name")
ChoiceNetMessageField rendezvousTarget = getChoiceNetMessage(pktXML,"Target's Originator Name");
acceptedConsiderationFld=getChoiceNetMessage(pktXML,"Accepted Consideration")
ChoiceNetMessageField acceptedConsiderationFld = getChoiceNetMessage(pktXML,"Accepted Consideration");
availableConsiderationFld=getChoiceNetMessage(pktXML,"Available Consideration")
ChoiceNetMessageField availableConsiderationFld = getChoiceNetMessage(pktXML,"Available Consideration");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
considerationTarget=getChoiceNetMessage(pktXML,"Consideration Target")
ChoiceNetMessageField considerationTarget = getChoiceNetMessage(pktXML,"Consideration Target");
serviceName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField serviceName = getChoiceNetMessage(pktXML,"Service Name");
considerationExchMethod=getChoiceNetMessage(pktXML,"Consideration Exchange Method")
ChoiceNetMessageField considerationExchMethod = getChoiceNetMessage(pktXML,"Consideration Exchange Method");
considerationExchValue=getChoiceNetMessage(pktXML,"Consideration Exchange Value")
ChoiceNetMessageField considerationExchValue = getChoiceNetMessage(pktXML,"Consideration Exchange Value");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
transactionNumber=getChoiceNetMessage(pktXML,"Transaction Number")
ChoiceNetMessageField transactionNumber = getChoiceNetMessage(pktXML,"Transaction Number");
String value = (String) transactionNumber.getValue();
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {transactionNumber,token};
token=getChoiceNetMessage(pktXML,"Token")
ChoiceNetMessageField token = getChoiceNetMessage(pktXML,"Token");
tokenID=getChoiceNetMessage(pktXML,"Token ID")
ChoiceNetMessageField tokenID = getChoiceNetMessage(pktXML,"Token ID");
String value = (String) tokenID.getValue();
issuedTo=getChoiceNetMessage(pktXML,"Issued To")
ChoiceNetMessageField issuedTo = getChoiceNetMessage(pktXML,"Issued To");
issuedBy=getChoiceNetMessage(pktXML,"Issued By")
ChoiceNetMessageField issuedBy = getChoiceNetMessage(pktXML,"Issued By");
sName=getChoiceNetMessage(pktXML,"Service Name")
ChoiceNetMessageField sName = getChoiceNetMessage(pktXML,"Service Name");
eTime=getChoiceNetMessage(pktXML,"Expiration Time")
ChoiceNetMessageField eTime = getChoiceNetMessage(pktXML,"Expiration Time");
ChoiceNetMessageField[] tokenPayload = {tokenID, issuedTo, issuedBy, sName, eTime};
advertisement=getChoiceNetMessage(pktXML,"Advertisement")
ChoiceNetMessageField advertisement = getChoiceNetMessage(pktXML,"Advertisement");
token=parseTokenMessage(pktXML)
ChoiceNetMessageField token = parseTokenMessage(pktXML);
ChoiceNetMessageField[] payload = {advertisement,token};
adID=getChoiceNetMessageArray(pktXML,"Advertisement ID")
ChoiceNetMessageField[] adID = getChoiceNetMessageArray(pktXML,"Advertisement ID");
sName=getChoiceNetMessageArray(pktXML,"Service Name")
ChoiceNetMessageField[] sName = getChoiceNetMessageArray(pktXML,"Service Name");
int adSize = adID.length;
int serviceSize = sName.length;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[adSize];
ChoiceNetMessageField[] thisPayload = {adID[i], sName[i]};
ArrayList<ChoiceNetMessageField> queries = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField[] contents;
ChoiceNetMessageField[] queryPayload = new ChoiceNetMessageField[queries.size()];
int i = 0;
ChoiceNetMessageField searchParameter = new ChoiceNetMessageField("Search Parameter", queryPayload, "");
ChoiceNetMessageField[] payload = {searchParameter};
results=getChoiceNetMessage(pktXML,"Results")
ChoiceNetMessageField results = getChoiceNetMessage(pktXML,"Results");
ChoiceNetMessageField[] payload = {results};
operationCode=getChoiceNetMessage(pktXML,"Operation Code")
ChoiceNetMessageField operationCode = getChoiceNetMessage(pktXML,"Operation Code");
nackType=getChoiceNetMessage(pktXML,"NACK Type")
ChoiceNetMessageField nackType = getChoiceNetMessage(pktXML,"NACK Type");
reason=getChoiceNetMessage(pktXML,"Reason")
ChoiceNetMessageField reason = getChoiceNetMessage(pktXML,"Reason");
String value = (String) operationCode.getValue();
ChoiceNetMessageField[] payload = {operationCode,nackType,reason};
URL obj;
HttpURLConnection con;
Gson gson = new Gson();
String json = "";
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
HttpURLConnection con;
json=payload.toString()
String json = payload.toString();
DataOutputStream wr = new DataOutputStream(con.getOutputStream());
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
String result = "";
URL obj = new URL(url);
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
URL obj;
String result;
HttpURLConnection con;
responseCode=con.getResponseCode()
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
					new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
CouchDBResponse cResponse;
response=getRestInterface(url)
String response = getRestInterface(url);
GsonBuilder gb = new GsonBuilder();
gson=gb.create()
Gson gson = gb.create();
reply=gson.fromJson(json,CouchDBResponse.class)
CouchDBResponse reply= gson.fromJson(json, CouchDBResponse.class);
String result = "";
HelloWorld helloWorld = new HelloWorld();
text=helloWorld.helloFromC()
String text = helloWorld.helloFromC();

 Generics pattern public class InternalMessageField was added at revision 9be6d9bdaa9f7a7c6b8f67aa0a39b3b2d5120b55

calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
date=calendar.getTime()
Date date = calendar.getTime();
String newOutput = new Timestamp(date.getTime()).toString()+": "+message+"\n";
FileOutputStream fop = null;
File file = new File(fileName);
contentInBytes=message.getBytes()
byte[] contentInBytes = message.getBytes();
String display = "";
int sum = getOpticalCircuitSwitchCapacity()+getOpticalPacketSwitchCapacity();
int sum = getOpticalCircuitSwitchResidualCapacity()+getOpticalPacketSwitchResidualCapacity();
Scanner sc;
String response = "";
String content = "";
String entityName = Server.myName;
ProvisioningProperty sProp = new ProvisioningProperty("Time Length", "10 minutes");
ProvisioningProperty serviceProps[] = {sProp};
Service service  = new Service("Advertisement Listing", "Listing", "UDPv4", "10.1.0.1:80", "UDPv4", "10.1.0.1:80", serviceProps, "List Service");
advertiserAddr=server.getLocalIpAddress("IP")
String advertiserAddr = server.getLocalIpAddress("IP");
advertiserPort=Integer.parseInt(server.getLocalIpAddress("Port"))
int advertiserPort = Integer.parseInt(server.getLocalIpAddress("Port"));
long moreTime = 600000*2;
Advertisement ad1 = new Advertisement("BitCoin",200,entityName,service,advertiserAddr,advertiserPort,"UDPv4",System.currentTimeMillis()+moreTime,"UDPv4","127.0.0.1:9000");
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
int port = -1;
boolean err = false;
target=sc.nextLine()
String target = sc.nextLine();
ipAddr=sc.nextLine()
String ipAddr = sc.nextLine();
int port = -1;
boolean err = false;
target=sc.nextLine()
String target = sc.nextLine();
fileName=sc.nextLine()
String fileName = sc.nextLine();
method=sc.nextLine()
String method = sc.nextLine();
value=sc.nextLine()
String value = sc.nextLine();
ipAddr=sc.nextLine()
String ipAddr = sc.nextLine();
int port = -1;
boolean err = false;
fileName=sc.nextLine()
String fileName = sc.nextLine();
listingServer=sc.nextLine()
String listingServer = sc.nextLine();
ipAddr=sc.nextLine()
String ipAddr = sc.nextLine();
Scanner sc;
String response = "";
String content = "";
String entityName = Server.myName;
ProvisioningProperty sProp = new ProvisioningProperty("Bandwidth", "500 Mbps");
ProvisioningProperty serviceProps[] = {sProp};
Service service  = new Service("Service Name", "Transit", "UDPv4", "10.1.0.1", "UDPv4", "10.2.0.1", serviceProps, "From RENCI to NCSU");
advertiserAddr=server.getLocalIpAddress("IP")
String advertiserAddr = server.getLocalIpAddress("IP");
advertiserPort=Integer.parseInt(server.getLocalIpAddress("Port"))
int advertiserPort = Integer.parseInt(server.getLocalIpAddress("Port"));
Advertisement ad1 = new Advertisement("Dollars",200,entityName,service,advertiserAddr,advertiserPort,"UDPv4",System.currentTimeMillis()+600000, null, null);
ProviderCLI cli = new ProviderCLI();
Scanner sc = new Scanner(System.in);
int option = -1;
String menu = 
				"1: Send Rendezvous \n" +
						"2: Transfer Contribution \n" +
						"3: Transfer Listing \n" +
						"";
JFrame frame = (JFrame)e.getSource();
result=JOptionPane.showConfirmDialog(frame,"Are you sure you want to exit the application?","Exit Application",JOptionPane.YES_NO_OPTION)
int result = JOptionPane.showConfirmDialog(
						frame,
						"Are you sure you want to exit the application?",
						"Exit Application",
						JOptionPane.YES_NO_OPTION);
ProviderGUI gui = new ProviderGUI();
panelHome=createProviderHomeMenuPanel()
JPanel panelHome = createProviderHomeMenuPanel();
String[] addr;
String ipAddr, portStr, target, message;
int port = -1;
boolean success = true;
exchangeMethod=txtConsiderationMethod.getText()
String exchangeMethod = txtConsiderationMethod.getText();
String exchangeType = addr[0];
String exchangeValue = addr[1];
exchangeAmount=txtConsiderationValue.getText()
String exchangeAmount = txtConsiderationValue.getText();
serviceName=txtConsiderationServiceName.getText()
String serviceName = txtConsiderationServiceName.getText();
returnVal=fc.showOpenDialog(purchasePanel)
int returnVal = fc.showOpenDialog(purchasePanel);
file=fc.getSelectedFile()
File file = fc.getSelectedFile();
tokenID=txtListingTokenID.getText()
String tokenID = txtListingTokenID.getText();
fileName=txtListingFileLocation.getText()
String fileName = txtListingFileLocation.getText();
marketplaceAddr=serverIPAddressTxtFldMktpl.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldMktpl.getText().toString();
sourceLoc=textFieldLocationSourceMktpl.getText().toString()
String sourceLoc = textFieldLocationSourceMktpl.getText().toString();
srcLocType=txtLocationSourceTypeMktpl.getText().toString()
String srcLocType = txtLocationSourceTypeMktpl.getText().toString();
destinationLoc=textFieldLocationDestinationMktpl.getText().toString()
String destinationLoc = textFieldLocationDestinationMktpl.getText().toString();
dstLocType=txtLocationDestinationTypeMktpl.getText().toString()
String dstLocType = txtLocationDestinationTypeMktpl.getText().toString();
cost=textFieldCostMktpl.getText().toString()
String cost = textFieldCostMktpl.getText().toString();
sourceFormat=textFieldFormatSourceMktpl.getText().toString()
String sourceFormat = textFieldFormatSourceMktpl.getText().toString();
srcFormatType=txtFormatSourceTypeMktpl.getText().toString()
String srcFormatType = txtFormatSourceTypeMktpl.getText().toString();
destinationFormat=textFieldFormatDestinationMktpl.getText().toString()
String destinationFormat = textFieldFormatDestinationMktpl.getText().toString();
dstFormatType=txtFormatDestinationTypeMktpl.getText().toString()
String dstFormatType = txtFormatDestinationTypeMktpl.getText().toString();
adID=textFieldAdvID.getText().toString()
String adID = textFieldAdvID.getText().toString();
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=srcLocType.split(",")
String[] srcLocTypeArr = srcLocType.split(",");
dstLocTypeArr=dstLocType.split(",")
String[] dstLocTypeArr = dstLocType.split(",");
srcFormatTypeArr=srcFormatType.split(",")
String[] srcFormatTypeArr = srcFormatType.split(",");
dstFormatTypeArr=dstFormatType.split(",")
String[] dstFormatTypeArr = dstFormatType.split(",");
ServiceRequirement svcReq;
marketplaceAddr=serverIPAddressTxtFldPlanner.getText().toString()
String marketplaceAddr = serverIPAddressTxtFldPlanner.getText().toString();
sourceLoc=textFieldLocationSourcePlanner.getText().toString()
String sourceLoc = textFieldLocationSourcePlanner.getText().toString();
sourceLocType=txtLocationSourceTypePlanner.getText().toString()
String sourceLocType = txtLocationSourceTypePlanner.getText().toString();
destinationLoc=textFieldLocationDestinationPlanner.getText().toString()
String destinationLoc = textFieldLocationDestinationPlanner.getText().toString();
destinationLocType=txtLocationDestinationTypePlanner.getText().toString()
String destinationLocType = txtLocationDestinationTypePlanner.getText().toString();
method=txtCostMethodPlanner.getText().toString()
String method = txtCostMethodPlanner.getText().toString();
amount=textFieldCostPlanner.getText().toString()
String amount = textFieldCostPlanner.getText().toString();
sourceFormat=textFieldFormatSourcePlanner.getText().toString()
String sourceFormat = textFieldFormatSourcePlanner.getText().toString();
sourceFormatType=txtFormatSourceTypePlanner.getText().toString()
String sourceFormatType = txtFormatSourceTypePlanner.getText().toString();
destinationFormat=textFieldFormatDestinationPlanner.getText().toString()
String destinationFormat = textFieldFormatDestinationPlanner.getText().toString();
destinationFormatType=txtFormatDestinationTypePlanner.getText().toString()
String destinationFormatType = txtFormatDestinationTypePlanner.getText().toString();
Cost svcCost = new Cost(method, amount);
gwType=txtUsePlaneGWType.getText()
String gwType = txtUsePlaneGWType.getText();
gwAddr=txtUsePlaneGWAddr.getText()
String gwAddr = txtUsePlaneGWAddr.getText();
clientType=txtUsePlaneClientType.getText()
String clientType = txtUsePlaneClientType.getText();
clientAddr=txtUsePlaneClientAddr.getText()
String clientAddr = txtUsePlaneClientAddr.getText();
token=txtUsePlaneToken.getText()
String token = txtUsePlaneToken.getText();
CardLayout cl = (CardLayout)(cards.getLayout());
JPanel providerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel customerHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel marketplaceHomeMenuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel menuPanel = new JPanel();
JLabel lblMainMenu = new JLabel("Main Menu");
JPanel purchasePanel = new JPanel();
JLabel title = new JLabel("Trigger: Purchase Request");
JLabel lblMarketplaceEconomyPlane = new JLabel("Marketplace Economy Plane Agent Address Type");
JLabel lblMarketplaceIpAddress = new JLabel("Marketplace Economy Plane Agent Address");
JLabel lblListingServiceTarget = new JLabel("Listing Service Target");
JLabel lblRendezvousTarget = new JLabel("Token ID");
JLabel lblServiceAdvertisementLocation = new JLabel("Advertisement Specification");
JScrollPane scroll = new JScrollPane (textAreaListing);
JPanel rendezvousPanel = new JPanel();
JLabel title = new JLabel("Trigger: Rendezvous");
JLabel lblEntityEconomyPlane = new JLabel("Entity Economy Plane Agent Address Type");
JLabel lblIpAddress = new JLabel("Entity Economy Plane Agent Address\n");
JLabel lblRendezvousTarget = new JLabel("Rendezvous Target's Provider Type\n");
JScrollPane scroll = new JScrollPane (textAreaRendezvous);
JPanel considerationPanel = new JPanel();
JLabel title = new JLabel("Trigger: Send Consideration");
JLabel lblProviderEconomyPlane = new JLabel("Provider Economy Plane Agent Address Type");
JLabel lblProviderIpAddress = new JLabel("Provider Economy Plane Agent Address");
JLabel lblConsiderationTarget = new JLabel("Consideration Target");
JLabel lblServiceAdvertisementName = new JLabel("Service Name");
JLabel lblConsiderationMethod = new JLabel("Consideration Method");
JLabel lblConsiderationValue = new JLabel("Consideration Amount");
JScrollPane scroll = new JScrollPane (textAreaConsideration);
JPanel marketplacePanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JLabel lblAdvertisementId_1 = new JLabel("Advertisement ID");
JScrollPane scroll = new JScrollPane(textAreaMktpl);
JPanel plannerPanel = new JPanel();
JLabel lblLocation = new JLabel("Location");
JLabel lblFormat = new JLabel("Format");
JScrollPane scroll = new JScrollPane(textAreaPlanner);
JPanel usePlanePanel = new JPanel();
JLabel title = new JLabel("Trigger: Access Use Plane");
JLabel lblChoicenetGatewayUse = new JLabel("ChoiceNet Gateway Use Plane Agent Type");
JLabel lblChoicenetGatewayUse_1 = new JLabel("ChoiceNet Gateway Use Plane Agent Address");
JLabel lblChuserAddressType = new JLabel("Chuser Use Plane Agent Type");
JLabel lblChuserUsePlane = new JLabel("Chuser Use Plane Agent Address");
JLabel lblToken = new JLabel("Token");
JScrollPane scroll = new JScrollPane (textAreaUsePlane);
String ipAddr = "127.0.0.1:4040";
String addrType = "UDPv4";
String target = "ABC Marketplace";
String targetService = "Marketplace";
String targetServiceName = "Advertisement Listing";
String cMethod = "BitCoin:123456";
String cValue = "USD 200";
String fileNameAd = "/Users/rudechuk/service.xml";
String srcLocationType = "IPv4,IPv4";
String dstLocationType = "IPv4";
String srcLocation = "A,B";
String dstLocation = "B";
message=Logger.display(0)
String message = Logger.display(0);
String argument = "";
int loopCount = 0;
Server server;
String argument = "";
adMgr=AdvertisementManager.getInstance()
AdvertisementManager adMgr = AdvertisementManager.getInstance();
myAd=server.createListingServiceAdvertisement()
Advertisement myAd = server.createListingServiceAdvertisement();
int loop = 0;
portAddress=Integer.parseInt(prop.getProperty("myPortAddress"))
int portAddress = Integer.parseInt(prop.getProperty("myPortAddress"));
clientIPAddress=prop.getProperty("providerAddress")
String clientIPAddress = prop.getProperty("providerAddress");
configmyName=prop.getProperty("myName")
String configmyName  = prop.getProperty("myName");
HelloWorld helloWorld = new HelloWorld();
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Gson gson = new Gson();
json=gson.toJson(svcReq)
String json =  gson.toJson(svcReq);
ChoiceNetMessageField data =  new ChoiceNetMessageField("Planner Service Request", json, "");
ChoiceNetMessageField payload[] = {data};
Packet packet = new Packet(PacketType.PLANNER_REQUEST,myName,"",myType, providerType,payload);
String[] parsedContent;
String marketplaceAddress = parsedContent[0];
marketplacePort=Integer.parseInt(parsedContent[1])
int marketplacePort = Integer.parseInt(parsedContent[1]);
Packet packet;
ArrayList<ChoiceNetMessageField> list = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField searchedContent;
ChoiceNetMessageField dataPayload[] = new ChoiceNetMessageField[list.size()];
ChoiceNetMessageField data = new ChoiceNetMessageField("Search Parameter", dataPayload, "");
ChoiceNetMessageField payload[] = {data};
Scanner sc;
String response = "";
String content = "";
ad1=createListingServiceAdvertisement()
Advertisement ad1 = createListingServiceAdvertisement();
String response = "";
Service listingService  = new Service("Advertisement Listing", "Listing", "List Service");
long moreTime = 600000*2;
port=Integer.parseInt(getLocalIpAddress("Port"))
int port = Integer.parseInt(getLocalIpAddress("Port"));
Advertisement myAd = new Advertisement("Free", 0, myName, listingService, providerAddress, port, "UDPv4", System.currentTimeMillis()+moreTime, "UDPv4", providerAddress+":"+port);
String query = "/_design/marketplace/_view/by_id?key=\""+purchaseID+"\"";
String url = marketplaceRESTAPI+query;
response=couchDBsocket.getRestInterface(url)
String response = couchDBsocket.getRestInterface(url);
cResponse=CouchDBResponse.parseJson(response)
CouchDBResponse cResponse = CouchDBResponse.parseJson(response);
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", purchaseID, "");
ChoiceNetMessageField payload[] = {data};
String advertiserAddress= "";
int advertiserPort = -1;
selectedAdv=cResponse.getRows().getFirst().getValue()
AdvertisementDisplay selectedAdv = cResponse.getRows().getFirst().getValue();
String newData[] = {"Status", "Failed", "Reason", ""};
String reason = "no advertisement matches the requested product: "+purchaseID;
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
Packet packet;
String id = myName;
ChoiceNetMessageField data = new ChoiceNetMessageField("Purchase_ID", "", "");
ChoiceNetMessageField data1 = new ChoiceNetMessageField("Token", "", "");
ChoiceNetMessageField payload[] = {data, data1};
String reason = "";
myPurchase=purchaseMgr.getPurchase(token)
Purchase myPurchase = purchaseMgr.getPurchase(token);
purchaseType=myPurchase.getStatus()
PurchaseType purchaseType = myPurchase.getStatus();
purchaseID=myPurchase.getPurchaseID()
String purchaseID = myPurchase.getPurchaseID();
advertiserAddress=myPurchase.getAdvertiserAddress()
String advertiserAddress= myPurchase.getAdvertiserAddress();
advertiserPort=Integer.parseInt(myPurchase.getAdvertiserPortAddress())
int advertiserPort = Integer.parseInt(myPurchase.getAdvertiserPortAddress());
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
ChoiceNetMessageField data2 = new ChoiceNetMessageField("Reason", reason, "");
String result = "ID\tStatus\tToken\n\n";
String result = "ID\tStatus\tToken\n\n";
ChoiceNetMessageField rendezvousTarget = new ChoiceNetMessageField("Rendezvous Target", target, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] payload = {rendezvousTarget,acceptedConsiderationFld,availableConsiderationFld};
Packet packet = new Packet(PacketType.RENDEZVOUS_REQUEST,myName,"",myType, providerType,payload);
transcactionNum=transcactionMgr.createAndSaveTransaction(cTarget,sName)
int transcactionNum = transcactionMgr.createAndSaveTransaction(cTarget, sName);
ChoiceNetMessageField transactionNumber = new ChoiceNetMessageField("Transaction Number", transcactionNum, "");
ChoiceNetMessageField considerationTarget = new ChoiceNetMessageField("Consideration Target", cTarget, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", sName, "");
ChoiceNetMessageField considerationExchMethod = new ChoiceNetMessageField("Consideration Exchange Method", exchangeMethod, "");
ChoiceNetMessageField considerationExchValue = new ChoiceNetMessageField("Consideration Exchange Value", exchangeValue, "");
ChoiceNetMessageField[] payload = {transactionNumber,considerationTarget,serviceName,considerationExchMethod,considerationExchValue};
Packet packet = new Packet(PacketType.TRANSFER_CONSIDERATION,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
advertisementXML=readFile(fileName)
String advertisementXML = readFile(fileName);
String message = "";
String myAdXML = "<![CDATA["+advertisementXML+"\n]]>";
ChoiceNetMessageField advertisement = new ChoiceNetMessageField("Advertisement", myAdXML, "");
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
tempToken=TokenManager.getSingleToken(creationTimeID)
Token tempToken = TokenManager.getSingleToken(creationTimeID);
issuedTo=tempToken.getIssuedTo()
String issuedTo = tempToken.getIssuedTo();
eTime=tempToken.getExpirationTime()
Long eTime = tempToken.getExpirationTime();
tokenType=tempToken.getServiceName()
String tokenType = tempToken.getServiceName();
token=cnLibrary.createToken(issuedTo,issuedBy,tokenType,eTime,false)
ChoiceNetMessageField token = cnLibrary.createToken(issuedTo, issuedBy,tokenType,eTime, false);
ChoiceNetMessageField[] payload = {advertisement,token};
submittedAds=cnLibrary.getAdvertisementsFromXML(fileName,"File")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(fileName, "File");
Packet packet = new Packet(PacketType.LISTING_REQUEST,myName,"",myType, providerType,payload);
String result = "";
File file = new File(pathname);
StringBuilder fileContents = new StringBuilder((int)file.length());
Scanner scanner = new Scanner(file);
lineSeparator=System.getProperty("line.separator")
String lineSeparator = System.getProperty("line.separator");
ChoiceNetMessageField userInfo = new ChoiceNetMessageField(clientType, clientAddr, "");
ChoiceNetMessageField token = new ChoiceNetMessageField("Token", myToken, "");
ChoiceNetMessageField[] payload = {userInfo,token};
Packet packet = new Packet(PacketType.USE_ATTEMPT ,myName,"",myType, providerType,payload);
pktXML=cnLibrary.createPacketXML(packet)
String pktXML = cnLibrary.createPacketXML(packet);
String pktXML = (String) inFromClient.readObject();
packet=cnLibrary.convertXMLtoPacket(pktXML)
Packet packet = cnLibrary.convertXMLtoPacket(pktXML);
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField reqParameters = payload[0];
String content = (String) reqParameters.getValue();
p=Runtime.getRuntime().exec("./localchoicenet")
Process p = Runtime.getRuntime().exec("./localchoicenet");
String message = "";
boolean testing = true;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", message, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", "Planner Request", "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", 1, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", message, "");
ChoiceNetMessageField[] myPayload = {type,opCode,reason};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String results = (String) payload[0].getValue();
String message = "";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField searchparameters = payload[0];
queryPayload=determineQueryType(payload)
InternalMessageField[] queryPayload = determineQueryType(payload);
String attr, queryValue, adID, query, response = "";
String queryField = "";
boolean isRange = false;
int i = 0;
CouchDBResponse cResponse;
Map<String, String> responseCollection = new HashMap<String, String>();
String url = Server.marketplaceRESTAPI+query;
String results = "";
String url = Server.marketplaceRESTAPI+query;
ChoiceNetMessageField resultsField = new ChoiceNetMessageField("Results", results, "");
ChoiceNetMessageField[] myPayload = {resultsField};
ArrayList<InternalMessageField> list = new ArrayList<InternalMessageField>();
String sourceLoc = "";
String destinationLoc = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String cost = "";
String attr = "";
InternalMessageField searchedContent;
srcLocArr=sourceLoc.split(",")
String[] srcLocArr = sourceLoc.split(",");
dstLocArr=destinationLoc.split(",")
String[] dstLocArr = destinationLoc.split(",");
srcFormatArr=sourceFormat.split(",")
String[] srcFormatArr = sourceFormat.split(",");
dstFormatArr=destinationFormat.split(",")
String[] dstFormatArr = destinationFormat.split(",");
srcLocTypeArr=sourceLocType.split(",")
String[] srcLocTypeArr = sourceLocType.split(",");
dstLocTypeArr=destinationLocType.split(",")
String[] dstLocTypeArr = destinationLocType.split(",");
srcFormatTypeArr=sourceFormatType.split(",")
String[] srcFormatTypeArr = sourceFormatType.split(",");
dstFormatTypeArr=destinationFormatType.split(",")
String[] dstFormatTypeArr = destinationFormatType.split(",");
int i = 0;
int j = 0;
int k = 0;
int l = 0;
boolean operate;
size=list.size()
int size = list.size();
InternalMessageField payload[] = new InternalMessageField[size];
InternalMessageField searchedContent = null;
String data = "";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String parsedResults = (String) payload[0].getValue();
results=parsedResults.split(jsonSeparator)
String[] results = parsedResults.split(jsonSeparator);
String message = "";
CouchDBResponse cResponse;
AdvertisementDisplay myAd;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String handleID = (String) payload[0].getValue();
String usePlanePortal = (String) payload[1].getValue();
String usePlanePlugIn = (String) payload[2].getValue();
String message = "Handle ID: "+handleID+" Use Plane Portal: "+usePlanePortal+" Use Plane PlugIn: "+usePlanePlugIn;
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField token = payload[0];
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField nackType = payload[0];
ChoiceNetMessageField opCode = payload[1];
ChoiceNetMessageField reason = payload[2];
String message = (String) nackType.getValue()+": Operation Code="+(Integer)opCode.getValue()+" due to: "+(String) reason.getValue();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField rendezvousTarget = (ChoiceNetMessageField) payload[0];
String targetedProvider = (String) rendezvousTarget.getValue();
String targetName = (String) packet.getOriginatorName().getValue();
ChoiceNetMessageField targetOriginatorName = new ChoiceNetMessageField("Target's Originator Name", targetName, "");
ChoiceNetMessageField acceptedConsiderationFld = new ChoiceNetMessageField("Accepted Consideration", acceptedConsideration, "");
ChoiceNetMessageField availableConsiderationFld = new ChoiceNetMessageField("Available Consideration", availableConsideration, "");
ChoiceNetMessageField[] myPayload = {targetOriginatorName,acceptedConsiderationFld,availableConsiderationFld};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[0].getValue();
String originatorName = (String) packet.getOriginatorName().getValue();
String originatorType = (String) packet.getOriginatorProviderType().getValue();
String acceptedConsideration = (String) payload[1].getValue();
String availableConsideration = (String) payload[2].getValue();
DiscoveredEntities entity = new DiscoveredEntities(originatorName, originatorType, clientIPAddress.toString(), clientPort,acceptedConsideration, availableConsideration);
String id = clientIPAddress.toString()+":"+clientPort;
String message = "Entity: "+originatorName+" has been included in the Known Entity list";
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
String intendedEntityName = (String) payload[1].getValue();
String targetConsiderationMethod = (String) payload[3].getValue();
Packet newPacket;
String sName = (String) payload[2].getValue();
int tNumber = (Integer) payload[0].getValue();
long eTime = 5;
String originatorName = (String) packet.getOriginatorName().getValue();
String tokenType = "UNKNOWN";
token=cnLibrary.createToken(originatorName,myName,tokenType,eTime,true)
ChoiceNetMessageField token = cnLibrary.createToken(originatorName, myName, tokenType, eTime, true);
ChoiceNetMessageField transactionNum = new ChoiceNetMessageField("Transaction Number", tNumber, "");
ChoiceNetMessageField gatewayCredentials = new ChoiceNetMessageField("ChoiceNet Gateway Credentials", "", "");
ChoiceNetMessageField[] newPayload = {transactionNum,token,gatewayCredentials};
InetAddress providerIPAddress = clientIPAddress;
int providerPort = clientPort;
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
usePlaneAddrType=myAd.getUsePlaneType()
String usePlaneAddrType = myAd.getUsePlaneType();
usePlaneAddr=myAd.getUsePlaneAddress()
String usePlaneAddr = myAd.getUsePlaneAddress();
ChoiceNetMessageField gatewayAddrType = new ChoiceNetMessageField("Addressing Scheme", usePlaneAddrType, "");
ChoiceNetMessageField gatewayAddr = new ChoiceNetMessageField("Addressing Value", usePlaneAddr, "");
ChoiceNetMessageField[] info = {gatewayAddrType,gatewayAddr};
addr=usePlaneAddr.split(":")
String[] addr = usePlaneAddr.split(":");
ChoiceNetMessageField[] signalingPayload = {token};
ChoiceNetMessageField type, opCode, reason;
String reasonVal;
int opCodeVal;
ChoiceNetMessageField[] newPayload = {type,opCode,reason};
String reasonVal = "Consideration Target: {"+intendedEntityName+"} does not match this entity's name";
ChoiceNetMessageField type = new ChoiceNetMessageField("NACK Type", "Transfer Consideration", "");
ChoiceNetMessageField opCode = new ChoiceNetMessageField("Operation Code", 3, "");
ChoiceNetMessageField reason = new ChoiceNetMessageField("Reason", reasonVal, "");
ChoiceNetMessageField[] newPayload = {type,opCode,reason};
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField transactionNum = payload[0];
ChoiceNetMessageField token = payload[1];
int tNum = (Integer) transactionNum.getValue();
key=Integer.toString(tNum)
String key = Integer.toString(tNum);
myToken=cnLibrary.extractTokenContent(token)
Token myToken = cnLibrary.extractTokenContent(token);
creationTime=System.currentTimeMillis()
long creationTime = System.currentTimeMillis();
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField advertisement = payload[0];
ChoiceNetMessageField token = payload[1];
String intendedEntityName = (String) payload[2].getValue();
String adXML = (String) advertisement.getValue();
String sName = (String) payload[3].getValue();
long expirationTime = (Long) payload[4].getValue();
currTime=System.currentTimeMillis()
long currTime = System.currentTimeMillis();
submittedAds=cnLibrary.getAdvertisementsFromXML(adXML,"String")
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<Advertisement> submittedAds = cnLibrary.getAdvertisementsFromXML(adXML, "String");
ArrayList<ChoiceNetMessageField> tPayload = new ArrayList<ChoiceNetMessageField>();
adServiceName=myAd.getService().getName()
String adServiceName = myAd.getService().getName();
queryValue=adServiceName.replaceAll(" ","%20")
String queryValue = adServiceName.replaceAll(" ", "%20");
String query = "/_design/marketplace/_view/byServiceName?key=[\""+queryValue+"\"]";
String url = Server.marketplaceRESTAPI+query;
cResponse=couchDBsocket.retrieveCouchObject(url)
CouchDBResponse cResponse = couchDBsocket.retrieveCouchObject(url);
adID=cResponse.getRows().getLast().getId()
String adID = cResponse.getRows().getLast().getId();
ChoiceNetMessageField advertisementID = new ChoiceNetMessageField("Advertisement ID", adID, "");
ChoiceNetMessageField serviceName = new ChoiceNetMessageField("Service Name", adServiceName, "");
ChoiceNetMessageField[] thisPayload = {advertisementID, serviceName};
int i = 0;
ChoiceNetMessageField[] newPayload = new ChoiceNetMessageField[tPayload.size()];
Packet newPacket = new Packet(PacketType.LISTING_CONFIRMATION,myName,"",myType,providerType,newPayload);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
int size = payload.length;
ChoiceNetMessageField advertisedService = payload[i];
ChoiceNetMessageField[] value = (ChoiceNetMessageField[]) payload[i].getValue();
String sName = (String) value[1].getValue();
String adID = (String) value[0].getValue();
myAd=adMgr.getAdvertisementByName(sName)
Advertisement myAd = adMgr.getAdvertisementByName(sName);
ChoiceNetMessageField[] payload = (ChoiceNetMessageField[]) packet.getMessageSpecific().getValue();
ChoiceNetMessageField userAddrInfo = payload[0];
ChoiceNetMessageField token = payload[1];
String tokenID = (String) token.getValue();
tID=Integer.parseInt(tokenID)
int tID = Integer.parseInt(tokenID);
creationTimeID=tokenMgr.getTokenCreationTime(tID)
long creationTimeID = tokenMgr.getTokenCreationTime(tID);
myToken=TokenManager.getSingleToken(creationTimeID)
Token myToken = TokenManager.getSingleToken(creationTimeID);
addrType=userAddrInfo.getAttributeName()
String addrType = userAddrInfo.getAttributeName();
String addrName = (String) userAddrInfo.getValue();
String command = "";
Random generator = new Random();
int low = 49152;
int high = 65536;
int generatedPort = generator.nextInt(high-low) + low;
String portal = "rtsp://"+Server.providerAddress+":"+generatedPort+"/";
String portalHelpURL = "http://www4.ncsu.edu/~rnudechu/files/GENI/EPB/VLC/help.html";
String plugInHelpURL = "http://www.vlc.com";
ChoiceNetMessageField handleID = new ChoiceNetMessageField("Handle ID", System.currentTimeMillis(), "");
ChoiceNetMessageField usePlanePortal = new ChoiceNetMessageField("Use Plane Portal", portal, portalHelpURL);
ChoiceNetMessageField usePlanePlugIn = new ChoiceNetMessageField("Use Plane Plugin", "Download VLC Player", plugInHelpURL);
ChoiceNetMessageField[] newPayload = {handleID,usePlanePortal,usePlanePlugIn};
Packet newPacket = new Packet(PacketType.ACK_USE_ATTEMPT,myName,"",myType,providerType,newPayload);
String name = (String) packet.getOriginatorName().getValue();
String oType = (String) packet.getOriginatorType().getValue();
String pType = (String) packet.getOriginatorProviderType().getValue();
packetType=packet.getActionCode()
PacketType packetType = packet.getActionCode();
Packet packageOut = new Packet(packetType,name,"",oType,pType,data);

 Generics pattern new ArrayList<InternalMessageField>() was added at revision 9be6d9bdaa9f7a7c6b8f67aa0a39b3b2d5120b55

ArrayList<Advertisement> result = new ArrayList<Advertisement>();
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = null;
File fXmlFile = new File(filename);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
int numFormat = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, advertiserName, serviceName, serviceType, 
			serviceDescription, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue;
ProvisioningProperty pProp;
ArrayList<ProvisioningProperty> serviceProperties;
ArrayList<ProvisioningProperty> serviceProperties;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
ProvisioningProperty sProp[] = new ProvisioningProperty[serviceProperties.size()];
Cost myCost = new Cost(priceMethod, pValue);
Service myService = new Service(serviceName, serviceType, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue, srcFormatScheme, srcFormatValue, dstFormatScheme, dstFormatValue, sProp, serviceDescription);
Advertisement myAd = new Advertisement(priceMethod, priceValue, providerID, myService, advertiserAddress, advertiserPortAddress, portalType, 0,"UNKNOWN","UNKNOWN");
String results = "";
Element element;
myNode=list.item(index)
Node myNode = list.item(index);
ChoiceNetMessageField advertisement = null;
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList, thisList = null;
Node myNode = null;
Element myElement = null;
NamedNodeMap attributes = null;
int priceValue = 0;
int numLoc = 0;
String type, addressType = "", portalType = "", location = "";
String priceMethod, pValue, providerID, provisioningParameters, purchasePortal, usePlaneAddressValue, advertiserName, serviceName, serviceType, 
			serviceDescription, propertyName, propertyValue, srcAddressScheme, srcAddressValue, dstAddressScheme, dstAddressValue;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
String printOut = "Advertisement \n" +
							"Provider ID: "+providerID+"\n" +
							"Provisioning Parameters: "+provisioningParameters+"\n" +
							"Service Name: "+serviceName+"\n";
int advertiserPortAddress = -1;
String advertiserAddress = "";
addr=purchasePortal.split(":")
String[] addr = purchasePortal.split(":");
File fXmlFile = new File(filename);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
doc=dBuilder.parse(fXmlFile)
Document doc = dBuilder.parse(fXmlFile);
nList=doc.getElementsByTagName("advertisement")
NodeList nList = doc.getElementsByTagName("advertisement");
advertisementCount=nList.getLength()
int advertisementCount = nList.getLength();
NodeList myList = null;
Node myNode = null;
Element myElement = null;
attributes=myNode.getAttributes()
NamedNodeMap attributes = myNode.getAttributes();
theAttribute=attributes.item(a)
Node theAttribute = attributes.item(a);
docFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
docBuilder=docFactory.newDocumentBuilder()
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
doc=docBuilder.newDocument()
Document doc = docBuilder.newDocument();
rootElement=doc.createElement("choicenetmessage")
Element rootElement = doc.createElement("choicenetmessage");
Element result;
transformerFactory=TransformerFactory.newInstance()
TransformerFactory transformerFactory = TransformerFactory.newInstance();
transformer=transformerFactory.newTransformer()
Transformer transformer = transformerFactory.newTransformer();
DOMSource source = new DOMSource(doc);
StreamResult sResult = new StreamResult(new File("C:\\file.xml"));
String result = "";
field=doc.createElement("field")
Element field = doc.createElement("field");
value=doc.createElement("value")
Element value = doc.createElement("value");
String myValue = "UNKNOWN";
int temp = (Integer) pkt.getValue();
Element result;
ChoiceNetMessageField message = new ChoiceNetMessageField(attributeName, "", "");
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
int fieldPresence = 0;
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
ArrayList<ChoiceNetMessageField> storage = new ArrayList<ChoiceNetMessageField>();
ChoiceNetMessageField message = null;
ChoiceNetMessageField[] payload = null;
File xml = new File(packetXML);
dbFactory=DocumentBuilderFactory.newInstance()
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
dBuilder=dbFactory.newDocumentBuilder()
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
doc=dBuilder.parse(xml)
Document doc = dBuilder.parse(xml);
nList=doc.getElementsByTagName("field")
NodeList nList = doc.getElementsByTagName("field");
nNode=nList.item(temp)
Node nNode = nList.item(temp);
Element eElement = (Element) nNode;
url=eElement.getAttribute("url")
String url = eElement.getAttribute("url");
value=eElement.getElementsByTagName("value").item(0).getTextContent()
String value = eElement.getElementsByTagName("value").item(0).getTextContent();
int i = 0;
int numFields = 0;
int size = iniSize;
ChoiceNetMessageField[] payload = new ChoiceNetMessageField[size];
ChoiceNetMessageField[] newPayload;
ChoiceNetMessageField message = new ChoiceNetMessageField("", "", "");
String attributeName = "";
String url = "";
nNode=nList.item(i)
Node nNode = nList.item(i);
Element eElement = (Element) nNode;
myList=eElement.getElementsByTagName("field")
NodeList myList = eElement.getElementsByTagName("field");
myNode=myList.item(j)
Node myNode = myList.item(j);
Element myElement = (Element) myNode;
childNodeList=nNode.getChildNodes()
NodeList childNodeList = nNode.getChildNodes();
value=nNode.getTextContent()
String value = nNode.getTextContent();
value=createChoiceNetMessagePayload(childNodeList,childNodeList.getLength() - 1)
ChoiceNetMessageField[] value = createChoiceNetMessagePayload(childNodeList, childNodeList.getLength()-1);
TestUtility tu = new TestUtility();
adArray=tu.getAdvertisementsFromXML("test.xml","File")
ArrayList<Advertisement> adArray = tu.getAdvertisementsFromXML("test.xml", "File");
ArrayList<Advertisement> adArray = tu.getAdvertisementsFromXML("test.xml", "File");

 Generics pattern new ArrayList<Advertisement>() was added at revision 9be6d9bdaa9f7a7c6b8f67aa0a39b3b2d5120b55


 Generics pattern ArrayList<ProvisioningProperty> serviceProperties; was added at revision 9be6d9bdaa9f7a7c6b8f67aa0a39b3b2d5120b55


 Generics pattern new ArrayList<ProvisioningProperty>() was added at revision 9be6d9bdaa9f7a7c6b8f67aa0a39b3b2d5120b55


 Generics pattern ArrayList<Advertisement> adArray = tu.getAdvertisementsFromXML("test.xml", "File"); was added at revision 9be6d9bdaa9f7a7c6b8f67aa0a39b3b2d5120b55

totalTime=items.get(id).getExpirationTime()
long totalTime = items.get(id).getExpirationTime();
eTime=items.get(id).getExpirationTime()
long eTime = items.get(id).getExpirationTime();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
String result = "#\tToken ID\tIssued By\tService Name\n";
int count = 1;
myToken=entry.getValue()
Token myToken = entry.getValue();
DecimalFormat df = new DecimalFormat("#######");
seqNumString=df.format((Math.random() * 1000000))
String seqNumString = df.format((Math.random()*1000000));
result=Integer.parseInt(seqNumString)
int result = Integer.parseInt(seqNumString);
Transaction seqNum = new Transaction(result, target, serviceID);
int size = args.length;
String marketplaceAddr = args[0];
String sourceLoc = "";
String destinationLoc = "";
String cost = "";
String sourceFormat = "";
String destinationFormat = "";
String sourceLocType = "";
String destinationLocType = "";
String sourceFormatType = "";
String destinationFormatType = "";
String adID = "";
String[] parseContent;
String argument;
String warning = "Program requires a marketplace address and atleast one key/value pair\n" +
					"Available keys={srcLoc, srcLocType, dstLoc, dstLocType, srcFormat, srcFormatType, dstFormat, dstFormatType, cost, adID}\n" +
					"Search value is separated from keys with an equal (=) sign\n" +
					"Search values containing a space should be replaced with an underscore.\n" +
					"Results will be saved in a marketplace.response file\n\n" +
					"Syntax: java -jar UserMarketplace.jar <marketplace_address> <key=value> [key=value]\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0\n" +
					"Example: java -jar UserMarketplaceCLI.jar 127.0.0.1:4040 srcLoc=10.0.0.0 dstLoc=20.0.0.0";

Diff of 9be6d9bdaa9f7a7c6b8f67aa0a39b3b2d5120b55 and 3448798d92ac2836d8643eb7f7ddbf040b07a1e0:
	--> Added type argument methods = 22
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 16
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 14
	--> recency = months
	--> Added class instantiations = 31
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 9be6d9bdaa9f7a7c6b8f67aa0a39b3b2d5120b55 to 3448798d92ac2836d8643eb7f7ddbf040b07a1e0

************Analysis complete************
Added generics to repository ChoiceNet = 52

Rob Udechukwu added type argument method count = 22
	--> recency = year
Rob Udechukwu added wildcard count = 0
	--> recency = null
Rob Udechukwu added type declaration count = 16
	--> recency = year
Rob Udechukwu added type parameter method count = 0
	--> recency = null
Rob Udechukwu added type parameter field count = 0
	--> recency = null
Rob Udechukwu added diamond count = 0
	--> recency = null
Rob Udechukwu added method invocation count = 0
	--> recency = null
Rob Udechukwu added implicit method invocation count = 14
	--> recency = months
Rob Udechukwu added class instantiation count = 31
	--> recency = year
Rob Udechukwu added nested count = 0
	--> recency = null
Rob Udechukwu added bounds count = 0
	--> recency = null
File copied successfully!
