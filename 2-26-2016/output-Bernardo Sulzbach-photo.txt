photo -- mafagafogigante -- Bernardo Sulzbach
https://github.com/mafagafogigante/photo.git
git clone https://github.com/mafagafogigante/photo.git
.\photo\
.\photo\.git
0
Project cloned!
Bernardo Sulzbach is responsible for commit 8c38df43edd8bd0792fea2e82c565ce4a78afc60
Bernardo Sulzbach is responsible for commit 76441e997ba35425708503b396470bcf2e86d91c
Bernardo Sulzbach is responsible for commit bf2e5afe67edf5c3a323a74408beab592c1fb776
Bernardo Sulzbach is responsible for commit a5160b73df533f9f2594503a5289b0963e2bf7b3
Bernardo Sulzbach is responsible for commit 8dc2e678169c40725a2cdfa5b6b8ec57f4576f41
Bernardo Sulzbach is responsible for commit da0fb15b2984eb92c23fba16a51a89183f32e15f
Bernardo Sulzbach is responsible for commit aedc548addf09c9fdc9d87860b3bf5493df4fc53
Bernardo Sulzbach is responsible for commit 5c114852522b48d2742ff0380caaa7926908d1b1
Bernardo Sulzbach is responsible for commit 8432a738fe9ae7eb7fcab3e058ba568989f90725
Bernardo Sulzbach is responsible for commit 923b6131a23f89405b0d6de3c90daa2848a7b518
Bernardo Sulzbach is responsible for commit 26abc09473592bbabe8c81be7531e0260d3b3542
Bernardo Sulzbach is responsible for commit e005d3ecdec23cd9bfea065ced3322a33b35fec0
Bernardo Sulzbach is responsible for commit 87b507ead0e3e0285f12901475f934590f537909
Bernardo Sulzbach is responsible for commit f860ab192588bfbc22a3371c731011b129639925
Added Dcci.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.

 ************ ANALYZING FOR USAGE PATTERN ADDITION ************


****Parsing for addition at revision 8c38df43edd8bd0792fea2e82c565ce4a78afc60****

Added Dcci.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
result=getDestinationBufferedImage(original)
BufferedImage result = getDestinationBufferedImage(original);
UnderlyingArray underlyingArray = new UnderlyingArray(result);
int width = bufferedImage.getWidth() * 2 - 1;
int height = bufferedImage.getHeight() * 2 - 1;
BufferedImage destination = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
g2=destination.createGraphics()
Graphics2D g2 = destination.createGraphics();
int differenceSum = 0;
int strength = 0;
int strength = 0;
shift=getShiftForChannel(channel)
final int shift = getShiftForChannel(channel);
int shiftedValue = value << shift;
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateUpRightDiagonalStrength(array,x,y)
int d1 = evaluateUpRightDiagonalStrength(array, x, y);
d2=evaluateDownRightDiagonalStrength(array,x,y)
int d2 = evaluateDownRightDiagonalStrength(array, x, y);
final double w1 = 1 / (1 + Math.pow(d1, 5));
final double w2 = 1 / (1 + Math.pow(d2, 5));
final double downRightWeight = w1 / (w1 + w2);
final double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(array,x,y)
int[] sourceRgb = getDownRightRGB(array, x, y);
sourceRgb=getUpRightRGB(array,x,y)
int[] sourceRgb = getUpRightRGB(array, x, y);
upRightRGB=getUpRightRGB(array,x,y)
int[] upRightRGB = getUpRightRGB(array, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(array,x,y)
int[] downRightRGB = getDownRightRGB(array, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(array,x,y)
int d1 = evaluateHorizontalWeight(array, x, y);
d2=evaluateVerticalWeight(array,x,y)
int d2 = evaluateVerticalWeight(array, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(array,x,y)
int[] source = getVerticalRGB(array, x, y);
source=getHorizontalRGB(array,x,y)
int[] source = getHorizontalRGB(array, x, y);
verticalRGB=getVerticalRGB(array,x,y)
int[] verticalRGB = getVerticalRGB(array, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(array,x,y)
int[] horizontalRGB = getHorizontalRGB(array, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,vWeight,hWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, vWeight, hWeight);
int weight = 0;
int weight = 0;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
String filename = "single-pixel.png";
inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)
InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);
bufferedImage=ImageIO.read(inputStream)
BufferedImage bufferedImage = ImageIO.read(inputStream);
scaledImage=Dcci.scale(bufferedImage)
BufferedImage scaledImage = Dcci.scale(bufferedImage);

Diff of 8c38df43edd8bd0792fea2e82c565ce4a78afc60 and 76441e997ba35425708503b396470bcf2e86d91c:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 8c38df43edd8bd0792fea2e82c565ce4a78afc60 to 76441e997ba35425708503b396470bcf2e86d91c


****Parsing for addition at revision 76441e997ba35425708503b396470bcf2e86d91c****

Added Dcci.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
result=getDestinationBufferedImage(original)
BufferedImage result = getDestinationBufferedImage(original);
UnderlyingArray underlyingArray = new UnderlyingArray(result);
int width = bufferedImage.getWidth() * 2 - 1;
int height = bufferedImage.getHeight() * 2 - 1;
BufferedImage destination = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
g2=destination.createGraphics()
Graphics2D g2 = destination.createGraphics();
int differenceSum = 0;
int strength = 0;
int strength = 0;
shift=getShiftForChannel(channel)
final int shift = getShiftForChannel(channel);
int shiftedValue = value << shift;
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateUpRightDiagonalStrength(array,x,y)
int d1 = evaluateUpRightDiagonalStrength(array, x, y);
d2=evaluateDownRightDiagonalStrength(array,x,y)
int d2 = evaluateDownRightDiagonalStrength(array, x, y);
final double w1 = 1 / (1 + Math.pow(d1, 5));
final double w2 = 1 / (1 + Math.pow(d2, 5));
final double downRightWeight = w1 / (w1 + w2);
final double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(array,x,y)
int[] sourceRgb = getDownRightRGB(array, x, y);
sourceRgb=getUpRightRGB(array,x,y)
int[] sourceRgb = getUpRightRGB(array, x, y);
upRightRGB=getUpRightRGB(array,x,y)
int[] upRightRGB = getUpRightRGB(array, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(array,x,y)
int[] downRightRGB = getDownRightRGB(array, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(array,x,y)
int d1 = evaluateHorizontalWeight(array, x, y);
d2=evaluateVerticalWeight(array,x,y)
int d2 = evaluateVerticalWeight(array, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(array,x,y)
int[] source = getVerticalRGB(array, x, y);
source=getHorizontalRGB(array,x,y)
int[] source = getHorizontalRGB(array, x, y);
verticalRGB=getVerticalRGB(array,x,y)
int[] verticalRGB = getVerticalRGB(array, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(array,x,y)
int[] horizontalRGB = getHorizontalRGB(array, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,vWeight,hWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, vWeight, hWeight);
int weight = 0;
int weight = 0;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
String filename = "single-pixel.png";
inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)
InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);
bufferedImage=ImageIO.read(inputStream)
BufferedImage bufferedImage = ImageIO.read(inputStream);
scaledImage=Dcci.scale(bufferedImage)
BufferedImage scaledImage = Dcci.scale(bufferedImage);

Diff of 76441e997ba35425708503b396470bcf2e86d91c and bf2e5afe67edf5c3a323a74408beab592c1fb776:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 76441e997ba35425708503b396470bcf2e86d91c to bf2e5afe67edf5c3a323a74408beab592c1fb776


****Parsing for addition at revision bf2e5afe67edf5c3a323a74408beab592c1fb776****

Added Dcci.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
result=getDestinationBufferedImage(original)
BufferedImage result = getDestinationBufferedImage(original);
UnderlyingArray underlyingArray = new UnderlyingArray(result);
int width = bufferedImage.getWidth() * 2 - 1;
int height = bufferedImage.getHeight() * 2 - 1;
BufferedImage destination = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
g2=destination.createGraphics()
Graphics2D g2 = destination.createGraphics();
int differenceSum = 0;
int strength = 0;
int strength = 0;
shift=getShiftForChannel(channel)
final int shift = getShiftForChannel(channel);
int shiftedValue = value << shift;
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateUpRightDiagonalStrength(array,x,y)
int d1 = evaluateUpRightDiagonalStrength(array, x, y);
d2=evaluateDownRightDiagonalStrength(array,x,y)
int d2 = evaluateDownRightDiagonalStrength(array, x, y);
final double w1 = 1 / (1 + Math.pow(d1, 5));
final double w2 = 1 / (1 + Math.pow(d2, 5));
final double downRightWeight = w1 / (w1 + w2);
final double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(array,x,y)
int[] sourceRgb = getDownRightRGB(array, x, y);
sourceRgb=getUpRightRGB(array,x,y)
int[] sourceRgb = getUpRightRGB(array, x, y);
upRightRGB=getUpRightRGB(array,x,y)
int[] upRightRGB = getUpRightRGB(array, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(array,x,y)
int[] downRightRGB = getDownRightRGB(array, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(array,x,y)
int d1 = evaluateHorizontalWeight(array, x, y);
d2=evaluateVerticalWeight(array,x,y)
int d2 = evaluateVerticalWeight(array, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(array,x,y)
int[] source = getVerticalRGB(array, x, y);
source=getHorizontalRGB(array,x,y)
int[] source = getHorizontalRGB(array, x, y);
verticalRGB=getVerticalRGB(array,x,y)
int[] verticalRGB = getVerticalRGB(array, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(array,x,y)
int[] horizontalRGB = getHorizontalRGB(array, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,vWeight,hWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, vWeight, hWeight);
int weight = 0;
int weight = 0;

 Generics pattern private static class UnderlyingArray was added at revision bf2e5afe67edf5c3a323a74408beab592c1fb776

int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
String filename = "single-pixel.png";
inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)
InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);
bufferedImage=ImageIO.read(inputStream)
BufferedImage bufferedImage = ImageIO.read(inputStream);
scaledImage=Dcci.scale(bufferedImage)
BufferedImage scaledImage = Dcci.scale(bufferedImage);

Diff of bf2e5afe67edf5c3a323a74408beab592c1fb776 and a5160b73df533f9f2594503a5289b0963e2bf7b3:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision bf2e5afe67edf5c3a323a74408beab592c1fb776 to a5160b73df533f9f2594503a5289b0963e2bf7b3


****Parsing for addition at revision a5160b73df533f9f2594503a5289b0963e2bf7b3****

Added Dcci.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
result=getDestinationBufferedImage(original)
BufferedImage result = getDestinationBufferedImage(original);
UnderlyingArray underlyingArray = new UnderlyingArray(result);
int width = bufferedImage.getWidth() * 2 - 1;
int height = bufferedImage.getHeight() * 2 - 1;
BufferedImage destination = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
g2=destination.createGraphics()
Graphics2D g2 = destination.createGraphics();
int differenceSum = 0;
int strength = 0;
int strength = 0;
shift=getShiftForChannel(channel)
final int shift = getShiftForChannel(channel);
int shiftedValue = value << shift;
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateUpRightDiagonalStrength(array,x,y)
int d1 = evaluateUpRightDiagonalStrength(array, x, y);
d2=evaluateDownRightDiagonalStrength(array,x,y)
int d2 = evaluateDownRightDiagonalStrength(array, x, y);
final double w1 = 1 / (1 + Math.pow(d1, 5));
final double w2 = 1 / (1 + Math.pow(d2, 5));
final double downRightWeight = w1 / (w1 + w2);
final double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(array,x,y)
int[] sourceRgb = getDownRightRGB(array, x, y);
sourceRgb=getUpRightRGB(array,x,y)
int[] sourceRgb = getUpRightRGB(array, x, y);
upRightRGB=getUpRightRGB(array,x,y)
int[] upRightRGB = getUpRightRGB(array, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(array,x,y)
int[] downRightRGB = getDownRightRGB(array, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(array,x,y)
int d1 = evaluateHorizontalWeight(array, x, y);
d2=evaluateVerticalWeight(array,x,y)
int d2 = evaluateVerticalWeight(array, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(array,x,y)
int[] source = getVerticalRGB(array, x, y);
source=getHorizontalRGB(array,x,y)
int[] source = getHorizontalRGB(array, x, y);
verticalRGB=getVerticalRGB(array,x,y)
int[] verticalRGB = getVerticalRGB(array, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(array,x,y)
int[] horizontalRGB = getHorizontalRGB(array, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,vWeight,hWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, vWeight, hWeight);
int weight = 0;
int weight = 0;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
String filename = "single-pixel.png";
inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)
InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);
bufferedImage=ImageIO.read(inputStream)
BufferedImage bufferedImage = ImageIO.read(inputStream);
scaledImage=Dcci.scale(bufferedImage)
BufferedImage scaledImage = Dcci.scale(bufferedImage);

Diff of a5160b73df533f9f2594503a5289b0963e2bf7b3 and 8dc2e678169c40725a2cdfa5b6b8ec57f4576f41:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision a5160b73df533f9f2594503a5289b0963e2bf7b3 to 8dc2e678169c40725a2cdfa5b6b8ec57f4576f41


****Parsing for addition at revision 8dc2e678169c40725a2cdfa5b6b8ec57f4576f41****

Added Dcci.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
result=getDestinationBufferedImage(original)
BufferedImage result = getDestinationBufferedImage(original);
UnderlyingArray underlyingArray = new UnderlyingArray(result);
int width = bufferedImage.getWidth() * 2 - 1;
int height = bufferedImage.getHeight() * 2 - 1;
BufferedImage destination = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
g2=destination.createGraphics()
Graphics2D g2 = destination.createGraphics();
int differenceSum = 0;
int strength = 0;
int strength = 0;
shift=getShiftForChannel(channel)
final int shift = getShiftForChannel(channel);
int shiftedValue = value << shift;
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateUpRightDiagonalStrength(array,x,y)
int d1 = evaluateUpRightDiagonalStrength(array, x, y);
d2=evaluateDownRightDiagonalStrength(array,x,y)
int d2 = evaluateDownRightDiagonalStrength(array, x, y);
final double w1 = 1 / (1 + Math.pow(d1, 5));
final double w2 = 1 / (1 + Math.pow(d2, 5));
final double downRightWeight = w1 / (w1 + w2);
final double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(array,x,y)
int[] sourceRgb = getDownRightRGB(array, x, y);
sourceRgb=getUpRightRGB(array,x,y)
int[] sourceRgb = getUpRightRGB(array, x, y);
upRightRGB=getUpRightRGB(array,x,y)
int[] upRightRGB = getUpRightRGB(array, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(array,x,y)
int[] downRightRGB = getDownRightRGB(array, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(array,x,y)
int d1 = evaluateHorizontalWeight(array, x, y);
d2=evaluateVerticalWeight(array,x,y)
int d2 = evaluateVerticalWeight(array, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(array,x,y)
int[] source = getVerticalRGB(array, x, y);
source=getHorizontalRGB(array,x,y)
int[] source = getHorizontalRGB(array, x, y);
verticalRGB=getVerticalRGB(array,x,y)
int[] verticalRGB = getVerticalRGB(array, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(array,x,y)
int[] horizontalRGB = getHorizontalRGB(array, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,vWeight,hWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, vWeight, hWeight);
int weight = 0;
int weight = 0;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
String filename = "single-pixel.png";
inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)
InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);
bufferedImage=ImageIO.read(inputStream)
BufferedImage bufferedImage = ImageIO.read(inputStream);
scaledImage=Dcci.scale(bufferedImage)
BufferedImage scaledImage = Dcci.scale(bufferedImage);

Diff of 8dc2e678169c40725a2cdfa5b6b8ec57f4576f41 and da0fb15b2984eb92c23fba16a51a89183f32e15f:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 8dc2e678169c40725a2cdfa5b6b8ec57f4576f41 to da0fb15b2984eb92c23fba16a51a89183f32e15f


****Parsing for addition at revision da0fb15b2984eb92c23fba16a51a89183f32e15f****

Added Dcci.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
result=getDestinationBufferedImage(original)
BufferedImage result = getDestinationBufferedImage(original);
UnderlyingArray underlyingArray = new UnderlyingArray(result);
int width = bufferedImage.getWidth() * 2 - 1;
int height = bufferedImage.getHeight() * 2 - 1;
BufferedImage destination = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
g2=destination.createGraphics()
Graphics2D g2 = destination.createGraphics();
int differenceSum = 0;
int strength = 0;
int strength = 0;
shift=getShiftForChannel(channel)
final int shift = getShiftForChannel(channel);
int shiftedValue = value << shift;
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateUpRightDiagonalStrength(array,x,y)
int d1 = evaluateUpRightDiagonalStrength(array, x, y);
d2=evaluateDownRightDiagonalStrength(array,x,y)
int d2 = evaluateDownRightDiagonalStrength(array, x, y);
final double w1 = 1 / (1 + Math.pow(d1, 5));
final double w2 = 1 / (1 + Math.pow(d2, 5));
final double downRightWeight = w1 / (w1 + w2);
final double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(array,x,y)
int[] sourceRgb = getDownRightRGB(array, x, y);
sourceRgb=getUpRightRGB(array,x,y)
int[] sourceRgb = getUpRightRGB(array, x, y);
upRightRGB=getUpRightRGB(array,x,y)
int[] upRightRGB = getUpRightRGB(array, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(array,x,y)
int[] downRightRGB = getDownRightRGB(array, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(array,x,y)
int d1 = evaluateHorizontalWeight(array, x, y);
d2=evaluateVerticalWeight(array,x,y)
int d2 = evaluateVerticalWeight(array, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(array,x,y)
int[] source = getVerticalRGB(array, x, y);
source=getHorizontalRGB(array,x,y)
int[] source = getHorizontalRGB(array, x, y);
verticalRGB=getVerticalRGB(array,x,y)
int[] verticalRGB = getVerticalRGB(array, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(array,x,y)
int[] horizontalRGB = getHorizontalRGB(array, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,vWeight,hWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, vWeight, hWeight);
int weight = 0;
int weight = 0;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
String filename = "single-pixel.png";
inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)
InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);
bufferedImage=ImageIO.read(inputStream)
BufferedImage bufferedImage = ImageIO.read(inputStream);
scaledImage=Dcci.scale(bufferedImage)
BufferedImage scaledImage = Dcci.scale(bufferedImage);

Diff of da0fb15b2984eb92c23fba16a51a89183f32e15f and aedc548addf09c9fdc9d87860b3bf5493df4fc53:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision da0fb15b2984eb92c23fba16a51a89183f32e15f to aedc548addf09c9fdc9d87860b3bf5493df4fc53


****Parsing for addition at revision aedc548addf09c9fdc9d87860b3bf5493df4fc53****

Added Dcci.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
result=getDestinationBufferedImage(original)
BufferedImage result = getDestinationBufferedImage(original);
UnderlyingArray underlyingArray = new UnderlyingArray(result);
int width = bufferedImage.getWidth() * 2 - 1;
int height = bufferedImage.getHeight() * 2 - 1;
BufferedImage destination = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
g2=destination.createGraphics()
Graphics2D g2 = destination.createGraphics();
int differenceSum = 0;
int strength = 0;
int strength = 0;
shift=getShiftForChannel(channel)
final int shift = getShiftForChannel(channel);
int shiftedValue = value << shift;
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateUpRightDiagonalStrength(array,x,y)
int d1 = evaluateUpRightDiagonalStrength(array, x, y);
d2=evaluateDownRightDiagonalStrength(array,x,y)
int d2 = evaluateDownRightDiagonalStrength(array, x, y);
final double w1 = 1 / (1 + Math.pow(d1, 5));
final double w2 = 1 / (1 + Math.pow(d2, 5));
final double downRightWeight = w1 / (w1 + w2);
final double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(array,x,y)
int[] sourceRgb = getDownRightRGB(array, x, y);
sourceRgb=getUpRightRGB(array,x,y)
int[] sourceRgb = getUpRightRGB(array, x, y);
upRightRGB=getUpRightRGB(array,x,y)
int[] upRightRGB = getUpRightRGB(array, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(array,x,y)
int[] downRightRGB = getDownRightRGB(array, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(array,x,y)
int d1 = evaluateHorizontalWeight(array, x, y);
d2=evaluateVerticalWeight(array,x,y)
int d2 = evaluateVerticalWeight(array, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(array,x,y)
int[] source = getVerticalRGB(array, x, y);
source=getHorizontalRGB(array,x,y)
int[] source = getHorizontalRGB(array, x, y);
verticalRGB=getVerticalRGB(array,x,y)
int[] verticalRGB = getVerticalRGB(array, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(array,x,y)
int[] horizontalRGB = getHorizontalRGB(array, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,vWeight,hWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, vWeight, hWeight);
int weight = 0;
int weight = 0;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
String filename = "single-pixel.png";
inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)
InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);
bufferedImage=ImageIO.read(inputStream)
BufferedImage bufferedImage = ImageIO.read(inputStream);
scaledImage=Dcci.scale(bufferedImage)
BufferedImage scaledImage = Dcci.scale(bufferedImage);

Diff of aedc548addf09c9fdc9d87860b3bf5493df4fc53 and 5c114852522b48d2742ff0380caaa7926908d1b1:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision aedc548addf09c9fdc9d87860b3bf5493df4fc53 to 5c114852522b48d2742ff0380caaa7926908d1b1


****Parsing for addition at revision 5c114852522b48d2742ff0380caaa7926908d1b1****

Added Dcci.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
result=getDestinationBufferedImage(original)
BufferedImage result = getDestinationBufferedImage(original);
UnderlyingArray underlyingArray = new UnderlyingArray(result);
int width = bufferedImage.getWidth() * 2 - 1;
int height = bufferedImage.getHeight() * 2 - 1;
BufferedImage destination = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
g2=destination.createGraphics()
Graphics2D g2 = destination.createGraphics();
int differenceSum = 0;
int strength = 0;
int strength = 0;
shift=getShiftForChannel(channel)
final int shift = getShiftForChannel(channel);
int shiftedValue = value << shift;
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateUpRightDiagonalStrength(array,x,y)
int d1 = evaluateUpRightDiagonalStrength(array, x, y);
d2=evaluateDownRightDiagonalStrength(array,x,y)
int d2 = evaluateDownRightDiagonalStrength(array, x, y);
final double w1 = 1 / (1 + Math.pow(d1, 5));
final double w2 = 1 / (1 + Math.pow(d2, 5));
final double downRightWeight = w1 / (w1 + w2);
final double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(array,x,y)
int[] sourceRgb = getDownRightRGB(array, x, y);
sourceRgb=getUpRightRGB(array,x,y)
int[] sourceRgb = getUpRightRGB(array, x, y);
upRightRGB=getUpRightRGB(array,x,y)
int[] upRightRGB = getUpRightRGB(array, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(array,x,y)
int[] downRightRGB = getDownRightRGB(array, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(array,x,y)
int d1 = evaluateHorizontalWeight(array, x, y);
d2=evaluateVerticalWeight(array,x,y)
int d2 = evaluateVerticalWeight(array, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(array,x,y)
int[] source = getVerticalRGB(array, x, y);
source=getHorizontalRGB(array,x,y)
int[] source = getHorizontalRGB(array, x, y);
verticalRGB=getVerticalRGB(array,x,y)
int[] verticalRGB = getVerticalRGB(array, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(array,x,y)
int[] horizontalRGB = getHorizontalRGB(array, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,vWeight,hWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, vWeight, hWeight);
int weight = 0;
int weight = 0;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
String filename = "single-pixel.png";
inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)
InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);
bufferedImage=ImageIO.read(inputStream)
BufferedImage bufferedImage = ImageIO.read(inputStream);
scaledImage=Dcci.scale(bufferedImage)
BufferedImage scaledImage = Dcci.scale(bufferedImage);

Diff of 5c114852522b48d2742ff0380caaa7926908d1b1 and 8432a738fe9ae7eb7fcab3e058ba568989f90725:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5c114852522b48d2742ff0380caaa7926908d1b1 to 8432a738fe9ae7eb7fcab3e058ba568989f90725


****Parsing for addition at revision 8432a738fe9ae7eb7fcab3e058ba568989f90725****

Added Dcci.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
result=getDestinationBufferedImage(original)
BufferedImage result = getDestinationBufferedImage(original);
UnderlyingArray underlyingArray = new UnderlyingArray(result);
int width = bufferedImage.getWidth() * 2 - 1;
int height = bufferedImage.getHeight() * 2 - 1;
BufferedImage destination = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
g2=destination.createGraphics()
Graphics2D g2 = destination.createGraphics();
int differenceSum = 0;
int strength = 0;
int strength = 0;
shift=getShiftForChannel(channel)
final int shift = getShiftForChannel(channel);
int shiftedValue = value << shift;
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateUpRightDiagonalStrength(array,x,y)
int d1 = evaluateUpRightDiagonalStrength(array, x, y);
d2=evaluateDownRightDiagonalStrength(array,x,y)
int d2 = evaluateDownRightDiagonalStrength(array, x, y);
final double w1 = 1 / (1 + Math.pow(d1, 5));
final double w2 = 1 / (1 + Math.pow(d2, 5));
final double downRightWeight = w1 / (w1 + w2);
final double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(array,x,y)
int[] sourceRgb = getDownRightRGB(array, x, y);
sourceRgb=getUpRightRGB(array,x,y)
int[] sourceRgb = getUpRightRGB(array, x, y);
upRightRGB=getUpRightRGB(array,x,y)
int[] upRightRGB = getUpRightRGB(array, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(array,x,y)
int[] downRightRGB = getDownRightRGB(array, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(array,x,y)
int d1 = evaluateHorizontalWeight(array, x, y);
d2=evaluateVerticalWeight(array,x,y)
int d2 = evaluateVerticalWeight(array, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(array,x,y)
int[] source = getVerticalRGB(array, x, y);
source=getHorizontalRGB(array,x,y)
int[] source = getHorizontalRGB(array, x, y);
verticalRGB=getVerticalRGB(array,x,y)
int[] verticalRGB = getVerticalRGB(array, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(array,x,y)
int[] horizontalRGB = getHorizontalRGB(array, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,vWeight,hWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, vWeight, hWeight);
int weight = 0;
int weight = 0;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
String filename = "single-pixel.png";
inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)
InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);
bufferedImage=ImageIO.read(inputStream)
BufferedImage bufferedImage = ImageIO.read(inputStream);
scaledImage=Dcci.scale(bufferedImage)
BufferedImage scaledImage = Dcci.scale(bufferedImage);

Diff of 8432a738fe9ae7eb7fcab3e058ba568989f90725 and 923b6131a23f89405b0d6de3c90daa2848a7b518:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 8432a738fe9ae7eb7fcab3e058ba568989f90725 to 923b6131a23f89405b0d6de3c90daa2848a7b518


****Parsing for addition at revision 923b6131a23f89405b0d6de3c90daa2848a7b518****

Added Dcci.java to .\photo\ repository source files.
Added Dcci.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
int newWidth = original.getWidth() * 2 - 1;
int newHeight = original.getHeight() * 2 - 1;
BufferedImage result = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_ARGB);
g2=result.createGraphics()
Graphics2D g2 = result.createGraphics();
int differenceSum = 0;
int d1 = 0;
int d2 = 0;
int shiftedValue = value << (getShiftForChannel(channel));
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateD1(image,x,y)
int d1 = evaluateD1(image, x, y);
d2=evaluateD2(image,x,y)
int d2 = evaluateD2(image, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double downRightWeight = w1 / (w1 + w2);
double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(image,x,y)
int[] sourceRgb = getDownRightRGB(image, x, y);
sourceRgb=getUpRightRGB(image,x,y)
int[] sourceRgb = getUpRightRGB(image, x, y);
upRightRGB=getUpRightRGB(image,x,y)
int[] upRightRGB = getUpRightRGB(image, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(image,x,y)
int[] downRightRGB = getDownRightRGB(image, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(image,x,y)
int d1 = evaluateHorizontalWeight(image, x, y);
d2=evaluateVerticalWeight(image,x,y)
int d2 = evaluateVerticalWeight(image, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(image,x,y)
int[] source = getVerticalRGB(image, x, y);
source=getHorizontalRGB(image,x,y)
int[] source = getHorizontalRGB(image, x, y);
verticalRGB=getVerticalRGB(image,x,y)
int[] verticalRGB = getVerticalRGB(image, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(image,x,y)
int[] horizontalRGB = getHorizontalRGB(image, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,verticalWeight,horizontalWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, verticalWeight, horizontalWeight);
int weight = 0;
int weight = 0;
result=getDestinationBufferedImage(original)
BufferedImage result = getDestinationBufferedImage(original);
UnderlyingArray underlyingArray = new UnderlyingArray(result);
int width = bufferedImage.getWidth() * 2 - 1;
int height = bufferedImage.getHeight() * 2 - 1;
BufferedImage destination = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
g2=destination.createGraphics()
Graphics2D g2 = destination.createGraphics();
int differenceSum = 0;
int strength = 0;
int strength = 0;
shift=getShiftForChannel(channel)
final int shift = getShiftForChannel(channel);
int shiftedValue = value << shift;
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateUpRightDiagonalStrength(array,x,y)
int d1 = evaluateUpRightDiagonalStrength(array, x, y);
d2=evaluateDownRightDiagonalStrength(array,x,y)
int d2 = evaluateDownRightDiagonalStrength(array, x, y);
final double w1 = 1 / (1 + Math.pow(d1, 5));
final double w2 = 1 / (1 + Math.pow(d2, 5));
final double downRightWeight = w1 / (w1 + w2);
final double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(array,x,y)
int[] sourceRgb = getDownRightRGB(array, x, y);
sourceRgb=getUpRightRGB(array,x,y)
int[] sourceRgb = getUpRightRGB(array, x, y);
upRightRGB=getUpRightRGB(array,x,y)
int[] upRightRGB = getUpRightRGB(array, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(array,x,y)
int[] downRightRGB = getDownRightRGB(array, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(array,x,y)
int d1 = evaluateHorizontalWeight(array, x, y);
d2=evaluateVerticalWeight(array,x,y)
int d2 = evaluateVerticalWeight(array, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(array,x,y)
int[] source = getVerticalRGB(array, x, y);
source=getHorizontalRGB(array,x,y)
int[] source = getHorizontalRGB(array, x, y);
verticalRGB=getVerticalRGB(array,x,y)
int[] verticalRGB = getVerticalRGB(array, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(array,x,y)
int[] horizontalRGB = getHorizontalRGB(array, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,vWeight,hWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, vWeight, hWeight);
int weight = 0;
int weight = 0;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
String filename = "single-pixel.png";
inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)
InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);
bufferedImage=ImageIO.read(inputStream)
BufferedImage bufferedImage = ImageIO.read(inputStream);
scaledImage=Dcci.scale(bufferedImage)
BufferedImage scaledImage = Dcci.scale(bufferedImage);

Diff of 923b6131a23f89405b0d6de3c90daa2848a7b518 and 26abc09473592bbabe8c81be7531e0260d3b3542:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 923b6131a23f89405b0d6de3c90daa2848a7b518 to 26abc09473592bbabe8c81be7531e0260d3b3542


****Parsing for addition at revision 26abc09473592bbabe8c81be7531e0260d3b3542****

Added Dcci.java to .\photo\ repository source files.
Added Dcci.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
int newWidth = original.getWidth() * 2 - 1;
int newHeight = original.getHeight() * 2 - 1;
BufferedImage result = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_ARGB);
g2=result.createGraphics()
Graphics2D g2 = result.createGraphics();
int differenceSum = 0;
int d1 = 0;
int d2 = 0;
int shiftedValue = value << (getShiftForChannel(channel));
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateD1(image,x,y)
int d1 = evaluateD1(image, x, y);
d2=evaluateD2(image,x,y)
int d2 = evaluateD2(image, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double downRightWeight = w1 / (w1 + w2);
double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(image,x,y)
int[] sourceRgb = getDownRightRGB(image, x, y);
sourceRgb=getUpRightRGB(image,x,y)
int[] sourceRgb = getUpRightRGB(image, x, y);
upRightRGB=getUpRightRGB(image,x,y)
int[] upRightRGB = getUpRightRGB(image, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(image,x,y)
int[] downRightRGB = getDownRightRGB(image, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(image,x,y)
int d1 = evaluateHorizontalWeight(image, x, y);
d2=evaluateVerticalWeight(image,x,y)
int d2 = evaluateVerticalWeight(image, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(image,x,y)
int[] source = getVerticalRGB(image, x, y);
source=getHorizontalRGB(image,x,y)
int[] source = getHorizontalRGB(image, x, y);
verticalRGB=getVerticalRGB(image,x,y)
int[] verticalRGB = getVerticalRGB(image, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(image,x,y)
int[] horizontalRGB = getHorizontalRGB(image, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,verticalWeight,horizontalWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, verticalWeight, horizontalWeight);
int weight = 0;
int weight = 0;
result=getDestinationBufferedImage(original)
BufferedImage result = getDestinationBufferedImage(original);
UnderlyingArray underlyingArray = new UnderlyingArray(result);
int width = bufferedImage.getWidth() * 2 - 1;
int height = bufferedImage.getHeight() * 2 - 1;
BufferedImage destination = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
g2=destination.createGraphics()
Graphics2D g2 = destination.createGraphics();
int differenceSum = 0;
int strength = 0;
int strength = 0;
shift=getShiftForChannel(channel)
final int shift = getShiftForChannel(channel);
int shiftedValue = value << shift;
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateUpRightDiagonalStrength(array,x,y)
int d1 = evaluateUpRightDiagonalStrength(array, x, y);
d2=evaluateDownRightDiagonalStrength(array,x,y)
int d2 = evaluateDownRightDiagonalStrength(array, x, y);
final double w1 = 1 / (1 + Math.pow(d1, 5));
final double w2 = 1 / (1 + Math.pow(d2, 5));
final double downRightWeight = w1 / (w1 + w2);
final double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(array,x,y)
int[] sourceRgb = getDownRightRGB(array, x, y);
sourceRgb=getUpRightRGB(array,x,y)
int[] sourceRgb = getUpRightRGB(array, x, y);
upRightRGB=getUpRightRGB(array,x,y)
int[] upRightRGB = getUpRightRGB(array, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(array,x,y)
int[] downRightRGB = getDownRightRGB(array, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(array,x,y)
int d1 = evaluateHorizontalWeight(array, x, y);
d2=evaluateVerticalWeight(array,x,y)
int d2 = evaluateVerticalWeight(array, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(array,x,y)
int[] source = getVerticalRGB(array, x, y);
source=getHorizontalRGB(array,x,y)
int[] source = getHorizontalRGB(array, x, y);
verticalRGB=getVerticalRGB(array,x,y)
int[] verticalRGB = getVerticalRGB(array, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(array,x,y)
int[] horizontalRGB = getHorizontalRGB(array, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,vWeight,hWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, vWeight, hWeight);
int weight = 0;
int weight = 0;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
String filename = "single-pixel.png";
inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)
InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);
bufferedImage=ImageIO.read(inputStream)
BufferedImage bufferedImage = ImageIO.read(inputStream);
scaledImage=Dcci.scale(bufferedImage)
BufferedImage scaledImage = Dcci.scale(bufferedImage);

Diff of 26abc09473592bbabe8c81be7531e0260d3b3542 and e005d3ecdec23cd9bfea065ced3322a33b35fec0:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 26abc09473592bbabe8c81be7531e0260d3b3542 to e005d3ecdec23cd9bfea065ced3322a33b35fec0


****Parsing for addition at revision e005d3ecdec23cd9bfea065ced3322a33b35fec0****

Added Dcci.java to .\photo\ repository source files.
Added Dcci.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
int newWidth = original.getWidth() * 2 - 1;
int newHeight = original.getHeight() * 2 - 1;
BufferedImage result = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_ARGB);
g2=result.createGraphics()
Graphics2D g2 = result.createGraphics();
int differenceSum = 0;
int d1 = 0;
int d2 = 0;
int shiftedValue = value << (getShiftForChannel(channel));
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateD1(image,x,y)
int d1 = evaluateD1(image, x, y);
d2=evaluateD2(image,x,y)
int d2 = evaluateD2(image, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double downRightWeight = w1 / (w1 + w2);
double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(image,x,y)
int[] sourceRgb = getDownRightRGB(image, x, y);
sourceRgb=getUpRightRGB(image,x,y)
int[] sourceRgb = getUpRightRGB(image, x, y);
upRightRGB=getUpRightRGB(image,x,y)
int[] upRightRGB = getUpRightRGB(image, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(image,x,y)
int[] downRightRGB = getDownRightRGB(image, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(image,x,y)
int d1 = evaluateHorizontalWeight(image, x, y);
d2=evaluateVerticalWeight(image,x,y)
int d2 = evaluateVerticalWeight(image, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(image,x,y)
int[] source = getVerticalRGB(image, x, y);
source=getHorizontalRGB(image,x,y)
int[] source = getHorizontalRGB(image, x, y);
verticalRGB=getVerticalRGB(image,x,y)
int[] verticalRGB = getVerticalRGB(image, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(image,x,y)
int[] horizontalRGB = getHorizontalRGB(image, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,verticalWeight,horizontalWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, verticalWeight, horizontalWeight);
int weight = 0;
int weight = 0;
result=getDestinationBufferedImage(original)
BufferedImage result = getDestinationBufferedImage(original);
UnderlyingArray underlyingArray = new UnderlyingArray(result);
int width = bufferedImage.getWidth() * 2 - 1;
int height = bufferedImage.getHeight() * 2 - 1;
BufferedImage destination = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
g2=destination.createGraphics()
Graphics2D g2 = destination.createGraphics();
int differenceSum = 0;
int strength = 0;
int strength = 0;
shift=getShiftForChannel(channel)
final int shift = getShiftForChannel(channel);
int shiftedValue = value << shift;
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateUpRightDiagonalStrength(array,x,y)
int d1 = evaluateUpRightDiagonalStrength(array, x, y);
d2=evaluateDownRightDiagonalStrength(array,x,y)
int d2 = evaluateDownRightDiagonalStrength(array, x, y);
final double w1 = 1 / (1 + Math.pow(d1, 5));
final double w2 = 1 / (1 + Math.pow(d2, 5));
final double downRightWeight = w1 / (w1 + w2);
final double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(array,x,y)
int[] sourceRgb = getDownRightRGB(array, x, y);
sourceRgb=getUpRightRGB(array,x,y)
int[] sourceRgb = getUpRightRGB(array, x, y);
upRightRGB=getUpRightRGB(array,x,y)
int[] upRightRGB = getUpRightRGB(array, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(array,x,y)
int[] downRightRGB = getDownRightRGB(array, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(array,x,y)
int d1 = evaluateHorizontalWeight(array, x, y);
d2=evaluateVerticalWeight(array,x,y)
int d2 = evaluateVerticalWeight(array, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(array,x,y)
int[] source = getVerticalRGB(array, x, y);
source=getHorizontalRGB(array,x,y)
int[] source = getHorizontalRGB(array, x, y);
verticalRGB=getVerticalRGB(array,x,y)
int[] verticalRGB = getVerticalRGB(array, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(array,x,y)
int[] horizontalRGB = getHorizontalRGB(array, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,vWeight,hWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, vWeight, hWeight);
int weight = 0;
int weight = 0;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
String filename = "single-pixel.png";
inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)
InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);
bufferedImage=ImageIO.read(inputStream)
BufferedImage bufferedImage = ImageIO.read(inputStream);
scaledImage=Dcci.scale(bufferedImage)
BufferedImage scaledImage = Dcci.scale(bufferedImage);

Diff of e005d3ecdec23cd9bfea065ced3322a33b35fec0 and 87b507ead0e3e0285f12901475f934590f537909:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision e005d3ecdec23cd9bfea065ced3322a33b35fec0 to 87b507ead0e3e0285f12901475f934590f537909


****Parsing for addition at revision 87b507ead0e3e0285f12901475f934590f537909****

Added Dcci.java to .\photo\ repository source files.
Added Dcci.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
Added DcciTest.java to .\photo\ repository source files.
int newWidth = original.getWidth() * 2 - 1;
int newHeight = original.getHeight() * 2 - 1;
BufferedImage result = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_ARGB);
g2=result.createGraphics()
Graphics2D g2 = result.createGraphics();
int differenceSum = 0;
int d1 = 0;
int d2 = 0;
int shiftedValue = value << (getShiftForChannel(channel));
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateD1(image,x,y)
int d1 = evaluateD1(image, x, y);
d2=evaluateD2(image,x,y)
int d2 = evaluateD2(image, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double downRightWeight = w1 / (w1 + w2);
double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(image,x,y)
int[] sourceRgb = getDownRightRGB(image, x, y);
sourceRgb=getUpRightRGB(image,x,y)
int[] sourceRgb = getUpRightRGB(image, x, y);
upRightRGB=getUpRightRGB(image,x,y)
int[] upRightRGB = getUpRightRGB(image, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(image,x,y)
int[] downRightRGB = getDownRightRGB(image, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(image,x,y)
int d1 = evaluateHorizontalWeight(image, x, y);
d2=evaluateVerticalWeight(image,x,y)
int d2 = evaluateVerticalWeight(image, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(image,x,y)
int[] source = getVerticalRGB(image, x, y);
source=getHorizontalRGB(image,x,y)
int[] source = getHorizontalRGB(image, x, y);
verticalRGB=getVerticalRGB(image,x,y)
int[] verticalRGB = getVerticalRGB(image, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(image,x,y)
int[] horizontalRGB = getHorizontalRGB(image, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,verticalWeight,horizontalWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, verticalWeight, horizontalWeight);
int weight = 0;
int weight = 0;
result=getDestinationBufferedImage(original)
BufferedImage result = getDestinationBufferedImage(original);
UnderlyingArray underlyingArray = new UnderlyingArray(result);
int width = bufferedImage.getWidth() * 2 - 1;
int height = bufferedImage.getHeight() * 2 - 1;
BufferedImage destination = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
g2=destination.createGraphics()
Graphics2D g2 = destination.createGraphics();
int differenceSum = 0;
int strength = 0;
int strength = 0;
shift=getShiftForChannel(channel)
final int shift = getShiftForChannel(channel);
int shiftedValue = value << shift;
int rgb = 0;
int total = 0;
int finalRgb = 0;
double weightedAverage = aWeight * getChannel(rgbA, channel) + bWeight * getChannel(rgbB, channel);
int roundedWeightedAverage = (int) Math.round(weightedAverage);
d1=evaluateUpRightDiagonalStrength(array,x,y)
int d1 = evaluateUpRightDiagonalStrength(array, x, y);
d2=evaluateDownRightDiagonalStrength(array,x,y)
int d2 = evaluateDownRightDiagonalStrength(array, x, y);
final double w1 = 1 / (1 + Math.pow(d1, 5));
final double w2 = 1 / (1 + Math.pow(d2, 5));
final double downRightWeight = w1 / (w1 + w2);
final double upRightWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
sourceRgb=getDownRightRGB(array,x,y)
int[] sourceRgb = getDownRightRGB(array, x, y);
sourceRgb=getUpRightRGB(array,x,y)
int[] sourceRgb = getUpRightRGB(array, x, y);
upRightRGB=getUpRightRGB(array,x,y)
int[] upRightRGB = getUpRightRGB(array, x, y);
upRightRGBValue=getInterpolatedRGB(upRightRGB)
int upRightRGBValue = getInterpolatedRGB(upRightRGB);
downRightRGB=getDownRightRGB(array,x,y)
int[] downRightRGB = getDownRightRGB(array, x, y);
downRightRGBValue=getInterpolatedRGB(downRightRGB)
int downRightRGBValue = getInterpolatedRGB(downRightRGB);
d1=evaluateHorizontalWeight(array,x,y)
int d1 = evaluateHorizontalWeight(array, x, y);
d2=evaluateVerticalWeight(array,x,y)
int d2 = evaluateVerticalWeight(array, x, y);
double w1 = 1 / (1 + Math.pow(d1, 5));
double w2 = 1 / (1 + Math.pow(d2, 5));
double verticalWeight = w1 / (w1 + w2);
double horizontalWeight = w2 / (w1 + w2);
int[] sourceRgb = new int[4];
int[] sourceRgb = new int[4];
source=getVerticalRGB(array,x,y)
int[] source = getVerticalRGB(array, x, y);
source=getHorizontalRGB(array,x,y)
int[] source = getHorizontalRGB(array, x, y);
verticalRGB=getVerticalRGB(array,x,y)
int[] verticalRGB = getVerticalRGB(array, x, y);
interpolatedVerticalRGB=getInterpolatedRGB(verticalRGB)
int interpolatedVerticalRGB = getInterpolatedRGB(verticalRGB);
horizontalRGB=getHorizontalRGB(array,x,y)
int[] horizontalRGB = getHorizontalRGB(array, x, y);
interpolatedHorizontalRGB=getInterpolatedRGB(horizontalRGB)
int interpolatedHorizontalRGB = getInterpolatedRGB(horizontalRGB);
finalRGB=weightedRGBAverage(interpolatedVerticalRGB,interpolatedHorizontalRGB,vWeight,hWeight)
int finalRGB = weightedRGBAverage(interpolatedVerticalRGB, interpolatedHorizontalRGB, vWeight, hWeight);
int weight = 0;
int weight = 0;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
int black = 0x000000;
int white = 0xFFFFFF;
int red = 0xFF0000;
int green = 0x00FF00;
int blue = 0x0000FF;
String filename = "single-pixel.png";
inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)
InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);
bufferedImage=ImageIO.read(inputStream)
BufferedImage bufferedImage = ImageIO.read(inputStream);
scaledImage=Dcci.scale(bufferedImage)
BufferedImage scaledImage = Dcci.scale(bufferedImage);

Diff of 87b507ead0e3e0285f12901475f934590f537909 and f860ab192588bfbc22a3371c731011b129639925:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 87b507ead0e3e0285f12901475f934590f537909 to f860ab192588bfbc22a3371c731011b129639925

************Analysis complete************
Added generics to repository photo = 1

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 1
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
File copied successfully!
