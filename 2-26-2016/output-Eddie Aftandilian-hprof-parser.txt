hprof-parser -- eaftan -- Eddie Aftandilian
https://github.com/eaftan/hprof-parser.git
git clone https://github.com/eaftan/hprof-parser.git
.\hprof-parser\
.\hprof-parser\.git
0
Project cloned!
Eddie Aftandilian is responsible for commit 274d31b0357d2aa45d87c7b17850752e1049cd0a
Eddie Aftandilian is responsible for commit 74cef31e406b36a71fa48d4ea43ba53aaabbe7b3
Eddie Aftandilian is responsible for commit 97d177f377dbb4a559f7a629a19d67c621c0669d
Eddie Aftandilian is responsible for commit a3f635aaf9e4f9345fa81ac3b4f6b15a871a1ccb
Eddie Aftandilian is responsible for commit 755c21c9172b0300bb3edff81f5079c3e9433143
Eddie Aftandilian is responsible for commit da8faf6970c60051f24f8de741d27b524f6648b5
Eddie Aftandilian is responsible for commit e60da8784554bcb878e0fdfa04c425a5ecb54b4d
Eddie Aftandilian is responsible for commit 5d7032e0e33e68d19aea893cb4a9a0f3ada0585b
Eddie Aftandilian is responsible for commit 59d6873a8031daf99e9cd0d28284dff9ceb7a74c
Eddie Aftandilian is responsible for commit 0cd0c1d63d6e67eb007aacce5af5da8b9d64fd37
Eddie Aftandilian is responsible for commit cb0fd77118f98902ffeb4d5eca1b46074f29bd74
Eddie Aftandilian is responsible for commit 036f0884afcdd6193234847461eaf0934ea6fc42
Eddie Aftandilian is responsible for commit 1cf1c97e6ed084e0b228ea0e6e294dc5b3c562cc
Eddie Aftandilian is responsible for commit 8aa66f3c6562f0eca00758e274992688027d8444
Eddie Aftandilian is responsible for commit 3954c0502191ec32c37599c063ccd6d9db5cc8e8
Eddie Aftandilian is responsible for commit fca9f57f36b0825916a6427795ef7c3143442033
Eddie Aftandilian is responsible for commit 5631e732a861f413b8e0f6ea1813a8f178a087de
Eddie Aftandilian is responsible for commit 007f45da73910ecbff1cdf6d4306eb8e8f1c26f6
Eddie Aftandilian is responsible for commit 206fe15adf9152874de7842486d958ce3d7ecffb
Eddie Aftandilian is responsible for commit f6d73798fd5cf53f885c387db777d43c6825e4ee
Eddie Aftandilian is responsible for commit 4394e602c6d13bcb59d7279cc9a11b0c5f451803
Eddie Aftandilian is responsible for commit f9ca4893681a925beb41433391b1721c9645a27b
Eddie Aftandilian is responsible for commit 17b08a3324539792f6905adb32047b598116ce6f
Eddie Aftandilian is responsible for commit f62211278f7ca77be71431fc2cf2ce3cbb1da175
Eddie Aftandilian is responsible for commit 579c9cfceea6593a7eddd2cf5a2b5a48d09a67d3
Eddie Aftandilian is responsible for commit 89142a106f90939f340ce395ae9cc26006c64693
Eddie Aftandilian is responsible for commit 5835e97afb4d150b107a371fc385a17db51da006
Eddie Aftandilian is responsible for commit fd75a6cda9a793cd9b221ec9a17150dae195d6ad
Eddie Aftandilian is responsible for commit daeda2152e27ce32abbcd5a8b014a928d809876d
Eddie Aftandilian is responsible for commit 1efa77d7f7529a417df1703a8ad05fa0b35aeb11
Eddie Aftandilian is responsible for commit b1d78eced4bb333a8e31420f3c7716c98c3cda61
Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RootHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added ArrayInfo.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added StatisticsCollectingHandler.java to .\hprof-parser\ repository source files.
Added TypeInfo.java to .\hprof-parser\ repository source files.
Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added HprofParserException.java to .\hprof-parser\ repository source files.
Added AllExampleHandlersTest.java to .\hprof-parser\ repository source files.
Added NonNullTest.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.

 ************ ANALYZING FOR USAGE PATTERN ADDITION ************


****Parsing for addition at revision 274d31b0357d2aa45d87c7b17850752e1049cd0a****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RootHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added ArrayInfo.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added StatisticsCollectingHandler.java to .\hprof-parser\ repository source files.
Added TypeInfo.java to .\hprof-parser\ repository source files.
Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added HprofParserException.java to .\hprof-parser\ repository source files.
Added AllExampleHandlersTest.java to .\hprof-parser\ repository source files.
Added NonNullTest.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo(stringMap.get(classNameStringId));
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
ClassInfo classInfo = new ClassInfo();
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
String typeDescriptor = "[" + classMap.get(elemClassObjId).className;
int length = elems != null ? elems.length : 0;
elemType=Type.hprofTypeToEnum(hprofElemType)
Type elemType = Type.hprofTypeToEnum(hprofElemType);
String typeDescriptor = "[" + elemType.toString();
int length = elems != null ? elems.length : 0;
ArrayInfo arrayInfo = (ArrayInfo) arrayInfoMap.get(typeDescriptor);
Comparator<TypeInfo> totalSizeComparator = new Comparator<TypeInfo>() {
      @Override
      public int compare(TypeInfo cls1, TypeInfo cls2) {
        return Ints.checkedCast(cls2.totalSize() - cls1.totalSize());
      }
    };
List<TypeInfo> typeInfoList = new ArrayList<>(classMap.values());
argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
boolean done;
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
byte tag;
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = new Constant[s1];
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = new Static[s2];
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = new InstanceField[s3];
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?>[] vs = new Value[i2];
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value<?>> values = new ArrayList<>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value<?>[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;
PrintStream throwawayPrintStream = new PrintStream(new OutputStream() {
      @Override
      public void write(int b) throws IOException {
        // do nothing
      }
    });
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(NULL_CHECKER_HANDLER);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.examples.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of 274d31b0357d2aa45d87c7b17850752e1049cd0a and 74cef31e406b36a71fa48d4ea43ba53aaabbe7b3:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 274d31b0357d2aa45d87c7b17850752e1049cd0a to 74cef31e406b36a71fa48d4ea43ba53aaabbe7b3


****Parsing for addition at revision 74cef31e406b36a71fa48d4ea43ba53aaabbe7b3****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RootHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added ArrayInfo.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added StatisticsCollectingHandler.java to .\hprof-parser\ repository source files.
Added TypeInfo.java to .\hprof-parser\ repository source files.
Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added HprofParserException.java to .\hprof-parser\ repository source files.
Added AllExampleHandlersTest.java to .\hprof-parser\ repository source files.
Added NonNullTest.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo(stringMap.get(classNameStringId));
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
ClassInfo classInfo = new ClassInfo();
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
String typeDescriptor = "[" + classMap.get(elemClassObjId).className;
int length = elems != null ? elems.length : 0;
elemType=Type.hprofTypeToEnum(hprofElemType)
Type elemType = Type.hprofTypeToEnum(hprofElemType);
String typeDescriptor = "[" + elemType.toString();
int length = elems != null ? elems.length : 0;
ArrayInfo arrayInfo = (ArrayInfo) arrayInfoMap.get(typeDescriptor);
Comparator<TypeInfo> totalSizeComparator = new Comparator<TypeInfo>() {
      @Override
      public int compare(TypeInfo cls1, TypeInfo cls2) {
        return Ints.checkedCast(cls2.totalSize() - cls1.totalSize());
      }
    };
List<TypeInfo> typeInfoList = new ArrayList<>(classMap.values());
argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
boolean done;
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
byte tag;
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = new Constant[s1];
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = new Static[s2];
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = new InstanceField[s3];
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?>[] vs = new Value[i2];
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value<?>> values = new ArrayList<>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value<?>[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;
PrintStream throwawayPrintStream = new PrintStream(new OutputStream() {
      @Override
      public void write(int b) throws IOException {
        // do nothing
      }
    });
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(NULL_CHECKER_HANDLER);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.examples.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of 74cef31e406b36a71fa48d4ea43ba53aaabbe7b3 and 97d177f377dbb4a559f7a629a19d67c621c0669d:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 74cef31e406b36a71fa48d4ea43ba53aaabbe7b3 to 97d177f377dbb4a559f7a629a19d67c621c0669d


****Parsing for addition at revision 97d177f377dbb4a559f7a629a19d67c621c0669d****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RootHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added ArrayInfo.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added StatisticsCollectingHandler.java to .\hprof-parser\ repository source files.
Added TypeInfo.java to .\hprof-parser\ repository source files.
Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added HprofParserException.java to .\hprof-parser\ repository source files.
Added AllExampleHandlersTest.java to .\hprof-parser\ repository source files.
Added NonNullTest.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo(stringMap.get(classNameStringId));
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
ClassInfo classInfo = new ClassInfo();
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
String typeDescriptor = "[" + classMap.get(elemClassObjId).className;
int length = elems != null ? elems.length : 0;
elemType=Type.hprofTypeToEnum(hprofElemType)
Type elemType = Type.hprofTypeToEnum(hprofElemType);
String typeDescriptor = "[" + elemType.toString();
int length = elems != null ? elems.length : 0;
ArrayInfo arrayInfo = (ArrayInfo) arrayInfoMap.get(typeDescriptor);
Comparator<TypeInfo> totalSizeComparator = new Comparator<TypeInfo>() {
      @Override
      public int compare(TypeInfo cls1, TypeInfo cls2) {
        return Ints.checkedCast(cls2.totalSize() - cls1.totalSize());
      }
    };
List<TypeInfo> typeInfoList = new ArrayList<>(classMap.values());
argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
boolean done;
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
byte tag;
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = new Constant[s1];
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = new Static[s2];
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = new InstanceField[s3];
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?>[] vs = new Value[i2];
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value<?>> values = new ArrayList<>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value<?>[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;
PrintStream throwawayPrintStream = new PrintStream(new OutputStream() {
      @Override
      public void write(int b) throws IOException {
        // do nothing
      }
    });
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(NULL_CHECKER_HANDLER);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.examples.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of 97d177f377dbb4a559f7a629a19d67c621c0669d and a3f635aaf9e4f9345fa81ac3b4f6b15a871a1ccb:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 97d177f377dbb4a559f7a629a19d67c621c0669d to a3f635aaf9e4f9345fa81ac3b4f6b15a871a1ccb


****Parsing for addition at revision a3f635aaf9e4f9345fa81ac3b4f6b15a871a1ccb****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RootHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added ArrayInfo.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added StatisticsCollectingHandler.java to .\hprof-parser\ repository source files.
Added TypeInfo.java to .\hprof-parser\ repository source files.
Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added HprofParserException.java to .\hprof-parser\ repository source files.
Added AllExampleHandlersTest.java to .\hprof-parser\ repository source files.
Added NonNullTest.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo(stringMap.get(classNameStringId));
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
ClassInfo classInfo = new ClassInfo();
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
String typeDescriptor = "[" + classMap.get(elemClassObjId).className;
int length = elems != null ? elems.length : 0;
elemType=Type.hprofTypeToEnum(hprofElemType)
Type elemType = Type.hprofTypeToEnum(hprofElemType);
String typeDescriptor = "[" + elemType.toString();
int length = elems != null ? elems.length : 0;
ArrayInfo arrayInfo = (ArrayInfo) arrayInfoMap.get(typeDescriptor);
Comparator<TypeInfo> totalSizeComparator = new Comparator<TypeInfo>() {
      @Override
      public int compare(TypeInfo cls1, TypeInfo cls2) {
        return Ints.checkedCast(cls2.totalSize() - cls1.totalSize());
      }
    };
List<TypeInfo> typeInfoList = new ArrayList<>(classMap.values());
argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
boolean done;
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
byte tag;
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = new Constant[s1];
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = new Static[s2];
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = new InstanceField[s3];
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?>[] vs = new Value[i2];
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value<?>> values = new ArrayList<>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value<?>[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;
PrintStream throwawayPrintStream = new PrintStream(new OutputStream() {
      @Override
      public void write(int b) throws IOException {
        // do nothing
      }
    });
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(NULL_CHECKER_HANDLER);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.examples.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of a3f635aaf9e4f9345fa81ac3b4f6b15a871a1ccb and 755c21c9172b0300bb3edff81f5079c3e9433143:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision a3f635aaf9e4f9345fa81ac3b4f6b15a871a1ccb to 755c21c9172b0300bb3edff81f5079c3e9433143


****Parsing for addition at revision 755c21c9172b0300bb3edff81f5079c3e9433143****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RootHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added ArrayInfo.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added StatisticsCollectingHandler.java to .\hprof-parser\ repository source files.
Added TypeInfo.java to .\hprof-parser\ repository source files.
Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added HprofParserException.java to .\hprof-parser\ repository source files.
Added AllExampleHandlersTest.java to .\hprof-parser\ repository source files.
Added NonNullTest.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo(stringMap.get(classNameStringId));
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
ClassInfo classInfo = new ClassInfo();
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
String typeDescriptor = "[" + classMap.get(elemClassObjId).className;
int length = elems != null ? elems.length : 0;
elemType=Type.hprofTypeToEnum(hprofElemType)
Type elemType = Type.hprofTypeToEnum(hprofElemType);
String typeDescriptor = "[" + elemType.toString();
int length = elems != null ? elems.length : 0;
ArrayInfo arrayInfo = (ArrayInfo) arrayInfoMap.get(typeDescriptor);
Comparator<TypeInfo> totalSizeComparator = new Comparator<TypeInfo>() {
      @Override
      public int compare(TypeInfo cls1, TypeInfo cls2) {
        return Ints.checkedCast(cls2.totalSize() - cls1.totalSize());
      }
    };
List<TypeInfo> typeInfoList = new ArrayList<>(classMap.values());
argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
boolean done;
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
byte tag;
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = new Constant[s1];
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = new Static[s2];
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = new InstanceField[s3];
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?>[] vs = new Value[i2];
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value<?>> values = new ArrayList<>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value<?>[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;
PrintStream throwawayPrintStream = new PrintStream(new OutputStream() {
      @Override
      public void write(int b) throws IOException {
        // do nothing
      }
    });
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(NULL_CHECKER_HANDLER);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.examples.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of 755c21c9172b0300bb3edff81f5079c3e9433143 and da8faf6970c60051f24f8de741d27b524f6648b5:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 755c21c9172b0300bb3edff81f5079c3e9433143 to da8faf6970c60051f24f8de741d27b524f6648b5


****Parsing for addition at revision da8faf6970c60051f24f8de741d27b524f6648b5****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RootHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added ArrayInfo.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added StatisticsCollectingHandler.java to .\hprof-parser\ repository source files.
Added TypeInfo.java to .\hprof-parser\ repository source files.
Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added HprofParserException.java to .\hprof-parser\ repository source files.
Added AllExampleHandlersTest.java to .\hprof-parser\ repository source files.
Added NonNullTest.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo(stringMap.get(classNameStringId));
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);

 Generics pattern private static class ClassInfo was added at revision da8faf6970c60051f24f8de741d27b524f6648b5

ClassInfo classInfo = new ClassInfo();
className=stringMap.get(classNameStringId)
String className = stringMap.get(classNameStringId);
int size = OBJECT_HEADER_SIZE_BYTES;
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
String typeDescriptor = "[" + classMap.get(elemClassObjId).className;
int length = elems != null ? elems.length : 0;
elemType=Type.hprofTypeToEnum(hprofElemType)
Type elemType = Type.hprofTypeToEnum(hprofElemType);
String typeDescriptor = "[" + elemType.toString();
int length = elems != null ? elems.length : 0;
ArrayInfo arrayInfo = (ArrayInfo) arrayInfoMap.get(typeDescriptor);
Comparator<TypeInfo> totalSizeComparator = new Comparator<TypeInfo>() {
      @Override
      public int compare(TypeInfo cls1, TypeInfo cls2) {
        return Ints.checkedCast(cls2.totalSize() - cls1.totalSize());
      }
    };
List<TypeInfo> typeInfoList = new ArrayList<>(classMap.values());
argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
boolean done;
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
byte tag;
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = new Constant[s1];
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = new Static[s2];
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = new InstanceField[s3];
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?>[] vs = new Value[i2];
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value<?>> values = new ArrayList<>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value<?>[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;
PrintStream throwawayPrintStream = new PrintStream(new OutputStream() {
      @Override
      public void write(int b) throws IOException {
        // do nothing
      }
    });
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(NULL_CHECKER_HANDLER);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.examples.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of da8faf6970c60051f24f8de741d27b524f6648b5 and e60da8784554bcb878e0fdfa04c425a5ecb54b4d:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision da8faf6970c60051f24f8de741d27b524f6648b5 to e60da8784554bcb878e0fdfa04c425a5ecb54b4d


****Parsing for addition at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RootHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added ArrayInfo.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added StatisticsCollectingHandler.java to .\hprof-parser\ repository source files.
Added TypeInfo.java to .\hprof-parser\ repository source files.
Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added HprofParserException.java to .\hprof-parser\ repository source files.
Added AllExampleHandlersTest.java to .\hprof-parser\ repository source files.
Added NonNullTest.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
ClassInfo classInfo = new ClassInfo();
className=stringMap.get(classNameStringId)
String className = stringMap.get(classNameStringId);
int size = OBJECT_HEADER_SIZE_BYTES;
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
String typeDescriptor = "[" + classMap.get(elemClassObjId).className;
int length = elems != null ? elems.length : 0;
elemType=Type.hprofTypeToEnum(hprofElemType)
Type elemType = Type.hprofTypeToEnum(hprofElemType);
String typeDescriptor = "[" + elemType.toString();
int length = elems != null ? elems.length : 0;
ArrayInfo arrayInfo = (ArrayInfo) arrayInfoMap.get(typeDescriptor);
Comparator<TypeInfo> totalSizeComparator = new Comparator<TypeInfo>() {
      @Override
      public int compare(TypeInfo cls1, TypeInfo cls2) {
        return Ints.checkedCast(cls2.totalSize() - cls1.totalSize());
      }
    };
List<TypeInfo> typeInfoList = new ArrayList<>(classMap.values());
argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));

 Generics pattern public class Value<T> was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern public final T value; was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d

format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
boolean done;
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
byte tag;
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = new Constant[s1];
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = new Static[s2];
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = new InstanceField[s3];
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value<?>[] vs = new Value[i2];
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value<?>> values = new ArrayList<>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value<?> v = null;
Value<?> v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value<?>[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

 Generics pattern new Value<>(t, vobj) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(t, vbool) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(t, vc) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(t, vf) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(t, vd) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(t, vbyte) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(t, vshort) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(t, vi) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(t, vlong) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new ArrayList<>() was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(field.type, vid) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(field.type, vbool) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(field.type, vc) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(field.type, vf) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(field.type, vd) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(field.type, vbyte) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(field.type, vs) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(field.type, vi) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d


 Generics pattern new Value<>(field.type, vl) was added at revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d

PrintStream throwawayPrintStream = new PrintStream(new OutputStream() {
      @Override
      public void write(int b) throws IOException {
        // do nothing
      }
    });
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(NULL_CHECKER_HANDLER);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.examples.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of e60da8784554bcb878e0fdfa04c425a5ecb54b4d and 5d7032e0e33e68d19aea893cb4a9a0f3ada0585b:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 64
	--> recency = years
	--> Added type declarations  = 2
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 55
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 27
	--> recency = years
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision e60da8784554bcb878e0fdfa04c425a5ecb54b4d to 5d7032e0e33e68d19aea893cb4a9a0f3ada0585b


****Parsing for addition at revision 5d7032e0e33e68d19aea893cb4a9a0f3ada0585b****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RootHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added ArrayInfo.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added StatisticsCollectingHandler.java to .\hprof-parser\ repository source files.
Added TypeInfo.java to .\hprof-parser\ repository source files.
Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added HprofParserException.java to .\hprof-parser\ repository source files.
Added AllExampleHandlersTest.java to .\hprof-parser\ repository source files.
Added NonNullTest.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
ClassInfo classInfo = new ClassInfo();
className=stringMap.get(classNameStringId)
String className = stringMap.get(classNameStringId);
int size = OBJECT_HEADER_SIZE_BYTES;
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
String typeDescriptor = "[" + classMap.get(elemClassObjId).className;
int length = elems != null ? elems.length : 0;
elemType=Type.hprofTypeToEnum(hprofElemType)
Type elemType = Type.hprofTypeToEnum(hprofElemType);
String typeDescriptor = "[" + elemType.toString();
int length = elems != null ? elems.length : 0;
ArrayInfo arrayInfo = (ArrayInfo) arrayInfoMap.get(typeDescriptor);
Comparator<TypeInfo> totalSizeComparator = new Comparator<TypeInfo>() {
      @Override
      public int compare(TypeInfo cls1, TypeInfo cls2) {
        return Ints.checkedCast(cls2.totalSize() - cls1.totalSize());
      }
    };
List<TypeInfo> typeInfoList = new ArrayList<>(classMap.values());
argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
boolean done;
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
byte tag;
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = new Constant[s1];
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = new Static[s2];
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = new InstanceField[s3];
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = new Value[i2];
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

 Generics pattern public class HprofParserException was added at revision 5d7032e0e33e68d19aea893cb4a9a0f3ada0585b

PrintStream throwawayPrintStream = new PrintStream(new OutputStream() {
      @Override
      public void write(int b) throws IOException {
        // do nothing
      }
    });
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(NULL_CHECKER_HANDLER);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.examples.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of 5d7032e0e33e68d19aea893cb4a9a0f3ada0585b and 59d6873a8031daf99e9cd0d28284dff9ceb7a74c:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 64
	--> recency = years
	--> Added type declarations  = 3
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 55
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 27
	--> recency = years
	--> Added class instantiations = 1
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5d7032e0e33e68d19aea893cb4a9a0f3ada0585b to 59d6873a8031daf99e9cd0d28284dff9ceb7a74c


****Parsing for addition at revision 59d6873a8031daf99e9cd0d28284dff9ceb7a74c****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RootHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added ArrayInfo.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added StatisticsCollectingHandler.java to .\hprof-parser\ repository source files.
Added TypeInfo.java to .\hprof-parser\ repository source files.
Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added HprofParserException.java to .\hprof-parser\ repository source files.
Added UnexpectedRecordTypeException.java to .\hprof-parser\ repository source files.
Added UnexpectedSubRecordTypeException.java to .\hprof-parser\ repository source files.
Added AllExampleHandlersTest.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
ClassInfo classInfo = new ClassInfo();
className=stringMap.get(classNameStringId)
String className = stringMap.get(classNameStringId);
int size = OBJECT_HEADER_SIZE_BYTES;
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
String typeDescriptor = "[" + classMap.get(elemClassObjId).className;
int length = elems != null ? elems.length : 0;
elemType=Type.hprofTypeToEnum(hprofElemType)
Type elemType = Type.hprofTypeToEnum(hprofElemType);
String typeDescriptor = "[" + elemType.toString();
int length = elems != null ? elems.length : 0;
ArrayInfo arrayInfo = (ArrayInfo) arrayInfoMap.get(typeDescriptor);
Comparator<TypeInfo> totalSizeComparator = new Comparator<TypeInfo>() {
      @Override
      public int compare(TypeInfo cls1, TypeInfo cls2) {
        return Ints.checkedCast(cls2.totalSize() - cls1.totalSize());
      }
    };
List<TypeInfo> typeInfoList = new ArrayList<>(classMap.values());
argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
boolean done;
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
byte tag;
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;
PrintStream throwawayPrintStream = new PrintStream(new OutputStream() {
      @Override
      public void write(int b) throws IOException {
        // do nothing
      }
    });
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.examples.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of 59d6873a8031daf99e9cd0d28284dff9ceb7a74c and 0cd0c1d63d6e67eb007aacce5af5da8b9d64fd37:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 64
	--> recency = years
	--> Added type declarations  = 3
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 55
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 27
	--> recency = years
	--> Added class instantiations = 1
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 59d6873a8031daf99e9cd0d28284dff9ceb7a74c to 0cd0c1d63d6e67eb007aacce5af5da8b9d64fd37


****Parsing for addition at revision 0cd0c1d63d6e67eb007aacce5af5da8b9d64fd37****

Added ArrayInfo.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added StatisticsCollectingHandler.java to .\hprof-parser\ repository source files.
Added TypeInfo.java to .\hprof-parser\ repository source files.
Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added RootHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added HprofParserException.java to .\hprof-parser\ repository source files.
Added UnexpectedRecordTypeException.java to .\hprof-parser\ repository source files.
Added UnexpectedSubRecordTypeException.java to .\hprof-parser\ repository source files.
Added AllExampleHandlersTest.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
ClassInfo classInfo = new ClassInfo();
className=stringMap.get(classNameStringId)
String className = stringMap.get(classNameStringId);
int size = OBJECT_HEADER_SIZE_BYTES;
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
String typeDescriptor = "[" + classMap.get(elemClassObjId).className;
int length = elems != null ? elems.length : 0;
elemType=Type.hprofTypeToEnum(hprofElemType)
Type elemType = Type.hprofTypeToEnum(hprofElemType);
String typeDescriptor = "[" + elemType.toString();
int length = elems != null ? elems.length : 0;
ArrayInfo arrayInfo = (ArrayInfo) arrayInfoMap.get(typeDescriptor);
Comparator<TypeInfo> totalSizeComparator = new Comparator<TypeInfo>() {
      @Override
      public int compare(TypeInfo cls1, TypeInfo cls2) {
        return Ints.checkedCast(cls2.totalSize() - cls1.totalSize());
      }
    };
List<TypeInfo> typeInfoList = new ArrayList<>(classMap.values());
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
boolean done;
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
byte tag;
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;
PrintStream throwawayPrintStream = new PrintStream(new OutputStream() {
      @Override
      public void write(int b) throws IOException {
        // do nothing
      }
    });
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of 0cd0c1d63d6e67eb007aacce5af5da8b9d64fd37 and cb0fd77118f98902ffeb4d5eca1b46074f29bd74:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 64
	--> recency = years
	--> Added type declarations  = 3
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 55
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 27
	--> recency = years
	--> Added class instantiations = 1
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 0cd0c1d63d6e67eb007aacce5af5da8b9d64fd37 to cb0fd77118f98902ffeb4d5eca1b46074f29bd74


****Parsing for addition at revision cb0fd77118f98902ffeb4d5eca1b46074f29bd74****

Added ArrayInfo.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added StatisticsCollectingHandler.java to .\hprof-parser\ repository source files.
Added TypeInfo.java to .\hprof-parser\ repository source files.
Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added RootHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added AllExampleHandlersTest.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
ClassInfo classInfo = new ClassInfo();
className=stringMap.get(classNameStringId)
String className = stringMap.get(classNameStringId);
int size = OBJECT_HEADER_SIZE_BYTES;
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
String typeDescriptor = "[" + classMap.get(elemClassObjId).className;
int length = elems != null ? elems.length : 0;
elemType=Type.hprofTypeToEnum(hprofElemType)
Type elemType = Type.hprofTypeToEnum(hprofElemType);
String typeDescriptor = "[" + elemType.toString();
int length = elems != null ? elems.length : 0;
ArrayInfo arrayInfo = (ArrayInfo) arrayInfoMap.get(typeDescriptor);
Comparator<TypeInfo> totalSizeComparator = new Comparator<TypeInfo>() {
      @Override
      public int compare(TypeInfo cls1, TypeInfo cls2) {
        return Ints.checkedCast(cls2.totalSize() - cls1.totalSize());
      }
    };
List<TypeInfo> typeInfoList = new ArrayList<>(classMap.values());
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;
PrintStream throwawayPrintStream = new PrintStream(new OutputStream() {
      @Override
      public void write(int b) throws IOException {
        // do nothing
      }
    });
testFilePath=getAbsolutePathForResource("java.hprof")
String testFilePath = getAbsolutePathForResource("java.hprof");
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(testFilePath);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of cb0fd77118f98902ffeb4d5eca1b46074f29bd74 and 036f0884afcdd6193234847461eaf0934ea6fc42:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 64
	--> recency = years
	--> Added type declarations  = 3
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 55
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 27
	--> recency = years
	--> Added class instantiations = 1
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision cb0fd77118f98902ffeb4d5eca1b46074f29bd74 to 036f0884afcdd6193234847461eaf0934ea6fc42


****Parsing for addition at revision 036f0884afcdd6193234847461eaf0934ea6fc42****

Added ArrayInfo.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added StatisticsCollectingHandler.java to .\hprof-parser\ repository source files.
Added TypeInfo.java to .\hprof-parser\ repository source files.
Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added RootHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
ClassInfo classInfo = new ClassInfo();
className=stringMap.get(classNameStringId)
String className = stringMap.get(classNameStringId);
int size = OBJECT_HEADER_SIZE_BYTES;
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
String typeDescriptor = "[" + classMap.get(elemClassObjId).className;
int length = elems != null ? elems.length : 0;
elemType=Type.hprofTypeToEnum(hprofElemType)
Type elemType = Type.hprofTypeToEnum(hprofElemType);
String typeDescriptor = "[" + elemType.toString();
int length = elems != null ? elems.length : 0;
ArrayInfo arrayInfo = (ArrayInfo) arrayInfoMap.get(typeDescriptor);
Comparator<TypeInfo> totalSizeComparator = new Comparator<TypeInfo>() {
      @Override
      public int compare(TypeInfo cls1, TypeInfo cls2) {
        return Ints.checkedCast(cls2.totalSize() - cls1.totalSize());
      }
    };
List<TypeInfo> typeInfoList = new ArrayList<>(classMap.values());
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of 036f0884afcdd6193234847461eaf0934ea6fc42 and 1cf1c97e6ed084e0b228ea0e6e294dc5b3c562cc:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 64
	--> recency = years
	--> Added type declarations  = 3
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 55
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 27
	--> recency = years
	--> Added class instantiations = 2
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 036f0884afcdd6193234847461eaf0934ea6fc42 to 1cf1c97e6ed084e0b228ea0e6e294dc5b3c562cc


****Parsing for addition at revision 1cf1c97e6ed084e0b228ea0e6e294dc5b3c562cc****

Added ArrayInfo.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added StatisticsCollectingHandler.java to .\hprof-parser\ repository source files.
Added TypeInfo.java to .\hprof-parser\ repository source files.
Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added RootHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
ClassInfo classInfo = new ClassInfo();
className=stringMap.get(classNameStringId)
String className = stringMap.get(classNameStringId);
int size = OBJECT_HEADER_SIZE_BYTES;
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
ClassInfo classInfo = (ClassInfo) classMap.get(classObjId);
String typeDescriptor = "[" + classMap.get(elemClassObjId).className;
int length = elems != null ? elems.length : 0;
elemType=Type.hprofTypeToEnum(hprofElemType)
Type elemType = Type.hprofTypeToEnum(hprofElemType);
String typeDescriptor = "[" + elemType.toString();
int length = elems != null ? elems.length : 0;
ArrayInfo arrayInfo = (ArrayInfo) arrayInfoMap.get(typeDescriptor);
Comparator<TypeInfo> instanceCountComparator = new Comparator<TypeInfo>() {
      @Override
      public int compare(TypeInfo cls1, TypeInfo cls2) {
        return Ints.checkedCast(cls2.totalSize() - cls1.totalSize());
      }
    };
List<TypeInfo> typeInfoList = new ArrayList<>(classMap.values());
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of 1cf1c97e6ed084e0b228ea0e6e294dc5b3c562cc and 8aa66f3c6562f0eca00758e274992688027d8444:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 64
	--> recency = years
	--> Added type declarations  = 3
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 55
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 27
	--> recency = years
	--> Added class instantiations = 2
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 1cf1c97e6ed084e0b228ea0e6e294dc5b3c562cc to 8aa66f3c6562f0eca00758e274992688027d8444


****Parsing for addition at revision 8aa66f3c6562f0eca00758e274992688027d8444****

Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added RootHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added StatisticsCollectingHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();

 Generics pattern public class RootHandler was added at revision 8aa66f3c6562f0eca00758e274992688027d8444

ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
ClassInfo classInfo = new ClassInfo();
className=stringMap.get(classNameStringId)
String className = stringMap.get(classNameStringId);
classInfo=classMap.get(classObjId)
ClassInfo classInfo = classMap.get(classObjId);
String typeDescriptor = "[" + classMap.get(elemClassObjId).className;
int length = elems != null ? elems.length : 0;
elemType=Type.hprofTypeToEnum(hprofElemType)
Type elemType = Type.hprofTypeToEnum(hprofElemType);
String typeDescriptor = "[" + elemType.toString();
int length = elems != null ? elems.length : 0;
classInfo=arrayInfoMap.get(typeDescriptor)
ClassInfo classInfo = arrayInfoMap.get(typeDescriptor);
Comparator<ClassInfo> instanceCountComparator = new Comparator<ClassInfo>() {
      @Override
      public int compare(ClassInfo cls1, ClassInfo cls2) {
        return Ints.checkedCast(cls2.instanceCount - cls1.instanceCount);
      }
    };
List<ClassInfo> classInfoList = new ArrayList<>(classMap.values());

 Generics pattern public class StatisticsCollectingHandler was added at revision 8aa66f3c6562f0eca00758e274992688027d8444


 Generics pattern private static class ClassInfo was added at revision 8aa66f3c6562f0eca00758e274992688027d8444


 Generics pattern new Comparator<ClassInfo>() was added at revision 8aa66f3c6562f0eca00758e274992688027d8444


 Generics pattern new ArrayList<>(classMap.values()) was added at revision 8aa66f3c6562f0eca00758e274992688027d8444

argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of 8aa66f3c6562f0eca00758e274992688027d8444 and 3954c0502191ec32c37599c063ccd6d9db5cc8e8:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 64
	--> recency = years
	--> Added type declarations  = 6
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 27
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 8aa66f3c6562f0eca00758e274992688027d8444 to 3954c0502191ec32c37599c063ccd6d9db5cc8e8


****Parsing for addition at revision 3954c0502191ec32c37599c063ccd6d9db5cc8e8****

Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of 3954c0502191ec32c37599c063ccd6d9db5cc8e8 and fca9f57f36b0825916a6427795ef7c3143442033:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 64
	--> recency = years
	--> Added type declarations  = 6
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 27
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 3954c0502191ec32c37599c063ccd6d9db5cc8e8 to fca9f57f36b0825916a6427795ef7c3143442033


****Parsing for addition at revision fca9f57f36b0825916a6427795ef7c3143442033****

Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added IntegrationTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
argList=Lists.newArrayList(args)
List<String> argList = Lists.newArrayList(args);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=arg.substring("--handler=".length())
String handlerClassName = arg.substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(argList.get(argList.size() - 1));
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;
String[] args = {getAbsolutePathForResource("java.hprof")};
String[] args = {"--handler=edu.tufts.eaftan.hprofparser.handler.StaticPrintHandler", 
        getAbsolutePathForResource("java.hprof")};

Diff of fca9f57f36b0825916a6427795ef7c3143442033 and 5631e732a861f413b8e0f6ea1813a8f178a087de:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 66
	--> recency = years
	--> Added type declarations  = 6
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 28
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision fca9f57f36b0825916a6427795ef7c3143442033 to 5631e732a861f413b8e0f6ea1813a8f178a087de


****Parsing for addition at revision 5631e732a861f413b8e0f6ea1813a8f178a087de****

Added NullRecordHandler.java to .\hprof-parser\ repository source files.
Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER;
handlerClassName=args[0].substring("--handler=".length())
String handlerClassName = args[0].substring("--handler=".length());
RecordHandler handler = null;
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(args[0]);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));

 Generics pattern Class<? extends RecordHandler> handlerClass = DEFAULT_HANDLER; was added at revision 5631e732a861f413b8e0f6ea1813a8f178a087de

format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

Diff of 5631e732a861f413b8e0f6ea1813a8f178a087de and 007f45da73910ecbff1cdf6d4306eb8e8f1c26f6:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 72
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 32
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5631e732a861f413b8e0f6ea1813a8f178a087de to 007f45da73910ecbff1cdf6d4306eb8e8f1c26f6


****Parsing for addition at revision 007f45da73910ecbff1cdf6d4306eb8e8f1c26f6****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
RecordHandler handler = new PrintHandler();
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(args[0]);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

Diff of 007f45da73910ecbff1cdf6d4306eb8e8f1c26f6 and 206fe15adf9152874de7842486d958ce3d7ecffb:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 72
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 32
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 007f45da73910ecbff1cdf6d4306eb8e8f1c26f6 to 206fe15adf9152874de7842486d958ce3d7ecffb


****Parsing for addition at revision 206fe15adf9152874de7842486d958ce3d7ecffb****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added AppTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
RecordHandler handler = new PrintHandler();
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(args[0]);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

Diff of 206fe15adf9152874de7842486d958ce3d7ecffb and f6d73798fd5cf53f885c387db777d43c6825e4ee:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 72
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 32
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 206fe15adf9152874de7842486d958ce3d7ecffb to f6d73798fd5cf53f885c387db777d43c6825e4ee


****Parsing for addition at revision f6d73798fd5cf53f885c387db777d43c6825e4ee****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added AppTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
RecordHandler handler = new PrintHandler();
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(args[0]);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

Diff of f6d73798fd5cf53f885c387db777d43c6825e4ee and 4394e602c6d13bcb59d7279cc9a11b0c5f451803:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 72
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 32
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision f6d73798fd5cf53f885c387db777d43c6825e4ee to 4394e602c6d13bcb59d7279cc9a11b0c5f451803


****Parsing for addition at revision 4394e602c6d13bcb59d7279cc9a11b0c5f451803****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added AppTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
RecordHandler handler = new PrintHandler();
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(args[0]);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

Diff of 4394e602c6d13bcb59d7279cc9a11b0c5f451803 and f9ca4893681a925beb41433391b1721c9645a27b:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 72
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 32
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 4394e602c6d13bcb59d7279cc9a11b0c5f451803 to f9ca4893681a925beb41433391b1721c9645a27b


****Parsing for addition at revision f9ca4893681a925beb41433391b1721c9645a27b****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
Added AppTest.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
RecordHandler handler = new PrintHandler();
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(args[0]);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

Diff of f9ca4893681a925beb41433391b1721c9645a27b and 17b08a3324539792f6905adb32047b598116ce6f:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 72
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 32
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision f9ca4893681a925beb41433391b1721c9645a27b to 17b08a3324539792f6905adb32047b598116ce6f


****Parsing for addition at revision 17b08a3324539792f6905adb32047b598116ce6f****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
RecordHandler handler = new PrintHandler();
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(args[0]);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

Diff of 17b08a3324539792f6905adb32047b598116ce6f and f62211278f7ca77be71431fc2cf2ce3cbb1da175:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 72
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 32
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 17b08a3324539792f6905adb32047b598116ce6f to f62211278f7ca77be71431fc2cf2ce3cbb1da175


****Parsing for addition at revision f62211278f7ca77be71431fc2cf2ce3cbb1da175****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
RecordHandler handler = new PrintHandler();
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(args[0]);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

Diff of f62211278f7ca77be71431fc2cf2ce3cbb1da175 and 579c9cfceea6593a7eddd2cf5a2b5a48d09a67d3:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 72
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 32
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision f62211278f7ca77be71431fc2cf2ce3cbb1da175 to 579c9cfceea6593a7eddd2cf5a2b5a48d09a67d3


****Parsing for addition at revision 579c9cfceea6593a7eddd2cf5a2b5a48d09a67d3****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
RecordHandler handler = new PrintHandler();
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(args[0]);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

Diff of 579c9cfceea6593a7eddd2cf5a2b5a48d09a67d3 and 89142a106f90939f340ce395ae9cc26006c64693:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 72
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 32
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 579c9cfceea6593a7eddd2cf5a2b5a48d09a67d3 to 89142a106f90939f340ce395ae9cc26006c64693


****Parsing for addition at revision 89142a106f90939f340ce395ae9cc26006c64693****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
RecordHandler handler = new PrintHandler();
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(args[0]);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

Diff of 89142a106f90939f340ce395ae9cc26006c64693 and 5835e97afb4d150b107a371fc385a17db51da006:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 72
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 32
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 89142a106f90939f340ce395ae9cc26006c64693 to 5835e97afb4d150b107a371fc385a17db51da006


****Parsing for addition at revision 5835e97afb4d150b107a371fc385a17db51da006****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
RecordHandler handler = new PrintHandler();
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(args[0]);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

Diff of 5835e97afb4d150b107a371fc385a17db51da006 and fd75a6cda9a793cd9b221ec9a17150dae195d6ad:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 72
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 32
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5835e97afb4d150b107a371fc385a17db51da006 to fd75a6cda9a793cd9b221ec9a17150dae195d6ad


****Parsing for addition at revision fd75a6cda9a793cd9b221ec9a17150dae195d6ad****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
RecordHandler handler = new PrintHandler();
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(args[0]);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

Diff of fd75a6cda9a793cd9b221ec9a17150dae195d6ad and daeda2152e27ce32abbcd5a8b014a928d809876d:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 72
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 32
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision fd75a6cda9a793cd9b221ec9a17150dae195d6ad to daeda2152e27ce32abbcd5a8b014a928d809876d


****Parsing for addition at revision daeda2152e27ce32abbcd5a8b014a928d809876d****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
ClassInfo cls = new ClassInfo();
cls=classMap.get(classObjId)
ClassInfo cls = classMap.get(classObjId);
RecordHandler handler = new PrintHandler();
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(args[0]);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

Diff of daeda2152e27ce32abbcd5a8b014a928d809876d and 1efa77d7f7529a417df1703a8ad05fa0b35aeb11:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 72
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 32
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision daeda2152e27ce32abbcd5a8b014a928d809876d to 1efa77d7f7529a417df1703a8ad05fa0b35aeb11


****Parsing for addition at revision 1efa77d7f7529a417df1703a8ad05fa0b35aeb11****

Added PrintHandler.java to .\hprof-parser\ repository source files.
Added RecordHandler.java to .\hprof-parser\ repository source files.
Added StaticPrintHandler.java to .\hprof-parser\ repository source files.
Added Parse.java to .\hprof-parser\ repository source files.
Added AllocSite.java to .\hprof-parser\ repository source files.
Added ClassInfo.java to .\hprof-parser\ repository source files.
Added Constant.java to .\hprof-parser\ repository source files.
Added CPUSample.java to .\hprof-parser\ repository source files.
Added Instance.java to .\hprof-parser\ repository source files.
Added InstanceField.java to .\hprof-parser\ repository source files.
Added Static.java to .\hprof-parser\ repository source files.
Added Type.java to .\hprof-parser\ repository source files.
Added Value.java to .\hprof-parser\ repository source files.
Added HprofParser.java to .\hprof-parser\ repository source files.
int i = 0;
long nextClass = classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
SimpleDateFormat formatter = 
        new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");
calendar=Calendar.getInstance()
Calendar calendar = Calendar.getInstance();
Class cls = new Class();
cls=classMap.get(classObjId)
Class cls = classMap.get(classObjId);
RecordHandler handler = new PrintHandler();
HprofParser parser = new HprofParser(handler);
FileInputStream fs = new FileInputStream(args[0]);
DataInputStream in = new DataInputStream(new BufferedInputStream(fs));
format=readUntilNull(in)
String format = readUntilNull(in);
idSize=in.readInt()
int idSize = in.readInt();
startTime=in.readLong()
long startTime = in.readLong();
int bytesRead = 0;
byte[] bytes = new byte[25];
byte[] newBytes = new byte[bytesRead + 20];
tag=in.readByte()
byte tag = in.readByte();
time=in.readInt()
int time = in.readInt();
bytesLeft=in.readInt()
int bytesLeft = in.readInt();
long l1, l2, l3, l4;
int i1, i2, i3, i4, i5, i6, i7, i8, i9;
short s1;
byte b1;
float f1;
byte[] bArr1;
long[] lArr1;
AllocSite[] allocSites = new AllocSite[i3];
CPUSample[] samples = new CPUSample[i2];
tag=in.readByte()
byte tag = in.readByte();
int bytesRead = 1;
long l1, l2, l3, l4, l5, l6, l7;
int i1, i2;
short s1, s2, s3;
byte b1;
byte[] bArr1;
long [] lArr1;
Constant[] constants = null;
constantPoolIndex=in.readShort()
short constantPoolIndex = in.readShort();
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
Static[] statics = null;
staticFieldNameStringId=readId(idSize,in)
long staticFieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value v = null;
vid=readId(idSize,in)
long vid = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vs=in.readShort()
short vs = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vl=in.readLong()
long vl = in.readLong();
InstanceField[] instanceFields = null;
fieldNameStringId=readId(idSize,in)
long fieldNameStringId = readId(idSize, in);
btype=in.readByte()
byte btype = in.readByte();
type=Type.hprofTypeToEnum(btype)
Type type = Type.hprofTypeToEnum(btype);
Value[] vs = null;
t=Type.hprofTypeToEnum(b1)
Type t = Type.hprofTypeToEnum(b1);
vobj=readId(idSize,in)
long vobj = readId(idSize, in);
vbool=in.readBoolean()
boolean vbool = in.readBoolean();
vc=in.readChar()
char vc = in.readChar();
vf=in.readFloat()
float vf = in.readFloat();
vd=in.readDouble()
double vd = in.readDouble();
vbyte=in.readByte()
byte vbyte = in.readByte();
vshort=in.readShort()
short vshort = in.readShort();
vi=in.readInt()
int vi = in.readInt();
vlong=in.readLong()
long vlong = in.readLong();
ByteArrayInputStream bs = new ByteArrayInputStream(i.packedValues);
DataInputStream input = new DataInputStream(bs);
ArrayList<Value> values = new ArrayList<Value>();
long nextClass = i.classObjId;
ci=classMap.get(nextClass)
ClassInfo ci = classMap.get(nextClass);
Value v = null;
vid=readId(idSize,input)
long vid = readId(idSize, input);
vbool=input.readBoolean()
boolean vbool = input.readBoolean();
vc=input.readChar()
char vc = input.readChar();
vf=input.readFloat()
float vf = input.readFloat();
vd=input.readDouble()
double vd = input.readDouble();
vbyte=input.readByte()
byte vbyte = input.readByte();
vs=input.readShort()
short vs = input.readShort();
vi=input.readInt()
int vi = input.readInt();
vl=input.readLong()
long vl = input.readLong();
Value[] valuesArr = new Value[values.size()];
long id = -1;
int bytesRead = 0;

Diff of 1efa77d7f7529a417df1703a8ad05fa0b35aeb11 and b1d78eced4bb333a8e31420f3c7716c98c3cda61:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 72
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 1
	--> recency = years
	--> Added diamonds = 56
	--> recency = years
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 32
	--> recency = years
	--> Added class instantiations = 3
	--> recency = years
	--> Added nested = 7
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision 1efa77d7f7529a417df1703a8ad05fa0b35aeb11 to b1d78eced4bb333a8e31420f3c7716c98c3cda61

************Analysis complete************
Added generics to repository hprof-parser = 29

Eddie Aftandilian added type argument method count = 0
	--> recency = null
Eddie Aftandilian added wildcard count = 72
	--> recency = years
Eddie Aftandilian added type declaration count = 8
	--> recency = years
Eddie Aftandilian added type parameter method count = 0
	--> recency = null
Eddie Aftandilian added type parameter field count = 1
	--> recency = years
Eddie Aftandilian added diamond count = 56
	--> recency = years
Eddie Aftandilian added method invocation count = 0
	--> recency = null
Eddie Aftandilian added implicit method invocation count = 32
	--> recency = years
Eddie Aftandilian added class instantiation count = 3
	--> recency = years
Eddie Aftandilian added nested count = 7
	--> recency = null
Eddie Aftandilian added bounds count = 0
	--> recency = null
File copied successfully!
