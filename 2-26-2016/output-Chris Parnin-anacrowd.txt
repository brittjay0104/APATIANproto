anacrowd -- chrisparnin -- Chris Parnin
https://github.com/chrisparnin/anacrowd.git
git clone https://github.com/chrisparnin/anacrowd.git
.\anacrowd\
.\anacrowd\.git
0
Project cloned!
Chris Parnin is responsible for commit b23b19c93306a4fdfd82a36c7caf701193b13f69
Chris Parnin is responsible for commit 5c59c8d7f019e3009a399213869e568c1e3b1d4e
Chris Parnin is responsible for commit 2581765fb3c57fb378995d11d9206fecbadbf6eb
Chris Parnin is responsible for commit fa79b83495e83efa783f03abab994f4e7524c9a7
Chris Parnin is responsible for commit f6e31e22df368ace868a6fc5544e326a05ff0698
Added AbstractApi.java to .\anacrowd\ repository source files.
Added AndroidApi.java to .\anacrowd\ repository source files.
Added Collision.java to .\anacrowd\ repository source files.
Added ClassElem.java to .\anacrowd\ repository source files.
Added MethodElem.java to .\anacrowd\ repository source files.
Added PackageElem.java to .\anacrowd\ repository source files.
Added GWTApi.java to .\anacrowd\ repository source files.
Added JavaApi.java to .\anacrowd\ repository source files.
Added ApiParser.java to .\anacrowd\ repository source files.
Added ResultCache.java to .\anacrowd\ repository source files.
Added CrowdAnalysis.java to .\anacrowd\ repository source files.
Added ViewCountAnalysis.java to .\anacrowd\ repository source files.
Added ClassDocumentation.java to .\anacrowd\ repository source files.
Added ClassIndex.java to .\anacrowd\ repository source files.
Added AnswerElement.java to .\anacrowd\ repository source files.
Added ClusteredLinkElement.java to .\anacrowd\ repository source files.
Added CodeSampleElement.java to .\anacrowd\ repository source files.
Added CoOccurringLinks.java to .\anacrowd\ repository source files.
Added LinkElement.java to .\anacrowd\ repository source files.
Added LinkElement_old.java to .\anacrowd\ repository source files.
Added PostElement.java to .\anacrowd\ repository source files.
Added QuestionElement.java to .\anacrowd\ repository source files.
Added ThreadElement.java to .\anacrowd\ repository source files.
Added BuildDocumentation.java to .\anacrowd\ repository source files.
Added ExportDocumentation.java to .\anacrowd\ repository source files.
Added LinkDocumentation.java to .\anacrowd\ repository source files.
Added RankDocumentation.java to .\anacrowd\ repository source files.
Added SerializeDocumentation.java to .\anacrowd\ repository source files.
Added CachedPostBody.java to .\anacrowd\ repository source files.
Added CachePostBodyIndex.java to .\anacrowd\ repository source files.
Added LinkSpan.java to .\anacrowd\ repository source files.
Added LinkValidation.java to .\anacrowd\ repository source files.
Added ApiInfo.java to .\anacrowd\ repository source files.
Added CoverageData.java to .\anacrowd\ repository source files.
Added ExportCoverage.java to .\anacrowd\ repository source files.
Added ExportPosts.java to .\anacrowd\ repository source files.
Added ExportUsers.java to .\anacrowd\ repository source files.
Added Post2Api.java to .\anacrowd\ repository source files.
Added ConsoleFormatter.java to .\anacrowd\ repository source files.
Added Visitor.java to .\anacrowd\ repository source files.
Added WordDistributions.java to .\anacrowd\ repository source files.
Added test.java to .\anacrowd\ repository source files.
Added AnalyzeDocumentation.java to .\anacrowd\ repository source files.
Added ApiAnalysis.java to .\anacrowd\ repository source files.
Added BaseAnalysis.java to .\anacrowd\ repository source files.
Added ClassTagReliability.java to .\anacrowd\ repository source files.
Added CodeSampleAnalysis.java to .\anacrowd\ repository source files.
Added CodeSampleStats.java to .\anacrowd\ repository source files.
Added FilterAnalysis.java to .\anacrowd\ repository source files.
Added AbstractThreadFilter.java to .\anacrowd\ repository source files.
Added AcceptedFilter.java to .\anacrowd\ repository source files.
Added AnsweredFilter.java to .\anacrowd\ repository source files.
Added AtLeastNFilter.java to .\anacrowd\ repository source files.
Added BountiedFilter.java to .\anacrowd\ repository source files.
Added FavoritedFilter.java to .\anacrowd\ repository source files.
Added ViewedFilter.java to .\anacrowd\ repository source files.
Added VotedFilter.java to .\anacrowd\ repository source files.
Added WhoContributes.java to .\anacrowd\ repository source files.
Added ApiInfo.java to .\anacrowd\ repository source files.
Added LinkAnalysis.java to .\anacrowd\ repository source files.
Added OtherRatings.java to .\anacrowd\ repository source files.
Added CalculateBountiesForThreads.java to .\anacrowd\ repository source files.
Added MyEntry.java to .\anacrowd\ repository source files.
Added ThreadInPackages.java to .\anacrowd\ repository source files.
Added ThreadStats.java to .\anacrowd\ repository source files.
Added Driver.java to .\anacrowd\ repository source files.
Added FindLinkExamples.java to .\anacrowd\ repository source files.
Added RankedClassDocumentation.java to .\anacrowd\ repository source files.
Added ExportDataForTreemap.java to .\anacrowd\ repository source files.
Added SerializeJson.java to .\anacrowd\ repository source files.
Added RunJavaMethodCoverage.java to .\anacrowd\ repository source files.
Added SpeedOfSaturation.java to .\anacrowd\ repository source files.
Added DifficultySites.java to .\anacrowd\ repository source files.
Added OutputActivityAndUsage.java to .\anacrowd\ repository source files.
Added PredictorAnalysis.java to .\anacrowd\ repository source files.
Added SamplingForDifficultyAnalysis.java to .\anacrowd\ repository source files.
Added SampleByWordNumber.java to .\anacrowd\ repository source files.
Added DBInfo.java to .\anacrowd\ repository source files.
Added Search.java to .\anacrowd\ repository source files.
Added CDL.java to .\anacrowd\ repository source files.
Added Cookie.java to .\anacrowd\ repository source files.
Added CookieList.java to .\anacrowd\ repository source files.
Added HTTP.java to .\anacrowd\ repository source files.
Added HTTPTokener.java to .\anacrowd\ repository source files.
Added JSONArray.java to .\anacrowd\ repository source files.
Added JSONException.java to .\anacrowd\ repository source files.
Added JSONML.java to .\anacrowd\ repository source files.
Added JSONObject.java to .\anacrowd\ repository source files.
Added JSONString.java to .\anacrowd\ repository source files.
Added JSONStringer.java to .\anacrowd\ repository source files.
Added JSONTokener.java to .\anacrowd\ repository source files.
Added JSONWriter.java to .\anacrowd\ repository source files.
Added XML.java to .\anacrowd\ repository source files.
Added XMLTokener.java to .\anacrowd\ repository source files.
Added CheckoutTaggedPostsAndComments.java to .\anacrowd\ repository source files.
Added DBImport.java to .\anacrowd\ repository source files.
Added ImportComments.java to .\anacrowd\ repository source files.
Added ImportVotes.java to .\anacrowd\ repository source files.

 ************ ANALYZING FOR USAGE PATTERN ADDITION ************


****Parsing for addition at revision b23b19c93306a4fdfd82a36c7caf701193b13f69****

Added AbstractApi.java to .\anacrowd\ repository source files.
Added AndroidApi.java to .\anacrowd\ repository source files.
Added Collision.java to .\anacrowd\ repository source files.
Added ClassElem.java to .\anacrowd\ repository source files.
Added MethodElem.java to .\anacrowd\ repository source files.
Added PackageElem.java to .\anacrowd\ repository source files.
Added GWTApi.java to .\anacrowd\ repository source files.
Added JavaApi.java to .\anacrowd\ repository source files.
Added ApiParser.java to .\anacrowd\ repository source files.
Added ResultCache.java to .\anacrowd\ repository source files.
Added CrowdAnalysis.java to .\anacrowd\ repository source files.
Added ViewCountAnalysis.java to .\anacrowd\ repository source files.
Added ClassDocumentation.java to .\anacrowd\ repository source files.
Added ClassIndex.java to .\anacrowd\ repository source files.
Added AnswerElement.java to .\anacrowd\ repository source files.
Added ClusteredLinkElement.java to .\anacrowd\ repository source files.
Added CodeSampleElement.java to .\anacrowd\ repository source files.
Added CoOccurringLinks.java to .\anacrowd\ repository source files.
Added LinkElement.java to .\anacrowd\ repository source files.
Added LinkElement_old.java to .\anacrowd\ repository source files.
Added PostElement.java to .\anacrowd\ repository source files.
Added QuestionElement.java to .\anacrowd\ repository source files.
Added ThreadElement.java to .\anacrowd\ repository source files.
Added BuildDocumentation.java to .\anacrowd\ repository source files.
Added ExportDocumentation.java to .\anacrowd\ repository source files.
Added LinkDocumentation.java to .\anacrowd\ repository source files.
Added RankDocumentation.java to .\anacrowd\ repository source files.
Added SerializeDocumentation.java to .\anacrowd\ repository source files.
Added CachedPostBody.java to .\anacrowd\ repository source files.
Added CachePostBodyIndex.java to .\anacrowd\ repository source files.
Added LinkSpan.java to .\anacrowd\ repository source files.
Added LinkValidation.java to .\anacrowd\ repository source files.
Added ApiInfo.java to .\anacrowd\ repository source files.
Added CoverageData.java to .\anacrowd\ repository source files.
Added ExportCoverage.java to .\anacrowd\ repository source files.
Added ExportPosts.java to .\anacrowd\ repository source files.
Added ExportUsers.java to .\anacrowd\ repository source files.
Added Post2Api.java to .\anacrowd\ repository source files.
Added ConsoleFormatter.java to .\anacrowd\ repository source files.
Added Visitor.java to .\anacrowd\ repository source files.
Added WordDistributions.java to .\anacrowd\ repository source files.
Added test.java to .\anacrowd\ repository source files.
Added AnalyzeDocumentation.java to .\anacrowd\ repository source files.
Added ApiAnalysis.java to .\anacrowd\ repository source files.
Added BaseAnalysis.java to .\anacrowd\ repository source files.
Added ClassTagReliability.java to .\anacrowd\ repository source files.
Added CodeSampleAnalysis.java to .\anacrowd\ repository source files.
Added CodeSampleStats.java to .\anacrowd\ repository source files.
Added FilterAnalysis.java to .\anacrowd\ repository source files.
Added AbstractThreadFilter.java to .\anacrowd\ repository source files.
Added AcceptedFilter.java to .\anacrowd\ repository source files.
Added AnsweredFilter.java to .\anacrowd\ repository source files.
Added AtLeastNFilter.java to .\anacrowd\ repository source files.
Added BountiedFilter.java to .\anacrowd\ repository source files.
Added FavoritedFilter.java to .\anacrowd\ repository source files.
Added ViewedFilter.java to .\anacrowd\ repository source files.
Added VotedFilter.java to .\anacrowd\ repository source files.
Added WhoContributes.java to .\anacrowd\ repository source files.
Added ApiInfo.java to .\anacrowd\ repository source files.
Added LinkAnalysis.java to .\anacrowd\ repository source files.
Added OtherRatings.java to .\anacrowd\ repository source files.
Added CalculateBountiesForThreads.java to .\anacrowd\ repository source files.
Added MyEntry.java to .\anacrowd\ repository source files.
Added ThreadInPackages.java to .\anacrowd\ repository source files.
Added ThreadStats.java to .\anacrowd\ repository source files.
Added Driver.java to .\anacrowd\ repository source files.
Added FindLinkExamples.java to .\anacrowd\ repository source files.
Added RankedClassDocumentation.java to .\anacrowd\ repository source files.
Added ExportDataForTreemap.java to .\anacrowd\ repository source files.
Added SerializeJson.java to .\anacrowd\ repository source files.
Added RunJavaMethodCoverage.java to .\anacrowd\ repository source files.
Added SpeedOfSaturation.java to .\anacrowd\ repository source files.
Added DifficultySites.java to .\anacrowd\ repository source files.
Added OutputActivityAndUsage.java to .\anacrowd\ repository source files.
Added PredictorAnalysis.java to .\anacrowd\ repository source files.
Added SamplingForDifficultyAnalysis.java to .\anacrowd\ repository source files.
Added SampleByWordNumber.java to .\anacrowd\ repository source files.
Added DBInfo.java to .\anacrowd\ repository source files.
Added Search.java to .\anacrowd\ repository source files.
Added CDL.java to .\anacrowd\ repository source files.
Added Cookie.java to .\anacrowd\ repository source files.
Added CookieList.java to .\anacrowd\ repository source files.
Added HTTP.java to .\anacrowd\ repository source files.
Added HTTPTokener.java to .\anacrowd\ repository source files.
Added JSONArray.java to .\anacrowd\ repository source files.
Added JSONException.java to .\anacrowd\ repository source files.
Added JSONML.java to .\anacrowd\ repository source files.
Added JSONObject.java to .\anacrowd\ repository source files.
Added JSONString.java to .\anacrowd\ repository source files.
Added JSONStringer.java to .\anacrowd\ repository source files.
Added JSONTokener.java to .\anacrowd\ repository source files.
Added JSONWriter.java to .\anacrowd\ repository source files.
Added XML.java to .\anacrowd\ repository source files.
Added XMLTokener.java to .\anacrowd\ repository source files.
Added CheckoutTaggedPostsAndComments.java to .\anacrowd\ repository source files.
Added DBImport.java to .\anacrowd\ repository source files.
Added ImportComments.java to .\anacrowd\ repository source files.
Added ImportVotes.java to .\anacrowd\ repository source files.
Hashtable<String,Integer> classSet = new Hashtable<String,Integer>();
HashSet<String> uniqueClasses = new HashSet<String>();
HashSet<String> uniqueMethods = new HashSet<String>();
HashSet<String> overloadedMethods = new HashSet<String>();
int classCount = 0;
int methodCount = 0;
Hashtable<String,PackageElem> packages = new Hashtable<String,PackageElem>();
contents=readStream(new FileInputStream(path))
String contents = readStream(new FileInputStream(path));
lines=contents.split(System.getProperty("line.separator"))
String[] lines = contents.split(System.getProperty("line.separator"));
tuple=line.split("\t")
String[] tuple = line.split("\t");
namespace=tuple[0].trim()
String namespace = tuple[0].trim();
className=tuple[1].trim()
String className = tuple[1].trim();
PackageElem p = new PackageElem();
ClassElem klass = new ClassElem();
StringBuilder sb = new StringBuilder(512);
Reader r = new InputStreamReader(is, "UTF-8");
int c = 0;
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
name=attributes.getValue("name")
String name = attributes.getValue("name");
name=attributes.getValue("name")
String name = attributes.getValue("name");
name=attributes.getValue("name")
String name = attributes.getValue("name");
isPublic=attributes.getValue("visibility").equals("public")
boolean isPublic = attributes.getValue("visibility").equals("public");
MethodElem meth = new MethodElem();
String cacheDirPath = "cachedir/";
File cacheDir = new File(cacheDirPath);
bytesOfMessage=query.getBytes("UTF-8")
byte[] bytesOfMessage = query.getBytes("UTF-8");
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
thedigest=md.digest(bytesOfMessage)
byte[] thedigest = md.digest(bytesOfMessage);
StringBuilder builder = new StringBuilder();
String cacheDirPath = "cachedir/" + searchMethod + "/";
File cacheDir = new File(cacheDirPath);
encodedFilePath=EncodeQuery(query)
String encodedFilePath = EncodeQuery(query);
String fileName = cacheDirPath + encodedFilePath;
File cache = new File(fileName);
CachedRowSet rowSet = new CachedRowSetImpl();
set=s.executeQuery(query)
ResultSet set = s.executeQuery(query);
FileOutputStream fos = new FileOutputStream(cache.getAbsolutePath());
ObjectOutputStream out = new ObjectOutputStream(fos);
FileInputStream fos = new FileInputStream(cache.getAbsolutePath());
ObjectInputStream in = new ObjectInputStream(fos);
Search info = new Search();
String tag = api.MainTag;
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
List<CoverageEvent> coverageEvents = new ArrayList<CoverageEvent>();
methQuestions=info.GetIds(qTable,klass.Name)
List<Integer> methQuestions = info.GetIds(qTable,  klass.Name);
List<Integer> methQuestions = info.GetIds(qTable,  klass.Name);
CoverageEvent evt = new CoverageEvent();
rs=s.executeQuery("SELECT CreationDate,OwnerUserId FROM " + qTable + " "+ "WHERE Id = "+ id)
ResultSet rs = s.executeQuery(
								"SELECT CreationDate,OwnerUserId FROM " + qTable + " " + 
								"WHERE Id = " + id
						);
HashSet<Date> etimes = new HashSet<Date>();
List<Date> times =  new ArrayList<Date>(etimes);
Hashtable<String,Integer> coverage = new Hashtable<String,Integer>();
HashSet<Integer> users = new HashSet<Integer>();
HashSet<Integer> crowd = new HashSet<Integer>();
List<CoverageEvent> relevantEvents = new ArrayList<CoverageEvent>();
String key = pack.Name +":"+ klass.Name;
int count = 0;
Search info = new Search();
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
Hashtable<Integer,UserQA> dict = new Hashtable<Integer,UserQA>();
questionSet=s.executeQuery("SELECT OwnerUserId,Count(*) as num FROM " + qTable + " "+ "GROUP BY OwnerUserId")
ResultSet questionSet = s.executeQuery(
					"SELECT OwnerUserId,Count(*) as num FROM " + qTable + " " + 
					"GROUP BY OwnerUserId"
			);
userId=questionSet.getInt("OwnerUserId")
int userId = questionSet.getInt("OwnerUserId");
numQs=questionSet.getInt("num")
int numQs = questionSet.getInt("num");
answerSet=s.executeQuery("SELECT OwnerUserId,Count(*) as num FROM " + aTable + " "+ "GROUP BY OwnerUserId")
ResultSet answerSet = s.executeQuery(
					"SELECT OwnerUserId,Count(*) as num FROM " + aTable + " " + 
					"GROUP BY OwnerUserId"
			);
userId=answerSet.getInt("OwnerUserId")
int userId = answerSet .getInt("OwnerUserId");
numAs=answerSet.getInt("num")
int numAs = answerSet .getInt("num");
userSet=s.executeQuery("SELECT UpVotes,DownVotes,Age,CreationDate,LastAccessDate,Reputation FROM USERS " + "WHERE Id = " + key)
ResultSet userSet = s.executeQuery(
						"SELECT UpVotes,DownVotes,Age,CreationDate,LastAccessDate,Reputation FROM USERS " + 
						"WHERE Id = " + key
				);
Search info = new Search();
String tag = api.MainTag;
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
FileWriter fstream = new FileWriter("C:\\method_output.txt");
PrintWriter out = new PrintWriter(fstream);
int counter = 0;
methodQuestionIds=info.GetIds(qTable,methodElem.Name)
List<Integer> methodQuestionIds = info.GetIds(qTable, methodElem.Name);
List<Integer> methodQuestionIds = info.GetIds(qTable, methodElem.Name);
int acceptedAnswers = 0;
int viewCounts = 0;
int scores = 0;
int answerCounts = 0;
int commentCounts = 0;
int favoriteCounts = 0;
question=s.executeQuery("SELECT * FROM POSTS " + "WHERE Id = " + id)
ResultSet question = s.executeQuery(
									"SELECT * FROM POSTS " +
											"WHERE Id = " + id
									);
Search info = new Search();
String tag = api.MainTag;
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
FileWriter fstream = new FileWriter("C:\\noDuplicatesOutput.txt");
PrintWriter out = new PrintWriter(fstream);
Set<Integer> allKlassQuestionIds = new HashSet<Integer>();
int counter = 0;
klassQuestionIds=info.GetIds(qTable,klass.Name)
List<Integer> klassQuestionIds = info.GetIds(qTable,  klass.Name);
List<Integer> klassQuestionIds = info.GetIds(qTable,  klass.Name);
int acceptedAnswers = 0;
int viewCounts = 0;
int scores = 0;
int answerCounts = 0;
int commentCounts = 0;
int favoriteCounts = 0;
int counter2 = 0;
question=s.executeQuery("SELECT * FROM POSTS " + "WHERE Id = " + id)
ResultSet question = s.executeQuery(
						"SELECT * FROM POSTS " +
					    "WHERE Id = " + id
			    );
List<LinkElement> hrefs = new ArrayList<LinkElement>();
links=thread.Question.getHrefs(this.Klass)
List<LinkElement> links = thread.Question.getHrefs(this.Klass);
List<LinkElement> links = thread.Question.getHrefs(this.Klass);
List<CodeSampleElement> samples = new ArrayList<CodeSampleElement>();
elem=thread.Question.getCodeSample()
CodeSampleElement elem = thread.Question.getCodeSample();
List<LinkSpan> validatedLinks = new ArrayList<LinkSpan>();
List<ThreadElement> validatedThreads = new ArrayList<ThreadElement>();
ByteArrayOutputStream os = new ByteArrayOutputStream(string.length());
GZIPOutputStream gos = new GZIPOutputStream(os);
compressed=os.toByteArray()
byte[] compressed = os.toByteArray();
final int BUFFER_SIZE = 64;
ByteArrayInputStream is = new ByteArrayInputStream(compressed);
GZIPInputStream gis = new GZIPInputStream(is, BUFFER_SIZE);
StringBuilder string = new StringBuilder();
byte[] data = new byte[BUFFER_SIZE];
int bytesRead;
you=ClassIndex.getInstance().SampleMap.get(Id)
CodeSampleElement you = ClassIndex.getInstance().SampleMap.get( Id );
LinkDocumentation linker = new LinkDocumentation();
LinkDocumentation linker = new LinkDocumentation();
doc=linker.LinkOnlyClass(api,klass)
ClassDocumentation doc = linker.LinkOnlyClass(api, klass);
info=db.GetPostDetail(thread.Question.Id)
PostInfo info = db.GetPostDetail(thread.Question.Id);
ansInfo=db.GetPostDetail(ans.Id)
PostInfo ansInfo = db.GetPostDetail(ans.Id);
info=db.GetPostDetail(code.Parent.Id)
PostInfo info = db.GetPostDetail(code.Parent.Id);
Hashtable<String,ClusteredLinkElement> linkCount = new Hashtable<String,ClusteredLinkElement>();
doc=Jsoup.parseBodyFragment(body)
Document doc = Jsoup.parseBodyFragment(body);
codeSnippets=doc.getElementsByTag("code")
Elements codeSnippets = doc.getElementsByTag("code");
List<CodeBlock> blocks = new ArrayList<CodeBlock>();
CodeBlock block = new CodeBlock();
text=e.text()
String text = e.text();
p=Pattern.compile("\\b" + Pattern.quote(klass) + "\\b")
Pattern p = Pattern.compile("\\b"+Pattern.quote(klass)+"\\b");
matcher=p.matcher(text)
Matcher matcher = p.matcher(text);
int start=0;
doc=Jsoup.parseBodyFragment(body)
Document doc = Jsoup.parseBodyFragment(body);
codeSnippets=doc.getElementsByTag("a")
Elements codeSnippets = doc.getElementsByTag("a");
List<String> links = new ArrayList<String>();
blocks=this.ParseFragments(Test,"Document")
List<CodeBlock> blocks = this.ParseFragments(Test,"Document");
List<CodeBlock> blocks = this.ParseFragments(Test,"Document");
links=this.ParseLinks(TestLinks,"MessageDigest")
List<String> links = this.ParseLinks(TestLinks, "MessageDigest");
List<String> links = this.ParseLinks(TestLinks, "MessageDigest");
BuildDocumentation b = new BuildDocumentation();
doc=b.BuildForClass(new AndroidApi(),"Drawable")
ClassDocumentation doc = b.BuildForClass(new AndroidApi(),"Drawable");
RankDocumentation ranker = new RankDocumentation();
ExportDocumentation exporter = new ExportDocumentation();
top5code=doc.getCodeSampleElements().subList(0,Math.min(doc.getCodeSampleElements().size(),5))
List<CodeSampleElement> top5code = doc.getCodeSampleElements().subList(0, 
				Math.min(doc.getCodeSampleElements().size(), 5));
List<CodeSampleElement> top5code = doc.getCodeSampleElements().subList(0, 
				Math.min(doc.getCodeSampleElements().size(), 5));
top10links=doc.ClusteredLinks.subList(0,Math.min(doc.ClusteredLinks.size(),10))
List<ClusteredLinkElement> top10links = doc.ClusteredLinks.subList(0, 
				Math.min(doc.ClusteredLinks.size(),10));
List<ClusteredLinkElement> top10links = doc.ClusteredLinks.subList(0, 
				Math.min(doc.ClusteredLinks.size(),10));
top5questions=doc.ThreadElements.subList(0,Math.min(doc.ThreadElements.size(),5))
List<ThreadElement> top5questions = doc.ThreadElements.subList(0, 
				Math.min(doc.ThreadElements.size(),5));
List<ThreadElement> top5questions = doc.ThreadElements.subList(0, 
				Math.min(doc.ThreadElements.size(),5));
top5links=top10links.subList(0,Math.min(top10links.size(),5))
List<ClusteredLinkElement> top5links = top10links.subList(0, 
				Math.min(top10links.size(),5));
List<ClusteredLinkElement> top5links = top10links.subList(0, 
				Math.min(top10links.size(),5));
List<ClusteredLinkElement> removeMe = new ArrayList<ClusteredLinkElement>();
a=getDomainName(link.Href)
String a = getDomainName(link.Href);
b=getDomainName(other.Href)
String b = getDomainName(other.Href);
URL u;
ClassDocumentation klassDoc = new ClassDocumentation();
WordDistributions wd = new WordDistributions();
List<Integer> wordQMatches = new ArrayList<Integer>();
List<Integer> wordAMatches = new ArrayList<Integer>();
String klassName = klass.Name;
codeQMatches=search.GetIdsViaCodeMatches(this.QuestionsTempTableName,klassName)
List<Integer> codeQMatches = search.GetIdsViaCodeMatches(this.QuestionsTempTableName, klassName);
List<Integer> codeQMatches = search.GetIdsViaCodeMatches(this.QuestionsTempTableName, klassName);
linkQMatches=search.GetIdsViaLinkMatches(this.QuestionsTempTableName,klassName)
List<Integer> linkQMatches = search.GetIdsViaLinkMatches(this.QuestionsTempTableName, klassName);
List<Integer> linkQMatches = search.GetIdsViaLinkMatches(this.QuestionsTempTableName, klassName);
codeAMatches=search.GetIdsViaCodeMatches(this.AnswersTempTableName,klassName)
List<Integer> codeAMatches = search.GetIdsViaCodeMatches(this.AnswersTempTableName, klassName);
List<Integer> codeAMatches = search.GetIdsViaCodeMatches(this.AnswersTempTableName, klassName);
linkAMatches=search.GetIdsViaLinkMatches(this.AnswersTempTableName,klassName)
List<Integer> linkAMatches = search.GetIdsViaLinkMatches(this.AnswersTempTableName, klassName);
List<Integer> linkAMatches = search.GetIdsViaLinkMatches(this.AnswersTempTableName, klassName);
HashSet<Integer> ansSet = new HashSet<Integer>();
Hashtable<Integer,Integer> AnswerIdToParentId = new Hashtable<Integer,Integer>();
HashSet<Integer> qSet = new HashSet<Integer>();
List<Integer> myThreads = new ArrayList<Integer>();
ThreadElement thread = new ThreadElement();
info=db.GetPostDetail(thread.Question.Id)
PostInfo info = db.GetPostDetail(thread.Question.Id);
LinkValidation validate = new LinkValidation();
List<LinkElement> hrefs = new ArrayList<LinkElement>();
spans=validate.Validate(klass,thread.Question,thread.Question.Title,hrefs)
List<LinkSpan> spans = validate.Validate(klass, thread.Question, thread.Question.Title, hrefs);
List<LinkSpan> spans = validate.Validate(klass, thread.Question, thread.Question.Title, hrefs);
sample=GetOrBuildCodeSample(klass,thread.Question,spans)
CodeSampleElement sample = GetOrBuildCodeSample(klass, thread.Question, spans);
parentQ=AnswerIdToParentId.get(answerId)
int parentQ = AnswerIdToParentId.get( answerId );
ThreadElement thread = new ThreadElement();
tinfo=db.GetPostDetail(parentQ)
PostInfo tinfo = db.GetPostDetail(parentQ);
AnswerElement ans = new AnswerElement();
LinkValidation validate = new LinkValidation();
List<LinkElement> hrefs = new ArrayList<LinkElement>();
spans=validate.Validate(klass,ans,null,hrefs)
List<LinkSpan> spans = validate.Validate(klass, ans,null, hrefs);
List<LinkSpan> spans = validate.Validate(klass, ans,null, hrefs);
sample=GetOrBuildCodeSample(klass,ans,spans)
CodeSampleElement sample = GetOrBuildCodeSample(klass, ans, spans);
CodeSampleElement codeSample = null;
Hashtable<Integer,CodeBlock> blocks = new Hashtable<Integer,CodeBlock>();
postBody=CachePostBodyIndex.getInstance().ParseOrGet(parent)
CachedPostBody postBody = CachePostBodyIndex.getInstance().ParseOrGet(parent);
CodeBlock block = new CodeBlock();
int b = 0;
String qTable = api.MainTag + "questions_table";
String aTable = api.MainTag + "answers_table";
ClassElem k = new ClassElem();
doc=Link(k,new Hashtable<Integer,ThreadElement>())
ClassDocumentation doc = Link(k, new Hashtable<Integer,ThreadElement>());
List<ClassDocumentation>  list = new ArrayList<ClassDocumentation>();
Hashtable<Integer,ThreadElement> ThreadMap = new Hashtable<Integer,ThreadElement>();
doc=Link(klass,ThreadMap)
ClassDocumentation doc = Link(klass, ThreadMap);
SerializeDocumentation serializer = new SerializeDocumentation();
List<ClassDocumentation>  list = new ArrayList<ClassDocumentation>();
Hashtable<Integer,ThreadElement> ThreadMap = new Hashtable<Integer,ThreadElement>();
doc=Link(klass,ThreadMap)
ClassDocumentation doc = Link(klass,ThreadMap);
String path = api.ClassDocPath;
SerializeDocumentation serializer = new SerializeDocumentation();
List<ClassDocumentation>  list = new ArrayList<ClassDocumentation>();
File outputFile = new File(path + java.io.File.separator + klass.ParentPackage.Name + "." + klass.Name + ".json");
doc=Link(klass,ClassIndex.getInstance().ThreadMap)
ClassDocumentation doc = Link(klass, ClassIndex.getInstance().ThreadMap);
Hashtable<String,ClusteredLinkElement> linkCount = new Hashtable<String,ClusteredLinkElement>();
ClusteredLinkElement clustered = new ClusteredLinkElement();
List<ClusteredLinkElement> elements = new ArrayList<ClusteredLinkElement>(linkCount.values());
List<ClassDocumentation> list = new ArrayList<ClassDocumentation>();
File filePath = new File(path + File.separator + pack.Name + "."  + klass.Name + ".json");
StringBuilder sb = new StringBuilder(512);
Reader r = new InputStreamReader(is, "UTF-8");
int c = 0;
serializedObj=Serialize(doc)
String serializedObj = Serialize(doc);
File outputDir = new File(path);
FileWriter writer = new FileWriter(outputFile);
JSONObject obj = new JSONObject();
List<Integer> threadIds = new ArrayList<Integer>();
List<Integer> sampleIds = new ArrayList<Integer>();
List<JSONObject> links = new ArrayList<JSONObject>();
List<JSONObject> hrefs = new ArrayList<JSONObject>();
JSONObject obj = new JSONObject(source);
ClassDocumentation doc = new ClassDocumentation();
array=obj.getJSONArray("ThreadElements")
JSONArray array = obj.getJSONArray("ThreadElements");
id=array.getInt(i)
int id = array.getInt(i);
links=obj.getJSONArray("Links")
JSONArray links = obj.getJSONArray("Links");
jsonLink=links.getJSONObject(i)
JSONObject jsonLink = links.getJSONObject(i);
link=DeserializeLinkSpan(jsonLink)
LinkSpan link = DeserializeLinkSpan(jsonLink);
tId=jsonLink.getInt("Thread")
int tId = jsonLink.getInt("Thread");
pId=jsonLink.getInt("Post")
int pId = jsonLink.getInt("Post");
key=ClassIndex.getKey(tId,pId,doc.Klass)
String key = ClassIndex.getKey(tId, pId, doc.Klass);
hrefs=obj.getJSONArray("Hrefs")
JSONArray hrefs = obj.getJSONArray("Hrefs");
jsonHref=hrefs.getJSONObject(i)
JSONObject jsonHref = hrefs.getJSONObject(i);
link=DeserializeHref(jsonHref)
LinkElement link = DeserializeHref(jsonHref);
tId=jsonHref.getInt("Thread")
int tId = jsonHref.getInt("Thread");
pId=jsonHref.getInt("Post")
int pId = jsonHref.getInt("Post");
key=ClassIndex.getKey(tId,pId,doc.Klass)
String key = ClassIndex.getKey(tId, pId, doc.Klass);
List<JSONObject> codeSampleObjects = new ArrayList<JSONObject>();
List<CodeSampleElement> samples = new ArrayList<CodeSampleElement>();
JSONObject obj = new JSONObject();
List<JSONObject> blockObjects = new ArrayList<JSONObject>();
CodeSampleElement code = new CodeSampleElement();
blockObjectsJson=obj.getJSONArray("Blocks")
JSONArray blockObjectsJson = obj.getJSONArray("Blocks");
List<CodeBlock> blockObjects = new ArrayList<CodeBlock>();
JSONObject obj = new JSONObject();
PostElement post = new PostElement();
JSONObject obj = new JSONObject();
List<JSONObject> spanObjects = new ArrayList<JSONObject>();
CodeBlock block = new CodeBlock();
List<CodeSpan> spans = new ArrayList<CodeSpan>();
classMatchesJson=obj.getJSONArray("ClassMatches")
JSONArray classMatchesJson = obj.getJSONArray("ClassMatches");
JSONObject obj = new JSONObject();
List<JSONObject> linkObjects = new ArrayList<JSONObject>();
List<LinkElement_old> links  = new ArrayList<LinkElement_old>();
JSONObject obj = new JSONObject();
LinkElement_old link = new LinkElement_old();
extLinks=obj.getJSONArray("ExternalLinks")
JSONArray extLinks = obj.getJSONArray("ExternalLinks");
List<JSONObject> linkObjects = new ArrayList<JSONObject>();
List<ClusteredLinkElement> links = new ArrayList<ClusteredLinkElement>();
JSONObject obj = new JSONObject();
ClusteredLinkElement link = new ClusteredLinkElement();
List<JSONObject> threadObjects = new ArrayList<JSONObject>();
List<ThreadElement> threads = new ArrayList<ThreadElement>();
JSONObject obj = new JSONObject();
List<JSONObject> answers = new ArrayList<JSONObject>();
ThreadElement thread = new ThreadElement();
List<AnswerElement> answers = new ArrayList<AnswerElement>();
jsonAns=obj.getJSONArray("Answers")
JSONArray jsonAns = obj.getJSONArray("Answers");
JSONObject obj = new JSONObject();
AnswerElement answer = new AnswerElement();
SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
JSONObject obj = new JSONObject();
QuestionElement q = new QuestionElement();
JSONObject obj = new JSONObject();
LinkElement href = new LinkElement();
JSONObject obj = new JSONObject();
LinkSpan span = new LinkSpan();
Hashtable<Integer, CodeSampleElement> sampleMap = new Hashtable<Integer, CodeSampleElement>();
File outputDir = new File(path + File.separator + "samplepool");
String fullPath = outputDir.getAbsolutePath() + File.separator + filePath;
JSONObject obj = new JSONObject(readStream(new FileInputStream(fullPath)));
s=DeserializeCodeSampleElement(obj)
CodeSampleElement s = DeserializeCodeSampleElement(obj);
Hashtable<Integer, ThreadElement> threadMap = new Hashtable<Integer, ThreadElement>();
File outputDir = new File(path + File.separator + "threadpool");
String fullPath = outputDir.getAbsolutePath() + File.separator + filePath;
JSONObject obj = new JSONObject(readStream(new FileInputStream(fullPath)));
t=DeserializeThreadElement(obj)
ThreadElement t = DeserializeThreadElement(obj);
File outputDir = new File(outputPath + File.separator + "samplepool");
File outputFile = new File(outputDir.getAbsolutePath() + File.separator + "sample" + sample.Parent.Id + ".json");
obj=SerializeCodeSampleElement(sample)
JSONObject obj = SerializeCodeSampleElement(sample);
FileWriter writer = new FileWriter(outputFile);
File outputDir = new File(outputPath + File.separator + "threadpool");
File outputFile = new File(outputDir.getAbsolutePath() + File.separator + "thread" + thread.Question.Id + ".json");
obj=SerializeThreadElement(thread)
JSONObject obj = SerializeThreadElement(thread);
FileWriter writer = new FileWriter(outputFile);
CachedPostBody cachedBody = new CachedPostBody();
doc=Jsoup.parseBodyFragment(post.Body)
Document doc = Jsoup.parseBodyFragment(post.Body);
codeSnippets=doc.getElementsByTag("code")
Elements codeSnippets = doc.getElementsByTag("code");
hrefs=doc.getElementsByTag("a")
Elements hrefs = doc.getElementsByTag("a");
SimpleHref href = new SimpleHref();
paragraphs=doc.getElementsByTag("p")
Elements paragraphs = doc.getElementsByTag("p");
allSpans=ParseBody(klassElem,post,title,hrefs)
List<LinkSpan> allSpans = ParseBody(klassElem,post,title, hrefs);
List<LinkSpan> allSpans = ParseBody(klassElem,post,title, hrefs);
List<LinkSpan> allSpans = new ArrayList<LinkSpan>();
int i = 0;
postBody=CachePostBodyIndex.getInstance().ParseOrGet(post)
CachedPostBody postBody = CachePostBodyIndex.getInstance().ParseOrGet(post);
spans=GatherSpans(klassElem,text)
List<LinkSpan> spans = GatherSpans(klassElem, text);
List<LinkSpan> spans = GatherSpans(klassElem, text);
spans=GatherSpans(klassElem,href.AnchorText)
List<LinkSpan> spans = GatherSpans(klassElem, href.AnchorText);
List<LinkSpan> spans = GatherSpans(klassElem, href.AnchorText);
LinkElement link = new LinkElement();
WordDistributions wd = new WordDistributions();
spans=GatherSpans(klassElem,text)
List<LinkSpan> spans = GatherSpans(klassElem, text);
List<LinkSpan> spans = GatherSpans(klassElem, text);
spans=GatherSpans(klassElem,title)
List<LinkSpan> spans = GatherSpans(klassElem, title);
List<LinkSpan> spans = GatherSpans(klassElem, title);
List<LinkSpan> spans = new ArrayList<LinkSpan>();
String klassName = klassElem.Name;
p=Pattern.compile("\\b" + Pattern.quote(klassName) + "\\b")
Pattern p = Pattern.compile("\\b"+Pattern.quote(klassName)+"\\b");
matcher=p.matcher(text)
Matcher matcher = p.matcher(text);
int start=0;
s=matcher.start()
int s = matcher.start();
int e = matcher.start()+klassName.length();
LinkSpan span = new LinkSpan();
sub=text.substring(s)
String sub = text.substring(s);
o=Pattern.compile("^\\b" + Pattern.quote(otherClassName) + "\\b")
Pattern o = Pattern.compile("^\\b"+Pattern.quote(otherClassName)+"\\b");
matcher=o.matcher(text)
Matcher matcher = o.matcher(text);
FileWriter fw = new FileWriter(outFile);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outFile);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outputFile);
int num = klass.AnswerIds.size() + klass.QuestionIds.size();
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
list=ExportQuestions(questionsFile,tag)
List<PostInfo> list = ExportQuestions(questionsFile, tag);
List<PostInfo> list = ExportQuestions(questionsFile, tag);
FileWriter fw = new FileWriter(answersFile);
DBInfo info = new DBInfo();
FileWriter fw = new FileWriter(questionsFile);
DBInfo info = new DBInfo();
list=info.Questions(tag)
List<PostInfo> list = info.Questions(tag);
List<PostInfo> list = info.Questions(tag);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outFile);
DBInfo info = new DBInfo();
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outFile);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
int sum = 0;
int coverageCount = 0;
int klassCount = 0;
int methodCoverageCount = 0;
int methodCount = 0;
int methodSum = 0;
int num = klass.QuestionIds.size() + klass.AnswerIds.size();
int mNum = meth.QuestionIds.size() + meth.AnswerIds.size();
Search search = new Search();
klassQuestions=search.GetIds(api.MainTag + "questions_table",klass.Name)
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
klassAnswers=search.GetIds(api.MainTag + "answers_table",klass.Name)
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
Search search = new Search();
s=search.conn.createStatement()
Statement s = search.conn.createStatement();
WordDistributions wd = new WordDistributions();
klassQuestions=search.GetIds(api.MainTag + "questions_table",klass.Name)
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
klassAnswers=search.GetIds(api.MainTag + "answers_table",klass.Name)
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
Search search = new Search();
methQuestions=search.GetIds(api.MainTag + "questions_table",meth.Name)
List<Integer> methQuestions = search.GetIds(api.MainTag + "questions_table",  meth.Name);
List<Integer> methQuestions = search.GetIds(api.MainTag + "questions_table",  meth.Name);
methAnswers=search.GetIds(api.MainTag + "answers_table",meth.Name)
List<Integer> methAnswers = search.GetIds(api.MainTag + "answers_table",  meth.Name);
List<Integer> methAnswers = search.GetIds(api.MainTag + "answers_table",  meth.Name);
klassQuestions=search.GetIds(api.MainTag + "questions_table",klass.Name)
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table",  klass.Name);
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table",  klass.Name);
klassAnswers=search.GetIds(api.MainTag + "answers_table",klass.Name)
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table",  klass.Name);
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table",  klass.Name);
HashSet<Integer> klassQs = new HashSet<Integer>(klassQuestions);
HashSet<Integer> klassAs = new HashSet<Integer>(klassAnswers);
List<Integer> toRemoveQ = new ArrayList<Integer>();
List<Integer> toRemoveA = new ArrayList<Integer>();
Search search = new Search();
klassQuestions=search.QuestionsInBodyTitle(api.MainTag + "_table",klass.Name)
int klassQuestions = search.QuestionsInBodyTitle(api.MainTag + "_table", klass.Name);
Search search = new Search();
methodQuestions=search.QuestionsInBodyTitle(api.MainTag + "_table",meth.Name)
int methodQuestions = search.QuestionsInBodyTitle(api.MainTag + "_table", meth.Name);
words=id.replaceAll("(?<=[A-Z])(?=[A-Z][a-z])|" + "(?<=[^A-Z])(?=[A-Z])|" + "(?<=[A-Za-z])(?=[^A-Za-z])"," ")
String words = id.replaceAll("(?<=[A-Z])(?=[A-Z][a-z])|" + "(?<=[^A-Z])(?=[A-Z])|" + "(?<=[A-Za-z])(?=[^A-Za-z])",
			      " ");
AbstractApi api = Android;
BuildDocumentation builder = new BuildDocumentation();
list=builder.PrepareApi(api)
List<ClassDocumentation> list = builder.PrepareApi(api);
List<ClassDocumentation> list = builder.PrepareApi(api);
subList=list.subList(700,list.size() - 1)
List<ClassDocumentation> subList = list.subList(700, list.size()-1);
List<ClassDocumentation> subList = list.subList(700, list.size()-1);
BaseAnalysis run = new AnalyzeDocumentation();
int classCount = 0;
HashSet<String> classSet = new HashSet<String>();
ApiAnalysis api = new ApiAnalysis();
String qTable = api.MainTag + "questions_table";
String aTable = api.MainTag + "answers_table";
ResultCache cache = new ResultCache();
Date now = new Date();
Date finish = new Date();
SerializeDocumentation serializeDoc = new SerializeDocumentation();
Search search = new Search();
StringBuilder builder = new StringBuilder();
iter=s.iterator()
Iterator iter = s.iterator();
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
StringBuilder sb = new StringBuilder(512);
Reader r = new InputStreamReader(is, "UTF-8");
int c = 0;
androidValues=TagReliability(Android)
Hashtable<Integer,QATuple> androidValues = TagReliability( Android );
Hashtable<Integer,QATuple> androidValues = TagReliability( Android );
Hashtable<Integer,QATuple> androidValues = TagReliability( Android );
javaValues=TagReliability(Java)
Hashtable<Integer,QATuple> javaValues = TagReliability( Java );
Hashtable<Integer,QATuple> javaValues = TagReliability( Java );
Hashtable<Integer,QATuple> javaValues = TagReliability( Java );
tuple=values.get(length)
QATuple tuple = values.get(length);
WordDistributions d = new WordDistributions();
Search search = new Search();
Hashtable<Integer,QATuple> hash = new Hashtable<Integer,QATuple>();
length=d.WordLength(klass.Name)
int length = d.WordLength(klass.Name);
klassQuestionsTags=search.GetIdsViaTags(this.QuestionsTempTableName,klass.Name)
List<Integer> klassQuestionsTags = search.GetIdsViaTags(this.QuestionsTempTableName, klass.Name);
List<Integer> klassQuestionsTags = search.GetIdsViaTags(this.QuestionsTempTableName, klass.Name);
klassAnswersTags=search.GetIdsViaTags(this.AnswersTempTableName,klass.Name)
List<Integer> klassAnswersTags = search.GetIdsViaTags(this.AnswersTempTableName, klass.Name);
List<Integer> klassAnswersTags = search.GetIdsViaTags(this.AnswersTempTableName, klass.Name);
klassQuestionsWords=search.GetIdsViaWordMatches(this.QuestionsTempTableName,klass.Name)
List<Integer> klassQuestionsWords = search.GetIdsViaWordMatches(this.QuestionsTempTableName, klass.Name);
List<Integer> klassQuestionsWords = search.GetIdsViaWordMatches(this.QuestionsTempTableName, klass.Name);
klassAnswersWords=search.GetIdsViaWordMatches(this.AnswersTempTableName,klass.Name)
List<Integer> klassAnswersWords = search.GetIdsViaWordMatches(this.AnswersTempTableName, klass.Name);
List<Integer> klassAnswersWords = search.GetIdsViaWordMatches(this.AnswersTempTableName, klass.Name);
BaseAnalysis run = new ClassTagReliability();
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,ThreadElement> threadMap = new Hashtable<Integer,ThreadElement>();
int codeSamplesInAnswers = 0;
int codeSamplesInAccepted = 0;
int codeSamplesInQuestions = 0;
int total = 0;
int numLines = 0;
int numBlocks = 0;
body=block.getBody()
String body = block.getBody();
lines=body.split(System.getProperty("line.separator"))
String[] lines = body.split(System.getProperty("line.separator"));
AnswerElement ans = (AnswerElement)element.Parent;
FileWriter fw = new FileWriter(outputPath);
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
int numLines = 0;
int numBlocks = 0;
body=block.getBody()
String body = block.getBody();
lines=body.split(System.getProperty("line.separator"))
String[] lines = body.split(System.getProperty("line.separator"));
AnswerElement ans = (AnswerElement)element.Parent;
AnswerElement ans = (AnswerElement)element.Parent;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
int[] levels = new int[]{1,5,20};
List<AbstractThreadFilter> filters = new ArrayList<AbstractThreadFilter>();
AtLeastNFilter atLeast2Filter = new AtLeastNFilter(new ArrayList(filters), 2);
AtLeastNFilter atLeast3Filter = new AtLeastNFilter(new ArrayList(filters), 3);
AtLeastNFilter atLeast5Filter = new AtLeastNFilter(new ArrayList(filters), 5);
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
threads=GetIncludedThreads(threadMap.values(),filter)
HashSet<Integer> threads = GetIncludedThreads(threadMap.values(), filter);
HashSet<Integer> threads = GetIncludedThreads(threadMap.values(), filter);
HashSet<Integer> included = new HashSet<Integer>();
Hashtable<Integer,Integer> coverageScore = new Hashtable<Integer,Integer>();
int coveredClasses = 0;
int includedThreads = 0;
answered=thread.Answers.size()
int answered = thread.Answers.size();
int passed = 0;
info=getDBInfoInstance().GetPostDetail(thread.Question.Id)
PostInfo info = getDBInfoInstance().GetPostDetail(thread.Question.Id);
int threadBounty = 0;
Integer amount = ans.BountyAmount;
int views = thread.ViewCount;
int total = thread.Votes;
int sum = 0;
String self = StartPercentile + ":" + EndPercentile + "";
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,Integer> Askers = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> Advisors = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> SelfAdvisors = new Hashtable<Integer,Integer>();
HashSet<Integer> All = new HashSet<Integer>();
PercentileBucket bucket0_25  = new PercentileBucket(0,25,pool);
PercentileBucket bucket25_50 = new PercentileBucket(25,50,pool);
PercentileBucket bucket50_75 = new PercentileBucket(50,75,pool);
PercentileBucket bucket75_95 = new PercentileBucket(75,95,pool);
PercentileBucket bucket95_00 = new PercentileBucket(95,100,pool);
PercentileBucket bucket90_91 = new PercentileBucket(90,91,pool);
PercentileBucket bucket91_92 = new PercentileBucket(91,92,pool);
PercentileBucket bucket92_93 = new PercentileBucket(92,93,pool);
PercentileBucket bucket93_94 = new PercentileBucket(93,94,pool);
PercentileBucket bucket94_95 = new PercentileBucket(94,95,pool);
PercentileBucket bucket95_96 = new PercentileBucket(95,96,pool);
PercentileBucket bucket96_97 = new PercentileBucket(96,97,pool);
PercentileBucket bucket97_98 = new PercentileBucket(97,98,pool);
PercentileBucket bucket98_99 = new PercentileBucket(98,99,pool);
PercentileBucket bucket99_00 = new PercentileBucket(99,100,pool);
HashSet<Integer> results = new HashSet<Integer>(info.GetCurators(PostId));
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,Integer> Askers = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> Advisors = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> SelfAdvisors = new Hashtable<Integer,Integer>();
HashSet<Integer> All = new HashSet<Integer>();
FileWriter fw = new FileWriter(outputPath);
int qContributions = Askers.containsKey(userId) ? Askers.get(userId) : 0;
int aContributions = Advisors.containsKey(userId) ? Advisors.get(userId) : 0;
int selfContributions = SelfAdvisors.containsKey(userId) ? SelfAdvisors.get(userId) : 0;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
HashSet<Integer> Askers = new HashSet<Integer>();
HashSet<Integer> Advisors = new HashSet<Integer>();
HashSet<Integer> Curators = new HashSet<Integer>();
HashSet<Integer> All = new HashSet<Integer>();
int linksInAnswers=0;
int linksInQuestions=0;
int linksInAcceptedAnswers=0;
int answerLinkOutcome=0;
int questionLinkOutcome=0;
int bothLinkOutcome=0;
int answerAcceptedLinkOutcome=0;
int codeMarks=0;
int codeSamples=0;
int wordMatches=0;
int hrefs=0;
int codeMarksThread=0;
int codeSamplesThread=0;
int wordMatchesThread=0;
int hrefsThread=0;
int threadAnswerLinks=0;
int threadQuestionLinks=0;
int threadAcceptedAnswerLinks=0;
int t_codeMarks=0;
int t_codeSamples=0;
int t_wordMatches=0;
int t_hrefs=0;
output=join(new String[]{doc.getValidatedThreads().size() + "",linksInAnswers + "",linksInQuestions + "",linksInAcceptedAnswers + "",answerLinkOutcome + "",questionLinkOutcome + "",bothLinkOutcome + "",answerAcceptedLinkOutcome + "",codeMarks + "",codeSamples + "",wordMatches + "",hrefs + "",codeMarksThread + "",codeSamplesThread + "",wordMatchesThread + "",hrefsThread + ""},",")
String output = join(new String[]
				{
					doc.getValidatedThreads().size()+"",
					linksInAnswers +"",
					linksInQuestions+"",
					linksInAcceptedAnswers+"",
					// why linkage occurred (site). 
					answerLinkOutcome+"",
					questionLinkOutcome+"",
					bothLinkOutcome+"",
					answerAcceptedLinkOutcome+"", // threads with links to accepted answer
					// types of links
					codeMarks+"",
					codeSamples+"",
					wordMatches+"",
					hrefs+"",
					// types of threads (flat)
					codeMarksThread+"",
					codeSamplesThread+"",
					wordMatchesThread+"",
					hrefsThread+""
				},",");
BaseAnalysis a = new LinkAnalysis();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
int otherMoreThanAccepted = 0;
int votedButNotAccepted = 0;
int threadVoted = 0;
int numAccepted = 0;
int maxVote = 0;
AnswerElement accepted = null;
int votes = 0;
DBInfo info = new DBInfo();
int bounty = 0;
int numWithBounty  = 0;
taggedPosts=info.Tags(tag)
List<PostInfo> taggedPosts = info.Tags(tag);
List<PostInfo> taggedPosts = info.Tags(tag);
int threadBounty = 0;
amount=info.GetBountyAmount(ans.Id)
Integer amount = info.GetBountyAmount(ans.Id);
V old = this.value;
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
Hashtable<String,HashSet<Integer>> PackageMap = new Hashtable<String,HashSet<Integer>>();
String p = doc.Klass.ParentPackage.Name;
List<MyEntry<String,Integer>> sortedPackages = new ArrayList<MyEntry<String,Integer>>();
count=PackageMap.get(key).size()
Integer count = PackageMap.get(key).size();
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,ThreadElement> threadMap = new Hashtable<Integer,ThreadElement>();
List<PostInfo> linkedPosts = new ArrayList<PostInfo>();
taggedPosts=info.Tags(tag)
List<PostInfo> taggedPosts = info.Tags(tag);
List<PostInfo> taggedPosts = info.Tags(tag);
FileWriter fw = new FileWriter(outputPath);
Visitor coverage = new Visitor();
ConsoleFormatter format = new ConsoleFormatter();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
HashSet<LinkType> types = new HashSet<LinkType>();
docs=DeserializeModel(Java)
List<ClassDocumentation> docs = DeserializeModel(Java);
List<ClassDocumentation> docs = DeserializeModel(Java);
RankDocumentation ranker = new RankDocumentation();
ExportDocumentation exporter = new ExportDocumentation();
AbstractApi api = Android;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel( api);
List<ClassDocumentation> docs = DeserializeModel( api);
AbstractApi api = Java;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
FileWriter fw = new FileWriter(outFile);
FileWriter fw = new FileWriter(outFile);
DBInfo info = new DBInfo();
FileWriter fwAnswers = new FileWriter(answersFile);
FileWriter fwQuestions = new FileWriter(questionsFile);
DBInfo info = new DBInfo();
String packName = doc.Klass.ParentPackage.Name;
String klassName = doc.Klass.Name;
int id = ans.Id;
a=info.GetPostDetail(id)
PostInfo a = info.GetPostDetail(id);
int id = thread.Question.Id;
q=info.GetPostDetail(id)
PostInfo q = info.GetPostDetail(id);
FileWriter fw = new FileWriter(outFile);
String packName = doc.Klass.ParentPackage.Name;
String klassName = doc.Klass.Name;
int id = ans.Id;
int id = thread.Question.Id;
FileWriter fw = new FileWriter(outputFile);
num=doc.getValidatedThreads().size()
int num = doc.getValidatedThreads().size();
String packName = doc.Klass.ParentPackage.Name;
String klassName = doc.Klass.Name;
ExportDataForTreemap export = new ExportDataForTreemap();
LinkDocumentation linker = new LinkDocumentation();
docs=linker.LinkAndSerializeApi(Java)
List<ClassDocumentation> docs = linker.LinkAndSerializeApi(Java);
List<ClassDocumentation> docs = linker.LinkAndSerializeApi(Java);
int coverage1 = 0;
int coverage1 = 0;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Visitor coverage = new Visitor();
ConsoleFormatter format = new ConsoleFormatter();
c=Calendar.getInstance()
Calendar c = Calendar.getInstance();
int[] levels = new int[]{1,5,20,50,100};
classDocs=DeserializeModel(Java)
List<ClassDocumentation> classDocs = DeserializeModel(Java);
List<ClassDocumentation> classDocs = DeserializeModel(Java);
Hashtable<Integer,List<ClassSaturation>> saturationData = new Hashtable<Integer,List<ClassSaturation>>();
classSats=Saturation(level,classDocs)
List<ClassSaturation> classSats = Saturation(level,classDocs);
List<ClassSaturation> classSats = Saturation(level,classDocs);
SimpleDateFormat format = new SimpleDateFormat("MM-dd-yyyy");
ArrayList<Date> sortedAllDates = new ArrayList<Date>();
startDate=format.parse("07-31-2008")
Date startDate = format.parse("07-31-2008");
endDate=format.parse("12-01-2011")
Date endDate = format.parse("12-01-2011");
Date curDate = startDate;
Hashtable<Integer,ArrayList<Integer>> saturationResults = new Hashtable<Integer,ArrayList<Integer>>();
ArrayList<Integer> results = new ArrayList<Integer>();
saturatedSet=saturationData.get(level)
List<ClassSaturation> saturatedSet = saturationData.get(level);
List<ClassSaturation> saturatedSet = saturationData.get(level);
List<ClassSaturation> saturatedByDate = new ArrayList<ClassSaturation>();
int row = 0;
ArrayList<Integer> columns = new ArrayList<Integer>();
levelSat=saturationResults.get(level)
ArrayList<Integer> levelSat = saturationResults.get(level);
ArrayList<Integer> levelSat = saturationResults.get(level);
List<ClassSaturation> saturatedSet = new ArrayList<ClassSaturation>();
Hashtable<ThreadElement,Date> dateThreadMap = new Hashtable<ThreadElement,Date>();
d=GetDateComponent(MinDateInThread(thread,classDoc.Klass))
Date d = GetDateComponent(MinDateInThread(thread,classDoc.Klass));
ArrayList<Entry<ThreadElement,Date>> sortedThreadElements = new ArrayList<Entry<ThreadElement,Date>>(dateThreadMap.entrySet());
ClassSaturation sat = new ClassSaturation();
sub=sortedThreadElements.subList(0,level)
List<Entry<ThreadElement,Date>> sub = sortedThreadElements.subList(0, level);
List<Entry<ThreadElement,Date>> sub = sortedThreadElements.subList(0, level);
c=Calendar.getInstance()
Calendar c = Calendar.getInstance();
Date minDate = new Date();
SpeedOfSaturation run = new SpeedOfSaturation();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
int numberThreadQs = 0;
int numberThreadAs = 0;
int numberQs = 0;
int numberAs = 0;
int threadQs = 0;
int threadAs = 0;
SerializeDocumentation serializer = new SerializeDocumentation();
docs=serializer.DeserializeClassDocumentation(classdocpath,api)
List<ClassDocumentation> docs = serializer.DeserializeClassDocumentation(classdocpath,api);
List<ClassDocumentation> docs = serializer.DeserializeClassDocumentation(classdocpath,api);
usageMap=ReadUsage(usageCSV)
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
classFQN=doc.Klass.getFQN()
String classFQN = doc.Klass.getFQN();
usage=usageMap.get(classFQN)
int usage = usageMap.get(classFQN);
threads=doc.getValidatedThreads().size()
int threads = doc.getValidatedThreads().size();
contents=readStream(new FileInputStream(path))
String contents = readStream(new FileInputStream(path));
lines=contents.split(System.getProperty("line.separator"))
String[] lines = contents.split(System.getProperty("line.separator"));
Hashtable<String,Integer> usageMap = new Hashtable<String,Integer>();
BaseAnalysis a = new OutputActivityAndUsage();
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
usageMap=ReadUsage(usageCSV)
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
classFQN=doc.Klass.getFQN()
String classFQN = doc.Klass.getFQN();
usage=usageMap.get(classFQN)
int usage = usageMap.get(classFQN);
threads=doc.getValidatedThreads().size()
int threads = doc.getValidatedThreads().size();
aQThreads=AnswerQuestionRatio(doc)
int[] aQThreads = AnswerQuestionRatio(doc);
int numberThreadQs = 0;
int numberThreadAs = 0;
int numberQs = 0;
int numberAs = 0;
int[] answerQuestions = new int[2];
int threadQs = 0;
int threadAs = 0;
contents=readStream(new FileInputStream(path))
String contents = readStream(new FileInputStream(path));
lines=contents.split(System.getProperty("line.separator"))
String[] lines = contents.split(System.getProperty("line.separator"));
Hashtable<String,Integer> usageMap = new Hashtable<String,Integer>();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
int firstNonZeroIndex = 0;
doc=docs.get(i)
ClassDocumentation doc = docs.get(i);
t=doc.getValidatedThreads().size()
int t = doc.getValidatedThreads().size();
int workingRange = docs.size() - firstNonZeroIndex;
int lowStart = firstNonZeroIndex;
int lowEnd = (int)(workingRange *.40) + firstNonZeroIndex;
int highStart = docs.size() - (int)(workingRange *.15);
highEnd=docs.size()
int highEnd = docs.size();
List<ClassDocumentation> lowSet = new ArrayList<ClassDocumentation>(docs.subList(lowStart, lowEnd));
List<ClassDocumentation> highSet = new ArrayList<ClassDocumentation>(docs.subList(highStart, highEnd));
List<ThreadElement> lowThreads = new ArrayList<ThreadElement>();
List<ThreadElement> highThreads = new ArrayList<ThreadElement>();
docthreads=doc.getValidatedThreads()
List<ThreadElement> docthreads = doc.getValidatedThreads();
List<ThreadElement> docthreads = doc.getValidatedThreads();
docthreads=doc.getValidatedThreads()
List<ThreadElement> docthreads = doc.getValidatedThreads();
List<ThreadElement> docthreads = doc.getValidatedThreads();
BaseAnalysis a = new SamplingForDifficultyAnalysis();
WordDistributions dist = new WordDistributions();
Hashtable<Integer,ArrayList<ClassElem>> bins = new Hashtable<Integer,ArrayList<ClassElem>>();
length=dist.WordLength(klass.Name)
int length = dist.WordLength(klass.Name);
poolSize=NonZeroQuestionsOrAnswersClasses(bins.get(b)).size()
int poolSize = NonZeroQuestionsOrAnswersClasses(bins.get(b)).size();
classPool=NonZeroQuestionsOrAnswersClasses(bins.get(b))
List<ClassElem> classPool = NonZeroQuestionsOrAnswersClasses(bins.get(b));
List<ClassElem> classPool = NonZeroQuestionsOrAnswersClasses(bins.get(b));
numClassesToInspect=Math.min((int)(percentage * classPool.size()),numQuestionsAnswers)
int numClassesToInspect = Math.min((int)( percentage * classPool.size()),numQuestionsAnswers);
List<String> inspectionPool = new ArrayList<String>();
questionId=klass.AnswerIdToParentId.get(answerId)
int questionId = klass.AnswerIdToParentId.get(answerId);
List<ClassElem> nonZero = new ArrayList<ClassElem>();
List<T> clone = new ArrayList<T>(items);
ByteArrayOutputStream os = new ByteArrayOutputStream(string.length());
GZIPOutputStream gos = new GZIPOutputStream(os);
compressed=os.toByteArray()
byte[] compressed = os.toByteArray();
final int BUFFER_SIZE = 64;
ByteArrayInputStream is = new ByteArrayInputStream(compressed);
GZIPInputStream gis = new GZIPInputStream(is, BUFFER_SIZE);
StringBuilder string = new StringBuilder();
byte[] data = new byte[BUFFER_SIZE];
int bytesRead;
set=_commonStatement.executeQuery("SELECT UserId FROM VOTES WHERE PostId =" + id)
ResultSet set = _commonStatement.executeQuery("SELECT UserId FROM VOTES WHERE PostId ="+ id);
List<Integer> list = new ArrayList<Integer>();
set=_commonStatement.executeQuery("SELECT BountyAmount FROM VOTES WHERE PostId =" + id + " AND VoteTypeId = 9")
ResultSet set = _commonStatement.executeQuery("SELECT BountyAmount FROM VOTES WHERE PostId ="+ id + " AND VoteTypeId = 9");
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id FROM POSTS WHERE Tags like '%" + tag + "%'")
ResultSet set = s.executeQuery("SELECT Id FROM POSTS WHERE Tags like '%"+ tag + "%'");
List<Integer> ids = new ArrayList<Integer>();
List<PostInfo> posts = new ArrayList<PostInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,Body,Score,AcceptedAnswerId,AnswerCount,FavoriteCount,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Id = " + id)
ResultSet set = s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,Body,Score,AcceptedAnswerId,AnswerCount,FavoriteCount,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Id = "+ id);
PostInfo info = new PostInfo();
List<UserInfo> results = new ArrayList<UserInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,DisplayName,Reputation,Age,CreationDate,LastAccessDate,Views,UpVotes,DownVotes FROM USERS")
ResultSet set = s.executeQuery("SELECT Id,DisplayName,Reputation,Age,CreationDate,LastAccessDate,Views,UpVotes,DownVotes FROM USERS");
UserInfo info = new UserInfo();
List<PostInfo> results = new ArrayList<PostInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Tags like '%" + tag + "%'")
ResultSet set = s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Tags like '%"+ tag + "%'");
PostInfo info = new PostInfo();
List<PostInfo> results = new ArrayList<PostInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,PostTypeId,ParentId,OwnerUserId,CreationDate,LastActivityDate,Body,ViewCount,Title FROM POSTS WHERE ParentId = " + parentId)
ResultSet set = s.executeQuery("SELECT Id,PostTypeId,ParentId,OwnerUserId,CreationDate,LastActivityDate,Body,ViewCount,Title FROM POSTS WHERE ParentId = " + parentId);
PostInfo info = new PostInfo();
set=s.executeQuery("SELECT Id, ParentId FROM POSTS WHERE " + "Id = " + answerId)
ResultSet set = s.executeQuery("SELECT Id, ParentId FROM POSTS WHERE " + 
					   "Id = " + answerId);
CachedRowSet rowSet = new CachedRowSetImpl();
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("tag","SELECT Id FROM " + tempTable + " WHERE "+ "tags like '%<"+ klassName+ "%>'",s)
ResultSet set = ResultCache.CachedQueryExecution("tag",
					"SELECT Id FROM "+ tempTable + " WHERE " + 
					"tags like '%<"+ klassName +"%>'",
					s);
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("word","SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle REGEXP '[[:<:]]"+ klassName+ "[[:>:]]'",s)
ResultSet set = ResultCache.CachedQueryExecution("word",
								"SELECT Id FROM "+tempTable + " WHERE " + 
								"BodyAndTitle REGEXP '[[:<:]]"+klassName+"[[:>:]]'",
								s);
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("code","SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle REGEXP '<code>[^</]*[[:<:]]"+ klassName+ "[[:>:]][^</]*</code>'",s)
ResultSet set = ResultCache.CachedQueryExecution("code",
								"SELECT Id FROM "+tempTable + " WHERE " + 
								"BodyAndTitle REGEXP '<code>[^</]*[[:<:]]"+klassName+"[[:>:]][^</]*</code>'",
								s);
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("links","SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle REGEXP '<a[^>]*>[[:<:]]"+ klassName+ "[[:>:]][^</]*</a>'",s)
ResultSet set = ResultCache.CachedQueryExecution("links",
								"SELECT Id FROM "+tempTable + " WHERE " + 
								"BodyAndTitle REGEXP '<a[^>]*>[[:<:]]"+klassName+"[[:>:]][^</]*</a>'",
								s);
File cacheDir = new File("cachedir");
File cache = new File("cachedir/_"+tempTable+"___"+klassName);
CachedRowSet rowSet = new CachedRowSetImpl();
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("tag","SELECT Id FROM " + tempTable + " WHERE "+ "tags like '%<"+ klassName+ "%>'",s)
ResultSet set = ResultCache.CachedQueryExecution("tag",
						"SELECT Id FROM "+ tempTable + " WHERE " + 
						"tags like '%<"+ klassName +"%>'",
						s);
set=s.executeQuery("SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle like '%"+ klassName+ "%'")
ResultSet set = s.executeQuery("SELECT Id FROM "+tempTable + " WHERE " + 
											   "BodyAndTitle like '%"+ klassName +"%'"
				);
FileOutputStream fos = new FileOutputStream(cache.getAbsolutePath());
ObjectOutputStream out = new ObjectOutputStream(fos);
FileInputStream fos = new FileInputStream(cache.getAbsolutePath());
ObjectInputStream in = new ObjectInputStream(fos);
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT count(*) as number FROM " + tempTable + " WHERE "+ "BodyAndTitle like '%"+ klassName+ "%'")
ResultSet set = s.executeQuery("SELECT count(*) as number FROM "+tempTable + " WHERE " + 
										   "BodyAndTitle like '%"+ klassName +"%'"
			);
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT count(*) as number FROM " + tempTable + " WHERE "+ "BodyAndTitle like '%"+ klassName+ "%'"+ "AND BodyAndTitle like '%"+ methodName+ "%'")
ResultSet set = s.executeQuery("SELECT count(*) as number FROM "+tempTable + " WHERE " + 
					   					   "BodyAndTitle like '%"+ klassName +"%'" + 
										   "AND BodyAndTitle like '%"+ methodName +"%'"
			);
char c;
char q;
StringBuffer sb;
JSONArray ja = new JSONArray();
value=getValue(x)
String value = getValue(x);
c=x.next()
char c = x.next();
ja=rowToJSONArray(x)
JSONArray ja = rowToJSONArray(x);
StringBuffer sb = new StringBuffer();
object=ja.opt(i)
Object object = ja.opt(i);
string=object.toString()
String string = object.toString();
length=string.length()
int length = string.length();
c=string.charAt(j)
char c = string.charAt(j);
JSONArray ja = new JSONArray();
jo=rowToJSONObject(names,x)
JSONObject jo = rowToJSONObject(names, x);
jo=ja.optJSONObject(0)
JSONObject jo = ja.optJSONObject(0);
names=jo.names()
JSONArray names = jo.names();
StringBuffer sb = new StringBuffer();
jo=ja.optJSONObject(i)
JSONObject jo = ja.optJSONObject(i);
char         c;
s=string.trim()
String       s = string.trim();
StringBuffer sb = new StringBuffer();
length=s.length()
int          length = s.length();
String         name;
JSONObject     jo = new JSONObject();
Object         value;
JSONTokener x = new JSONTokener(string);
StringBuffer sb = new StringBuffer();
length=string.length()
int length = string.length();
StringBuffer sb = new StringBuffer();
c=string.charAt(i)
char c = string.charAt(i);
d=JSONTokener.dehexchar(string.charAt(i + 1))
int d = JSONTokener.dehexchar(string.charAt(i + 1));
e=JSONTokener.dehexchar(string.charAt(i + 2))
int e = JSONTokener.dehexchar(string.charAt(i + 2));
JSONObject jo = new JSONObject();
JSONTokener x = new JSONTokener(string);
name=Cookie.unescape(x.nextTo('='))
String name = Cookie.unescape(x.nextTo('='));
boolean      b = false;
keys=jo.keys()
Iterator     keys = jo.keys();
String       string;
StringBuffer sb = new StringBuffer();
JSONObject     jo = new JSONObject();
HTTPTokener    x = new HTTPTokener(string);
String         token;
name=x.nextTo(':')
String name = x.nextTo(':');
keys=jo.keys()
Iterator     keys = jo.keys();
String       string;
StringBuffer sb = new StringBuffer();
char c;
char q;
StringBuffer sb = new StringBuffer();
iter=collection.iterator()
Iterator iter = collection.iterator();
length=Array.getLength(array)
int length = Array.getLength(array);
object=this.opt(index)
Object object = this.opt(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
len=this.length()
int len = this.length();
StringBuffer sb = new StringBuffer();
o=this.opt(index)
Object o = this.opt(index);
o=this.opt(index)
Object o = this.opt(index);
object=this.opt(index)
Object object = this.opt(index);
Double d = new Double(value);
o=this.opt(index)
Object o = this.opt(index);
JSONObject jo = new JSONObject();
len=this.length()
int len = this.length();
int i;
StringBuffer sb = new StringBuffer("[");
int newindent = indent + indentFactor;
boolean b = false;
len=this.length()
int     len = this.length();
v=this.myArrayList.get(i)
Object v = this.myArrayList.get(i);
String     attribute;
char       c;
String       closeTag = null;
int        i;
JSONArray  newja = null;
JSONObject newjo = null;
Object     token;
String       tagName = null;
int             i;
JSONObject   jo;
String       key;
Iterator     keys;
int             length;
Object         object;
StringBuffer sb = new StringBuffer();
String       tagName;
String       value;
StringBuffer sb = new StringBuffer();
int          i;
JSONArray    ja;
String       key;
Iterator     keys;
int          length;
Object         object;
String       tagName;
String       value;
char c;
String key;
i=map.entrySet().iterator()
Iterator i = map.entrySet().iterator();
Map.Entry e = (Map.Entry)i.next();
value=e.getValue()
Object value = e.getValue();
c=object.getClass()
Class c = object.getClass();
String name = names[i];
bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader())
ResourceBundle bundle = ResourceBundle.getBundle(baseName, locale,
                Thread.currentThread().getContextClassLoader());
keys=bundle.getKeys()
Enumeration keys = bundle.getKeys();
key=keys.nextElement()
Object key = keys.nextElement();
path=((String)key).split("\\.")
String[] path = ((String)key).split("\\.");
int last = path.length - 1;
JSONObject target = this;
String segment = path[i];
nextTarget=target.optJSONObject(segment)
JSONObject nextTarget = target.optJSONObject(segment);
object=this.opt(key)
Object object = this.opt(key);
object=this.opt(key)
Object object = this.opt(key);
string=Double.toString(d)
String string = Double.toString(d);
object=this.opt(key)
Object object = this.opt(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
length=jo.length()
int length = jo.length();
iterator=jo.keys()
Iterator iterator = jo.keys();
String[] names = new String[length];
int i = 0;
klass=object.getClass()
Class klass = object.getClass();
fields=klass.getFields()
Field[] fields = klass.getFields();
int length = fields.length;
String[] names = new String[length];
object=this.get(key)
Object object = this.get(key);
value=this.opt(key)
Object value = this.opt(key);
JSONArray ja = new JSONArray();
keys=this.keys()
Iterator  keys = this.keys();
string=number.toString()
String string = number.toString();
o=this.opt(key)
Object o = this.opt(key);
object=this.opt(key)
Object object = this.opt(key);
object=this.opt(key)
Object object = this.opt(key);
klass=bean.getClass()
Class klass = bean.getClass();
boolean includeSuperClass = klass.getClassLoader() != null;
Method[] methods = includeSuperClass
                ? klass.getMethods()
                : klass.getDeclaredMethods();
Method method = methods[i];
name=method.getName()
String name = method.getName();
String key = "";
result=method.invoke(bean,(Object[])null)
Object result = method.invoke(bean, (Object[])null);
char         b;
char         c = 0;
String       hhhh;
int          i;
len=string.length()
int          len = string.length();
StringBuffer sb = new StringBuffer(len + 4);
Double d;
b=string.charAt(0)
char b = string.charAt(0);
Long myLong = new Long(string);
JSONArray ja = new JSONArray();
keys=this.keys()
Iterator     keys = this.keys();
StringBuffer sb = new StringBuffer("{");
o=keys.next()
Object o = keys.next();
int i;
length=this.length()
int length = this.length();
keys=this.keys()
Iterator     keys = this.keys();
int          newindent = indent + indentFactor;
Object       object;
StringBuffer sb = new StringBuffer("{");
Object object;
o=((JSONString)value).toJSONString()
Object o = ((JSONString)value).toJSONString();
objectPackage=object.getClass().getPackage()
Package objectPackage = object.getClass().getPackage();
String objectPackageName = objectPackage != null
                 ? objectPackage.getName()
                 : "";
boolean  commanate = false;
keys=this.keys()
Iterator keys = this.keys();
key=keys.next()
Object key = keys.next();
value=this.map.get(key)
Object value = this.map.get(key);
int c;
n=this.next()
char n = this.next();
char[] chars = new char[n];
int pos = 0;
c=this.next()
char c = this.next();
char c;
StringBuffer sb = new StringBuffer();
StringBuffer sb = new StringBuffer();
c=this.next()
char c = this.next();
char c;
StringBuffer sb = new StringBuffer();
c=this.nextClean()
char c = this.nextClean();
String string;
StringBuffer sb = new StringBuffer();
char c;
long startIndex = this.index;
long startCharacter = this.character;
long startLine = this.line;
char m = this.stack[this.top - 1] == null ? 'a' : 'k';
StringBuffer sb = new StringBuffer();
c=string.charAt(i)
char c = string.charAt(i);
length=string.length()
int i, length = string.length();
char       c;
int        i;
JSONObject jsonobject = null;
String     string;
String     tagName;
Object     token;
initial=string.charAt(0)
char initial = string.charAt(0);
boolean negative = false;
Long myLong = new Long(string);
JSONObject jo = new JSONObject();
XMLTokener x = new XMLTokener(string);
StringBuffer sb = new StringBuffer();
int          i;
JSONArray    ja;
JSONObject   jo;
String       key;
Iterator     keys;
int          length;
String       string;
Object       value;
char         c;
int          i;
StringBuffer sb = new StringBuffer();
char         c;
StringBuffer sb;
StringBuffer sb = new StringBuffer();
c=next()
char c = next();
string=sb.toString()
String string = sb.toString();
object=entity.get(string)
Object object = entity.get(string);
char c;
char q;
char c;
char q;
StringBuffer sb;
boolean b;
char c;
int i;
int j;
int offset = 0;
length=to.length()
int length = to.length();
char[] circle = new char[length];
List<Question> list = new ArrayList<Question>();
String query = "SELECT * FROM POSTS WHERE " + BuildLikeClauses(searchTags);
set=_commonStatement.executeQuery(query)
ResultSet set = _commonStatement.executeQuery(query);
post=PopulateQuestions(set,flattenHtml)
Question post = PopulateQuestions(set, flattenHtml);
int count= 0;
doc=Jsoup.parseBodyFragment(body)
Document doc = Jsoup.parseBodyFragment(body);
List<CommentInfo> list = new ArrayList<CommentInfo>();
set=_commonStatement.executeQuery("SELECT * FROM Comments WHERE PostId=" + id)
ResultSet set = _commonStatement.executeQuery("SELECT * FROM Comments WHERE PostId="+id);
CommentInfo comment = new CommentInfo();
List<String> queryParts = new ArrayList<String>();
Question info = new Question();
List<Answer> answers = new ArrayList<Answer>();
String query = "SELECT Id,PostTypeId,ParentId,OwnerUserId,CreationDate,LastActivityDate,Body,ViewCount,Title FROM POSTS WHERE ParentId = " + parentId;
set=_commonStatement.executeQuery(query)
ResultSet set = _commonStatement.executeQuery(query);
Answer info = new Answer();
CheckoutTaggedPostsAndComments checkout = new CheckoutTaggedPostsAndComments();
posts=checkout.Query(new String[]{"<internet-explorer>","<ie>","<ie6>","<ie7>","<ie8>","<ie9>","<ie10>","<ie11>"},true)
List<Question> posts = checkout.Query(new String[]
		{
			"<internet-explorer>", "<ie>","<ie6>","<ie7>","<ie8>","<ie9>","<ie10>","<ie11>",
		}, true);
gson=new GsonBuilder().setPrettyPrinting().create()
Gson gson = new GsonBuilder().setPrettyPrinting().create();
PrintWriter writer = new PrintWriter(new FileWriter("IEData.json"));
StringBuilder builder = new StringBuilder();
iter=s.iterator()
Iterator<?> iter = s.iterator();
Iterator<?> iter = s.iterator();
String createUsers = "CREATE TABLE USERS (" +
				"Id INT NOT NULL," +
				"Reputation INT NOT NULL," +
				"CreationDate DATETIME NOT NULL," +
				"DisplayName VARCHAR(200) NOT NULL," +
				"EmailHash VARCHAR(200)," +
				"LastAccessDate DATETIME NOT NULL," + 
				"WebsiteUrl VARCHAR(200)," + 
				"Location VARCHAR(200)," + 
				"Age INT NOT NULL," + 
				"Views INT NOT NULL," + 
				"UpVotes INT NOT NULL," + 
				"DownVotes INT NOT NULL," + 
				"PRIMARY KEY (ID)" +
				")";
String createPosts = "CREATE TABLE POSTS (" +
				"Id INT NOT NULL," +
				"PostTypeId INT NOT NULL," +
				"ParentID INT NOT NULL," +
				"AcceptedAnswerId INT," +
				"CreationDate DATETIME NOT NULL," +
				"Score INT," + 
		        "ViewCount INT," +
		        "Body TEXT," +
		        "OwnerUserId INT," + 
		        "LastEditorUserId INT," + 
		        "LastEditorDisplayName VARCHAR(200)," +  
		        "LastEditDate DATETIME," +
		        "LastActivityDate DATETIME NOT NULL," + 
		        "CommunityOwnedDate DATETIME," + 
		        "ClosedDate DATETIME," + 
		        "Title VARCHAR(500) NOT NULL," +
		        "Tags VARCHAR(200) NOT NULL," + 
		        "AnswerCount INT NOT NULL," +
		        "CommentCount INT NOT NULL," +
		        "FavoriteCount INT NOT NULL," +
		        "BodyAndTitle TEXT," +
				"PRIMARY KEY (ID)" +
				")";
id=Integer.parseInt(attributes.getValue("Id").trim().replaceAll("\\D+",""))
int id = Integer.parseInt(attributes.getValue("Id").trim().replaceAll("\\D+",""));
int postType = 0;
parentId=attributes.getValue("ParentId")
String parentId = attributes.getValue("ParentId");
acceptedId=attributes.getValue("AcceptedAnswerId")
String acceptedId = attributes.getValue("AcceptedAnswerId");
creationDate=attributes.getValue("CreationDate")
String creationDate = attributes.getValue("CreationDate");
int score = 0;
viewCount=attributes.getValue("ViewCount")
String viewCount = attributes.getValue("ViewCount");
body=attributes.getValue("Body")
String body = attributes.getValue("Body");
ownerUserId=attributes.getValue("OwnerUserId")
String ownerUserId = attributes.getValue("OwnerUserId");
lastEditorUserId=attributes.getValue("LastEditorUserId")
String lastEditorUserId = attributes.getValue("LastEditorUserId");
lastEditorDisplayName=attributes.getValue("LastEditorDisplayName")
String lastEditorDisplayName = attributes.getValue("LastEditorDisplayName");
lastEditDate=attributes.getValue("LastEditDate")
String lastEditDate = attributes.getValue("LastEditDate");
lastActivityDate=attributes.getValue("LastActivityDate")
String lastActivityDate = attributes.getValue("LastActivityDate");
communityOwnedDate=attributes.getValue("CommunityOwnedDate")
String communityOwnedDate = attributes.getValue("CommunityOwnedDate");
closedDate=attributes.getValue("ClosedDate")
String closedDate = attributes.getValue("ClosedDate");
String title = attributes.getValue("Title") == null ? "" : attributes.getValue("Title");
String tags = attributes.getValue("Tags") == null ? "" : attributes.getValue("Tags");
answerCount=attributes.getValue("AnswerCount")
String answerCount = attributes.getValue("AnswerCount");
commentCount=attributes.getValue("CommentCount")
String commentCount = attributes.getValue("CommentCount");
favoriteCount=attributes.getValue("FavoriteCount")
String favoriteCount = attributes.getValue("FavoriteCount");
String[] row = new String[]{id + "",postType +"",parentId,acceptedId,creationDate, score +"",
					viewCount,body,ownerUserId,lastEditorUserId,lastEditorDisplayName,
					lastEditDate,lastActivityDate,communityOwnedDate,closedDate,title,tags,
					answerCount,commentCount,favoriteCount};
ArrayList<String> list = new ArrayList<String>();
String rowStr = join(list,"��") + "��";
StringBuilder builder = new StringBuilder();
iter=s.iterator()
Iterator iter = s.iterator();
val=iter.next()
Object val = iter.next();
id=Integer.parseInt(attributes.getValue("Id"))
int id                = Integer.parseInt(attributes.getValue("Id"));
rep=Integer.parseInt(attributes.getValue("Reputation"))
int rep               = Integer.parseInt(attributes.getValue("Reputation"));
createDate=attributes.getValue("CreationDate")
String createDate     = attributes.getValue("CreationDate");
displayName=attributes.getValue("DisplayName")
String displayName    = attributes.getValue("DisplayName");
emailHash=attributes.getValue("EmailHash")
String emailHash      = attributes.getValue("EmailHash");
lastAccessDate=attributes.getValue("LastAccessDate")
String lastAccessDate = attributes.getValue("LastAccessDate");
webUrl=attributes.getValue("WebsiteUrl")
String webUrl         = attributes.getValue("WebsiteUrl");
location=attributes.getValue("Location")
String location       = attributes.getValue("Location");
age=attributes.getValue("Age")
String age            = attributes.getValue("Age");
views=Integer.parseInt(attributes.getValue("Views"))
int views             = Integer.parseInt(attributes.getValue("Views"));
upvotes=Integer.parseInt(attributes.getValue("UpVotes"))
int upvotes           = Integer.parseInt(attributes.getValue("UpVotes"));
downvotes=Integer.parseInt(attributes.getValue("DownVotes"))
int downvotes         = Integer.parseInt(attributes.getValue("DownVotes"));
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
UsersHandler users = new UsersHandler();
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
PostsHandler posts = new PostsHandler();
String createCommentsSQL = "CREATE TABLE COMMENTS (" +
					"Id INT NOT NULL," +
					"PostId INT NOT NULL," +
					"Score INT NOT NULL," +
					"Comment TEXT NULL," + 
					"CreationDate DATETIME NOT NULL," + 
					"UserId INT NULL," + 
					"PRIMARY KEY (ID)" +
					")";
id=Integer.parseInt(attributes.getValue("Id"))
int id = Integer.parseInt(attributes.getValue("Id"));
postId=Integer.parseInt(attributes.getValue("PostId"))
int postId = Integer.parseInt(attributes.getValue("PostId"));
score=Integer.parseInt(attributes.getValue("Score"))
int score = Integer.parseInt(attributes.getValue("Score"));
comment=attributes.getValue("Text")
String comment = attributes.getValue("Text");
date=attributes.getValue("CreationDate")
String date = attributes.getValue("CreationDate");
userId=attributes.getValue("UserId")
String userId = attributes.getValue("UserId");
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
CommentsHandler comments = new CommentsHandler();
String createVotesSQL = "CREATE TABLE VOTES (" +
					"Id INT NOT NULL," +
					"PostId INT NOT NULL," +
					"VoteTypeId INT NOT NULL," +
					"CreationDate DATETIME NOT NULL," + 
					"UserId INT NULL," + 
					"BountyAmount INT NULL," + 
					"PRIMARY KEY (ID)" +
					")";
id=Integer.parseInt(attributes.getValue("Id"))
int id = Integer.parseInt(attributes.getValue("Id"));
postId=Integer.parseInt(attributes.getValue("PostId"))
int postId = Integer.parseInt(attributes.getValue("PostId"));
voteTypeId=Integer.parseInt(attributes.getValue("VoteTypeId"))
int voteTypeId = Integer.parseInt(attributes.getValue("VoteTypeId"));
date=attributes.getValue("CreationDate")
String date = attributes.getValue("CreationDate");
userId=attributes.getValue("UserId")
String userId = attributes.getValue("UserId");
bountyAmount=attributes.getValue("BountyAmount")
String bountyAmount = attributes.getValue("BountyAmount");
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
VotesHandler users = new VotesHandler();

Diff of b23b19c93306a4fdfd82a36c7caf701193b13f69 and 5c59c8d7f019e3009a399213869e568c1e3b1d4e:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision b23b19c93306a4fdfd82a36c7caf701193b13f69 to 5c59c8d7f019e3009a399213869e568c1e3b1d4e


****Parsing for addition at revision 5c59c8d7f019e3009a399213869e568c1e3b1d4e****

Added AbstractApi.java to .\anacrowd\ repository source files.
Added AndroidApi.java to .\anacrowd\ repository source files.
Added Collision.java to .\anacrowd\ repository source files.
Added ClassElem.java to .\anacrowd\ repository source files.
Added MethodElem.java to .\anacrowd\ repository source files.
Added PackageElem.java to .\anacrowd\ repository source files.
Added GWTApi.java to .\anacrowd\ repository source files.
Added JavaApi.java to .\anacrowd\ repository source files.
Added ApiParser.java to .\anacrowd\ repository source files.
Added ResultCache.java to .\anacrowd\ repository source files.
Added CrowdAnalysis.java to .\anacrowd\ repository source files.
Added ViewCountAnalysis.java to .\anacrowd\ repository source files.
Added ClassDocumentation.java to .\anacrowd\ repository source files.
Added ClassIndex.java to .\anacrowd\ repository source files.
Added AnswerElement.java to .\anacrowd\ repository source files.
Added ClusteredLinkElement.java to .\anacrowd\ repository source files.
Added CodeSampleElement.java to .\anacrowd\ repository source files.
Added CoOccurringLinks.java to .\anacrowd\ repository source files.
Added LinkElement.java to .\anacrowd\ repository source files.
Added LinkElement_old.java to .\anacrowd\ repository source files.
Added PostElement.java to .\anacrowd\ repository source files.
Added QuestionElement.java to .\anacrowd\ repository source files.
Added ThreadElement.java to .\anacrowd\ repository source files.
Added BuildDocumentation.java to .\anacrowd\ repository source files.
Added ExportDocumentation.java to .\anacrowd\ repository source files.
Added LinkDocumentation.java to .\anacrowd\ repository source files.
Added RankDocumentation.java to .\anacrowd\ repository source files.
Added SerializeDocumentation.java to .\anacrowd\ repository source files.
Added CachedPostBody.java to .\anacrowd\ repository source files.
Added CachePostBodyIndex.java to .\anacrowd\ repository source files.
Added LinkSpan.java to .\anacrowd\ repository source files.
Added LinkValidation.java to .\anacrowd\ repository source files.
Added ApiInfo.java to .\anacrowd\ repository source files.
Added CoverageData.java to .\anacrowd\ repository source files.
Added ExportCoverage.java to .\anacrowd\ repository source files.
Added ExportPosts.java to .\anacrowd\ repository source files.
Added ExportUsers.java to .\anacrowd\ repository source files.
Added Post2Api.java to .\anacrowd\ repository source files.
Added ConsoleFormatter.java to .\anacrowd\ repository source files.
Added Visitor.java to .\anacrowd\ repository source files.
Added WordDistributions.java to .\anacrowd\ repository source files.
Added test.java to .\anacrowd\ repository source files.
Added AnalyzeDocumentation.java to .\anacrowd\ repository source files.
Added ApiAnalysis.java to .\anacrowd\ repository source files.
Added BaseAnalysis.java to .\anacrowd\ repository source files.
Added ClassTagReliability.java to .\anacrowd\ repository source files.
Added CodeSampleAnalysis.java to .\anacrowd\ repository source files.
Added CodeSampleStats.java to .\anacrowd\ repository source files.
Added FilterAnalysis.java to .\anacrowd\ repository source files.
Added AbstractThreadFilter.java to .\anacrowd\ repository source files.
Added AcceptedFilter.java to .\anacrowd\ repository source files.
Added AnsweredFilter.java to .\anacrowd\ repository source files.
Added AtLeastNFilter.java to .\anacrowd\ repository source files.
Added BountiedFilter.java to .\anacrowd\ repository source files.
Added FavoritedFilter.java to .\anacrowd\ repository source files.
Added ViewedFilter.java to .\anacrowd\ repository source files.
Added VotedFilter.java to .\anacrowd\ repository source files.
Added WhoContributes.java to .\anacrowd\ repository source files.
Added ApiInfo.java to .\anacrowd\ repository source files.
Added LinkAnalysis.java to .\anacrowd\ repository source files.
Added OtherRatings.java to .\anacrowd\ repository source files.
Added CalculateBountiesForThreads.java to .\anacrowd\ repository source files.
Added MyEntry.java to .\anacrowd\ repository source files.
Added ThreadInPackages.java to .\anacrowd\ repository source files.
Added ThreadStats.java to .\anacrowd\ repository source files.
Added Driver.java to .\anacrowd\ repository source files.
Added FindLinkExamples.java to .\anacrowd\ repository source files.
Added RankedClassDocumentation.java to .\anacrowd\ repository source files.
Added ExportDataForTreemap.java to .\anacrowd\ repository source files.
Added SerializeJson.java to .\anacrowd\ repository source files.
Added RunJavaMethodCoverage.java to .\anacrowd\ repository source files.
Added SpeedOfSaturation.java to .\anacrowd\ repository source files.
Added DifficultySites.java to .\anacrowd\ repository source files.
Added OutputActivityAndUsage.java to .\anacrowd\ repository source files.
Added PredictorAnalysis.java to .\anacrowd\ repository source files.
Added SamplingForDifficultyAnalysis.java to .\anacrowd\ repository source files.
Added SampleByWordNumber.java to .\anacrowd\ repository source files.
Added DBInfo.java to .\anacrowd\ repository source files.
Added Search.java to .\anacrowd\ repository source files.
Added CDL.java to .\anacrowd\ repository source files.
Added Cookie.java to .\anacrowd\ repository source files.
Added CookieList.java to .\anacrowd\ repository source files.
Added HTTP.java to .\anacrowd\ repository source files.
Added HTTPTokener.java to .\anacrowd\ repository source files.
Added JSONArray.java to .\anacrowd\ repository source files.
Added JSONException.java to .\anacrowd\ repository source files.
Added JSONML.java to .\anacrowd\ repository source files.
Added JSONObject.java to .\anacrowd\ repository source files.
Added JSONString.java to .\anacrowd\ repository source files.
Added JSONStringer.java to .\anacrowd\ repository source files.
Added JSONTokener.java to .\anacrowd\ repository source files.
Added JSONWriter.java to .\anacrowd\ repository source files.
Added XML.java to .\anacrowd\ repository source files.
Added XMLTokener.java to .\anacrowd\ repository source files.
Added CheckoutTaggedPostsAndComments.java to .\anacrowd\ repository source files.
Added DBImport.java to .\anacrowd\ repository source files.
Added ImportComments.java to .\anacrowd\ repository source files.
Added ImportVotes.java to .\anacrowd\ repository source files.
Hashtable<String,Integer> classSet = new Hashtable<String,Integer>();
HashSet<String> uniqueClasses = new HashSet<String>();
HashSet<String> uniqueMethods = new HashSet<String>();
HashSet<String> overloadedMethods = new HashSet<String>();
int classCount = 0;
int methodCount = 0;
Hashtable<String,PackageElem> packages = new Hashtable<String,PackageElem>();
contents=readStream(new FileInputStream(path))
String contents = readStream(new FileInputStream(path));
lines=contents.split(System.getProperty("line.separator"))
String[] lines = contents.split(System.getProperty("line.separator"));
tuple=line.split("\t")
String[] tuple = line.split("\t");
namespace=tuple[0].trim()
String namespace = tuple[0].trim();
className=tuple[1].trim()
String className = tuple[1].trim();
PackageElem p = new PackageElem();
ClassElem klass = new ClassElem();
StringBuilder sb = new StringBuilder(512);
Reader r = new InputStreamReader(is, "UTF-8");
int c = 0;
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
name=attributes.getValue("name")
String name = attributes.getValue("name");
name=attributes.getValue("name")
String name = attributes.getValue("name");
name=attributes.getValue("name")
String name = attributes.getValue("name");
isPublic=attributes.getValue("visibility").equals("public")
boolean isPublic = attributes.getValue("visibility").equals("public");
MethodElem meth = new MethodElem();
String cacheDirPath = "cachedir/";
File cacheDir = new File(cacheDirPath);
bytesOfMessage=query.getBytes("UTF-8")
byte[] bytesOfMessage = query.getBytes("UTF-8");
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
thedigest=md.digest(bytesOfMessage)
byte[] thedigest = md.digest(bytesOfMessage);
StringBuilder builder = new StringBuilder();
String cacheDirPath = "cachedir/" + searchMethod + "/";
File cacheDir = new File(cacheDirPath);
encodedFilePath=EncodeQuery(query)
String encodedFilePath = EncodeQuery(query);
String fileName = cacheDirPath + encodedFilePath;
File cache = new File(fileName);
CachedRowSet rowSet = new CachedRowSetImpl();
set=s.executeQuery(query)
ResultSet set = s.executeQuery(query);
FileOutputStream fos = new FileOutputStream(cache.getAbsolutePath());
ObjectOutputStream out = new ObjectOutputStream(fos);
FileInputStream fos = new FileInputStream(cache.getAbsolutePath());
ObjectInputStream in = new ObjectInputStream(fos);
Search info = new Search();
String tag = api.MainTag;
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
List<CoverageEvent> coverageEvents = new ArrayList<CoverageEvent>();
methQuestions=info.GetIds(qTable,klass.Name)
List<Integer> methQuestions = info.GetIds(qTable,  klass.Name);
List<Integer> methQuestions = info.GetIds(qTable,  klass.Name);
CoverageEvent evt = new CoverageEvent();
rs=s.executeQuery("SELECT CreationDate,OwnerUserId FROM " + qTable + " "+ "WHERE Id = "+ id)
ResultSet rs = s.executeQuery(
								"SELECT CreationDate,OwnerUserId FROM " + qTable + " " + 
								"WHERE Id = " + id
						);
HashSet<Date> etimes = new HashSet<Date>();
List<Date> times =  new ArrayList<Date>(etimes);
Hashtable<String,Integer> coverage = new Hashtable<String,Integer>();
HashSet<Integer> users = new HashSet<Integer>();
HashSet<Integer> crowd = new HashSet<Integer>();
List<CoverageEvent> relevantEvents = new ArrayList<CoverageEvent>();
String key = pack.Name +":"+ klass.Name;
int count = 0;
Search info = new Search();
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
Hashtable<Integer,UserQA> dict = new Hashtable<Integer,UserQA>();
questionSet=s.executeQuery("SELECT OwnerUserId,Count(*) as num FROM " + qTable + " "+ "GROUP BY OwnerUserId")
ResultSet questionSet = s.executeQuery(
					"SELECT OwnerUserId,Count(*) as num FROM " + qTable + " " + 
					"GROUP BY OwnerUserId"
			);
userId=questionSet.getInt("OwnerUserId")
int userId = questionSet.getInt("OwnerUserId");
numQs=questionSet.getInt("num")
int numQs = questionSet.getInt("num");
answerSet=s.executeQuery("SELECT OwnerUserId,Count(*) as num FROM " + aTable + " "+ "GROUP BY OwnerUserId")
ResultSet answerSet = s.executeQuery(
					"SELECT OwnerUserId,Count(*) as num FROM " + aTable + " " + 
					"GROUP BY OwnerUserId"
			);
userId=answerSet.getInt("OwnerUserId")
int userId = answerSet .getInt("OwnerUserId");
numAs=answerSet.getInt("num")
int numAs = answerSet .getInt("num");
userSet=s.executeQuery("SELECT UpVotes,DownVotes,Age,CreationDate,LastAccessDate,Reputation FROM USERS " + "WHERE Id = " + key)
ResultSet userSet = s.executeQuery(
						"SELECT UpVotes,DownVotes,Age,CreationDate,LastAccessDate,Reputation FROM USERS " + 
						"WHERE Id = " + key
				);
Search info = new Search();
String tag = api.MainTag;
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
FileWriter fstream = new FileWriter("C:\\method_output.txt");
PrintWriter out = new PrintWriter(fstream);
int counter = 0;
methodQuestionIds=info.GetIds(qTable,methodElem.Name)
List<Integer> methodQuestionIds = info.GetIds(qTable, methodElem.Name);
List<Integer> methodQuestionIds = info.GetIds(qTable, methodElem.Name);
int acceptedAnswers = 0;
int viewCounts = 0;
int scores = 0;
int answerCounts = 0;
int commentCounts = 0;
int favoriteCounts = 0;
question=s.executeQuery("SELECT * FROM POSTS " + "WHERE Id = " + id)
ResultSet question = s.executeQuery(
									"SELECT * FROM POSTS " +
											"WHERE Id = " + id
									);
Search info = new Search();
String tag = api.MainTag;
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
FileWriter fstream = new FileWriter("C:\\noDuplicatesOutput.txt");
PrintWriter out = new PrintWriter(fstream);
Set<Integer> allKlassQuestionIds = new HashSet<Integer>();
int counter = 0;
klassQuestionIds=info.GetIds(qTable,klass.Name)
List<Integer> klassQuestionIds = info.GetIds(qTable,  klass.Name);
List<Integer> klassQuestionIds = info.GetIds(qTable,  klass.Name);
int acceptedAnswers = 0;
int viewCounts = 0;
int scores = 0;
int answerCounts = 0;
int commentCounts = 0;
int favoriteCounts = 0;
int counter2 = 0;
question=s.executeQuery("SELECT * FROM POSTS " + "WHERE Id = " + id)
ResultSet question = s.executeQuery(
						"SELECT * FROM POSTS " +
					    "WHERE Id = " + id
			    );
List<LinkElement> hrefs = new ArrayList<LinkElement>();
links=thread.Question.getHrefs(this.Klass)
List<LinkElement> links = thread.Question.getHrefs(this.Klass);
List<LinkElement> links = thread.Question.getHrefs(this.Klass);
List<CodeSampleElement> samples = new ArrayList<CodeSampleElement>();
elem=thread.Question.getCodeSample()
CodeSampleElement elem = thread.Question.getCodeSample();
List<LinkSpan> validatedLinks = new ArrayList<LinkSpan>();
List<ThreadElement> validatedThreads = new ArrayList<ThreadElement>();
ByteArrayOutputStream os = new ByteArrayOutputStream(string.length());
GZIPOutputStream gos = new GZIPOutputStream(os);
compressed=os.toByteArray()
byte[] compressed = os.toByteArray();
final int BUFFER_SIZE = 64;
ByteArrayInputStream is = new ByteArrayInputStream(compressed);
GZIPInputStream gis = new GZIPInputStream(is, BUFFER_SIZE);
StringBuilder string = new StringBuilder();
byte[] data = new byte[BUFFER_SIZE];
int bytesRead;
you=ClassIndex.getInstance().SampleMap.get(Id)
CodeSampleElement you = ClassIndex.getInstance().SampleMap.get( Id );
LinkDocumentation linker = new LinkDocumentation();
LinkDocumentation linker = new LinkDocumentation();
doc=linker.LinkOnlyClass(api,klass)
ClassDocumentation doc = linker.LinkOnlyClass(api, klass);
info=db.GetPostDetail(thread.Question.Id)
PostInfo info = db.GetPostDetail(thread.Question.Id);
ansInfo=db.GetPostDetail(ans.Id)
PostInfo ansInfo = db.GetPostDetail(ans.Id);
info=db.GetPostDetail(code.Parent.Id)
PostInfo info = db.GetPostDetail(code.Parent.Id);
Hashtable<String,ClusteredLinkElement> linkCount = new Hashtable<String,ClusteredLinkElement>();
doc=Jsoup.parseBodyFragment(body)
Document doc = Jsoup.parseBodyFragment(body);
codeSnippets=doc.getElementsByTag("code")
Elements codeSnippets = doc.getElementsByTag("code");
List<CodeBlock> blocks = new ArrayList<CodeBlock>();
CodeBlock block = new CodeBlock();
text=e.text()
String text = e.text();
p=Pattern.compile("\\b" + Pattern.quote(klass) + "\\b")
Pattern p = Pattern.compile("\\b"+Pattern.quote(klass)+"\\b");
matcher=p.matcher(text)
Matcher matcher = p.matcher(text);
int start=0;
doc=Jsoup.parseBodyFragment(body)
Document doc = Jsoup.parseBodyFragment(body);
codeSnippets=doc.getElementsByTag("a")
Elements codeSnippets = doc.getElementsByTag("a");
List<String> links = new ArrayList<String>();
blocks=this.ParseFragments(Test,"Document")
List<CodeBlock> blocks = this.ParseFragments(Test,"Document");
List<CodeBlock> blocks = this.ParseFragments(Test,"Document");
links=this.ParseLinks(TestLinks,"MessageDigest")
List<String> links = this.ParseLinks(TestLinks, "MessageDigest");
List<String> links = this.ParseLinks(TestLinks, "MessageDigest");
BuildDocumentation b = new BuildDocumentation();
doc=b.BuildForClass(new AndroidApi(),"Drawable")
ClassDocumentation doc = b.BuildForClass(new AndroidApi(),"Drawable");
RankDocumentation ranker = new RankDocumentation();
ExportDocumentation exporter = new ExportDocumentation();
top5code=doc.getCodeSampleElements().subList(0,Math.min(doc.getCodeSampleElements().size(),5))
List<CodeSampleElement> top5code = doc.getCodeSampleElements().subList(0, 
				Math.min(doc.getCodeSampleElements().size(), 5));
List<CodeSampleElement> top5code = doc.getCodeSampleElements().subList(0, 
				Math.min(doc.getCodeSampleElements().size(), 5));
top10links=doc.ClusteredLinks.subList(0,Math.min(doc.ClusteredLinks.size(),10))
List<ClusteredLinkElement> top10links = doc.ClusteredLinks.subList(0, 
				Math.min(doc.ClusteredLinks.size(),10));
List<ClusteredLinkElement> top10links = doc.ClusteredLinks.subList(0, 
				Math.min(doc.ClusteredLinks.size(),10));
top5questions=doc.ThreadElements.subList(0,Math.min(doc.ThreadElements.size(),5))
List<ThreadElement> top5questions = doc.ThreadElements.subList(0, 
				Math.min(doc.ThreadElements.size(),5));
List<ThreadElement> top5questions = doc.ThreadElements.subList(0, 
				Math.min(doc.ThreadElements.size(),5));
top5links=top10links.subList(0,Math.min(top10links.size(),5))
List<ClusteredLinkElement> top5links = top10links.subList(0, 
				Math.min(top10links.size(),5));
List<ClusteredLinkElement> top5links = top10links.subList(0, 
				Math.min(top10links.size(),5));
List<ClusteredLinkElement> removeMe = new ArrayList<ClusteredLinkElement>();
a=getDomainName(link.Href)
String a = getDomainName(link.Href);
b=getDomainName(other.Href)
String b = getDomainName(other.Href);
URL u;
ClassDocumentation klassDoc = new ClassDocumentation();
WordDistributions wd = new WordDistributions();
List<Integer> wordQMatches = new ArrayList<Integer>();
List<Integer> wordAMatches = new ArrayList<Integer>();
String klassName = klass.Name;
codeQMatches=search.GetIdsViaCodeMatches(this.QuestionsTempTableName,klassName)
List<Integer> codeQMatches = search.GetIdsViaCodeMatches(this.QuestionsTempTableName, klassName);
List<Integer> codeQMatches = search.GetIdsViaCodeMatches(this.QuestionsTempTableName, klassName);
linkQMatches=search.GetIdsViaLinkMatches(this.QuestionsTempTableName,klassName)
List<Integer> linkQMatches = search.GetIdsViaLinkMatches(this.QuestionsTempTableName, klassName);
List<Integer> linkQMatches = search.GetIdsViaLinkMatches(this.QuestionsTempTableName, klassName);
codeAMatches=search.GetIdsViaCodeMatches(this.AnswersTempTableName,klassName)
List<Integer> codeAMatches = search.GetIdsViaCodeMatches(this.AnswersTempTableName, klassName);
List<Integer> codeAMatches = search.GetIdsViaCodeMatches(this.AnswersTempTableName, klassName);
linkAMatches=search.GetIdsViaLinkMatches(this.AnswersTempTableName,klassName)
List<Integer> linkAMatches = search.GetIdsViaLinkMatches(this.AnswersTempTableName, klassName);
List<Integer> linkAMatches = search.GetIdsViaLinkMatches(this.AnswersTempTableName, klassName);
HashSet<Integer> ansSet = new HashSet<Integer>();
Hashtable<Integer,Integer> AnswerIdToParentId = new Hashtable<Integer,Integer>();
HashSet<Integer> qSet = new HashSet<Integer>();
List<Integer> myThreads = new ArrayList<Integer>();
ThreadElement thread = new ThreadElement();
info=db.GetPostDetail(thread.Question.Id)
PostInfo info = db.GetPostDetail(thread.Question.Id);
LinkValidation validate = new LinkValidation();
List<LinkElement> hrefs = new ArrayList<LinkElement>();
spans=validate.Validate(klass,thread.Question,thread.Question.Title,hrefs)
List<LinkSpan> spans = validate.Validate(klass, thread.Question, thread.Question.Title, hrefs);
List<LinkSpan> spans = validate.Validate(klass, thread.Question, thread.Question.Title, hrefs);
sample=GetOrBuildCodeSample(klass,thread.Question,spans)
CodeSampleElement sample = GetOrBuildCodeSample(klass, thread.Question, spans);
parentQ=AnswerIdToParentId.get(answerId)
int parentQ = AnswerIdToParentId.get( answerId );
ThreadElement thread = new ThreadElement();
tinfo=db.GetPostDetail(parentQ)
PostInfo tinfo = db.GetPostDetail(parentQ);
AnswerElement ans = new AnswerElement();
LinkValidation validate = new LinkValidation();
List<LinkElement> hrefs = new ArrayList<LinkElement>();
spans=validate.Validate(klass,ans,null,hrefs)
List<LinkSpan> spans = validate.Validate(klass, ans,null, hrefs);
List<LinkSpan> spans = validate.Validate(klass, ans,null, hrefs);
sample=GetOrBuildCodeSample(klass,ans,spans)
CodeSampleElement sample = GetOrBuildCodeSample(klass, ans, spans);
CodeSampleElement codeSample = null;
Hashtable<Integer,CodeBlock> blocks = new Hashtable<Integer,CodeBlock>();
postBody=CachePostBodyIndex.getInstance().ParseOrGet(parent)
CachedPostBody postBody = CachePostBodyIndex.getInstance().ParseOrGet(parent);
CodeBlock block = new CodeBlock();
int b = 0;
String qTable = api.MainTag + "questions_table";
String aTable = api.MainTag + "answers_table";
ClassElem k = new ClassElem();
doc=Link(k,new Hashtable<Integer,ThreadElement>())
ClassDocumentation doc = Link(k, new Hashtable<Integer,ThreadElement>());
List<ClassDocumentation>  list = new ArrayList<ClassDocumentation>();
Hashtable<Integer,ThreadElement> ThreadMap = new Hashtable<Integer,ThreadElement>();
doc=Link(klass,ThreadMap)
ClassDocumentation doc = Link(klass, ThreadMap);
SerializeDocumentation serializer = new SerializeDocumentation();
List<ClassDocumentation>  list = new ArrayList<ClassDocumentation>();
Hashtable<Integer,ThreadElement> ThreadMap = new Hashtable<Integer,ThreadElement>();
doc=Link(klass,ThreadMap)
ClassDocumentation doc = Link(klass,ThreadMap);
String path = api.ClassDocPath;
SerializeDocumentation serializer = new SerializeDocumentation();
List<ClassDocumentation>  list = new ArrayList<ClassDocumentation>();
File outputFile = new File(path + java.io.File.separator + klass.ParentPackage.Name + "." + klass.Name + ".json");
doc=Link(klass,ClassIndex.getInstance().ThreadMap)
ClassDocumentation doc = Link(klass, ClassIndex.getInstance().ThreadMap);
Hashtable<String,ClusteredLinkElement> linkCount = new Hashtable<String,ClusteredLinkElement>();
ClusteredLinkElement clustered = new ClusteredLinkElement();
List<ClusteredLinkElement> elements = new ArrayList<ClusteredLinkElement>(linkCount.values());
List<ClassDocumentation> list = new ArrayList<ClassDocumentation>();
File filePath = new File(path + File.separator + pack.Name + "."  + klass.Name + ".json");
StringBuilder sb = new StringBuilder(512);
Reader r = new InputStreamReader(is, "UTF-8");
int c = 0;
serializedObj=Serialize(doc)
String serializedObj = Serialize(doc);
File outputDir = new File(path);
FileWriter writer = new FileWriter(outputFile);
JSONObject obj = new JSONObject();
List<Integer> threadIds = new ArrayList<Integer>();
List<Integer> sampleIds = new ArrayList<Integer>();
List<JSONObject> links = new ArrayList<JSONObject>();
List<JSONObject> hrefs = new ArrayList<JSONObject>();
JSONObject obj = new JSONObject(source);
ClassDocumentation doc = new ClassDocumentation();
array=obj.getJSONArray("ThreadElements")
JSONArray array = obj.getJSONArray("ThreadElements");
id=array.getInt(i)
int id = array.getInt(i);
links=obj.getJSONArray("Links")
JSONArray links = obj.getJSONArray("Links");
jsonLink=links.getJSONObject(i)
JSONObject jsonLink = links.getJSONObject(i);
link=DeserializeLinkSpan(jsonLink)
LinkSpan link = DeserializeLinkSpan(jsonLink);
tId=jsonLink.getInt("Thread")
int tId = jsonLink.getInt("Thread");
pId=jsonLink.getInt("Post")
int pId = jsonLink.getInt("Post");
key=ClassIndex.getKey(tId,pId,doc.Klass)
String key = ClassIndex.getKey(tId, pId, doc.Klass);
hrefs=obj.getJSONArray("Hrefs")
JSONArray hrefs = obj.getJSONArray("Hrefs");
jsonHref=hrefs.getJSONObject(i)
JSONObject jsonHref = hrefs.getJSONObject(i);
link=DeserializeHref(jsonHref)
LinkElement link = DeserializeHref(jsonHref);
tId=jsonHref.getInt("Thread")
int tId = jsonHref.getInt("Thread");
pId=jsonHref.getInt("Post")
int pId = jsonHref.getInt("Post");
key=ClassIndex.getKey(tId,pId,doc.Klass)
String key = ClassIndex.getKey(tId, pId, doc.Klass);
List<JSONObject> codeSampleObjects = new ArrayList<JSONObject>();
List<CodeSampleElement> samples = new ArrayList<CodeSampleElement>();
JSONObject obj = new JSONObject();
List<JSONObject> blockObjects = new ArrayList<JSONObject>();
CodeSampleElement code = new CodeSampleElement();
blockObjectsJson=obj.getJSONArray("Blocks")
JSONArray blockObjectsJson = obj.getJSONArray("Blocks");
List<CodeBlock> blockObjects = new ArrayList<CodeBlock>();
JSONObject obj = new JSONObject();
PostElement post = new PostElement();
JSONObject obj = new JSONObject();
List<JSONObject> spanObjects = new ArrayList<JSONObject>();
CodeBlock block = new CodeBlock();
List<CodeSpan> spans = new ArrayList<CodeSpan>();
classMatchesJson=obj.getJSONArray("ClassMatches")
JSONArray classMatchesJson = obj.getJSONArray("ClassMatches");
JSONObject obj = new JSONObject();
List<JSONObject> linkObjects = new ArrayList<JSONObject>();
List<LinkElement_old> links  = new ArrayList<LinkElement_old>();
JSONObject obj = new JSONObject();
LinkElement_old link = new LinkElement_old();
extLinks=obj.getJSONArray("ExternalLinks")
JSONArray extLinks = obj.getJSONArray("ExternalLinks");
List<JSONObject> linkObjects = new ArrayList<JSONObject>();
List<ClusteredLinkElement> links = new ArrayList<ClusteredLinkElement>();
JSONObject obj = new JSONObject();
ClusteredLinkElement link = new ClusteredLinkElement();
List<JSONObject> threadObjects = new ArrayList<JSONObject>();
List<ThreadElement> threads = new ArrayList<ThreadElement>();
JSONObject obj = new JSONObject();
List<JSONObject> answers = new ArrayList<JSONObject>();
ThreadElement thread = new ThreadElement();
List<AnswerElement> answers = new ArrayList<AnswerElement>();
jsonAns=obj.getJSONArray("Answers")
JSONArray jsonAns = obj.getJSONArray("Answers");
JSONObject obj = new JSONObject();
AnswerElement answer = new AnswerElement();
SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
JSONObject obj = new JSONObject();
QuestionElement q = new QuestionElement();
JSONObject obj = new JSONObject();
LinkElement href = new LinkElement();
JSONObject obj = new JSONObject();
LinkSpan span = new LinkSpan();
Hashtable<Integer, CodeSampleElement> sampleMap = new Hashtable<Integer, CodeSampleElement>();
File outputDir = new File(path + File.separator + "samplepool");
String fullPath = outputDir.getAbsolutePath() + File.separator + filePath;
JSONObject obj = new JSONObject(readStream(new FileInputStream(fullPath)));
s=DeserializeCodeSampleElement(obj)
CodeSampleElement s = DeserializeCodeSampleElement(obj);
Hashtable<Integer, ThreadElement> threadMap = new Hashtable<Integer, ThreadElement>();
File outputDir = new File(path + File.separator + "threadpool");
String fullPath = outputDir.getAbsolutePath() + File.separator + filePath;
JSONObject obj = new JSONObject(readStream(new FileInputStream(fullPath)));
t=DeserializeThreadElement(obj)
ThreadElement t = DeserializeThreadElement(obj);
File outputDir = new File(outputPath + File.separator + "samplepool");
File outputFile = new File(outputDir.getAbsolutePath() + File.separator + "sample" + sample.Parent.Id + ".json");
obj=SerializeCodeSampleElement(sample)
JSONObject obj = SerializeCodeSampleElement(sample);
FileWriter writer = new FileWriter(outputFile);
File outputDir = new File(outputPath + File.separator + "threadpool");
File outputFile = new File(outputDir.getAbsolutePath() + File.separator + "thread" + thread.Question.Id + ".json");
obj=SerializeThreadElement(thread)
JSONObject obj = SerializeThreadElement(thread);
FileWriter writer = new FileWriter(outputFile);
CachedPostBody cachedBody = new CachedPostBody();
doc=Jsoup.parseBodyFragment(post.Body)
Document doc = Jsoup.parseBodyFragment(post.Body);
codeSnippets=doc.getElementsByTag("code")
Elements codeSnippets = doc.getElementsByTag("code");
hrefs=doc.getElementsByTag("a")
Elements hrefs = doc.getElementsByTag("a");
SimpleHref href = new SimpleHref();
paragraphs=doc.getElementsByTag("p")
Elements paragraphs = doc.getElementsByTag("p");
allSpans=ParseBody(klassElem,post,title,hrefs)
List<LinkSpan> allSpans = ParseBody(klassElem,post,title, hrefs);
List<LinkSpan> allSpans = ParseBody(klassElem,post,title, hrefs);
List<LinkSpan> allSpans = new ArrayList<LinkSpan>();
int i = 0;
postBody=CachePostBodyIndex.getInstance().ParseOrGet(post)
CachedPostBody postBody = CachePostBodyIndex.getInstance().ParseOrGet(post);
spans=GatherSpans(klassElem,text)
List<LinkSpan> spans = GatherSpans(klassElem, text);
List<LinkSpan> spans = GatherSpans(klassElem, text);
spans=GatherSpans(klassElem,href.AnchorText)
List<LinkSpan> spans = GatherSpans(klassElem, href.AnchorText);
List<LinkSpan> spans = GatherSpans(klassElem, href.AnchorText);
LinkElement link = new LinkElement();
WordDistributions wd = new WordDistributions();
spans=GatherSpans(klassElem,text)
List<LinkSpan> spans = GatherSpans(klassElem, text);
List<LinkSpan> spans = GatherSpans(klassElem, text);
spans=GatherSpans(klassElem,title)
List<LinkSpan> spans = GatherSpans(klassElem, title);
List<LinkSpan> spans = GatherSpans(klassElem, title);
List<LinkSpan> spans = new ArrayList<LinkSpan>();
String klassName = klassElem.Name;
p=Pattern.compile("\\b" + Pattern.quote(klassName) + "\\b")
Pattern p = Pattern.compile("\\b"+Pattern.quote(klassName)+"\\b");
matcher=p.matcher(text)
Matcher matcher = p.matcher(text);
int start=0;
s=matcher.start()
int s = matcher.start();
int e = matcher.start()+klassName.length();
LinkSpan span = new LinkSpan();
sub=text.substring(s)
String sub = text.substring(s);
o=Pattern.compile("^\\b" + Pattern.quote(otherClassName) + "\\b")
Pattern o = Pattern.compile("^\\b"+Pattern.quote(otherClassName)+"\\b");
matcher=o.matcher(text)
Matcher matcher = o.matcher(text);
FileWriter fw = new FileWriter(outFile);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outFile);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outputFile);
int num = klass.AnswerIds.size() + klass.QuestionIds.size();
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
list=ExportQuestions(questionsFile,tag)
List<PostInfo> list = ExportQuestions(questionsFile, tag);
List<PostInfo> list = ExportQuestions(questionsFile, tag);
FileWriter fw = new FileWriter(answersFile);
DBInfo info = new DBInfo();
FileWriter fw = new FileWriter(questionsFile);
DBInfo info = new DBInfo();
list=info.Questions(tag)
List<PostInfo> list = info.Questions(tag);
List<PostInfo> list = info.Questions(tag);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outFile);
DBInfo info = new DBInfo();
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outFile);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
int sum = 0;
int coverageCount = 0;
int klassCount = 0;
int methodCoverageCount = 0;
int methodCount = 0;
int methodSum = 0;
int num = klass.QuestionIds.size() + klass.AnswerIds.size();
int mNum = meth.QuestionIds.size() + meth.AnswerIds.size();
Search search = new Search();
klassQuestions=search.GetIds(api.MainTag + "questions_table",klass.Name)
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
klassAnswers=search.GetIds(api.MainTag + "answers_table",klass.Name)
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
Search search = new Search();
s=search.conn.createStatement()
Statement s = search.conn.createStatement();
WordDistributions wd = new WordDistributions();
klassQuestions=search.GetIds(api.MainTag + "questions_table",klass.Name)
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
klassAnswers=search.GetIds(api.MainTag + "answers_table",klass.Name)
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
Search search = new Search();
methQuestions=search.GetIds(api.MainTag + "questions_table",meth.Name)
List<Integer> methQuestions = search.GetIds(api.MainTag + "questions_table",  meth.Name);
List<Integer> methQuestions = search.GetIds(api.MainTag + "questions_table",  meth.Name);
methAnswers=search.GetIds(api.MainTag + "answers_table",meth.Name)
List<Integer> methAnswers = search.GetIds(api.MainTag + "answers_table",  meth.Name);
List<Integer> methAnswers = search.GetIds(api.MainTag + "answers_table",  meth.Name);
klassQuestions=search.GetIds(api.MainTag + "questions_table",klass.Name)
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table",  klass.Name);
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table",  klass.Name);
klassAnswers=search.GetIds(api.MainTag + "answers_table",klass.Name)
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table",  klass.Name);
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table",  klass.Name);
HashSet<Integer> klassQs = new HashSet<Integer>(klassQuestions);
HashSet<Integer> klassAs = new HashSet<Integer>(klassAnswers);
List<Integer> toRemoveQ = new ArrayList<Integer>();
List<Integer> toRemoveA = new ArrayList<Integer>();
Search search = new Search();
klassQuestions=search.QuestionsInBodyTitle(api.MainTag + "_table",klass.Name)
int klassQuestions = search.QuestionsInBodyTitle(api.MainTag + "_table", klass.Name);
Search search = new Search();
methodQuestions=search.QuestionsInBodyTitle(api.MainTag + "_table",meth.Name)
int methodQuestions = search.QuestionsInBodyTitle(api.MainTag + "_table", meth.Name);
words=id.replaceAll("(?<=[A-Z])(?=[A-Z][a-z])|" + "(?<=[^A-Z])(?=[A-Z])|" + "(?<=[A-Za-z])(?=[^A-Za-z])"," ")
String words = id.replaceAll("(?<=[A-Z])(?=[A-Z][a-z])|" + "(?<=[^A-Z])(?=[A-Z])|" + "(?<=[A-Za-z])(?=[^A-Za-z])",
			      " ");
AbstractApi api = Android;
BuildDocumentation builder = new BuildDocumentation();
list=builder.PrepareApi(api)
List<ClassDocumentation> list = builder.PrepareApi(api);
List<ClassDocumentation> list = builder.PrepareApi(api);
subList=list.subList(700,list.size() - 1)
List<ClassDocumentation> subList = list.subList(700, list.size()-1);
List<ClassDocumentation> subList = list.subList(700, list.size()-1);
BaseAnalysis run = new AnalyzeDocumentation();
int classCount = 0;
HashSet<String> classSet = new HashSet<String>();
ApiAnalysis api = new ApiAnalysis();
String qTable = api.MainTag + "questions_table";
String aTable = api.MainTag + "answers_table";
ResultCache cache = new ResultCache();
Date now = new Date();
Date finish = new Date();
SerializeDocumentation serializeDoc = new SerializeDocumentation();
Search search = new Search();
StringBuilder builder = new StringBuilder();
iter=s.iterator()
Iterator iter = s.iterator();
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
StringBuilder sb = new StringBuilder(512);
Reader r = new InputStreamReader(is, "UTF-8");
int c = 0;
androidValues=TagReliability(Android)
Hashtable<Integer,QATuple> androidValues = TagReliability( Android );
Hashtable<Integer,QATuple> androidValues = TagReliability( Android );
Hashtable<Integer,QATuple> androidValues = TagReliability( Android );
javaValues=TagReliability(Java)
Hashtable<Integer,QATuple> javaValues = TagReliability( Java );
Hashtable<Integer,QATuple> javaValues = TagReliability( Java );
Hashtable<Integer,QATuple> javaValues = TagReliability( Java );
tuple=values.get(length)
QATuple tuple = values.get(length);
WordDistributions d = new WordDistributions();
Search search = new Search();
Hashtable<Integer,QATuple> hash = new Hashtable<Integer,QATuple>();
length=d.WordLength(klass.Name)
int length = d.WordLength(klass.Name);
klassQuestionsTags=search.GetIdsViaTags(this.QuestionsTempTableName,klass.Name)
List<Integer> klassQuestionsTags = search.GetIdsViaTags(this.QuestionsTempTableName, klass.Name);
List<Integer> klassQuestionsTags = search.GetIdsViaTags(this.QuestionsTempTableName, klass.Name);
klassAnswersTags=search.GetIdsViaTags(this.AnswersTempTableName,klass.Name)
List<Integer> klassAnswersTags = search.GetIdsViaTags(this.AnswersTempTableName, klass.Name);
List<Integer> klassAnswersTags = search.GetIdsViaTags(this.AnswersTempTableName, klass.Name);
klassQuestionsWords=search.GetIdsViaWordMatches(this.QuestionsTempTableName,klass.Name)
List<Integer> klassQuestionsWords = search.GetIdsViaWordMatches(this.QuestionsTempTableName, klass.Name);
List<Integer> klassQuestionsWords = search.GetIdsViaWordMatches(this.QuestionsTempTableName, klass.Name);
klassAnswersWords=search.GetIdsViaWordMatches(this.AnswersTempTableName,klass.Name)
List<Integer> klassAnswersWords = search.GetIdsViaWordMatches(this.AnswersTempTableName, klass.Name);
List<Integer> klassAnswersWords = search.GetIdsViaWordMatches(this.AnswersTempTableName, klass.Name);
BaseAnalysis run = new ClassTagReliability();
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,ThreadElement> threadMap = new Hashtable<Integer,ThreadElement>();
int codeSamplesInAnswers = 0;
int codeSamplesInAccepted = 0;
int codeSamplesInQuestions = 0;
int total = 0;
int numLines = 0;
int numBlocks = 0;
body=block.getBody()
String body = block.getBody();
lines=body.split(System.getProperty("line.separator"))
String[] lines = body.split(System.getProperty("line.separator"));
AnswerElement ans = (AnswerElement)element.Parent;
FileWriter fw = new FileWriter(outputPath);
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
int numLines = 0;
int numBlocks = 0;
body=block.getBody()
String body = block.getBody();
lines=body.split(System.getProperty("line.separator"))
String[] lines = body.split(System.getProperty("line.separator"));
AnswerElement ans = (AnswerElement)element.Parent;
AnswerElement ans = (AnswerElement)element.Parent;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
int[] levels = new int[]{1,5,20};
List<AbstractThreadFilter> filters = new ArrayList<AbstractThreadFilter>();
AtLeastNFilter atLeast2Filter = new AtLeastNFilter(new ArrayList(filters), 2);
AtLeastNFilter atLeast3Filter = new AtLeastNFilter(new ArrayList(filters), 3);
AtLeastNFilter atLeast5Filter = new AtLeastNFilter(new ArrayList(filters), 5);
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
threads=GetIncludedThreads(threadMap.values(),filter)
HashSet<Integer> threads = GetIncludedThreads(threadMap.values(), filter);
HashSet<Integer> threads = GetIncludedThreads(threadMap.values(), filter);
HashSet<Integer> included = new HashSet<Integer>();
Hashtable<Integer,Integer> coverageScore = new Hashtable<Integer,Integer>();
int coveredClasses = 0;
int includedThreads = 0;
answered=thread.Answers.size()
int answered = thread.Answers.size();
int passed = 0;
info=getDBInfoInstance().GetPostDetail(thread.Question.Id)
PostInfo info = getDBInfoInstance().GetPostDetail(thread.Question.Id);
int threadBounty = 0;
Integer amount = ans.BountyAmount;
int views = thread.ViewCount;
int total = thread.Votes;
int sum = 0;
String self = StartPercentile + ":" + EndPercentile + "";
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,Integer> Askers = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> Advisors = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> SelfAdvisors = new Hashtable<Integer,Integer>();
HashSet<Integer> All = new HashSet<Integer>();
PercentileBucket bucket0_25  = new PercentileBucket(0,25,pool);
PercentileBucket bucket25_50 = new PercentileBucket(25,50,pool);
PercentileBucket bucket50_75 = new PercentileBucket(50,75,pool);
PercentileBucket bucket75_95 = new PercentileBucket(75,95,pool);
PercentileBucket bucket95_00 = new PercentileBucket(95,100,pool);
PercentileBucket bucket90_91 = new PercentileBucket(90,91,pool);
PercentileBucket bucket91_92 = new PercentileBucket(91,92,pool);
PercentileBucket bucket92_93 = new PercentileBucket(92,93,pool);
PercentileBucket bucket93_94 = new PercentileBucket(93,94,pool);
PercentileBucket bucket94_95 = new PercentileBucket(94,95,pool);
PercentileBucket bucket95_96 = new PercentileBucket(95,96,pool);
PercentileBucket bucket96_97 = new PercentileBucket(96,97,pool);
PercentileBucket bucket97_98 = new PercentileBucket(97,98,pool);
PercentileBucket bucket98_99 = new PercentileBucket(98,99,pool);
PercentileBucket bucket99_00 = new PercentileBucket(99,100,pool);
HashSet<Integer> results = new HashSet<Integer>(info.GetCurators(PostId));
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,Integer> Askers = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> Advisors = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> SelfAdvisors = new Hashtable<Integer,Integer>();
HashSet<Integer> All = new HashSet<Integer>();
FileWriter fw = new FileWriter(outputPath);
int qContributions = Askers.containsKey(userId) ? Askers.get(userId) : 0;
int aContributions = Advisors.containsKey(userId) ? Advisors.get(userId) : 0;
int selfContributions = SelfAdvisors.containsKey(userId) ? SelfAdvisors.get(userId) : 0;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
HashSet<Integer> Askers = new HashSet<Integer>();
HashSet<Integer> Advisors = new HashSet<Integer>();
HashSet<Integer> Curators = new HashSet<Integer>();
HashSet<Integer> All = new HashSet<Integer>();
int linksInAnswers=0;
int linksInQuestions=0;
int linksInAcceptedAnswers=0;
int answerLinkOutcome=0;
int questionLinkOutcome=0;
int bothLinkOutcome=0;
int answerAcceptedLinkOutcome=0;
int codeMarks=0;
int codeSamples=0;
int wordMatches=0;
int hrefs=0;
int codeMarksThread=0;
int codeSamplesThread=0;
int wordMatchesThread=0;
int hrefsThread=0;
int threadAnswerLinks=0;
int threadQuestionLinks=0;
int threadAcceptedAnswerLinks=0;
int t_codeMarks=0;
int t_codeSamples=0;
int t_wordMatches=0;
int t_hrefs=0;
output=join(new String[]{doc.getValidatedThreads().size() + "",linksInAnswers + "",linksInQuestions + "",linksInAcceptedAnswers + "",answerLinkOutcome + "",questionLinkOutcome + "",bothLinkOutcome + "",answerAcceptedLinkOutcome + "",codeMarks + "",codeSamples + "",wordMatches + "",hrefs + "",codeMarksThread + "",codeSamplesThread + "",wordMatchesThread + "",hrefsThread + ""},",")
String output = join(new String[]
				{
					doc.getValidatedThreads().size()+"",
					linksInAnswers +"",
					linksInQuestions+"",
					linksInAcceptedAnswers+"",
					// why linkage occurred (site). 
					answerLinkOutcome+"",
					questionLinkOutcome+"",
					bothLinkOutcome+"",
					answerAcceptedLinkOutcome+"", // threads with links to accepted answer
					// types of links
					codeMarks+"",
					codeSamples+"",
					wordMatches+"",
					hrefs+"",
					// types of threads (flat)
					codeMarksThread+"",
					codeSamplesThread+"",
					wordMatchesThread+"",
					hrefsThread+""
				},",");
BaseAnalysis a = new LinkAnalysis();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
int otherMoreThanAccepted = 0;
int votedButNotAccepted = 0;
int threadVoted = 0;
int numAccepted = 0;
int maxVote = 0;
AnswerElement accepted = null;
int votes = 0;
DBInfo info = new DBInfo();
int bounty = 0;
int numWithBounty  = 0;
taggedPosts=info.Tags(tag)
List<PostInfo> taggedPosts = info.Tags(tag);
List<PostInfo> taggedPosts = info.Tags(tag);
int threadBounty = 0;
amount=info.GetBountyAmount(ans.Id)
Integer amount = info.GetBountyAmount(ans.Id);
V old = this.value;
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
Hashtable<String,HashSet<Integer>> PackageMap = new Hashtable<String,HashSet<Integer>>();
String p = doc.Klass.ParentPackage.Name;
List<MyEntry<String,Integer>> sortedPackages = new ArrayList<MyEntry<String,Integer>>();
count=PackageMap.get(key).size()
Integer count = PackageMap.get(key).size();
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,ThreadElement> threadMap = new Hashtable<Integer,ThreadElement>();
List<PostInfo> linkedPosts = new ArrayList<PostInfo>();
taggedPosts=info.Tags(tag)
List<PostInfo> taggedPosts = info.Tags(tag);
List<PostInfo> taggedPosts = info.Tags(tag);
FileWriter fw = new FileWriter(outputPath);
Visitor coverage = new Visitor();
ConsoleFormatter format = new ConsoleFormatter();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
HashSet<LinkType> types = new HashSet<LinkType>();
docs=DeserializeModel(Java)
List<ClassDocumentation> docs = DeserializeModel(Java);
List<ClassDocumentation> docs = DeserializeModel(Java);
RankDocumentation ranker = new RankDocumentation();
ExportDocumentation exporter = new ExportDocumentation();
AbstractApi api = Android;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel( api);
List<ClassDocumentation> docs = DeserializeModel( api);
AbstractApi api = Java;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
FileWriter fw = new FileWriter(outFile);
FileWriter fw = new FileWriter(outFile);
DBInfo info = new DBInfo();
FileWriter fwAnswers = new FileWriter(answersFile);
FileWriter fwQuestions = new FileWriter(questionsFile);
DBInfo info = new DBInfo();
String packName = doc.Klass.ParentPackage.Name;
String klassName = doc.Klass.Name;
int id = ans.Id;
a=info.GetPostDetail(id)
PostInfo a = info.GetPostDetail(id);
int id = thread.Question.Id;
q=info.GetPostDetail(id)
PostInfo q = info.GetPostDetail(id);
FileWriter fw = new FileWriter(outFile);
String packName = doc.Klass.ParentPackage.Name;
String klassName = doc.Klass.Name;
int id = ans.Id;
int id = thread.Question.Id;
FileWriter fw = new FileWriter(outputFile);
num=doc.getValidatedThreads().size()
int num = doc.getValidatedThreads().size();
String packName = doc.Klass.ParentPackage.Name;
String klassName = doc.Klass.Name;
ExportDataForTreemap export = new ExportDataForTreemap();
LinkDocumentation linker = new LinkDocumentation();
docs=linker.LinkAndSerializeApi(Java)
List<ClassDocumentation> docs = linker.LinkAndSerializeApi(Java);
List<ClassDocumentation> docs = linker.LinkAndSerializeApi(Java);
int coverage1 = 0;
int coverage1 = 0;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Visitor coverage = new Visitor();
ConsoleFormatter format = new ConsoleFormatter();
c=Calendar.getInstance()
Calendar c = Calendar.getInstance();
int[] levels = new int[]{1,5,20,50,100};
classDocs=DeserializeModel(Java)
List<ClassDocumentation> classDocs = DeserializeModel(Java);
List<ClassDocumentation> classDocs = DeserializeModel(Java);
Hashtable<Integer,List<ClassSaturation>> saturationData = new Hashtable<Integer,List<ClassSaturation>>();
classSats=Saturation(level,classDocs)
List<ClassSaturation> classSats = Saturation(level,classDocs);
List<ClassSaturation> classSats = Saturation(level,classDocs);
SimpleDateFormat format = new SimpleDateFormat("MM-dd-yyyy");
ArrayList<Date> sortedAllDates = new ArrayList<Date>();
startDate=format.parse("07-31-2008")
Date startDate = format.parse("07-31-2008");
endDate=format.parse("12-01-2011")
Date endDate = format.parse("12-01-2011");
Date curDate = startDate;
Hashtable<Integer,ArrayList<Integer>> saturationResults = new Hashtable<Integer,ArrayList<Integer>>();
ArrayList<Integer> results = new ArrayList<Integer>();
saturatedSet=saturationData.get(level)
List<ClassSaturation> saturatedSet = saturationData.get(level);
List<ClassSaturation> saturatedSet = saturationData.get(level);
List<ClassSaturation> saturatedByDate = new ArrayList<ClassSaturation>();
int row = 0;
ArrayList<Integer> columns = new ArrayList<Integer>();
levelSat=saturationResults.get(level)
ArrayList<Integer> levelSat = saturationResults.get(level);
ArrayList<Integer> levelSat = saturationResults.get(level);
List<ClassSaturation> saturatedSet = new ArrayList<ClassSaturation>();
Hashtable<ThreadElement,Date> dateThreadMap = new Hashtable<ThreadElement,Date>();
d=GetDateComponent(MinDateInThread(thread,classDoc.Klass))
Date d = GetDateComponent(MinDateInThread(thread,classDoc.Klass));
ArrayList<Entry<ThreadElement,Date>> sortedThreadElements = new ArrayList<Entry<ThreadElement,Date>>(dateThreadMap.entrySet());
ClassSaturation sat = new ClassSaturation();
sub=sortedThreadElements.subList(0,level)
List<Entry<ThreadElement,Date>> sub = sortedThreadElements.subList(0, level);
List<Entry<ThreadElement,Date>> sub = sortedThreadElements.subList(0, level);
c=Calendar.getInstance()
Calendar c = Calendar.getInstance();
Date minDate = new Date();
SpeedOfSaturation run = new SpeedOfSaturation();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
int numberThreadQs = 0;
int numberThreadAs = 0;
int numberQs = 0;
int numberAs = 0;
int threadQs = 0;
int threadAs = 0;
SerializeDocumentation serializer = new SerializeDocumentation();
docs=serializer.DeserializeClassDocumentation(classdocpath,api)
List<ClassDocumentation> docs = serializer.DeserializeClassDocumentation(classdocpath,api);
List<ClassDocumentation> docs = serializer.DeserializeClassDocumentation(classdocpath,api);
usageMap=ReadUsage(usageCSV)
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
classFQN=doc.Klass.getFQN()
String classFQN = doc.Klass.getFQN();
usage=usageMap.get(classFQN)
int usage = usageMap.get(classFQN);
threads=doc.getValidatedThreads().size()
int threads = doc.getValidatedThreads().size();
contents=readStream(new FileInputStream(path))
String contents = readStream(new FileInputStream(path));
lines=contents.split(System.getProperty("line.separator"))
String[] lines = contents.split(System.getProperty("line.separator"));
Hashtable<String,Integer> usageMap = new Hashtable<String,Integer>();
BaseAnalysis a = new OutputActivityAndUsage();
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
usageMap=ReadUsage(usageCSV)
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
classFQN=doc.Klass.getFQN()
String classFQN = doc.Klass.getFQN();
usage=usageMap.get(classFQN)
int usage = usageMap.get(classFQN);
threads=doc.getValidatedThreads().size()
int threads = doc.getValidatedThreads().size();
aQThreads=AnswerQuestionRatio(doc)
int[] aQThreads = AnswerQuestionRatio(doc);
int numberThreadQs = 0;
int numberThreadAs = 0;
int numberQs = 0;
int numberAs = 0;
int[] answerQuestions = new int[2];
int threadQs = 0;
int threadAs = 0;
contents=readStream(new FileInputStream(path))
String contents = readStream(new FileInputStream(path));
lines=contents.split(System.getProperty("line.separator"))
String[] lines = contents.split(System.getProperty("line.separator"));
Hashtable<String,Integer> usageMap = new Hashtable<String,Integer>();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
int firstNonZeroIndex = 0;
doc=docs.get(i)
ClassDocumentation doc = docs.get(i);
t=doc.getValidatedThreads().size()
int t = doc.getValidatedThreads().size();
int workingRange = docs.size() - firstNonZeroIndex;
int lowStart = firstNonZeroIndex;
int lowEnd = (int)(workingRange *.40) + firstNonZeroIndex;
int highStart = docs.size() - (int)(workingRange *.15);
highEnd=docs.size()
int highEnd = docs.size();
List<ClassDocumentation> lowSet = new ArrayList<ClassDocumentation>(docs.subList(lowStart, lowEnd));
List<ClassDocumentation> highSet = new ArrayList<ClassDocumentation>(docs.subList(highStart, highEnd));
List<ThreadElement> lowThreads = new ArrayList<ThreadElement>();
List<ThreadElement> highThreads = new ArrayList<ThreadElement>();
docthreads=doc.getValidatedThreads()
List<ThreadElement> docthreads = doc.getValidatedThreads();
List<ThreadElement> docthreads = doc.getValidatedThreads();
docthreads=doc.getValidatedThreads()
List<ThreadElement> docthreads = doc.getValidatedThreads();
List<ThreadElement> docthreads = doc.getValidatedThreads();
BaseAnalysis a = new SamplingForDifficultyAnalysis();
WordDistributions dist = new WordDistributions();
Hashtable<Integer,ArrayList<ClassElem>> bins = new Hashtable<Integer,ArrayList<ClassElem>>();
length=dist.WordLength(klass.Name)
int length = dist.WordLength(klass.Name);
poolSize=NonZeroQuestionsOrAnswersClasses(bins.get(b)).size()
int poolSize = NonZeroQuestionsOrAnswersClasses(bins.get(b)).size();
classPool=NonZeroQuestionsOrAnswersClasses(bins.get(b))
List<ClassElem> classPool = NonZeroQuestionsOrAnswersClasses(bins.get(b));
List<ClassElem> classPool = NonZeroQuestionsOrAnswersClasses(bins.get(b));
numClassesToInspect=Math.min((int)(percentage * classPool.size()),numQuestionsAnswers)
int numClassesToInspect = Math.min((int)( percentage * classPool.size()),numQuestionsAnswers);
List<String> inspectionPool = new ArrayList<String>();
questionId=klass.AnswerIdToParentId.get(answerId)
int questionId = klass.AnswerIdToParentId.get(answerId);
List<ClassElem> nonZero = new ArrayList<ClassElem>();
List<T> clone = new ArrayList<T>(items);
ByteArrayOutputStream os = new ByteArrayOutputStream(string.length());
GZIPOutputStream gos = new GZIPOutputStream(os);
compressed=os.toByteArray()
byte[] compressed = os.toByteArray();
final int BUFFER_SIZE = 64;
ByteArrayInputStream is = new ByteArrayInputStream(compressed);
GZIPInputStream gis = new GZIPInputStream(is, BUFFER_SIZE);
StringBuilder string = new StringBuilder();
byte[] data = new byte[BUFFER_SIZE];
int bytesRead;
set=_commonStatement.executeQuery("SELECT UserId FROM VOTES WHERE PostId =" + id)
ResultSet set = _commonStatement.executeQuery("SELECT UserId FROM VOTES WHERE PostId ="+ id);
List<Integer> list = new ArrayList<Integer>();
set=_commonStatement.executeQuery("SELECT BountyAmount FROM VOTES WHERE PostId =" + id + " AND VoteTypeId = 9")
ResultSet set = _commonStatement.executeQuery("SELECT BountyAmount FROM VOTES WHERE PostId ="+ id + " AND VoteTypeId = 9");
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id FROM POSTS WHERE Tags like '%" + tag + "%'")
ResultSet set = s.executeQuery("SELECT Id FROM POSTS WHERE Tags like '%"+ tag + "%'");
List<Integer> ids = new ArrayList<Integer>();
List<PostInfo> posts = new ArrayList<PostInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,Body,Score,AcceptedAnswerId,AnswerCount,FavoriteCount,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Id = " + id)
ResultSet set = s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,Body,Score,AcceptedAnswerId,AnswerCount,FavoriteCount,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Id = "+ id);
PostInfo info = new PostInfo();
List<UserInfo> results = new ArrayList<UserInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,DisplayName,Reputation,Age,CreationDate,LastAccessDate,Views,UpVotes,DownVotes FROM USERS")
ResultSet set = s.executeQuery("SELECT Id,DisplayName,Reputation,Age,CreationDate,LastAccessDate,Views,UpVotes,DownVotes FROM USERS");
UserInfo info = new UserInfo();
List<PostInfo> results = new ArrayList<PostInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Tags like '%" + tag + "%'")
ResultSet set = s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Tags like '%"+ tag + "%'");
PostInfo info = new PostInfo();
List<PostInfo> results = new ArrayList<PostInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,PostTypeId,ParentId,OwnerUserId,CreationDate,LastActivityDate,Body,ViewCount,Title FROM POSTS WHERE ParentId = " + parentId)
ResultSet set = s.executeQuery("SELECT Id,PostTypeId,ParentId,OwnerUserId,CreationDate,LastActivityDate,Body,ViewCount,Title FROM POSTS WHERE ParentId = " + parentId);
PostInfo info = new PostInfo();
set=s.executeQuery("SELECT Id, ParentId FROM POSTS WHERE " + "Id = " + answerId)
ResultSet set = s.executeQuery("SELECT Id, ParentId FROM POSTS WHERE " + 
					   "Id = " + answerId);
CachedRowSet rowSet = new CachedRowSetImpl();
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("tag","SELECT Id FROM " + tempTable + " WHERE "+ "tags like '%<"+ klassName+ "%>'",s)
ResultSet set = ResultCache.CachedQueryExecution("tag",
					"SELECT Id FROM "+ tempTable + " WHERE " + 
					"tags like '%<"+ klassName +"%>'",
					s);
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("word","SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle REGEXP '[[:<:]]"+ klassName+ "[[:>:]]'",s)
ResultSet set = ResultCache.CachedQueryExecution("word",
								"SELECT Id FROM "+tempTable + " WHERE " + 
								"BodyAndTitle REGEXP '[[:<:]]"+klassName+"[[:>:]]'",
								s);
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("code","SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle REGEXP '<code>[^</]*[[:<:]]"+ klassName+ "[[:>:]][^</]*</code>'",s)
ResultSet set = ResultCache.CachedQueryExecution("code",
								"SELECT Id FROM "+tempTable + " WHERE " + 
								"BodyAndTitle REGEXP '<code>[^</]*[[:<:]]"+klassName+"[[:>:]][^</]*</code>'",
								s);
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("links","SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle REGEXP '<a[^>]*>[[:<:]]"+ klassName+ "[[:>:]][^</]*</a>'",s)
ResultSet set = ResultCache.CachedQueryExecution("links",
								"SELECT Id FROM "+tempTable + " WHERE " + 
								"BodyAndTitle REGEXP '<a[^>]*>[[:<:]]"+klassName+"[[:>:]][^</]*</a>'",
								s);
File cacheDir = new File("cachedir");
File cache = new File("cachedir/_"+tempTable+"___"+klassName);
CachedRowSet rowSet = new CachedRowSetImpl();
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("tag","SELECT Id FROM " + tempTable + " WHERE "+ "tags like '%<"+ klassName+ "%>'",s)
ResultSet set = ResultCache.CachedQueryExecution("tag",
						"SELECT Id FROM "+ tempTable + " WHERE " + 
						"tags like '%<"+ klassName +"%>'",
						s);
set=s.executeQuery("SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle like '%"+ klassName+ "%'")
ResultSet set = s.executeQuery("SELECT Id FROM "+tempTable + " WHERE " + 
											   "BodyAndTitle like '%"+ klassName +"%'"
				);
FileOutputStream fos = new FileOutputStream(cache.getAbsolutePath());
ObjectOutputStream out = new ObjectOutputStream(fos);
FileInputStream fos = new FileInputStream(cache.getAbsolutePath());
ObjectInputStream in = new ObjectInputStream(fos);
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT count(*) as number FROM " + tempTable + " WHERE "+ "BodyAndTitle like '%"+ klassName+ "%'")
ResultSet set = s.executeQuery("SELECT count(*) as number FROM "+tempTable + " WHERE " + 
										   "BodyAndTitle like '%"+ klassName +"%'"
			);
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT count(*) as number FROM " + tempTable + " WHERE "+ "BodyAndTitle like '%"+ klassName+ "%'"+ "AND BodyAndTitle like '%"+ methodName+ "%'")
ResultSet set = s.executeQuery("SELECT count(*) as number FROM "+tempTable + " WHERE " + 
					   					   "BodyAndTitle like '%"+ klassName +"%'" + 
										   "AND BodyAndTitle like '%"+ methodName +"%'"
			);
char c;
char q;
StringBuffer sb;
JSONArray ja = new JSONArray();
value=getValue(x)
String value = getValue(x);
c=x.next()
char c = x.next();
ja=rowToJSONArray(x)
JSONArray ja = rowToJSONArray(x);
StringBuffer sb = new StringBuffer();
object=ja.opt(i)
Object object = ja.opt(i);
string=object.toString()
String string = object.toString();
length=string.length()
int length = string.length();
c=string.charAt(j)
char c = string.charAt(j);
JSONArray ja = new JSONArray();
jo=rowToJSONObject(names,x)
JSONObject jo = rowToJSONObject(names, x);
jo=ja.optJSONObject(0)
JSONObject jo = ja.optJSONObject(0);
names=jo.names()
JSONArray names = jo.names();
StringBuffer sb = new StringBuffer();
jo=ja.optJSONObject(i)
JSONObject jo = ja.optJSONObject(i);
char         c;
s=string.trim()
String       s = string.trim();
StringBuffer sb = new StringBuffer();
length=s.length()
int          length = s.length();
String         name;
JSONObject     jo = new JSONObject();
Object         value;
JSONTokener x = new JSONTokener(string);
StringBuffer sb = new StringBuffer();
length=string.length()
int length = string.length();
StringBuffer sb = new StringBuffer();
c=string.charAt(i)
char c = string.charAt(i);
d=JSONTokener.dehexchar(string.charAt(i + 1))
int d = JSONTokener.dehexchar(string.charAt(i + 1));
e=JSONTokener.dehexchar(string.charAt(i + 2))
int e = JSONTokener.dehexchar(string.charAt(i + 2));
JSONObject jo = new JSONObject();
JSONTokener x = new JSONTokener(string);
name=Cookie.unescape(x.nextTo('='))
String name = Cookie.unescape(x.nextTo('='));
boolean      b = false;
keys=jo.keys()
Iterator     keys = jo.keys();
String       string;
StringBuffer sb = new StringBuffer();
JSONObject     jo = new JSONObject();
HTTPTokener    x = new HTTPTokener(string);
String         token;
name=x.nextTo(':')
String name = x.nextTo(':');
keys=jo.keys()
Iterator     keys = jo.keys();
String       string;
StringBuffer sb = new StringBuffer();
char c;
char q;
StringBuffer sb = new StringBuffer();
iter=collection.iterator()
Iterator iter = collection.iterator();
length=Array.getLength(array)
int length = Array.getLength(array);
object=this.opt(index)
Object object = this.opt(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
len=this.length()
int len = this.length();
StringBuffer sb = new StringBuffer();
o=this.opt(index)
Object o = this.opt(index);
o=this.opt(index)
Object o = this.opt(index);
object=this.opt(index)
Object object = this.opt(index);
Double d = new Double(value);
o=this.opt(index)
Object o = this.opt(index);
JSONObject jo = new JSONObject();
len=this.length()
int len = this.length();
int i;
StringBuffer sb = new StringBuffer("[");
int newindent = indent + indentFactor;
boolean b = false;
len=this.length()
int     len = this.length();
v=this.myArrayList.get(i)
Object v = this.myArrayList.get(i);
String     attribute;
char       c;
String       closeTag = null;
int        i;
JSONArray  newja = null;
JSONObject newjo = null;
Object     token;
String       tagName = null;
int             i;
JSONObject   jo;
String       key;
Iterator     keys;
int             length;
Object         object;
StringBuffer sb = new StringBuffer();
String       tagName;
String       value;
StringBuffer sb = new StringBuffer();
int          i;
JSONArray    ja;
String       key;
Iterator     keys;
int          length;
Object         object;
String       tagName;
String       value;
char c;
String key;
i=map.entrySet().iterator()
Iterator i = map.entrySet().iterator();
Map.Entry e = (Map.Entry)i.next();
value=e.getValue()
Object value = e.getValue();
c=object.getClass()
Class c = object.getClass();
String name = names[i];
bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader())
ResourceBundle bundle = ResourceBundle.getBundle(baseName, locale,
                Thread.currentThread().getContextClassLoader());
keys=bundle.getKeys()
Enumeration keys = bundle.getKeys();
key=keys.nextElement()
Object key = keys.nextElement();
path=((String)key).split("\\.")
String[] path = ((String)key).split("\\.");
int last = path.length - 1;
JSONObject target = this;
String segment = path[i];
nextTarget=target.optJSONObject(segment)
JSONObject nextTarget = target.optJSONObject(segment);
object=this.opt(key)
Object object = this.opt(key);
object=this.opt(key)
Object object = this.opt(key);
string=Double.toString(d)
String string = Double.toString(d);
object=this.opt(key)
Object object = this.opt(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
length=jo.length()
int length = jo.length();
iterator=jo.keys()
Iterator iterator = jo.keys();
String[] names = new String[length];
int i = 0;
klass=object.getClass()
Class klass = object.getClass();
fields=klass.getFields()
Field[] fields = klass.getFields();
int length = fields.length;
String[] names = new String[length];
object=this.get(key)
Object object = this.get(key);
value=this.opt(key)
Object value = this.opt(key);
JSONArray ja = new JSONArray();
keys=this.keys()
Iterator  keys = this.keys();
string=number.toString()
String string = number.toString();
o=this.opt(key)
Object o = this.opt(key);
object=this.opt(key)
Object object = this.opt(key);
object=this.opt(key)
Object object = this.opt(key);
klass=bean.getClass()
Class klass = bean.getClass();
boolean includeSuperClass = klass.getClassLoader() != null;
Method[] methods = includeSuperClass
                ? klass.getMethods()
                : klass.getDeclaredMethods();
Method method = methods[i];
name=method.getName()
String name = method.getName();
String key = "";
result=method.invoke(bean,(Object[])null)
Object result = method.invoke(bean, (Object[])null);
char         b;
char         c = 0;
String       hhhh;
int          i;
len=string.length()
int          len = string.length();
StringBuffer sb = new StringBuffer(len + 4);
Double d;
b=string.charAt(0)
char b = string.charAt(0);
Long myLong = new Long(string);
JSONArray ja = new JSONArray();
keys=this.keys()
Iterator     keys = this.keys();
StringBuffer sb = new StringBuffer("{");
o=keys.next()
Object o = keys.next();
int i;
length=this.length()
int length = this.length();
keys=this.keys()
Iterator     keys = this.keys();
int          newindent = indent + indentFactor;
Object       object;
StringBuffer sb = new StringBuffer("{");
Object object;
o=((JSONString)value).toJSONString()
Object o = ((JSONString)value).toJSONString();
objectPackage=object.getClass().getPackage()
Package objectPackage = object.getClass().getPackage();
String objectPackageName = objectPackage != null
                 ? objectPackage.getName()
                 : "";
boolean  commanate = false;
keys=this.keys()
Iterator keys = this.keys();
key=keys.next()
Object key = keys.next();
value=this.map.get(key)
Object value = this.map.get(key);
int c;
n=this.next()
char n = this.next();
char[] chars = new char[n];
int pos = 0;
c=this.next()
char c = this.next();
char c;
StringBuffer sb = new StringBuffer();
StringBuffer sb = new StringBuffer();
c=this.next()
char c = this.next();
char c;
StringBuffer sb = new StringBuffer();
c=this.nextClean()
char c = this.nextClean();
String string;
StringBuffer sb = new StringBuffer();
char c;
long startIndex = this.index;
long startCharacter = this.character;
long startLine = this.line;
char m = this.stack[this.top - 1] == null ? 'a' : 'k';
StringBuffer sb = new StringBuffer();
c=string.charAt(i)
char c = string.charAt(i);
length=string.length()
int i, length = string.length();
char       c;
int        i;
JSONObject jsonobject = null;
String     string;
String     tagName;
Object     token;
initial=string.charAt(0)
char initial = string.charAt(0);
boolean negative = false;
Long myLong = new Long(string);
JSONObject jo = new JSONObject();
XMLTokener x = new XMLTokener(string);
StringBuffer sb = new StringBuffer();
int          i;
JSONArray    ja;
JSONObject   jo;
String       key;
Iterator     keys;
int          length;
String       string;
Object       value;
char         c;
int          i;
StringBuffer sb = new StringBuffer();
char         c;
StringBuffer sb;
StringBuffer sb = new StringBuffer();
c=next()
char c = next();
string=sb.toString()
String string = sb.toString();
object=entity.get(string)
Object object = entity.get(string);
char c;
char q;
char c;
char q;
StringBuffer sb;
boolean b;
char c;
int i;
int j;
int offset = 0;
length=to.length()
int length = to.length();
char[] circle = new char[length];
List<Question> list = new ArrayList<Question>();
String query = "SELECT * FROM POSTS WHERE " + BuildLikeClauses(searchTags);
set=_commonStatement.executeQuery(query)
ResultSet set = _commonStatement.executeQuery(query);
post=PopulateQuestions(set,flattenHtml)
Question post = PopulateQuestions(set, flattenHtml);
int count= 0;
doc=Jsoup.parseBodyFragment(body)
Document doc = Jsoup.parseBodyFragment(body);
List<CommentInfo> list = new ArrayList<CommentInfo>();
set=_commonStatement.executeQuery("SELECT * FROM Comments WHERE PostId=" + id)
ResultSet set = _commonStatement.executeQuery("SELECT * FROM Comments WHERE PostId="+id);
CommentInfo comment = new CommentInfo();
List<String> queryParts = new ArrayList<String>();
Question info = new Question();
List<Answer> answers = new ArrayList<Answer>();
String query = "SELECT Id,PostTypeId,ParentId,OwnerUserId,CreationDate,LastActivityDate,Body,ViewCount,Title FROM POSTS WHERE ParentId = " + parentId;
set=_commonStatement.executeQuery(query)
ResultSet set = _commonStatement.executeQuery(query);
Answer info = new Answer();
CheckoutTaggedPostsAndComments checkout = new CheckoutTaggedPostsAndComments();
posts=checkout.Query(new String[]{"<internet-explorer>","<ie>","<ie6>","<ie7>","<ie8>","<ie9>","<ie10>","<ie11>"},true)
List<Question> posts = checkout.Query(new String[]
		{
			"<internet-explorer>", "<ie>","<ie6>","<ie7>","<ie8>","<ie9>","<ie10>","<ie11>",
		}, true);
gson=new GsonBuilder().setPrettyPrinting().create()
Gson gson = new GsonBuilder().setPrettyPrinting().create();
PrintWriter writer = new PrintWriter(new FileWriter("IEData.json"));
StringBuilder builder = new StringBuilder();
iter=s.iterator()
Iterator<?> iter = s.iterator();
Iterator<?> iter = s.iterator();
String createUsers = "CREATE TABLE USERS (" +
				"Id INT NOT NULL," +
				"Reputation INT NOT NULL," +
				"CreationDate DATETIME NOT NULL," +
				"DisplayName VARCHAR(200) NOT NULL," +
				"EmailHash VARCHAR(200)," +
				"LastAccessDate DATETIME NOT NULL," + 
				"WebsiteUrl VARCHAR(200)," + 
				"Location VARCHAR(200)," + 
				"Age INT NOT NULL," + 
				"Views INT NOT NULL," + 
				"UpVotes INT NOT NULL," + 
				"DownVotes INT NOT NULL," + 
				"PRIMARY KEY (ID)" +
				")";
String createPosts = "CREATE TABLE POSTS (" +
				"Id INT NOT NULL," +
				"PostTypeId INT NOT NULL," +
				"ParentID INT NOT NULL," +
				"AcceptedAnswerId INT," +
				"CreationDate DATETIME NOT NULL," +
				"Score INT," + 
		        "ViewCount INT," +
		        "Body TEXT," +
		        "OwnerUserId INT," + 
		        "LastEditorUserId INT," + 
		        "LastEditorDisplayName VARCHAR(200)," +  
		        "LastEditDate DATETIME," +
		        "LastActivityDate DATETIME NOT NULL," + 
		        "CommunityOwnedDate DATETIME," + 
		        "ClosedDate DATETIME," + 
		        "Title VARCHAR(500) NOT NULL," +
		        "Tags VARCHAR(200) NOT NULL," + 
		        "AnswerCount INT NOT NULL," +
		        "CommentCount INT NOT NULL," +
		        "FavoriteCount INT NOT NULL," +
		        "BodyAndTitle TEXT," +
				"PRIMARY KEY (ID)" +
				")";
id=Integer.parseInt(attributes.getValue("Id").trim().replaceAll("\\D+",""))
int id = Integer.parseInt(attributes.getValue("Id").trim().replaceAll("\\D+",""));
int postType = 0;
parentId=attributes.getValue("ParentId")
String parentId = attributes.getValue("ParentId");
acceptedId=attributes.getValue("AcceptedAnswerId")
String acceptedId = attributes.getValue("AcceptedAnswerId");
creationDate=attributes.getValue("CreationDate")
String creationDate = attributes.getValue("CreationDate");
int score = 0;
viewCount=attributes.getValue("ViewCount")
String viewCount = attributes.getValue("ViewCount");
body=attributes.getValue("Body")
String body = attributes.getValue("Body");
ownerUserId=attributes.getValue("OwnerUserId")
String ownerUserId = attributes.getValue("OwnerUserId");
lastEditorUserId=attributes.getValue("LastEditorUserId")
String lastEditorUserId = attributes.getValue("LastEditorUserId");
lastEditorDisplayName=attributes.getValue("LastEditorDisplayName")
String lastEditorDisplayName = attributes.getValue("LastEditorDisplayName");
lastEditDate=attributes.getValue("LastEditDate")
String lastEditDate = attributes.getValue("LastEditDate");
lastActivityDate=attributes.getValue("LastActivityDate")
String lastActivityDate = attributes.getValue("LastActivityDate");
communityOwnedDate=attributes.getValue("CommunityOwnedDate")
String communityOwnedDate = attributes.getValue("CommunityOwnedDate");
closedDate=attributes.getValue("ClosedDate")
String closedDate = attributes.getValue("ClosedDate");
String title = attributes.getValue("Title") == null ? "" : attributes.getValue("Title");
String tags = attributes.getValue("Tags") == null ? "" : attributes.getValue("Tags");
answerCount=attributes.getValue("AnswerCount")
String answerCount = attributes.getValue("AnswerCount");
commentCount=attributes.getValue("CommentCount")
String commentCount = attributes.getValue("CommentCount");
favoriteCount=attributes.getValue("FavoriteCount")
String favoriteCount = attributes.getValue("FavoriteCount");
String[] row = new String[]{id + "",postType +"",parentId,acceptedId,creationDate, score +"",
					viewCount,body,ownerUserId,lastEditorUserId,lastEditorDisplayName,
					lastEditDate,lastActivityDate,communityOwnedDate,closedDate,title,tags,
					answerCount,commentCount,favoriteCount};
ArrayList<String> list = new ArrayList<String>();
String rowStr = join(list,"��") + "��";
StringBuilder builder = new StringBuilder();
iter=s.iterator()
Iterator iter = s.iterator();
val=iter.next()
Object val = iter.next();
id=Integer.parseInt(attributes.getValue("Id"))
int id                = Integer.parseInt(attributes.getValue("Id"));
rep=Integer.parseInt(attributes.getValue("Reputation"))
int rep               = Integer.parseInt(attributes.getValue("Reputation"));
createDate=attributes.getValue("CreationDate")
String createDate     = attributes.getValue("CreationDate");
displayName=attributes.getValue("DisplayName")
String displayName    = attributes.getValue("DisplayName");
emailHash=attributes.getValue("EmailHash")
String emailHash      = attributes.getValue("EmailHash");
lastAccessDate=attributes.getValue("LastAccessDate")
String lastAccessDate = attributes.getValue("LastAccessDate");
webUrl=attributes.getValue("WebsiteUrl")
String webUrl         = attributes.getValue("WebsiteUrl");
location=attributes.getValue("Location")
String location       = attributes.getValue("Location");
age=attributes.getValue("Age")
String age            = attributes.getValue("Age");
views=Integer.parseInt(attributes.getValue("Views"))
int views             = Integer.parseInt(attributes.getValue("Views"));
upvotes=Integer.parseInt(attributes.getValue("UpVotes"))
int upvotes           = Integer.parseInt(attributes.getValue("UpVotes"));
downvotes=Integer.parseInt(attributes.getValue("DownVotes"))
int downvotes         = Integer.parseInt(attributes.getValue("DownVotes"));
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
UsersHandler users = new UsersHandler();
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
PostsHandler posts = new PostsHandler();
String createCommentsSQL = "CREATE TABLE COMMENTS (" +
					"Id INT NOT NULL," +
					"PostId INT NOT NULL," +
					"Score INT NOT NULL," +
					"Comment TEXT NULL," + 
					"CreationDate DATETIME NOT NULL," + 
					"UserId INT NULL," + 
					"PRIMARY KEY (ID)" +
					")";
id=Integer.parseInt(attributes.getValue("Id"))
int id = Integer.parseInt(attributes.getValue("Id"));
postId=Integer.parseInt(attributes.getValue("PostId"))
int postId = Integer.parseInt(attributes.getValue("PostId"));
score=Integer.parseInt(attributes.getValue("Score"))
int score = Integer.parseInt(attributes.getValue("Score"));
comment=attributes.getValue("Text")
String comment = attributes.getValue("Text");
date=attributes.getValue("CreationDate")
String date = attributes.getValue("CreationDate");
userId=attributes.getValue("UserId")
String userId = attributes.getValue("UserId");
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
CommentsHandler comments = new CommentsHandler();
String createVotesSQL = "CREATE TABLE VOTES (" +
					"Id INT NOT NULL," +
					"PostId INT NOT NULL," +
					"VoteTypeId INT NOT NULL," +
					"CreationDate DATETIME NOT NULL," + 
					"UserId INT NULL," + 
					"BountyAmount INT NULL," + 
					"PRIMARY KEY (ID)" +
					")";
id=Integer.parseInt(attributes.getValue("Id"))
int id = Integer.parseInt(attributes.getValue("Id"));
postId=Integer.parseInt(attributes.getValue("PostId"))
int postId = Integer.parseInt(attributes.getValue("PostId"));
voteTypeId=Integer.parseInt(attributes.getValue("VoteTypeId"))
int voteTypeId = Integer.parseInt(attributes.getValue("VoteTypeId"));
date=attributes.getValue("CreationDate")
String date = attributes.getValue("CreationDate");
userId=attributes.getValue("UserId")
String userId = attributes.getValue("UserId");
bountyAmount=attributes.getValue("BountyAmount")
String bountyAmount = attributes.getValue("BountyAmount");
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
VotesHandler users = new VotesHandler();

Diff of 5c59c8d7f019e3009a399213869e568c1e3b1d4e and 9af2a2e838ade2387f063bcf6ca1d96b518bfa6f:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5c59c8d7f019e3009a399213869e568c1e3b1d4e to 9af2a2e838ade2387f063bcf6ca1d96b518bfa6f

************Analysis complete************
Added generics to repository anacrowd = 0

Chris Parnin added type argument method count = 0
	--> recency = null
Chris Parnin added wildcard count = 0
	--> recency = null
Chris Parnin added type declaration count = 0
	--> recency = null
Chris Parnin added type parameter method count = 0
	--> recency = null
Chris Parnin added type parameter field count = 0
	--> recency = null
Chris Parnin added diamond count = 0
	--> recency = null
Chris Parnin added method invocation count = 0
	--> recency = null
Chris Parnin added implicit method invocation count = 0
	--> recency = null
Chris Parnin added class instantiation count = 0
	--> recency = null
Chris Parnin added nested count = 0
	--> recency = null
Chris Parnin added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository anacrowd = 0

Chris Parnin added type argument method count = 0
	--> recency = null
Chris Parnin added wildcard count = 0
	--> recency = null
Chris Parnin added type declaration count = 0
	--> recency = null
Chris Parnin added type parameter method count = 0
	--> recency = null
Chris Parnin added type parameter field count = 0
	--> recency = null
Chris Parnin added diamond count = 0
	--> recency = null
Chris Parnin added method invocation count = 0
	--> recency = null
Chris Parnin added implicit method invocation count = 0
	--> recency = null
Chris Parnin added class instantiation count = 0
	--> recency = null
Chris Parnin added nested count = 0
	--> recency = null
Chris Parnin added bounds count = 0
	--> recency = null

****Parsing for addition at revision 2581765fb3c57fb378995d11d9206fecbadbf6eb****

Added AbstractApi.java to .\anacrowd\ repository source files.
Added AndroidApi.java to .\anacrowd\ repository source files.
Added Collision.java to .\anacrowd\ repository source files.
Added ClassElem.java to .\anacrowd\ repository source files.
Added MethodElem.java to .\anacrowd\ repository source files.
Added PackageElem.java to .\anacrowd\ repository source files.
Added GWTApi.java to .\anacrowd\ repository source files.
Added JavaApi.java to .\anacrowd\ repository source files.
Added ApiParser.java to .\anacrowd\ repository source files.
Added ResultCache.java to .\anacrowd\ repository source files.
Added CrowdAnalysis.java to .\anacrowd\ repository source files.
Added ViewCountAnalysis.java to .\anacrowd\ repository source files.
Added ClassDocumentation.java to .\anacrowd\ repository source files.
Added ClassIndex.java to .\anacrowd\ repository source files.
Added AnswerElement.java to .\anacrowd\ repository source files.
Added ClusteredLinkElement.java to .\anacrowd\ repository source files.
Added CodeSampleElement.java to .\anacrowd\ repository source files.
Added CoOccurringLinks.java to .\anacrowd\ repository source files.
Added LinkElement.java to .\anacrowd\ repository source files.
Added LinkElement_old.java to .\anacrowd\ repository source files.
Added PostElement.java to .\anacrowd\ repository source files.
Added QuestionElement.java to .\anacrowd\ repository source files.
Added ThreadElement.java to .\anacrowd\ repository source files.
Added BuildDocumentation.java to .\anacrowd\ repository source files.
Added ExportDocumentation.java to .\anacrowd\ repository source files.
Added LinkDocumentation.java to .\anacrowd\ repository source files.
Added RankDocumentation.java to .\anacrowd\ repository source files.
Added SerializeDocumentation.java to .\anacrowd\ repository source files.
Added CachedPostBody.java to .\anacrowd\ repository source files.
Added CachePostBodyIndex.java to .\anacrowd\ repository source files.
Added LinkSpan.java to .\anacrowd\ repository source files.
Added LinkValidation.java to .\anacrowd\ repository source files.
Added ApiInfo.java to .\anacrowd\ repository source files.
Added CoverageData.java to .\anacrowd\ repository source files.
Added ExportCoverage.java to .\anacrowd\ repository source files.
Added ExportPosts.java to .\anacrowd\ repository source files.
Added ExportUsers.java to .\anacrowd\ repository source files.
Added Post2Api.java to .\anacrowd\ repository source files.
Added ConsoleFormatter.java to .\anacrowd\ repository source files.
Added Visitor.java to .\anacrowd\ repository source files.
Added WordDistributions.java to .\anacrowd\ repository source files.
Added test.java to .\anacrowd\ repository source files.
Added AnalyzeDocumentation.java to .\anacrowd\ repository source files.
Added ApiAnalysis.java to .\anacrowd\ repository source files.
Added BaseAnalysis.java to .\anacrowd\ repository source files.
Added ClassTagReliability.java to .\anacrowd\ repository source files.
Added CodeSampleAnalysis.java to .\anacrowd\ repository source files.
Added CodeSampleStats.java to .\anacrowd\ repository source files.
Added FilterAnalysis.java to .\anacrowd\ repository source files.
Added AbstractThreadFilter.java to .\anacrowd\ repository source files.
Added AcceptedFilter.java to .\anacrowd\ repository source files.
Added AnsweredFilter.java to .\anacrowd\ repository source files.
Added AtLeastNFilter.java to .\anacrowd\ repository source files.
Added BountiedFilter.java to .\anacrowd\ repository source files.
Added FavoritedFilter.java to .\anacrowd\ repository source files.
Added ViewedFilter.java to .\anacrowd\ repository source files.
Added VotedFilter.java to .\anacrowd\ repository source files.
Added WhoContributes.java to .\anacrowd\ repository source files.
Added ApiInfo.java to .\anacrowd\ repository source files.
Added LinkAnalysis.java to .\anacrowd\ repository source files.
Added OtherRatings.java to .\anacrowd\ repository source files.
Added CalculateBountiesForThreads.java to .\anacrowd\ repository source files.
Added MyEntry.java to .\anacrowd\ repository source files.
Added ThreadInPackages.java to .\anacrowd\ repository source files.
Added ThreadStats.java to .\anacrowd\ repository source files.
Added Driver.java to .\anacrowd\ repository source files.
Added FindLinkExamples.java to .\anacrowd\ repository source files.
Added RankedClassDocumentation.java to .\anacrowd\ repository source files.
Added ExportDataForTreemap.java to .\anacrowd\ repository source files.
Added SerializeJson.java to .\anacrowd\ repository source files.
Added RunJavaMethodCoverage.java to .\anacrowd\ repository source files.
Added SpeedOfSaturation.java to .\anacrowd\ repository source files.
Added DifficultySites.java to .\anacrowd\ repository source files.
Added OutputActivityAndUsage.java to .\anacrowd\ repository source files.
Added PredictorAnalysis.java to .\anacrowd\ repository source files.
Added SamplingForDifficultyAnalysis.java to .\anacrowd\ repository source files.
Added SampleByWordNumber.java to .\anacrowd\ repository source files.
Added DBInfo.java to .\anacrowd\ repository source files.
Added Search.java to .\anacrowd\ repository source files.
Added CDL.java to .\anacrowd\ repository source files.
Added Cookie.java to .\anacrowd\ repository source files.
Added CookieList.java to .\anacrowd\ repository source files.
Added HTTP.java to .\anacrowd\ repository source files.
Added HTTPTokener.java to .\anacrowd\ repository source files.
Added JSONArray.java to .\anacrowd\ repository source files.
Added JSONException.java to .\anacrowd\ repository source files.
Added JSONML.java to .\anacrowd\ repository source files.
Added JSONObject.java to .\anacrowd\ repository source files.
Added JSONString.java to .\anacrowd\ repository source files.
Added JSONStringer.java to .\anacrowd\ repository source files.
Added JSONTokener.java to .\anacrowd\ repository source files.
Added JSONWriter.java to .\anacrowd\ repository source files.
Added XML.java to .\anacrowd\ repository source files.
Added XMLTokener.java to .\anacrowd\ repository source files.
Added CheckoutTaggedPostsAndComments.java to .\anacrowd\ repository source files.
Added DBImport.java to .\anacrowd\ repository source files.
Added ImportComments.java to .\anacrowd\ repository source files.
Added ImportVotes.java to .\anacrowd\ repository source files.
Hashtable<String,Integer> classSet = new Hashtable<String,Integer>();
HashSet<String> uniqueClasses = new HashSet<String>();
HashSet<String> uniqueMethods = new HashSet<String>();
HashSet<String> overloadedMethods = new HashSet<String>();
int classCount = 0;
int methodCount = 0;
Hashtable<String,PackageElem> packages = new Hashtable<String,PackageElem>();
contents=readStream(new FileInputStream(path))
String contents = readStream(new FileInputStream(path));
lines=contents.split(System.getProperty("line.separator"))
String[] lines = contents.split(System.getProperty("line.separator"));
tuple=line.split("\t")
String[] tuple = line.split("\t");
namespace=tuple[0].trim()
String namespace = tuple[0].trim();
className=tuple[1].trim()
String className = tuple[1].trim();
PackageElem p = new PackageElem();
ClassElem klass = new ClassElem();
StringBuilder sb = new StringBuilder(512);
Reader r = new InputStreamReader(is, "UTF-8");
int c = 0;
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
name=attributes.getValue("name")
String name = attributes.getValue("name");
name=attributes.getValue("name")
String name = attributes.getValue("name");
name=attributes.getValue("name")
String name = attributes.getValue("name");
isPublic=attributes.getValue("visibility").equals("public")
boolean isPublic = attributes.getValue("visibility").equals("public");
MethodElem meth = new MethodElem();
String cacheDirPath = "cachedir/";
File cacheDir = new File(cacheDirPath);
bytesOfMessage=query.getBytes("UTF-8")
byte[] bytesOfMessage = query.getBytes("UTF-8");
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
thedigest=md.digest(bytesOfMessage)
byte[] thedigest = md.digest(bytesOfMessage);
StringBuilder builder = new StringBuilder();
String cacheDirPath = "cachedir/" + searchMethod + "/";
File cacheDir = new File(cacheDirPath);
encodedFilePath=EncodeQuery(query)
String encodedFilePath = EncodeQuery(query);
String fileName = cacheDirPath + encodedFilePath;
File cache = new File(fileName);
CachedRowSet rowSet = new CachedRowSetImpl();
set=s.executeQuery(query)
ResultSet set = s.executeQuery(query);
FileOutputStream fos = new FileOutputStream(cache.getAbsolutePath());
ObjectOutputStream out = new ObjectOutputStream(fos);
FileInputStream fos = new FileInputStream(cache.getAbsolutePath());
ObjectInputStream in = new ObjectInputStream(fos);
Search info = new Search();
String tag = api.MainTag;
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
List<CoverageEvent> coverageEvents = new ArrayList<CoverageEvent>();
methQuestions=info.GetIds(qTable,klass.Name)
List<Integer> methQuestions = info.GetIds(qTable,  klass.Name);
List<Integer> methQuestions = info.GetIds(qTable,  klass.Name);
CoverageEvent evt = new CoverageEvent();
rs=s.executeQuery("SELECT CreationDate,OwnerUserId FROM " + qTable + " "+ "WHERE Id = "+ id)
ResultSet rs = s.executeQuery(
								"SELECT CreationDate,OwnerUserId FROM " + qTable + " " + 
								"WHERE Id = " + id
						);
HashSet<Date> etimes = new HashSet<Date>();
List<Date> times =  new ArrayList<Date>(etimes);
Hashtable<String,Integer> coverage = new Hashtable<String,Integer>();
HashSet<Integer> users = new HashSet<Integer>();
HashSet<Integer> crowd = new HashSet<Integer>();
List<CoverageEvent> relevantEvents = new ArrayList<CoverageEvent>();
String key = pack.Name +":"+ klass.Name;
int count = 0;
Search info = new Search();
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
Hashtable<Integer,UserQA> dict = new Hashtable<Integer,UserQA>();
questionSet=s.executeQuery("SELECT OwnerUserId,Count(*) as num FROM " + qTable + " "+ "GROUP BY OwnerUserId")
ResultSet questionSet = s.executeQuery(
					"SELECT OwnerUserId,Count(*) as num FROM " + qTable + " " + 
					"GROUP BY OwnerUserId"
			);
userId=questionSet.getInt("OwnerUserId")
int userId = questionSet.getInt("OwnerUserId");
numQs=questionSet.getInt("num")
int numQs = questionSet.getInt("num");
answerSet=s.executeQuery("SELECT OwnerUserId,Count(*) as num FROM " + aTable + " "+ "GROUP BY OwnerUserId")
ResultSet answerSet = s.executeQuery(
					"SELECT OwnerUserId,Count(*) as num FROM " + aTable + " " + 
					"GROUP BY OwnerUserId"
			);
userId=answerSet.getInt("OwnerUserId")
int userId = answerSet .getInt("OwnerUserId");
numAs=answerSet.getInt("num")
int numAs = answerSet .getInt("num");
userSet=s.executeQuery("SELECT UpVotes,DownVotes,Age,CreationDate,LastAccessDate,Reputation FROM USERS " + "WHERE Id = " + key)
ResultSet userSet = s.executeQuery(
						"SELECT UpVotes,DownVotes,Age,CreationDate,LastAccessDate,Reputation FROM USERS " + 
						"WHERE Id = " + key
				);
Search info = new Search();
String tag = api.MainTag;
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
FileWriter fstream = new FileWriter("C:\\method_output.txt");
PrintWriter out = new PrintWriter(fstream);
int counter = 0;
methodQuestionIds=info.GetIds(qTable,methodElem.Name)
List<Integer> methodQuestionIds = info.GetIds(qTable, methodElem.Name);
List<Integer> methodQuestionIds = info.GetIds(qTable, methodElem.Name);
int acceptedAnswers = 0;
int viewCounts = 0;
int scores = 0;
int answerCounts = 0;
int commentCounts = 0;
int favoriteCounts = 0;
question=s.executeQuery("SELECT * FROM POSTS " + "WHERE Id = " + id)
ResultSet question = s.executeQuery(
									"SELECT * FROM POSTS " +
											"WHERE Id = " + id
									);
Search info = new Search();
String tag = api.MainTag;
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
FileWriter fstream = new FileWriter("C:\\noDuplicatesOutput.txt");
PrintWriter out = new PrintWriter(fstream);
Set<Integer> allKlassQuestionIds = new HashSet<Integer>();
int counter = 0;
klassQuestionIds=info.GetIds(qTable,klass.Name)
List<Integer> klassQuestionIds = info.GetIds(qTable,  klass.Name);
List<Integer> klassQuestionIds = info.GetIds(qTable,  klass.Name);
int acceptedAnswers = 0;
int viewCounts = 0;
int scores = 0;
int answerCounts = 0;
int commentCounts = 0;
int favoriteCounts = 0;
int counter2 = 0;
question=s.executeQuery("SELECT * FROM POSTS " + "WHERE Id = " + id)
ResultSet question = s.executeQuery(
						"SELECT * FROM POSTS " +
					    "WHERE Id = " + id
			    );
List<LinkElement> hrefs = new ArrayList<LinkElement>();
links=thread.Question.getHrefs(this.Klass)
List<LinkElement> links = thread.Question.getHrefs(this.Klass);
List<LinkElement> links = thread.Question.getHrefs(this.Klass);
List<CodeSampleElement> samples = new ArrayList<CodeSampleElement>();
elem=thread.Question.getCodeSample()
CodeSampleElement elem = thread.Question.getCodeSample();
List<LinkSpan> validatedLinks = new ArrayList<LinkSpan>();
List<ThreadElement> validatedThreads = new ArrayList<ThreadElement>();
ByteArrayOutputStream os = new ByteArrayOutputStream(string.length());
GZIPOutputStream gos = new GZIPOutputStream(os);
compressed=os.toByteArray()
byte[] compressed = os.toByteArray();
final int BUFFER_SIZE = 64;
ByteArrayInputStream is = new ByteArrayInputStream(compressed);
GZIPInputStream gis = new GZIPInputStream(is, BUFFER_SIZE);
StringBuilder string = new StringBuilder();
byte[] data = new byte[BUFFER_SIZE];
int bytesRead;
you=ClassIndex.getInstance().SampleMap.get(Id)
CodeSampleElement you = ClassIndex.getInstance().SampleMap.get( Id );
LinkDocumentation linker = new LinkDocumentation();
LinkDocumentation linker = new LinkDocumentation();
doc=linker.LinkOnlyClass(api,klass)
ClassDocumentation doc = linker.LinkOnlyClass(api, klass);
info=db.GetPostDetail(thread.Question.Id)
PostInfo info = db.GetPostDetail(thread.Question.Id);
ansInfo=db.GetPostDetail(ans.Id)
PostInfo ansInfo = db.GetPostDetail(ans.Id);
info=db.GetPostDetail(code.Parent.Id)
PostInfo info = db.GetPostDetail(code.Parent.Id);
Hashtable<String,ClusteredLinkElement> linkCount = new Hashtable<String,ClusteredLinkElement>();
doc=Jsoup.parseBodyFragment(body)
Document doc = Jsoup.parseBodyFragment(body);
codeSnippets=doc.getElementsByTag("code")
Elements codeSnippets = doc.getElementsByTag("code");
List<CodeBlock> blocks = new ArrayList<CodeBlock>();
CodeBlock block = new CodeBlock();
text=e.text()
String text = e.text();
p=Pattern.compile("\\b" + Pattern.quote(klass) + "\\b")
Pattern p = Pattern.compile("\\b"+Pattern.quote(klass)+"\\b");
matcher=p.matcher(text)
Matcher matcher = p.matcher(text);
int start=0;
doc=Jsoup.parseBodyFragment(body)
Document doc = Jsoup.parseBodyFragment(body);
codeSnippets=doc.getElementsByTag("a")
Elements codeSnippets = doc.getElementsByTag("a");
List<String> links = new ArrayList<String>();
blocks=this.ParseFragments(Test,"Document")
List<CodeBlock> blocks = this.ParseFragments(Test,"Document");
List<CodeBlock> blocks = this.ParseFragments(Test,"Document");
links=this.ParseLinks(TestLinks,"MessageDigest")
List<String> links = this.ParseLinks(TestLinks, "MessageDigest");
List<String> links = this.ParseLinks(TestLinks, "MessageDigest");
BuildDocumentation b = new BuildDocumentation();
doc=b.BuildForClass(new AndroidApi(),"Drawable")
ClassDocumentation doc = b.BuildForClass(new AndroidApi(),"Drawable");
RankDocumentation ranker = new RankDocumentation();
ExportDocumentation exporter = new ExportDocumentation();
top5code=doc.getCodeSampleElements().subList(0,Math.min(doc.getCodeSampleElements().size(),5))
List<CodeSampleElement> top5code = doc.getCodeSampleElements().subList(0, 
				Math.min(doc.getCodeSampleElements().size(), 5));
List<CodeSampleElement> top5code = doc.getCodeSampleElements().subList(0, 
				Math.min(doc.getCodeSampleElements().size(), 5));
top10links=doc.ClusteredLinks.subList(0,Math.min(doc.ClusteredLinks.size(),10))
List<ClusteredLinkElement> top10links = doc.ClusteredLinks.subList(0, 
				Math.min(doc.ClusteredLinks.size(),10));
List<ClusteredLinkElement> top10links = doc.ClusteredLinks.subList(0, 
				Math.min(doc.ClusteredLinks.size(),10));
top5questions=doc.ThreadElements.subList(0,Math.min(doc.ThreadElements.size(),5))
List<ThreadElement> top5questions = doc.ThreadElements.subList(0, 
				Math.min(doc.ThreadElements.size(),5));
List<ThreadElement> top5questions = doc.ThreadElements.subList(0, 
				Math.min(doc.ThreadElements.size(),5));
top5links=top10links.subList(0,Math.min(top10links.size(),5))
List<ClusteredLinkElement> top5links = top10links.subList(0, 
				Math.min(top10links.size(),5));
List<ClusteredLinkElement> top5links = top10links.subList(0, 
				Math.min(top10links.size(),5));
List<ClusteredLinkElement> removeMe = new ArrayList<ClusteredLinkElement>();
a=getDomainName(link.Href)
String a = getDomainName(link.Href);
b=getDomainName(other.Href)
String b = getDomainName(other.Href);
URL u;
ClassDocumentation klassDoc = new ClassDocumentation();
WordDistributions wd = new WordDistributions();
List<Integer> wordQMatches = new ArrayList<Integer>();
List<Integer> wordAMatches = new ArrayList<Integer>();
String klassName = klass.Name;
codeQMatches=search.GetIdsViaCodeMatches(this.QuestionsTempTableName,klassName)
List<Integer> codeQMatches = search.GetIdsViaCodeMatches(this.QuestionsTempTableName, klassName);
List<Integer> codeQMatches = search.GetIdsViaCodeMatches(this.QuestionsTempTableName, klassName);
linkQMatches=search.GetIdsViaLinkMatches(this.QuestionsTempTableName,klassName)
List<Integer> linkQMatches = search.GetIdsViaLinkMatches(this.QuestionsTempTableName, klassName);
List<Integer> linkQMatches = search.GetIdsViaLinkMatches(this.QuestionsTempTableName, klassName);
codeAMatches=search.GetIdsViaCodeMatches(this.AnswersTempTableName,klassName)
List<Integer> codeAMatches = search.GetIdsViaCodeMatches(this.AnswersTempTableName, klassName);
List<Integer> codeAMatches = search.GetIdsViaCodeMatches(this.AnswersTempTableName, klassName);
linkAMatches=search.GetIdsViaLinkMatches(this.AnswersTempTableName,klassName)
List<Integer> linkAMatches = search.GetIdsViaLinkMatches(this.AnswersTempTableName, klassName);
List<Integer> linkAMatches = search.GetIdsViaLinkMatches(this.AnswersTempTableName, klassName);
HashSet<Integer> ansSet = new HashSet<Integer>();
Hashtable<Integer,Integer> AnswerIdToParentId = new Hashtable<Integer,Integer>();
HashSet<Integer> qSet = new HashSet<Integer>();
List<Integer> myThreads = new ArrayList<Integer>();
ThreadElement thread = new ThreadElement();
info=db.GetPostDetail(thread.Question.Id)
PostInfo info = db.GetPostDetail(thread.Question.Id);
LinkValidation validate = new LinkValidation();
List<LinkElement> hrefs = new ArrayList<LinkElement>();
spans=validate.Validate(klass,thread.Question,thread.Question.Title,hrefs)
List<LinkSpan> spans = validate.Validate(klass, thread.Question, thread.Question.Title, hrefs);
List<LinkSpan> spans = validate.Validate(klass, thread.Question, thread.Question.Title, hrefs);
sample=GetOrBuildCodeSample(klass,thread.Question,spans)
CodeSampleElement sample = GetOrBuildCodeSample(klass, thread.Question, spans);
parentQ=AnswerIdToParentId.get(answerId)
int parentQ = AnswerIdToParentId.get( answerId );
ThreadElement thread = new ThreadElement();
tinfo=db.GetPostDetail(parentQ)
PostInfo tinfo = db.GetPostDetail(parentQ);
AnswerElement ans = new AnswerElement();
LinkValidation validate = new LinkValidation();
List<LinkElement> hrefs = new ArrayList<LinkElement>();
spans=validate.Validate(klass,ans,null,hrefs)
List<LinkSpan> spans = validate.Validate(klass, ans,null, hrefs);
List<LinkSpan> spans = validate.Validate(klass, ans,null, hrefs);
sample=GetOrBuildCodeSample(klass,ans,spans)
CodeSampleElement sample = GetOrBuildCodeSample(klass, ans, spans);
CodeSampleElement codeSample = null;
Hashtable<Integer,CodeBlock> blocks = new Hashtable<Integer,CodeBlock>();
postBody=CachePostBodyIndex.getInstance().ParseOrGet(parent)
CachedPostBody postBody = CachePostBodyIndex.getInstance().ParseOrGet(parent);
CodeBlock block = new CodeBlock();
int b = 0;
String qTable = api.MainTag + "questions_table";
String aTable = api.MainTag + "answers_table";
ClassElem k = new ClassElem();
doc=Link(k,new Hashtable<Integer,ThreadElement>())
ClassDocumentation doc = Link(k, new Hashtable<Integer,ThreadElement>());
List<ClassDocumentation>  list = new ArrayList<ClassDocumentation>();
Hashtable<Integer,ThreadElement> ThreadMap = new Hashtable<Integer,ThreadElement>();
doc=Link(klass,ThreadMap)
ClassDocumentation doc = Link(klass, ThreadMap);
SerializeDocumentation serializer = new SerializeDocumentation();
List<ClassDocumentation>  list = new ArrayList<ClassDocumentation>();
Hashtable<Integer,ThreadElement> ThreadMap = new Hashtable<Integer,ThreadElement>();
doc=Link(klass,ThreadMap)
ClassDocumentation doc = Link(klass,ThreadMap);
String path = api.ClassDocPath;
SerializeDocumentation serializer = new SerializeDocumentation();
List<ClassDocumentation>  list = new ArrayList<ClassDocumentation>();
File outputFile = new File(path + java.io.File.separator + klass.ParentPackage.Name + "." + klass.Name + ".json");
doc=Link(klass,ClassIndex.getInstance().ThreadMap)
ClassDocumentation doc = Link(klass, ClassIndex.getInstance().ThreadMap);
Hashtable<String,ClusteredLinkElement> linkCount = new Hashtable<String,ClusteredLinkElement>();
ClusteredLinkElement clustered = new ClusteredLinkElement();
List<ClusteredLinkElement> elements = new ArrayList<ClusteredLinkElement>(linkCount.values());
List<ClassDocumentation> list = new ArrayList<ClassDocumentation>();
File filePath = new File(path + File.separator + pack.Name + "."  + klass.Name + ".json");
StringBuilder sb = new StringBuilder(512);
Reader r = new InputStreamReader(is, "UTF-8");
int c = 0;
serializedObj=Serialize(doc)
String serializedObj = Serialize(doc);
File outputDir = new File(path);
FileWriter writer = new FileWriter(outputFile);
JSONObject obj = new JSONObject();
List<Integer> threadIds = new ArrayList<Integer>();
List<Integer> sampleIds = new ArrayList<Integer>();
List<JSONObject> links = new ArrayList<JSONObject>();
List<JSONObject> hrefs = new ArrayList<JSONObject>();
JSONObject obj = new JSONObject(source);
ClassDocumentation doc = new ClassDocumentation();
array=obj.getJSONArray("ThreadElements")
JSONArray array = obj.getJSONArray("ThreadElements");
id=array.getInt(i)
int id = array.getInt(i);
links=obj.getJSONArray("Links")
JSONArray links = obj.getJSONArray("Links");
jsonLink=links.getJSONObject(i)
JSONObject jsonLink = links.getJSONObject(i);
link=DeserializeLinkSpan(jsonLink)
LinkSpan link = DeserializeLinkSpan(jsonLink);
tId=jsonLink.getInt("Thread")
int tId = jsonLink.getInt("Thread");
pId=jsonLink.getInt("Post")
int pId = jsonLink.getInt("Post");
key=ClassIndex.getKey(tId,pId,doc.Klass)
String key = ClassIndex.getKey(tId, pId, doc.Klass);
hrefs=obj.getJSONArray("Hrefs")
JSONArray hrefs = obj.getJSONArray("Hrefs");
jsonHref=hrefs.getJSONObject(i)
JSONObject jsonHref = hrefs.getJSONObject(i);
link=DeserializeHref(jsonHref)
LinkElement link = DeserializeHref(jsonHref);
tId=jsonHref.getInt("Thread")
int tId = jsonHref.getInt("Thread");
pId=jsonHref.getInt("Post")
int pId = jsonHref.getInt("Post");
key=ClassIndex.getKey(tId,pId,doc.Klass)
String key = ClassIndex.getKey(tId, pId, doc.Klass);
List<JSONObject> codeSampleObjects = new ArrayList<JSONObject>();
List<CodeSampleElement> samples = new ArrayList<CodeSampleElement>();
JSONObject obj = new JSONObject();
List<JSONObject> blockObjects = new ArrayList<JSONObject>();
CodeSampleElement code = new CodeSampleElement();
blockObjectsJson=obj.getJSONArray("Blocks")
JSONArray blockObjectsJson = obj.getJSONArray("Blocks");
List<CodeBlock> blockObjects = new ArrayList<CodeBlock>();
JSONObject obj = new JSONObject();
PostElement post = new PostElement();
JSONObject obj = new JSONObject();
List<JSONObject> spanObjects = new ArrayList<JSONObject>();
CodeBlock block = new CodeBlock();
List<CodeSpan> spans = new ArrayList<CodeSpan>();
classMatchesJson=obj.getJSONArray("ClassMatches")
JSONArray classMatchesJson = obj.getJSONArray("ClassMatches");
JSONObject obj = new JSONObject();
List<JSONObject> linkObjects = new ArrayList<JSONObject>();
List<LinkElement_old> links  = new ArrayList<LinkElement_old>();
JSONObject obj = new JSONObject();
LinkElement_old link = new LinkElement_old();
extLinks=obj.getJSONArray("ExternalLinks")
JSONArray extLinks = obj.getJSONArray("ExternalLinks");
List<JSONObject> linkObjects = new ArrayList<JSONObject>();
List<ClusteredLinkElement> links = new ArrayList<ClusteredLinkElement>();
JSONObject obj = new JSONObject();
ClusteredLinkElement link = new ClusteredLinkElement();
List<JSONObject> threadObjects = new ArrayList<JSONObject>();
List<ThreadElement> threads = new ArrayList<ThreadElement>();
JSONObject obj = new JSONObject();
List<JSONObject> answers = new ArrayList<JSONObject>();
ThreadElement thread = new ThreadElement();
List<AnswerElement> answers = new ArrayList<AnswerElement>();
jsonAns=obj.getJSONArray("Answers")
JSONArray jsonAns = obj.getJSONArray("Answers");
JSONObject obj = new JSONObject();
AnswerElement answer = new AnswerElement();
SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
JSONObject obj = new JSONObject();
QuestionElement q = new QuestionElement();
JSONObject obj = new JSONObject();
LinkElement href = new LinkElement();
JSONObject obj = new JSONObject();
LinkSpan span = new LinkSpan();
Hashtable<Integer, CodeSampleElement> sampleMap = new Hashtable<Integer, CodeSampleElement>();
File outputDir = new File(path + File.separator + "samplepool");
String fullPath = outputDir.getAbsolutePath() + File.separator + filePath;
JSONObject obj = new JSONObject(readStream(new FileInputStream(fullPath)));
s=DeserializeCodeSampleElement(obj)
CodeSampleElement s = DeserializeCodeSampleElement(obj);
Hashtable<Integer, ThreadElement> threadMap = new Hashtable<Integer, ThreadElement>();
File outputDir = new File(path + File.separator + "threadpool");
String fullPath = outputDir.getAbsolutePath() + File.separator + filePath;
JSONObject obj = new JSONObject(readStream(new FileInputStream(fullPath)));
t=DeserializeThreadElement(obj)
ThreadElement t = DeserializeThreadElement(obj);
File outputDir = new File(outputPath + File.separator + "samplepool");
File outputFile = new File(outputDir.getAbsolutePath() + File.separator + "sample" + sample.Parent.Id + ".json");
obj=SerializeCodeSampleElement(sample)
JSONObject obj = SerializeCodeSampleElement(sample);
FileWriter writer = new FileWriter(outputFile);
File outputDir = new File(outputPath + File.separator + "threadpool");
File outputFile = new File(outputDir.getAbsolutePath() + File.separator + "thread" + thread.Question.Id + ".json");
obj=SerializeThreadElement(thread)
JSONObject obj = SerializeThreadElement(thread);
FileWriter writer = new FileWriter(outputFile);
CachedPostBody cachedBody = new CachedPostBody();
doc=Jsoup.parseBodyFragment(post.Body)
Document doc = Jsoup.parseBodyFragment(post.Body);
codeSnippets=doc.getElementsByTag("code")
Elements codeSnippets = doc.getElementsByTag("code");
hrefs=doc.getElementsByTag("a")
Elements hrefs = doc.getElementsByTag("a");
SimpleHref href = new SimpleHref();
paragraphs=doc.getElementsByTag("p")
Elements paragraphs = doc.getElementsByTag("p");
allSpans=ParseBody(klassElem,post,title,hrefs)
List<LinkSpan> allSpans = ParseBody(klassElem,post,title, hrefs);
List<LinkSpan> allSpans = ParseBody(klassElem,post,title, hrefs);
List<LinkSpan> allSpans = new ArrayList<LinkSpan>();
int i = 0;
postBody=CachePostBodyIndex.getInstance().ParseOrGet(post)
CachedPostBody postBody = CachePostBodyIndex.getInstance().ParseOrGet(post);
spans=GatherSpans(klassElem,text)
List<LinkSpan> spans = GatherSpans(klassElem, text);
List<LinkSpan> spans = GatherSpans(klassElem, text);
spans=GatherSpans(klassElem,href.AnchorText)
List<LinkSpan> spans = GatherSpans(klassElem, href.AnchorText);
List<LinkSpan> spans = GatherSpans(klassElem, href.AnchorText);
LinkElement link = new LinkElement();
WordDistributions wd = new WordDistributions();
spans=GatherSpans(klassElem,text)
List<LinkSpan> spans = GatherSpans(klassElem, text);
List<LinkSpan> spans = GatherSpans(klassElem, text);
spans=GatherSpans(klassElem,title)
List<LinkSpan> spans = GatherSpans(klassElem, title);
List<LinkSpan> spans = GatherSpans(klassElem, title);
List<LinkSpan> spans = new ArrayList<LinkSpan>();
String klassName = klassElem.Name;
p=Pattern.compile("\\b" + Pattern.quote(klassName) + "\\b")
Pattern p = Pattern.compile("\\b"+Pattern.quote(klassName)+"\\b");
matcher=p.matcher(text)
Matcher matcher = p.matcher(text);
int start=0;
s=matcher.start()
int s = matcher.start();
int e = matcher.start()+klassName.length();
LinkSpan span = new LinkSpan();
sub=text.substring(s)
String sub = text.substring(s);
o=Pattern.compile("^\\b" + Pattern.quote(otherClassName) + "\\b")
Pattern o = Pattern.compile("^\\b"+Pattern.quote(otherClassName)+"\\b");
matcher=o.matcher(text)
Matcher matcher = o.matcher(text);
FileWriter fw = new FileWriter(outFile);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outFile);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outputFile);
int num = klass.AnswerIds.size() + klass.QuestionIds.size();
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
list=ExportQuestions(questionsFile,tag)
List<PostInfo> list = ExportQuestions(questionsFile, tag);
List<PostInfo> list = ExportQuestions(questionsFile, tag);
FileWriter fw = new FileWriter(answersFile);
DBInfo info = new DBInfo();
FileWriter fw = new FileWriter(questionsFile);
DBInfo info = new DBInfo();
list=info.Questions(tag)
List<PostInfo> list = info.Questions(tag);
List<PostInfo> list = info.Questions(tag);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outFile);
DBInfo info = new DBInfo();
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outFile);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
int sum = 0;
int coverageCount = 0;
int klassCount = 0;
int methodCoverageCount = 0;
int methodCount = 0;
int methodSum = 0;
int num = klass.QuestionIds.size() + klass.AnswerIds.size();
int mNum = meth.QuestionIds.size() + meth.AnswerIds.size();
Search search = new Search();
klassQuestions=search.GetIds(api.MainTag + "questions_table",klass.Name)
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
klassAnswers=search.GetIds(api.MainTag + "answers_table",klass.Name)
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
Search search = new Search();
s=search.conn.createStatement()
Statement s = search.conn.createStatement();
WordDistributions wd = new WordDistributions();
klassQuestions=search.GetIds(api.MainTag + "questions_table",klass.Name)
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
klassAnswers=search.GetIds(api.MainTag + "answers_table",klass.Name)
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
Search search = new Search();
methQuestions=search.GetIds(api.MainTag + "questions_table",meth.Name)
List<Integer> methQuestions = search.GetIds(api.MainTag + "questions_table",  meth.Name);
List<Integer> methQuestions = search.GetIds(api.MainTag + "questions_table",  meth.Name);
methAnswers=search.GetIds(api.MainTag + "answers_table",meth.Name)
List<Integer> methAnswers = search.GetIds(api.MainTag + "answers_table",  meth.Name);
List<Integer> methAnswers = search.GetIds(api.MainTag + "answers_table",  meth.Name);
klassQuestions=search.GetIds(api.MainTag + "questions_table",klass.Name)
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table",  klass.Name);
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table",  klass.Name);
klassAnswers=search.GetIds(api.MainTag + "answers_table",klass.Name)
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table",  klass.Name);
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table",  klass.Name);
HashSet<Integer> klassQs = new HashSet<Integer>(klassQuestions);
HashSet<Integer> klassAs = new HashSet<Integer>(klassAnswers);
List<Integer> toRemoveQ = new ArrayList<Integer>();
List<Integer> toRemoveA = new ArrayList<Integer>();
Search search = new Search();
klassQuestions=search.QuestionsInBodyTitle(api.MainTag + "_table",klass.Name)
int klassQuestions = search.QuestionsInBodyTitle(api.MainTag + "_table", klass.Name);
Search search = new Search();
methodQuestions=search.QuestionsInBodyTitle(api.MainTag + "_table",meth.Name)
int methodQuestions = search.QuestionsInBodyTitle(api.MainTag + "_table", meth.Name);
words=id.replaceAll("(?<=[A-Z])(?=[A-Z][a-z])|" + "(?<=[^A-Z])(?=[A-Z])|" + "(?<=[A-Za-z])(?=[^A-Za-z])"," ")
String words = id.replaceAll("(?<=[A-Z])(?=[A-Z][a-z])|" + "(?<=[^A-Z])(?=[A-Z])|" + "(?<=[A-Za-z])(?=[^A-Za-z])",
			      " ");
AbstractApi api = Android;
BuildDocumentation builder = new BuildDocumentation();
list=builder.PrepareApi(api)
List<ClassDocumentation> list = builder.PrepareApi(api);
List<ClassDocumentation> list = builder.PrepareApi(api);
subList=list.subList(700,list.size() - 1)
List<ClassDocumentation> subList = list.subList(700, list.size()-1);
List<ClassDocumentation> subList = list.subList(700, list.size()-1);
BaseAnalysis run = new AnalyzeDocumentation();
int classCount = 0;
HashSet<String> classSet = new HashSet<String>();
ApiAnalysis api = new ApiAnalysis();
String qTable = api.MainTag + "questions_table";
String aTable = api.MainTag + "answers_table";
ResultCache cache = new ResultCache();
Date now = new Date();
Date finish = new Date();
SerializeDocumentation serializeDoc = new SerializeDocumentation();
Search search = new Search();
StringBuilder builder = new StringBuilder();
iter=s.iterator()
Iterator iter = s.iterator();
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
StringBuilder sb = new StringBuilder(512);
Reader r = new InputStreamReader(is, "UTF-8");
int c = 0;
androidValues=TagReliability(Android)
Hashtable<Integer,QATuple> androidValues = TagReliability( Android );
Hashtable<Integer,QATuple> androidValues = TagReliability( Android );
Hashtable<Integer,QATuple> androidValues = TagReliability( Android );
javaValues=TagReliability(Java)
Hashtable<Integer,QATuple> javaValues = TagReliability( Java );
Hashtable<Integer,QATuple> javaValues = TagReliability( Java );
Hashtable<Integer,QATuple> javaValues = TagReliability( Java );
tuple=values.get(length)
QATuple tuple = values.get(length);
WordDistributions d = new WordDistributions();
Search search = new Search();
Hashtable<Integer,QATuple> hash = new Hashtable<Integer,QATuple>();
length=d.WordLength(klass.Name)
int length = d.WordLength(klass.Name);
klassQuestionsTags=search.GetIdsViaTags(this.QuestionsTempTableName,klass.Name)
List<Integer> klassQuestionsTags = search.GetIdsViaTags(this.QuestionsTempTableName, klass.Name);
List<Integer> klassQuestionsTags = search.GetIdsViaTags(this.QuestionsTempTableName, klass.Name);
klassAnswersTags=search.GetIdsViaTags(this.AnswersTempTableName,klass.Name)
List<Integer> klassAnswersTags = search.GetIdsViaTags(this.AnswersTempTableName, klass.Name);
List<Integer> klassAnswersTags = search.GetIdsViaTags(this.AnswersTempTableName, klass.Name);
klassQuestionsWords=search.GetIdsViaWordMatches(this.QuestionsTempTableName,klass.Name)
List<Integer> klassQuestionsWords = search.GetIdsViaWordMatches(this.QuestionsTempTableName, klass.Name);
List<Integer> klassQuestionsWords = search.GetIdsViaWordMatches(this.QuestionsTempTableName, klass.Name);
klassAnswersWords=search.GetIdsViaWordMatches(this.AnswersTempTableName,klass.Name)
List<Integer> klassAnswersWords = search.GetIdsViaWordMatches(this.AnswersTempTableName, klass.Name);
List<Integer> klassAnswersWords = search.GetIdsViaWordMatches(this.AnswersTempTableName, klass.Name);
BaseAnalysis run = new ClassTagReliability();
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,ThreadElement> threadMap = new Hashtable<Integer,ThreadElement>();
int codeSamplesInAnswers = 0;
int codeSamplesInAccepted = 0;
int codeSamplesInQuestions = 0;
int total = 0;
int numLines = 0;
int numBlocks = 0;
body=block.getBody()
String body = block.getBody();
lines=body.split(System.getProperty("line.separator"))
String[] lines = body.split(System.getProperty("line.separator"));
AnswerElement ans = (AnswerElement)element.Parent;
FileWriter fw = new FileWriter(outputPath);
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
int numLines = 0;
int numBlocks = 0;
body=block.getBody()
String body = block.getBody();
lines=body.split(System.getProperty("line.separator"))
String[] lines = body.split(System.getProperty("line.separator"));
AnswerElement ans = (AnswerElement)element.Parent;
AnswerElement ans = (AnswerElement)element.Parent;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
int[] levels = new int[]{1,5,20};
List<AbstractThreadFilter> filters = new ArrayList<AbstractThreadFilter>();
AtLeastNFilter atLeast2Filter = new AtLeastNFilter(new ArrayList(filters), 2);
AtLeastNFilter atLeast3Filter = new AtLeastNFilter(new ArrayList(filters), 3);
AtLeastNFilter atLeast5Filter = new AtLeastNFilter(new ArrayList(filters), 5);
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
threads=GetIncludedThreads(threadMap.values(),filter)
HashSet<Integer> threads = GetIncludedThreads(threadMap.values(), filter);
HashSet<Integer> threads = GetIncludedThreads(threadMap.values(), filter);
HashSet<Integer> included = new HashSet<Integer>();
Hashtable<Integer,Integer> coverageScore = new Hashtable<Integer,Integer>();
int coveredClasses = 0;
int includedThreads = 0;
answered=thread.Answers.size()
int answered = thread.Answers.size();
int passed = 0;
info=getDBInfoInstance().GetPostDetail(thread.Question.Id)
PostInfo info = getDBInfoInstance().GetPostDetail(thread.Question.Id);
int threadBounty = 0;
Integer amount = ans.BountyAmount;
int views = thread.ViewCount;
int total = thread.Votes;
int sum = 0;
String self = StartPercentile + ":" + EndPercentile + "";
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,Integer> Askers = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> Advisors = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> SelfAdvisors = new Hashtable<Integer,Integer>();
HashSet<Integer> All = new HashSet<Integer>();
PercentileBucket bucket0_25  = new PercentileBucket(0,25,pool);
PercentileBucket bucket25_50 = new PercentileBucket(25,50,pool);
PercentileBucket bucket50_75 = new PercentileBucket(50,75,pool);
PercentileBucket bucket75_95 = new PercentileBucket(75,95,pool);
PercentileBucket bucket95_00 = new PercentileBucket(95,100,pool);
PercentileBucket bucket90_91 = new PercentileBucket(90,91,pool);
PercentileBucket bucket91_92 = new PercentileBucket(91,92,pool);
PercentileBucket bucket92_93 = new PercentileBucket(92,93,pool);
PercentileBucket bucket93_94 = new PercentileBucket(93,94,pool);
PercentileBucket bucket94_95 = new PercentileBucket(94,95,pool);
PercentileBucket bucket95_96 = new PercentileBucket(95,96,pool);
PercentileBucket bucket96_97 = new PercentileBucket(96,97,pool);
PercentileBucket bucket97_98 = new PercentileBucket(97,98,pool);
PercentileBucket bucket98_99 = new PercentileBucket(98,99,pool);
PercentileBucket bucket99_00 = new PercentileBucket(99,100,pool);
HashSet<Integer> results = new HashSet<Integer>(info.GetCurators(PostId));
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,Integer> Askers = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> Advisors = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> SelfAdvisors = new Hashtable<Integer,Integer>();
HashSet<Integer> All = new HashSet<Integer>();
FileWriter fw = new FileWriter(outputPath);
int qContributions = Askers.containsKey(userId) ? Askers.get(userId) : 0;
int aContributions = Advisors.containsKey(userId) ? Advisors.get(userId) : 0;
int selfContributions = SelfAdvisors.containsKey(userId) ? SelfAdvisors.get(userId) : 0;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
HashSet<Integer> Askers = new HashSet<Integer>();
HashSet<Integer> Advisors = new HashSet<Integer>();
HashSet<Integer> Curators = new HashSet<Integer>();
HashSet<Integer> All = new HashSet<Integer>();
int linksInAnswers=0;
int linksInQuestions=0;
int linksInAcceptedAnswers=0;
int answerLinkOutcome=0;
int questionLinkOutcome=0;
int bothLinkOutcome=0;
int answerAcceptedLinkOutcome=0;
int codeMarks=0;
int codeSamples=0;
int wordMatches=0;
int hrefs=0;
int codeMarksThread=0;
int codeSamplesThread=0;
int wordMatchesThread=0;
int hrefsThread=0;
int threadAnswerLinks=0;
int threadQuestionLinks=0;
int threadAcceptedAnswerLinks=0;
int t_codeMarks=0;
int t_codeSamples=0;
int t_wordMatches=0;
int t_hrefs=0;
output=join(new String[]{doc.getValidatedThreads().size() + "",linksInAnswers + "",linksInQuestions + "",linksInAcceptedAnswers + "",answerLinkOutcome + "",questionLinkOutcome + "",bothLinkOutcome + "",answerAcceptedLinkOutcome + "",codeMarks + "",codeSamples + "",wordMatches + "",hrefs + "",codeMarksThread + "",codeSamplesThread + "",wordMatchesThread + "",hrefsThread + ""},",")
String output = join(new String[]
				{
					doc.getValidatedThreads().size()+"",
					linksInAnswers +"",
					linksInQuestions+"",
					linksInAcceptedAnswers+"",
					// why linkage occurred (site). 
					answerLinkOutcome+"",
					questionLinkOutcome+"",
					bothLinkOutcome+"",
					answerAcceptedLinkOutcome+"", // threads with links to accepted answer
					// types of links
					codeMarks+"",
					codeSamples+"",
					wordMatches+"",
					hrefs+"",
					// types of threads (flat)
					codeMarksThread+"",
					codeSamplesThread+"",
					wordMatchesThread+"",
					hrefsThread+""
				},",");
BaseAnalysis a = new LinkAnalysis();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
int otherMoreThanAccepted = 0;
int votedButNotAccepted = 0;
int threadVoted = 0;
int numAccepted = 0;
int maxVote = 0;
AnswerElement accepted = null;
int votes = 0;
DBInfo info = new DBInfo();
int bounty = 0;
int numWithBounty  = 0;
taggedPosts=info.Tags(tag)
List<PostInfo> taggedPosts = info.Tags(tag);
List<PostInfo> taggedPosts = info.Tags(tag);
int threadBounty = 0;
amount=info.GetBountyAmount(ans.Id)
Integer amount = info.GetBountyAmount(ans.Id);
V old = this.value;
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
Hashtable<String,HashSet<Integer>> PackageMap = new Hashtable<String,HashSet<Integer>>();
String p = doc.Klass.ParentPackage.Name;
List<MyEntry<String,Integer>> sortedPackages = new ArrayList<MyEntry<String,Integer>>();
count=PackageMap.get(key).size()
Integer count = PackageMap.get(key).size();
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,ThreadElement> threadMap = new Hashtable<Integer,ThreadElement>();
List<PostInfo> linkedPosts = new ArrayList<PostInfo>();
taggedPosts=info.Tags(tag)
List<PostInfo> taggedPosts = info.Tags(tag);
List<PostInfo> taggedPosts = info.Tags(tag);
FileWriter fw = new FileWriter(outputPath);
Visitor coverage = new Visitor();
ConsoleFormatter format = new ConsoleFormatter();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
HashSet<LinkType> types = new HashSet<LinkType>();
docs=DeserializeModel(Java)
List<ClassDocumentation> docs = DeserializeModel(Java);
List<ClassDocumentation> docs = DeserializeModel(Java);
RankDocumentation ranker = new RankDocumentation();
ExportDocumentation exporter = new ExportDocumentation();
AbstractApi api = Android;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel( api);
List<ClassDocumentation> docs = DeserializeModel( api);
AbstractApi api = Java;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
FileWriter fw = new FileWriter(outFile);
FileWriter fw = new FileWriter(outFile);
DBInfo info = new DBInfo();
FileWriter fwAnswers = new FileWriter(answersFile);
FileWriter fwQuestions = new FileWriter(questionsFile);
DBInfo info = new DBInfo();
String packName = doc.Klass.ParentPackage.Name;
String klassName = doc.Klass.Name;
int id = ans.Id;
a=info.GetPostDetail(id)
PostInfo a = info.GetPostDetail(id);
int id = thread.Question.Id;
q=info.GetPostDetail(id)
PostInfo q = info.GetPostDetail(id);
FileWriter fw = new FileWriter(outFile);
String packName = doc.Klass.ParentPackage.Name;
String klassName = doc.Klass.Name;
int id = ans.Id;
int id = thread.Question.Id;
FileWriter fw = new FileWriter(outputFile);
num=doc.getValidatedThreads().size()
int num = doc.getValidatedThreads().size();
String packName = doc.Klass.ParentPackage.Name;
String klassName = doc.Klass.Name;
ExportDataForTreemap export = new ExportDataForTreemap();
LinkDocumentation linker = new LinkDocumentation();
docs=linker.LinkAndSerializeApi(Java)
List<ClassDocumentation> docs = linker.LinkAndSerializeApi(Java);
List<ClassDocumentation> docs = linker.LinkAndSerializeApi(Java);
int coverage1 = 0;
int coverage1 = 0;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Visitor coverage = new Visitor();
ConsoleFormatter format = new ConsoleFormatter();
c=Calendar.getInstance()
Calendar c = Calendar.getInstance();
int[] levels = new int[]{1,5,20,50,100};
classDocs=DeserializeModel(Java)
List<ClassDocumentation> classDocs = DeserializeModel(Java);
List<ClassDocumentation> classDocs = DeserializeModel(Java);
Hashtable<Integer,List<ClassSaturation>> saturationData = new Hashtable<Integer,List<ClassSaturation>>();
classSats=Saturation(level,classDocs)
List<ClassSaturation> classSats = Saturation(level,classDocs);
List<ClassSaturation> classSats = Saturation(level,classDocs);
SimpleDateFormat format = new SimpleDateFormat("MM-dd-yyyy");
ArrayList<Date> sortedAllDates = new ArrayList<Date>();
startDate=format.parse("07-31-2008")
Date startDate = format.parse("07-31-2008");
endDate=format.parse("12-01-2011")
Date endDate = format.parse("12-01-2011");
Date curDate = startDate;
Hashtable<Integer,ArrayList<Integer>> saturationResults = new Hashtable<Integer,ArrayList<Integer>>();
ArrayList<Integer> results = new ArrayList<Integer>();
saturatedSet=saturationData.get(level)
List<ClassSaturation> saturatedSet = saturationData.get(level);
List<ClassSaturation> saturatedSet = saturationData.get(level);
List<ClassSaturation> saturatedByDate = new ArrayList<ClassSaturation>();
int row = 0;
ArrayList<Integer> columns = new ArrayList<Integer>();
levelSat=saturationResults.get(level)
ArrayList<Integer> levelSat = saturationResults.get(level);
ArrayList<Integer> levelSat = saturationResults.get(level);
List<ClassSaturation> saturatedSet = new ArrayList<ClassSaturation>();
Hashtable<ThreadElement,Date> dateThreadMap = new Hashtable<ThreadElement,Date>();
d=GetDateComponent(MinDateInThread(thread,classDoc.Klass))
Date d = GetDateComponent(MinDateInThread(thread,classDoc.Klass));
ArrayList<Entry<ThreadElement,Date>> sortedThreadElements = new ArrayList<Entry<ThreadElement,Date>>(dateThreadMap.entrySet());
ClassSaturation sat = new ClassSaturation();
sub=sortedThreadElements.subList(0,level)
List<Entry<ThreadElement,Date>> sub = sortedThreadElements.subList(0, level);
List<Entry<ThreadElement,Date>> sub = sortedThreadElements.subList(0, level);
c=Calendar.getInstance()
Calendar c = Calendar.getInstance();
Date minDate = new Date();
SpeedOfSaturation run = new SpeedOfSaturation();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
int numberThreadQs = 0;
int numberThreadAs = 0;
int numberQs = 0;
int numberAs = 0;
int threadQs = 0;
int threadAs = 0;
SerializeDocumentation serializer = new SerializeDocumentation();
docs=serializer.DeserializeClassDocumentation(classdocpath,api)
List<ClassDocumentation> docs = serializer.DeserializeClassDocumentation(classdocpath,api);
List<ClassDocumentation> docs = serializer.DeserializeClassDocumentation(classdocpath,api);
usageMap=ReadUsage(usageCSV)
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
classFQN=doc.Klass.getFQN()
String classFQN = doc.Klass.getFQN();
usage=usageMap.get(classFQN)
int usage = usageMap.get(classFQN);
threads=doc.getValidatedThreads().size()
int threads = doc.getValidatedThreads().size();
contents=readStream(new FileInputStream(path))
String contents = readStream(new FileInputStream(path));
lines=contents.split(System.getProperty("line.separator"))
String[] lines = contents.split(System.getProperty("line.separator"));
Hashtable<String,Integer> usageMap = new Hashtable<String,Integer>();
BaseAnalysis a = new OutputActivityAndUsage();
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
usageMap=ReadUsage(usageCSV)
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
classFQN=doc.Klass.getFQN()
String classFQN = doc.Klass.getFQN();
usage=usageMap.get(classFQN)
int usage = usageMap.get(classFQN);
threads=doc.getValidatedThreads().size()
int threads = doc.getValidatedThreads().size();
aQThreads=AnswerQuestionRatio(doc)
int[] aQThreads = AnswerQuestionRatio(doc);
int numberThreadQs = 0;
int numberThreadAs = 0;
int numberQs = 0;
int numberAs = 0;
int[] answerQuestions = new int[2];
int threadQs = 0;
int threadAs = 0;
contents=readStream(new FileInputStream(path))
String contents = readStream(new FileInputStream(path));
lines=contents.split(System.getProperty("line.separator"))
String[] lines = contents.split(System.getProperty("line.separator"));
Hashtable<String,Integer> usageMap = new Hashtable<String,Integer>();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
int firstNonZeroIndex = 0;
doc=docs.get(i)
ClassDocumentation doc = docs.get(i);
t=doc.getValidatedThreads().size()
int t = doc.getValidatedThreads().size();
int workingRange = docs.size() - firstNonZeroIndex;
int lowStart = firstNonZeroIndex;
int lowEnd = (int)(workingRange *.40) + firstNonZeroIndex;
int highStart = docs.size() - (int)(workingRange *.15);
highEnd=docs.size()
int highEnd = docs.size();
List<ClassDocumentation> lowSet = new ArrayList<ClassDocumentation>(docs.subList(lowStart, lowEnd));
List<ClassDocumentation> highSet = new ArrayList<ClassDocumentation>(docs.subList(highStart, highEnd));
List<ThreadElement> lowThreads = new ArrayList<ThreadElement>();
List<ThreadElement> highThreads = new ArrayList<ThreadElement>();
docthreads=doc.getValidatedThreads()
List<ThreadElement> docthreads = doc.getValidatedThreads();
List<ThreadElement> docthreads = doc.getValidatedThreads();
docthreads=doc.getValidatedThreads()
List<ThreadElement> docthreads = doc.getValidatedThreads();
List<ThreadElement> docthreads = doc.getValidatedThreads();
BaseAnalysis a = new SamplingForDifficultyAnalysis();
WordDistributions dist = new WordDistributions();
Hashtable<Integer,ArrayList<ClassElem>> bins = new Hashtable<Integer,ArrayList<ClassElem>>();
length=dist.WordLength(klass.Name)
int length = dist.WordLength(klass.Name);
poolSize=NonZeroQuestionsOrAnswersClasses(bins.get(b)).size()
int poolSize = NonZeroQuestionsOrAnswersClasses(bins.get(b)).size();
classPool=NonZeroQuestionsOrAnswersClasses(bins.get(b))
List<ClassElem> classPool = NonZeroQuestionsOrAnswersClasses(bins.get(b));
List<ClassElem> classPool = NonZeroQuestionsOrAnswersClasses(bins.get(b));
numClassesToInspect=Math.min((int)(percentage * classPool.size()),numQuestionsAnswers)
int numClassesToInspect = Math.min((int)( percentage * classPool.size()),numQuestionsAnswers);
List<String> inspectionPool = new ArrayList<String>();
questionId=klass.AnswerIdToParentId.get(answerId)
int questionId = klass.AnswerIdToParentId.get(answerId);
List<ClassElem> nonZero = new ArrayList<ClassElem>();
List<T> clone = new ArrayList<T>(items);
ByteArrayOutputStream os = new ByteArrayOutputStream(string.length());
GZIPOutputStream gos = new GZIPOutputStream(os);
compressed=os.toByteArray()
byte[] compressed = os.toByteArray();
final int BUFFER_SIZE = 64;
ByteArrayInputStream is = new ByteArrayInputStream(compressed);
GZIPInputStream gis = new GZIPInputStream(is, BUFFER_SIZE);
StringBuilder string = new StringBuilder();
byte[] data = new byte[BUFFER_SIZE];
int bytesRead;
set=_commonStatement.executeQuery("SELECT UserId FROM VOTES WHERE PostId =" + id)
ResultSet set = _commonStatement.executeQuery("SELECT UserId FROM VOTES WHERE PostId ="+ id);
List<Integer> list = new ArrayList<Integer>();
set=_commonStatement.executeQuery("SELECT BountyAmount FROM VOTES WHERE PostId =" + id + " AND VoteTypeId = 9")
ResultSet set = _commonStatement.executeQuery("SELECT BountyAmount FROM VOTES WHERE PostId ="+ id + " AND VoteTypeId = 9");
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id FROM POSTS WHERE Tags like '%" + tag + "%'")
ResultSet set = s.executeQuery("SELECT Id FROM POSTS WHERE Tags like '%"+ tag + "%'");
List<Integer> ids = new ArrayList<Integer>();
List<PostInfo> posts = new ArrayList<PostInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,Body,Score,AcceptedAnswerId,AnswerCount,FavoriteCount,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Id = " + id)
ResultSet set = s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,Body,Score,AcceptedAnswerId,AnswerCount,FavoriteCount,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Id = "+ id);
PostInfo info = new PostInfo();
List<UserInfo> results = new ArrayList<UserInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,DisplayName,Reputation,Age,CreationDate,LastAccessDate,Views,UpVotes,DownVotes FROM USERS")
ResultSet set = s.executeQuery("SELECT Id,DisplayName,Reputation,Age,CreationDate,LastAccessDate,Views,UpVotes,DownVotes FROM USERS");
UserInfo info = new UserInfo();
List<PostInfo> results = new ArrayList<PostInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Tags like '%" + tag + "%'")
ResultSet set = s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Tags like '%"+ tag + "%'");
PostInfo info = new PostInfo();
List<PostInfo> results = new ArrayList<PostInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,PostTypeId,ParentId,OwnerUserId,CreationDate,LastActivityDate,Body,ViewCount,Title FROM POSTS WHERE ParentId = " + parentId)
ResultSet set = s.executeQuery("SELECT Id,PostTypeId,ParentId,OwnerUserId,CreationDate,LastActivityDate,Body,ViewCount,Title FROM POSTS WHERE ParentId = " + parentId);
PostInfo info = new PostInfo();
set=s.executeQuery("SELECT Id, ParentId FROM POSTS WHERE " + "Id = " + answerId)
ResultSet set = s.executeQuery("SELECT Id, ParentId FROM POSTS WHERE " + 
					   "Id = " + answerId);
CachedRowSet rowSet = new CachedRowSetImpl();
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("tag","SELECT Id FROM " + tempTable + " WHERE "+ "tags like '%<"+ klassName+ "%>'",s)
ResultSet set = ResultCache.CachedQueryExecution("tag",
					"SELECT Id FROM "+ tempTable + " WHERE " + 
					"tags like '%<"+ klassName +"%>'",
					s);
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("word","SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle REGEXP '[[:<:]]"+ klassName+ "[[:>:]]'",s)
ResultSet set = ResultCache.CachedQueryExecution("word",
								"SELECT Id FROM "+tempTable + " WHERE " + 
								"BodyAndTitle REGEXP '[[:<:]]"+klassName+"[[:>:]]'",
								s);
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("code","SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle REGEXP '<code>[^</]*[[:<:]]"+ klassName+ "[[:>:]][^</]*</code>'",s)
ResultSet set = ResultCache.CachedQueryExecution("code",
								"SELECT Id FROM "+tempTable + " WHERE " + 
								"BodyAndTitle REGEXP '<code>[^</]*[[:<:]]"+klassName+"[[:>:]][^</]*</code>'",
								s);
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("links","SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle REGEXP '<a[^>]*>[[:<:]]"+ klassName+ "[[:>:]][^</]*</a>'",s)
ResultSet set = ResultCache.CachedQueryExecution("links",
								"SELECT Id FROM "+tempTable + " WHERE " + 
								"BodyAndTitle REGEXP '<a[^>]*>[[:<:]]"+klassName+"[[:>:]][^</]*</a>'",
								s);
File cacheDir = new File("cachedir");
File cache = new File("cachedir/_"+tempTable+"___"+klassName);
CachedRowSet rowSet = new CachedRowSetImpl();
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("tag","SELECT Id FROM " + tempTable + " WHERE "+ "tags like '%<"+ klassName+ "%>'",s)
ResultSet set = ResultCache.CachedQueryExecution("tag",
						"SELECT Id FROM "+ tempTable + " WHERE " + 
						"tags like '%<"+ klassName +"%>'",
						s);
set=s.executeQuery("SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle like '%"+ klassName+ "%'")
ResultSet set = s.executeQuery("SELECT Id FROM "+tempTable + " WHERE " + 
											   "BodyAndTitle like '%"+ klassName +"%'"
				);
FileOutputStream fos = new FileOutputStream(cache.getAbsolutePath());
ObjectOutputStream out = new ObjectOutputStream(fos);
FileInputStream fos = new FileInputStream(cache.getAbsolutePath());
ObjectInputStream in = new ObjectInputStream(fos);
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT count(*) as number FROM " + tempTable + " WHERE "+ "BodyAndTitle like '%"+ klassName+ "%'")
ResultSet set = s.executeQuery("SELECT count(*) as number FROM "+tempTable + " WHERE " + 
										   "BodyAndTitle like '%"+ klassName +"%'"
			);
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT count(*) as number FROM " + tempTable + " WHERE "+ "BodyAndTitle like '%"+ klassName+ "%'"+ "AND BodyAndTitle like '%"+ methodName+ "%'")
ResultSet set = s.executeQuery("SELECT count(*) as number FROM "+tempTable + " WHERE " + 
					   					   "BodyAndTitle like '%"+ klassName +"%'" + 
										   "AND BodyAndTitle like '%"+ methodName +"%'"
			);
char c;
char q;
StringBuffer sb;
JSONArray ja = new JSONArray();
value=getValue(x)
String value = getValue(x);
c=x.next()
char c = x.next();
ja=rowToJSONArray(x)
JSONArray ja = rowToJSONArray(x);
StringBuffer sb = new StringBuffer();
object=ja.opt(i)
Object object = ja.opt(i);
string=object.toString()
String string = object.toString();
length=string.length()
int length = string.length();
c=string.charAt(j)
char c = string.charAt(j);
JSONArray ja = new JSONArray();
jo=rowToJSONObject(names,x)
JSONObject jo = rowToJSONObject(names, x);
jo=ja.optJSONObject(0)
JSONObject jo = ja.optJSONObject(0);
names=jo.names()
JSONArray names = jo.names();
StringBuffer sb = new StringBuffer();
jo=ja.optJSONObject(i)
JSONObject jo = ja.optJSONObject(i);
char         c;
s=string.trim()
String       s = string.trim();
StringBuffer sb = new StringBuffer();
length=s.length()
int          length = s.length();
String         name;
JSONObject     jo = new JSONObject();
Object         value;
JSONTokener x = new JSONTokener(string);
StringBuffer sb = new StringBuffer();
length=string.length()
int length = string.length();
StringBuffer sb = new StringBuffer();
c=string.charAt(i)
char c = string.charAt(i);
d=JSONTokener.dehexchar(string.charAt(i + 1))
int d = JSONTokener.dehexchar(string.charAt(i + 1));
e=JSONTokener.dehexchar(string.charAt(i + 2))
int e = JSONTokener.dehexchar(string.charAt(i + 2));
JSONObject jo = new JSONObject();
JSONTokener x = new JSONTokener(string);
name=Cookie.unescape(x.nextTo('='))
String name = Cookie.unescape(x.nextTo('='));
boolean      b = false;
keys=jo.keys()
Iterator     keys = jo.keys();
String       string;
StringBuffer sb = new StringBuffer();
JSONObject     jo = new JSONObject();
HTTPTokener    x = new HTTPTokener(string);
String         token;
name=x.nextTo(':')
String name = x.nextTo(':');
keys=jo.keys()
Iterator     keys = jo.keys();
String       string;
StringBuffer sb = new StringBuffer();
char c;
char q;
StringBuffer sb = new StringBuffer();
iter=collection.iterator()
Iterator iter = collection.iterator();
length=Array.getLength(array)
int length = Array.getLength(array);
object=this.opt(index)
Object object = this.opt(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
len=this.length()
int len = this.length();
StringBuffer sb = new StringBuffer();
o=this.opt(index)
Object o = this.opt(index);
o=this.opt(index)
Object o = this.opt(index);
object=this.opt(index)
Object object = this.opt(index);
Double d = new Double(value);
o=this.opt(index)
Object o = this.opt(index);
JSONObject jo = new JSONObject();
len=this.length()
int len = this.length();
int i;
StringBuffer sb = new StringBuffer("[");
int newindent = indent + indentFactor;
boolean b = false;
len=this.length()
int     len = this.length();
v=this.myArrayList.get(i)
Object v = this.myArrayList.get(i);
String     attribute;
char       c;
String       closeTag = null;
int        i;
JSONArray  newja = null;
JSONObject newjo = null;
Object     token;
String       tagName = null;
int             i;
JSONObject   jo;
String       key;
Iterator     keys;
int             length;
Object         object;
StringBuffer sb = new StringBuffer();
String       tagName;
String       value;
StringBuffer sb = new StringBuffer();
int          i;
JSONArray    ja;
String       key;
Iterator     keys;
int          length;
Object         object;
String       tagName;
String       value;
char c;
String key;
i=map.entrySet().iterator()
Iterator i = map.entrySet().iterator();
Map.Entry e = (Map.Entry)i.next();
value=e.getValue()
Object value = e.getValue();
c=object.getClass()
Class c = object.getClass();
String name = names[i];
bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader())
ResourceBundle bundle = ResourceBundle.getBundle(baseName, locale,
                Thread.currentThread().getContextClassLoader());
keys=bundle.getKeys()
Enumeration keys = bundle.getKeys();
key=keys.nextElement()
Object key = keys.nextElement();
path=((String)key).split("\\.")
String[] path = ((String)key).split("\\.");
int last = path.length - 1;
JSONObject target = this;
String segment = path[i];
nextTarget=target.optJSONObject(segment)
JSONObject nextTarget = target.optJSONObject(segment);
object=this.opt(key)
Object object = this.opt(key);
object=this.opt(key)
Object object = this.opt(key);
string=Double.toString(d)
String string = Double.toString(d);
object=this.opt(key)
Object object = this.opt(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
length=jo.length()
int length = jo.length();
iterator=jo.keys()
Iterator iterator = jo.keys();
String[] names = new String[length];
int i = 0;
klass=object.getClass()
Class klass = object.getClass();
fields=klass.getFields()
Field[] fields = klass.getFields();
int length = fields.length;
String[] names = new String[length];
object=this.get(key)
Object object = this.get(key);
value=this.opt(key)
Object value = this.opt(key);
JSONArray ja = new JSONArray();
keys=this.keys()
Iterator  keys = this.keys();
string=number.toString()
String string = number.toString();
o=this.opt(key)
Object o = this.opt(key);
object=this.opt(key)
Object object = this.opt(key);
object=this.opt(key)
Object object = this.opt(key);
klass=bean.getClass()
Class klass = bean.getClass();
boolean includeSuperClass = klass.getClassLoader() != null;
Method[] methods = includeSuperClass
                ? klass.getMethods()
                : klass.getDeclaredMethods();
Method method = methods[i];
name=method.getName()
String name = method.getName();
String key = "";
result=method.invoke(bean,(Object[])null)
Object result = method.invoke(bean, (Object[])null);
char         b;
char         c = 0;
String       hhhh;
int          i;
len=string.length()
int          len = string.length();
StringBuffer sb = new StringBuffer(len + 4);
Double d;
b=string.charAt(0)
char b = string.charAt(0);
Long myLong = new Long(string);
JSONArray ja = new JSONArray();
keys=this.keys()
Iterator     keys = this.keys();
StringBuffer sb = new StringBuffer("{");
o=keys.next()
Object o = keys.next();
int i;
length=this.length()
int length = this.length();
keys=this.keys()
Iterator     keys = this.keys();
int          newindent = indent + indentFactor;
Object       object;
StringBuffer sb = new StringBuffer("{");
Object object;
o=((JSONString)value).toJSONString()
Object o = ((JSONString)value).toJSONString();
objectPackage=object.getClass().getPackage()
Package objectPackage = object.getClass().getPackage();
String objectPackageName = objectPackage != null
                 ? objectPackage.getName()
                 : "";
boolean  commanate = false;
keys=this.keys()
Iterator keys = this.keys();
key=keys.next()
Object key = keys.next();
value=this.map.get(key)
Object value = this.map.get(key);
int c;
n=this.next()
char n = this.next();
char[] chars = new char[n];
int pos = 0;
c=this.next()
char c = this.next();
char c;
StringBuffer sb = new StringBuffer();
StringBuffer sb = new StringBuffer();
c=this.next()
char c = this.next();
char c;
StringBuffer sb = new StringBuffer();
c=this.nextClean()
char c = this.nextClean();
String string;
StringBuffer sb = new StringBuffer();
char c;
long startIndex = this.index;
long startCharacter = this.character;
long startLine = this.line;
char m = this.stack[this.top - 1] == null ? 'a' : 'k';
StringBuffer sb = new StringBuffer();
c=string.charAt(i)
char c = string.charAt(i);
length=string.length()
int i, length = string.length();
char       c;
int        i;
JSONObject jsonobject = null;
String     string;
String     tagName;
Object     token;
initial=string.charAt(0)
char initial = string.charAt(0);
boolean negative = false;
Long myLong = new Long(string);
JSONObject jo = new JSONObject();
XMLTokener x = new XMLTokener(string);
StringBuffer sb = new StringBuffer();
int          i;
JSONArray    ja;
JSONObject   jo;
String       key;
Iterator     keys;
int          length;
String       string;
Object       value;
char         c;
int          i;
StringBuffer sb = new StringBuffer();
char         c;
StringBuffer sb;
StringBuffer sb = new StringBuffer();
c=next()
char c = next();
string=sb.toString()
String string = sb.toString();
object=entity.get(string)
Object object = entity.get(string);
char c;
char q;
char c;
char q;
StringBuffer sb;
boolean b;
char c;
int i;
int j;
int offset = 0;
length=to.length()
int length = to.length();
char[] circle = new char[length];
List<Question> list = new ArrayList<Question>();
String query = "SELECT * FROM POSTS WHERE " + BuildLikeClauses(searchTags);
set=_commonStatement.executeQuery(query)
ResultSet set = _commonStatement.executeQuery(query);
post=PopulateQuestions(set,flattenHtml)
Question post = PopulateQuestions(set, flattenHtml);
int count= 0;
doc=Jsoup.parseBodyFragment(body)
Document doc = Jsoup.parseBodyFragment(body);
List<CommentInfo> list = new ArrayList<CommentInfo>();
set=_commonStatement.executeQuery("SELECT * FROM Comments WHERE PostId=" + id)
ResultSet set = _commonStatement.executeQuery("SELECT * FROM Comments WHERE PostId="+id);
CommentInfo comment = new CommentInfo();
List<String> queryParts = new ArrayList<String>();
Question info = new Question();
List<Answer> answers = new ArrayList<Answer>();
String query = "SELECT Id,PostTypeId,ParentId,OwnerUserId,CreationDate,LastActivityDate,Body,ViewCount,Title FROM POSTS WHERE ParentId = " + parentId;
set=_commonStatement.executeQuery(query)
ResultSet set = _commonStatement.executeQuery(query);
Answer info = new Answer();
CheckoutTaggedPostsAndComments checkout = new CheckoutTaggedPostsAndComments();
posts=checkout.Query(new String[]{"<internet-explorer>","<ie>","<ie6>","<ie7>","<ie8>","<ie9>","<ie10>","<ie11>"},true)
List<Question> posts = checkout.Query(new String[]
		{
			"<internet-explorer>", "<ie>","<ie6>","<ie7>","<ie8>","<ie9>","<ie10>","<ie11>",
		}, true);
gson=new GsonBuilder().setPrettyPrinting().create()
Gson gson = new GsonBuilder().setPrettyPrinting().create();
PrintWriter writer = new PrintWriter(new FileWriter("IEData.json"));
StringBuilder builder = new StringBuilder();
iter=s.iterator()
Iterator<?> iter = s.iterator();
Iterator<?> iter = s.iterator();
String createUsers = "CREATE TABLE USERS (" +
				"Id INT NOT NULL," +
				"Reputation INT NOT NULL," +
				"CreationDate DATETIME NOT NULL," +
				"DisplayName VARCHAR(200) NOT NULL," +
				"EmailHash VARCHAR(200)," +
				"LastAccessDate DATETIME NOT NULL," + 
				"WebsiteUrl VARCHAR(200)," + 
				"Location VARCHAR(200)," + 
				"Age INT NOT NULL," + 
				"Views INT NOT NULL," + 
				"UpVotes INT NOT NULL," + 
				"DownVotes INT NOT NULL," + 
				"PRIMARY KEY (ID)" +
				")";
String createPosts = "CREATE TABLE POSTS (" +
				"Id INT NOT NULL," +
				"PostTypeId INT NOT NULL," +
				"ParentID INT NOT NULL," +
				"AcceptedAnswerId INT," +
				"CreationDate DATETIME NOT NULL," +
				"Score INT," + 
		        "ViewCount INT," +
		        "Body TEXT," +
		        "OwnerUserId INT," + 
		        "LastEditorUserId INT," + 
		        "LastEditorDisplayName VARCHAR(200)," +  
		        "LastEditDate DATETIME," +
		        "LastActivityDate DATETIME NOT NULL," + 
		        "CommunityOwnedDate DATETIME," + 
		        "ClosedDate DATETIME," + 
		        "Title VARCHAR(500) NOT NULL," +
		        "Tags VARCHAR(200) NOT NULL," + 
		        "AnswerCount INT NOT NULL," +
		        "CommentCount INT NOT NULL," +
		        "FavoriteCount INT NOT NULL," +
		        "BodyAndTitle TEXT," +
				"PRIMARY KEY (ID)" +
				")";
id=Integer.parseInt(attributes.getValue("Id").trim().replaceAll("\\D+",""))
int id = Integer.parseInt(attributes.getValue("Id").trim().replaceAll("\\D+",""));
int postType = 0;
parentId=attributes.getValue("ParentId")
String parentId = attributes.getValue("ParentId");
acceptedId=attributes.getValue("AcceptedAnswerId")
String acceptedId = attributes.getValue("AcceptedAnswerId");
creationDate=attributes.getValue("CreationDate")
String creationDate = attributes.getValue("CreationDate");
int score = 0;
viewCount=attributes.getValue("ViewCount")
String viewCount = attributes.getValue("ViewCount");
body=attributes.getValue("Body")
String body = attributes.getValue("Body");
ownerUserId=attributes.getValue("OwnerUserId")
String ownerUserId = attributes.getValue("OwnerUserId");
lastEditorUserId=attributes.getValue("LastEditorUserId")
String lastEditorUserId = attributes.getValue("LastEditorUserId");
lastEditorDisplayName=attributes.getValue("LastEditorDisplayName")
String lastEditorDisplayName = attributes.getValue("LastEditorDisplayName");
lastEditDate=attributes.getValue("LastEditDate")
String lastEditDate = attributes.getValue("LastEditDate");
lastActivityDate=attributes.getValue("LastActivityDate")
String lastActivityDate = attributes.getValue("LastActivityDate");
communityOwnedDate=attributes.getValue("CommunityOwnedDate")
String communityOwnedDate = attributes.getValue("CommunityOwnedDate");
closedDate=attributes.getValue("ClosedDate")
String closedDate = attributes.getValue("ClosedDate");
String title = attributes.getValue("Title") == null ? "" : attributes.getValue("Title");
String tags = attributes.getValue("Tags") == null ? "" : attributes.getValue("Tags");
answerCount=attributes.getValue("AnswerCount")
String answerCount = attributes.getValue("AnswerCount");
commentCount=attributes.getValue("CommentCount")
String commentCount = attributes.getValue("CommentCount");
favoriteCount=attributes.getValue("FavoriteCount")
String favoriteCount = attributes.getValue("FavoriteCount");
String[] row = new String[]{id + "",postType +"",parentId,acceptedId,creationDate, score +"",
					viewCount,body,ownerUserId,lastEditorUserId,lastEditorDisplayName,
					lastEditDate,lastActivityDate,communityOwnedDate,closedDate,title,tags,
					answerCount,commentCount,favoriteCount};
ArrayList<String> list = new ArrayList<String>();
String rowStr = join(list,"��") + "��";
StringBuilder builder = new StringBuilder();
iter=s.iterator()
Iterator iter = s.iterator();
val=iter.next()
Object val = iter.next();
id=Integer.parseInt(attributes.getValue("Id"))
int id                = Integer.parseInt(attributes.getValue("Id"));
rep=Integer.parseInt(attributes.getValue("Reputation"))
int rep               = Integer.parseInt(attributes.getValue("Reputation"));
createDate=attributes.getValue("CreationDate")
String createDate     = attributes.getValue("CreationDate");
displayName=attributes.getValue("DisplayName")
String displayName    = attributes.getValue("DisplayName");
emailHash=attributes.getValue("EmailHash")
String emailHash      = attributes.getValue("EmailHash");
lastAccessDate=attributes.getValue("LastAccessDate")
String lastAccessDate = attributes.getValue("LastAccessDate");
webUrl=attributes.getValue("WebsiteUrl")
String webUrl         = attributes.getValue("WebsiteUrl");
location=attributes.getValue("Location")
String location       = attributes.getValue("Location");
age=attributes.getValue("Age")
String age            = attributes.getValue("Age");
views=Integer.parseInt(attributes.getValue("Views"))
int views             = Integer.parseInt(attributes.getValue("Views"));
upvotes=Integer.parseInt(attributes.getValue("UpVotes"))
int upvotes           = Integer.parseInt(attributes.getValue("UpVotes"));
downvotes=Integer.parseInt(attributes.getValue("DownVotes"))
int downvotes         = Integer.parseInt(attributes.getValue("DownVotes"));
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
UsersHandler users = new UsersHandler();
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
PostsHandler posts = new PostsHandler();
String createCommentsSQL = "CREATE TABLE COMMENTS (" +
					"Id INT NOT NULL," +
					"PostId INT NOT NULL," +
					"Score INT NOT NULL," +
					"Comment TEXT NULL," + 
					"CreationDate DATETIME NOT NULL," + 
					"UserId INT NULL," + 
					"PRIMARY KEY (ID)" +
					")";
id=Integer.parseInt(attributes.getValue("Id"))
int id = Integer.parseInt(attributes.getValue("Id"));
postId=Integer.parseInt(attributes.getValue("PostId"))
int postId = Integer.parseInt(attributes.getValue("PostId"));
score=Integer.parseInt(attributes.getValue("Score"))
int score = Integer.parseInt(attributes.getValue("Score"));
comment=attributes.getValue("Text")
String comment = attributes.getValue("Text");
date=attributes.getValue("CreationDate")
String date = attributes.getValue("CreationDate");
userId=attributes.getValue("UserId")
String userId = attributes.getValue("UserId");
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
CommentsHandler comments = new CommentsHandler();
String createVotesSQL = "CREATE TABLE VOTES (" +
					"Id INT NOT NULL," +
					"PostId INT NOT NULL," +
					"VoteTypeId INT NOT NULL," +
					"CreationDate DATETIME NOT NULL," + 
					"UserId INT NULL," + 
					"BountyAmount INT NULL," + 
					"PRIMARY KEY (ID)" +
					")";
id=Integer.parseInt(attributes.getValue("Id"))
int id = Integer.parseInt(attributes.getValue("Id"));
postId=Integer.parseInt(attributes.getValue("PostId"))
int postId = Integer.parseInt(attributes.getValue("PostId"));
voteTypeId=Integer.parseInt(attributes.getValue("VoteTypeId"))
int voteTypeId = Integer.parseInt(attributes.getValue("VoteTypeId"));
date=attributes.getValue("CreationDate")
String date = attributes.getValue("CreationDate");
userId=attributes.getValue("UserId")
String userId = attributes.getValue("UserId");
bountyAmount=attributes.getValue("BountyAmount")
String bountyAmount = attributes.getValue("BountyAmount");
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
VotesHandler users = new VotesHandler();

Diff of 2581765fb3c57fb378995d11d9206fecbadbf6eb and add5034f4ac0f46d741027cb2ac6dcc27a67c73c:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 2581765fb3c57fb378995d11d9206fecbadbf6eb to add5034f4ac0f46d741027cb2ac6dcc27a67c73c

************Analysis complete************
Added generics to repository anacrowd = 0

Chris Parnin added type argument method count = 0
	--> recency = null
Chris Parnin added wildcard count = 0
	--> recency = null
Chris Parnin added type declaration count = 0
	--> recency = null
Chris Parnin added type parameter method count = 0
	--> recency = null
Chris Parnin added type parameter field count = 0
	--> recency = null
Chris Parnin added diamond count = 0
	--> recency = null
Chris Parnin added method invocation count = 0
	--> recency = null
Chris Parnin added implicit method invocation count = 0
	--> recency = null
Chris Parnin added class instantiation count = 0
	--> recency = null
Chris Parnin added nested count = 0
	--> recency = null
Chris Parnin added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository anacrowd = 0

Chris Parnin added type argument method count = 0
	--> recency = null
Chris Parnin added wildcard count = 0
	--> recency = null
Chris Parnin added type declaration count = 0
	--> recency = null
Chris Parnin added type parameter method count = 0
	--> recency = null
Chris Parnin added type parameter field count = 0
	--> recency = null
Chris Parnin added diamond count = 0
	--> recency = null
Chris Parnin added method invocation count = 0
	--> recency = null
Chris Parnin added implicit method invocation count = 0
	--> recency = null
Chris Parnin added class instantiation count = 0
	--> recency = null
Chris Parnin added nested count = 0
	--> recency = null
Chris Parnin added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository anacrowd = 0

Chris Parnin added type argument method count = 0
	--> recency = null
Chris Parnin added wildcard count = 0
	--> recency = null
Chris Parnin added type declaration count = 0
	--> recency = null
Chris Parnin added type parameter method count = 0
	--> recency = null
Chris Parnin added type parameter field count = 0
	--> recency = null
Chris Parnin added diamond count = 0
	--> recency = null
Chris Parnin added method invocation count = 0
	--> recency = null
Chris Parnin added implicit method invocation count = 0
	--> recency = null
Chris Parnin added class instantiation count = 0
	--> recency = null
Chris Parnin added nested count = 0
	--> recency = null
Chris Parnin added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository anacrowd = 0

Chris Parnin added type argument method count = 0
	--> recency = null
Chris Parnin added wildcard count = 0
	--> recency = null
Chris Parnin added type declaration count = 0
	--> recency = null
Chris Parnin added type parameter method count = 0
	--> recency = null
Chris Parnin added type parameter field count = 0
	--> recency = null
Chris Parnin added diamond count = 0
	--> recency = null
Chris Parnin added method invocation count = 0
	--> recency = null
Chris Parnin added implicit method invocation count = 0
	--> recency = null
Chris Parnin added class instantiation count = 0
	--> recency = null
Chris Parnin added nested count = 0
	--> recency = null
Chris Parnin added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository anacrowd = 0

Chris Parnin added type argument method count = 0
	--> recency = null
Chris Parnin added wildcard count = 0
	--> recency = null
Chris Parnin added type declaration count = 0
	--> recency = null
Chris Parnin added type parameter method count = 0
	--> recency = null
Chris Parnin added type parameter field count = 0
	--> recency = null
Chris Parnin added diamond count = 0
	--> recency = null
Chris Parnin added method invocation count = 0
	--> recency = null
Chris Parnin added implicit method invocation count = 0
	--> recency = null
Chris Parnin added class instantiation count = 0
	--> recency = null
Chris Parnin added nested count = 0
	--> recency = null
Chris Parnin added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository anacrowd = 0

Chris Parnin added type argument method count = 0
	--> recency = null
Chris Parnin added wildcard count = 0
	--> recency = null
Chris Parnin added type declaration count = 0
	--> recency = null
Chris Parnin added type parameter method count = 0
	--> recency = null
Chris Parnin added type parameter field count = 0
	--> recency = null
Chris Parnin added diamond count = 0
	--> recency = null
Chris Parnin added method invocation count = 0
	--> recency = null
Chris Parnin added implicit method invocation count = 0
	--> recency = null
Chris Parnin added class instantiation count = 0
	--> recency = null
Chris Parnin added nested count = 0
	--> recency = null
Chris Parnin added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository anacrowd = 0

Chris Parnin added type argument method count = 0
	--> recency = null
Chris Parnin added wildcard count = 0
	--> recency = null
Chris Parnin added type declaration count = 0
	--> recency = null
Chris Parnin added type parameter method count = 0
	--> recency = null
Chris Parnin added type parameter field count = 0
	--> recency = null
Chris Parnin added diamond count = 0
	--> recency = null
Chris Parnin added method invocation count = 0
	--> recency = null
Chris Parnin added implicit method invocation count = 0
	--> recency = null
Chris Parnin added class instantiation count = 0
	--> recency = null
Chris Parnin added nested count = 0
	--> recency = null
Chris Parnin added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository anacrowd = 0

Chris Parnin added type argument method count = 0
	--> recency = null
Chris Parnin added wildcard count = 0
	--> recency = null
Chris Parnin added type declaration count = 0
	--> recency = null
Chris Parnin added type parameter method count = 0
	--> recency = null
Chris Parnin added type parameter field count = 0
	--> recency = null
Chris Parnin added diamond count = 0
	--> recency = null
Chris Parnin added method invocation count = 0
	--> recency = null
Chris Parnin added implicit method invocation count = 0
	--> recency = null
Chris Parnin added class instantiation count = 0
	--> recency = null
Chris Parnin added nested count = 0
	--> recency = null
Chris Parnin added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository anacrowd = 0

Chris Parnin added type argument method count = 0
	--> recency = null
Chris Parnin added wildcard count = 0
	--> recency = null
Chris Parnin added type declaration count = 0
	--> recency = null
Chris Parnin added type parameter method count = 0
	--> recency = null
Chris Parnin added type parameter field count = 0
	--> recency = null
Chris Parnin added diamond count = 0
	--> recency = null
Chris Parnin added method invocation count = 0
	--> recency = null
Chris Parnin added implicit method invocation count = 0
	--> recency = null
Chris Parnin added class instantiation count = 0
	--> recency = null
Chris Parnin added nested count = 0
	--> recency = null
Chris Parnin added bounds count = 0
	--> recency = null

****Parsing for addition at revision fa79b83495e83efa783f03abab994f4e7524c9a7****

Added AbstractApi.java to .\anacrowd\ repository source files.
Added AndroidApi.java to .\anacrowd\ repository source files.
Added Collision.java to .\anacrowd\ repository source files.
Added ClassElem.java to .\anacrowd\ repository source files.
Added MethodElem.java to .\anacrowd\ repository source files.
Added PackageElem.java to .\anacrowd\ repository source files.
Added GWTApi.java to .\anacrowd\ repository source files.
Added JavaApi.java to .\anacrowd\ repository source files.
Added ApiParser.java to .\anacrowd\ repository source files.
Added ResultCache.java to .\anacrowd\ repository source files.
Added CrowdAnalysis.java to .\anacrowd\ repository source files.
Added ViewCountAnalysis.java to .\anacrowd\ repository source files.
Added ClassDocumentation.java to .\anacrowd\ repository source files.
Added ClassIndex.java to .\anacrowd\ repository source files.
Added AnswerElement.java to .\anacrowd\ repository source files.
Added ClusteredLinkElement.java to .\anacrowd\ repository source files.
Added CodeSampleElement.java to .\anacrowd\ repository source files.
Added CoOccurringLinks.java to .\anacrowd\ repository source files.
Added LinkElement.java to .\anacrowd\ repository source files.
Added LinkElement_old.java to .\anacrowd\ repository source files.
Added PostElement.java to .\anacrowd\ repository source files.
Added QuestionElement.java to .\anacrowd\ repository source files.
Added ThreadElement.java to .\anacrowd\ repository source files.
Added BuildDocumentation.java to .\anacrowd\ repository source files.
Added ExportDocumentation.java to .\anacrowd\ repository source files.
Added LinkDocumentation.java to .\anacrowd\ repository source files.
Added RankDocumentation.java to .\anacrowd\ repository source files.
Added SerializeDocumentation.java to .\anacrowd\ repository source files.
Added CachedPostBody.java to .\anacrowd\ repository source files.
Added CachePostBodyIndex.java to .\anacrowd\ repository source files.
Added LinkSpan.java to .\anacrowd\ repository source files.
Added LinkValidation.java to .\anacrowd\ repository source files.
Added ApiInfo.java to .\anacrowd\ repository source files.
Added CoverageData.java to .\anacrowd\ repository source files.
Added ExportCoverage.java to .\anacrowd\ repository source files.
Added ExportPosts.java to .\anacrowd\ repository source files.
Added ExportUsers.java to .\anacrowd\ repository source files.
Added Post2Api.java to .\anacrowd\ repository source files.
Added ConsoleFormatter.java to .\anacrowd\ repository source files.
Added Visitor.java to .\anacrowd\ repository source files.
Added WordDistributions.java to .\anacrowd\ repository source files.
Added test.java to .\anacrowd\ repository source files.
Added AnalyzeDocumentation.java to .\anacrowd\ repository source files.
Added ApiAnalysis.java to .\anacrowd\ repository source files.
Added BaseAnalysis.java to .\anacrowd\ repository source files.
Added ClassTagReliability.java to .\anacrowd\ repository source files.
Added CodeSampleAnalysis.java to .\anacrowd\ repository source files.
Added CodeSampleStats.java to .\anacrowd\ repository source files.
Added FilterAnalysis.java to .\anacrowd\ repository source files.
Added AbstractThreadFilter.java to .\anacrowd\ repository source files.
Added AcceptedFilter.java to .\anacrowd\ repository source files.
Added AnsweredFilter.java to .\anacrowd\ repository source files.
Added AtLeastNFilter.java to .\anacrowd\ repository source files.
Added BountiedFilter.java to .\anacrowd\ repository source files.
Added FavoritedFilter.java to .\anacrowd\ repository source files.
Added ViewedFilter.java to .\anacrowd\ repository source files.
Added VotedFilter.java to .\anacrowd\ repository source files.
Added WhoContributes.java to .\anacrowd\ repository source files.
Added ApiInfo.java to .\anacrowd\ repository source files.
Added LinkAnalysis.java to .\anacrowd\ repository source files.
Added OtherRatings.java to .\anacrowd\ repository source files.
Added CalculateBountiesForThreads.java to .\anacrowd\ repository source files.
Added MyEntry.java to .\anacrowd\ repository source files.
Added ThreadInPackages.java to .\anacrowd\ repository source files.
Added ThreadStats.java to .\anacrowd\ repository source files.
Added Driver.java to .\anacrowd\ repository source files.
Added FindLinkExamples.java to .\anacrowd\ repository source files.
Added RankedClassDocumentation.java to .\anacrowd\ repository source files.
Added ExportDataForTreemap.java to .\anacrowd\ repository source files.
Added SerializeJson.java to .\anacrowd\ repository source files.
Added RunJavaMethodCoverage.java to .\anacrowd\ repository source files.
Added SpeedOfSaturation.java to .\anacrowd\ repository source files.
Added DifficultySites.java to .\anacrowd\ repository source files.
Added OutputActivityAndUsage.java to .\anacrowd\ repository source files.
Added PredictorAnalysis.java to .\anacrowd\ repository source files.
Added SamplingForDifficultyAnalysis.java to .\anacrowd\ repository source files.
Added SampleByWordNumber.java to .\anacrowd\ repository source files.
Added DBInfo.java to .\anacrowd\ repository source files.
Added Search.java to .\anacrowd\ repository source files.
Added CDL.java to .\anacrowd\ repository source files.
Added Cookie.java to .\anacrowd\ repository source files.
Added CookieList.java to .\anacrowd\ repository source files.
Added HTTP.java to .\anacrowd\ repository source files.
Added HTTPTokener.java to .\anacrowd\ repository source files.
Added JSONArray.java to .\anacrowd\ repository source files.
Added JSONException.java to .\anacrowd\ repository source files.
Added JSONML.java to .\anacrowd\ repository source files.
Added JSONObject.java to .\anacrowd\ repository source files.
Added JSONString.java to .\anacrowd\ repository source files.
Added JSONStringer.java to .\anacrowd\ repository source files.
Added JSONTokener.java to .\anacrowd\ repository source files.
Added JSONWriter.java to .\anacrowd\ repository source files.
Added XML.java to .\anacrowd\ repository source files.
Added XMLTokener.java to .\anacrowd\ repository source files.
Added CheckoutTaggedPostsAndComments.java to .\anacrowd\ repository source files.
Added DBImport.java to .\anacrowd\ repository source files.
Added ImportComments.java to .\anacrowd\ repository source files.
Added ImportVotes.java to .\anacrowd\ repository source files.
Hashtable<String,Integer> classSet = new Hashtable<String,Integer>();
HashSet<String> uniqueClasses = new HashSet<String>();
HashSet<String> uniqueMethods = new HashSet<String>();
HashSet<String> overloadedMethods = new HashSet<String>();
int classCount = 0;
int methodCount = 0;
Hashtable<String,PackageElem> packages = new Hashtable<String,PackageElem>();
contents=readStream(new FileInputStream(path))
String contents = readStream(new FileInputStream(path));
lines=contents.split(System.getProperty("line.separator"))
String[] lines = contents.split(System.getProperty("line.separator"));
tuple=line.split("\t")
String[] tuple = line.split("\t");
namespace=tuple[0].trim()
String namespace = tuple[0].trim();
className=tuple[1].trim()
String className = tuple[1].trim();
PackageElem p = new PackageElem();
ClassElem klass = new ClassElem();
StringBuilder sb = new StringBuilder(512);
Reader r = new InputStreamReader(is, "UTF-8");
int c = 0;
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
name=attributes.getValue("name")
String name = attributes.getValue("name");
name=attributes.getValue("name")
String name = attributes.getValue("name");
name=attributes.getValue("name")
String name = attributes.getValue("name");
isPublic=attributes.getValue("visibility").equals("public")
boolean isPublic = attributes.getValue("visibility").equals("public");
MethodElem meth = new MethodElem();
String cacheDirPath = "cachedir/";
File cacheDir = new File(cacheDirPath);
bytesOfMessage=query.getBytes("UTF-8")
byte[] bytesOfMessage = query.getBytes("UTF-8");
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
thedigest=md.digest(bytesOfMessage)
byte[] thedigest = md.digest(bytesOfMessage);
StringBuilder builder = new StringBuilder();
String cacheDirPath = "cachedir/" + searchMethod + "/";
File cacheDir = new File(cacheDirPath);
encodedFilePath=EncodeQuery(query)
String encodedFilePath = EncodeQuery(query);
String fileName = cacheDirPath + encodedFilePath;
File cache = new File(fileName);
CachedRowSet rowSet = new CachedRowSetImpl();
set=s.executeQuery(query)
ResultSet set = s.executeQuery(query);
FileOutputStream fos = new FileOutputStream(cache.getAbsolutePath());
ObjectOutputStream out = new ObjectOutputStream(fos);
FileInputStream fos = new FileInputStream(cache.getAbsolutePath());
ObjectInputStream in = new ObjectInputStream(fos);
Search info = new Search();
String tag = api.MainTag;
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
List<CoverageEvent> coverageEvents = new ArrayList<CoverageEvent>();
methQuestions=info.GetIds(qTable,klass.Name)
List<Integer> methQuestions = info.GetIds(qTable,  klass.Name);
List<Integer> methQuestions = info.GetIds(qTable,  klass.Name);
CoverageEvent evt = new CoverageEvent();
rs=s.executeQuery("SELECT CreationDate,OwnerUserId FROM " + qTable + " "+ "WHERE Id = "+ id)
ResultSet rs = s.executeQuery(
								"SELECT CreationDate,OwnerUserId FROM " + qTable + " " + 
								"WHERE Id = " + id
						);
HashSet<Date> etimes = new HashSet<Date>();
List<Date> times =  new ArrayList<Date>(etimes);
Hashtable<String,Integer> coverage = new Hashtable<String,Integer>();
HashSet<Integer> users = new HashSet<Integer>();
HashSet<Integer> crowd = new HashSet<Integer>();
List<CoverageEvent> relevantEvents = new ArrayList<CoverageEvent>();
String key = pack.Name +":"+ klass.Name;
int count = 0;
Search info = new Search();
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
Hashtable<Integer,UserQA> dict = new Hashtable<Integer,UserQA>();
questionSet=s.executeQuery("SELECT OwnerUserId,Count(*) as num FROM " + qTable + " "+ "GROUP BY OwnerUserId")
ResultSet questionSet = s.executeQuery(
					"SELECT OwnerUserId,Count(*) as num FROM " + qTable + " " + 
					"GROUP BY OwnerUserId"
			);
userId=questionSet.getInt("OwnerUserId")
int userId = questionSet.getInt("OwnerUserId");
numQs=questionSet.getInt("num")
int numQs = questionSet.getInt("num");
answerSet=s.executeQuery("SELECT OwnerUserId,Count(*) as num FROM " + aTable + " "+ "GROUP BY OwnerUserId")
ResultSet answerSet = s.executeQuery(
					"SELECT OwnerUserId,Count(*) as num FROM " + aTable + " " + 
					"GROUP BY OwnerUserId"
			);
userId=answerSet.getInt("OwnerUserId")
int userId = answerSet .getInt("OwnerUserId");
numAs=answerSet.getInt("num")
int numAs = answerSet .getInt("num");
userSet=s.executeQuery("SELECT UpVotes,DownVotes,Age,CreationDate,LastAccessDate,Reputation FROM USERS " + "WHERE Id = " + key)
ResultSet userSet = s.executeQuery(
						"SELECT UpVotes,DownVotes,Age,CreationDate,LastAccessDate,Reputation FROM USERS " + 
						"WHERE Id = " + key
				);
Search info = new Search();
String tag = api.MainTag;
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
FileWriter fstream = new FileWriter("C:\\method_output.txt");
PrintWriter out = new PrintWriter(fstream);
int counter = 0;
methodQuestionIds=info.GetIds(qTable,methodElem.Name)
List<Integer> methodQuestionIds = info.GetIds(qTable, methodElem.Name);
List<Integer> methodQuestionIds = info.GetIds(qTable, methodElem.Name);
int acceptedAnswers = 0;
int viewCounts = 0;
int scores = 0;
int answerCounts = 0;
int commentCounts = 0;
int favoriteCounts = 0;
question=s.executeQuery("SELECT * FROM POSTS " + "WHERE Id = " + id)
ResultSet question = s.executeQuery(
									"SELECT * FROM POSTS " +
											"WHERE Id = " + id
									);
Search info = new Search();
String tag = api.MainTag;
String qTable = tag + "questions_table";
String aTable = tag + "answers_table";
conn=info.getConnection()
Connection conn = info.getConnection();
s=conn.createStatement()
Statement s = conn.createStatement();
FileWriter fstream = new FileWriter("C:\\noDuplicatesOutput.txt");
PrintWriter out = new PrintWriter(fstream);
Set<Integer> allKlassQuestionIds = new HashSet<Integer>();
int counter = 0;
klassQuestionIds=info.GetIds(qTable,klass.Name)
List<Integer> klassQuestionIds = info.GetIds(qTable,  klass.Name);
List<Integer> klassQuestionIds = info.GetIds(qTable,  klass.Name);
int acceptedAnswers = 0;
int viewCounts = 0;
int scores = 0;
int answerCounts = 0;
int commentCounts = 0;
int favoriteCounts = 0;
int counter2 = 0;
question=s.executeQuery("SELECT * FROM POSTS " + "WHERE Id = " + id)
ResultSet question = s.executeQuery(
						"SELECT * FROM POSTS " +
					    "WHERE Id = " + id
			    );
List<LinkElement> hrefs = new ArrayList<LinkElement>();
links=thread.Question.getHrefs(this.Klass)
List<LinkElement> links = thread.Question.getHrefs(this.Klass);
List<LinkElement> links = thread.Question.getHrefs(this.Klass);
List<CodeSampleElement> samples = new ArrayList<CodeSampleElement>();
elem=thread.Question.getCodeSample()
CodeSampleElement elem = thread.Question.getCodeSample();
List<LinkSpan> validatedLinks = new ArrayList<LinkSpan>();
List<ThreadElement> validatedThreads = new ArrayList<ThreadElement>();
ByteArrayOutputStream os = new ByteArrayOutputStream(string.length());
GZIPOutputStream gos = new GZIPOutputStream(os);
compressed=os.toByteArray()
byte[] compressed = os.toByteArray();
final int BUFFER_SIZE = 64;
ByteArrayInputStream is = new ByteArrayInputStream(compressed);
GZIPInputStream gis = new GZIPInputStream(is, BUFFER_SIZE);
StringBuilder string = new StringBuilder();
byte[] data = new byte[BUFFER_SIZE];
int bytesRead;
you=ClassIndex.getInstance().SampleMap.get(Id)
CodeSampleElement you = ClassIndex.getInstance().SampleMap.get( Id );
LinkDocumentation linker = new LinkDocumentation();
LinkDocumentation linker = new LinkDocumentation();
doc=linker.LinkOnlyClass(api,klass)
ClassDocumentation doc = linker.LinkOnlyClass(api, klass);
info=db.GetPostDetail(thread.Question.Id)
PostInfo info = db.GetPostDetail(thread.Question.Id);
ansInfo=db.GetPostDetail(ans.Id)
PostInfo ansInfo = db.GetPostDetail(ans.Id);
info=db.GetPostDetail(code.Parent.Id)
PostInfo info = db.GetPostDetail(code.Parent.Id);
Hashtable<String,ClusteredLinkElement> linkCount = new Hashtable<String,ClusteredLinkElement>();
doc=Jsoup.parseBodyFragment(body)
Document doc = Jsoup.parseBodyFragment(body);
codeSnippets=doc.getElementsByTag("code")
Elements codeSnippets = doc.getElementsByTag("code");
List<CodeBlock> blocks = new ArrayList<CodeBlock>();
CodeBlock block = new CodeBlock();
text=e.text()
String text = e.text();
p=Pattern.compile("\\b" + Pattern.quote(klass) + "\\b")
Pattern p = Pattern.compile("\\b"+Pattern.quote(klass)+"\\b");
matcher=p.matcher(text)
Matcher matcher = p.matcher(text);
int start=0;
doc=Jsoup.parseBodyFragment(body)
Document doc = Jsoup.parseBodyFragment(body);
codeSnippets=doc.getElementsByTag("a")
Elements codeSnippets = doc.getElementsByTag("a");
List<String> links = new ArrayList<String>();
blocks=this.ParseFragments(Test,"Document")
List<CodeBlock> blocks = this.ParseFragments(Test,"Document");
List<CodeBlock> blocks = this.ParseFragments(Test,"Document");
links=this.ParseLinks(TestLinks,"MessageDigest")
List<String> links = this.ParseLinks(TestLinks, "MessageDigest");
List<String> links = this.ParseLinks(TestLinks, "MessageDigest");
BuildDocumentation b = new BuildDocumentation();
doc=b.BuildForClass(new AndroidApi(),"Drawable")
ClassDocumentation doc = b.BuildForClass(new AndroidApi(),"Drawable");
RankDocumentation ranker = new RankDocumentation();
ExportDocumentation exporter = new ExportDocumentation();
top5code=doc.getCodeSampleElements().subList(0,Math.min(doc.getCodeSampleElements().size(),5))
List<CodeSampleElement> top5code = doc.getCodeSampleElements().subList(0, 
				Math.min(doc.getCodeSampleElements().size(), 5));
List<CodeSampleElement> top5code = doc.getCodeSampleElements().subList(0, 
				Math.min(doc.getCodeSampleElements().size(), 5));
top10links=doc.ClusteredLinks.subList(0,Math.min(doc.ClusteredLinks.size(),10))
List<ClusteredLinkElement> top10links = doc.ClusteredLinks.subList(0, 
				Math.min(doc.ClusteredLinks.size(),10));
List<ClusteredLinkElement> top10links = doc.ClusteredLinks.subList(0, 
				Math.min(doc.ClusteredLinks.size(),10));
top5questions=doc.ThreadElements.subList(0,Math.min(doc.ThreadElements.size(),5))
List<ThreadElement> top5questions = doc.ThreadElements.subList(0, 
				Math.min(doc.ThreadElements.size(),5));
List<ThreadElement> top5questions = doc.ThreadElements.subList(0, 
				Math.min(doc.ThreadElements.size(),5));
top5links=top10links.subList(0,Math.min(top10links.size(),5))
List<ClusteredLinkElement> top5links = top10links.subList(0, 
				Math.min(top10links.size(),5));
List<ClusteredLinkElement> top5links = top10links.subList(0, 
				Math.min(top10links.size(),5));
List<ClusteredLinkElement> removeMe = new ArrayList<ClusteredLinkElement>();
a=getDomainName(link.Href)
String a = getDomainName(link.Href);
b=getDomainName(other.Href)
String b = getDomainName(other.Href);
URL u;
ClassDocumentation klassDoc = new ClassDocumentation();
WordDistributions wd = new WordDistributions();
List<Integer> wordQMatches = new ArrayList<Integer>();
List<Integer> wordAMatches = new ArrayList<Integer>();
String klassName = klass.Name;
codeQMatches=search.GetIdsViaCodeMatches(this.QuestionsTempTableName,klassName)
List<Integer> codeQMatches = search.GetIdsViaCodeMatches(this.QuestionsTempTableName, klassName);
List<Integer> codeQMatches = search.GetIdsViaCodeMatches(this.QuestionsTempTableName, klassName);
linkQMatches=search.GetIdsViaLinkMatches(this.QuestionsTempTableName,klassName)
List<Integer> linkQMatches = search.GetIdsViaLinkMatches(this.QuestionsTempTableName, klassName);
List<Integer> linkQMatches = search.GetIdsViaLinkMatches(this.QuestionsTempTableName, klassName);
codeAMatches=search.GetIdsViaCodeMatches(this.AnswersTempTableName,klassName)
List<Integer> codeAMatches = search.GetIdsViaCodeMatches(this.AnswersTempTableName, klassName);
List<Integer> codeAMatches = search.GetIdsViaCodeMatches(this.AnswersTempTableName, klassName);
linkAMatches=search.GetIdsViaLinkMatches(this.AnswersTempTableName,klassName)
List<Integer> linkAMatches = search.GetIdsViaLinkMatches(this.AnswersTempTableName, klassName);
List<Integer> linkAMatches = search.GetIdsViaLinkMatches(this.AnswersTempTableName, klassName);
HashSet<Integer> ansSet = new HashSet<Integer>();
Hashtable<Integer,Integer> AnswerIdToParentId = new Hashtable<Integer,Integer>();
HashSet<Integer> qSet = new HashSet<Integer>();
List<Integer> myThreads = new ArrayList<Integer>();
ThreadElement thread = new ThreadElement();
info=db.GetPostDetail(thread.Question.Id)
PostInfo info = db.GetPostDetail(thread.Question.Id);
LinkValidation validate = new LinkValidation();
List<LinkElement> hrefs = new ArrayList<LinkElement>();
spans=validate.Validate(klass,thread.Question,thread.Question.Title,hrefs)
List<LinkSpan> spans = validate.Validate(klass, thread.Question, thread.Question.Title, hrefs);
List<LinkSpan> spans = validate.Validate(klass, thread.Question, thread.Question.Title, hrefs);
sample=GetOrBuildCodeSample(klass,thread.Question,spans)
CodeSampleElement sample = GetOrBuildCodeSample(klass, thread.Question, spans);
parentQ=AnswerIdToParentId.get(answerId)
int parentQ = AnswerIdToParentId.get( answerId );
ThreadElement thread = new ThreadElement();
tinfo=db.GetPostDetail(parentQ)
PostInfo tinfo = db.GetPostDetail(parentQ);
AnswerElement ans = new AnswerElement();
LinkValidation validate = new LinkValidation();
List<LinkElement> hrefs = new ArrayList<LinkElement>();
spans=validate.Validate(klass,ans,null,hrefs)
List<LinkSpan> spans = validate.Validate(klass, ans,null, hrefs);
List<LinkSpan> spans = validate.Validate(klass, ans,null, hrefs);
sample=GetOrBuildCodeSample(klass,ans,spans)
CodeSampleElement sample = GetOrBuildCodeSample(klass, ans, spans);
CodeSampleElement codeSample = null;
Hashtable<Integer,CodeBlock> blocks = new Hashtable<Integer,CodeBlock>();
postBody=CachePostBodyIndex.getInstance().ParseOrGet(parent)
CachedPostBody postBody = CachePostBodyIndex.getInstance().ParseOrGet(parent);
CodeBlock block = new CodeBlock();
int b = 0;
String qTable = api.MainTag + "questions_table";
String aTable = api.MainTag + "answers_table";
ClassElem k = new ClassElem();
doc=Link(k,new Hashtable<Integer,ThreadElement>())
ClassDocumentation doc = Link(k, new Hashtable<Integer,ThreadElement>());
List<ClassDocumentation>  list = new ArrayList<ClassDocumentation>();
Hashtable<Integer,ThreadElement> ThreadMap = new Hashtable<Integer,ThreadElement>();
doc=Link(klass,ThreadMap)
ClassDocumentation doc = Link(klass, ThreadMap);
SerializeDocumentation serializer = new SerializeDocumentation();
List<ClassDocumentation>  list = new ArrayList<ClassDocumentation>();
Hashtable<Integer,ThreadElement> ThreadMap = new Hashtable<Integer,ThreadElement>();
doc=Link(klass,ThreadMap)
ClassDocumentation doc = Link(klass,ThreadMap);
String path = api.ClassDocPath;
SerializeDocumentation serializer = new SerializeDocumentation();
List<ClassDocumentation>  list = new ArrayList<ClassDocumentation>();
File outputFile = new File(path + java.io.File.separator + klass.ParentPackage.Name + "." + klass.Name + ".json");
doc=Link(klass,ClassIndex.getInstance().ThreadMap)
ClassDocumentation doc = Link(klass, ClassIndex.getInstance().ThreadMap);
Hashtable<String,ClusteredLinkElement> linkCount = new Hashtable<String,ClusteredLinkElement>();
ClusteredLinkElement clustered = new ClusteredLinkElement();
List<ClusteredLinkElement> elements = new ArrayList<ClusteredLinkElement>(linkCount.values());
List<ClassDocumentation> list = new ArrayList<ClassDocumentation>();
File filePath = new File(path + File.separator + pack.Name + "."  + klass.Name + ".json");
StringBuilder sb = new StringBuilder(512);
Reader r = new InputStreamReader(is, "UTF-8");
int c = 0;
serializedObj=Serialize(doc)
String serializedObj = Serialize(doc);
File outputDir = new File(path);
FileWriter writer = new FileWriter(outputFile);
JSONObject obj = new JSONObject();
List<Integer> threadIds = new ArrayList<Integer>();
List<Integer> sampleIds = new ArrayList<Integer>();
List<JSONObject> links = new ArrayList<JSONObject>();
List<JSONObject> hrefs = new ArrayList<JSONObject>();
JSONObject obj = new JSONObject(source);
ClassDocumentation doc = new ClassDocumentation();
array=obj.getJSONArray("ThreadElements")
JSONArray array = obj.getJSONArray("ThreadElements");
id=array.getInt(i)
int id = array.getInt(i);
links=obj.getJSONArray("Links")
JSONArray links = obj.getJSONArray("Links");
jsonLink=links.getJSONObject(i)
JSONObject jsonLink = links.getJSONObject(i);
link=DeserializeLinkSpan(jsonLink)
LinkSpan link = DeserializeLinkSpan(jsonLink);
tId=jsonLink.getInt("Thread")
int tId = jsonLink.getInt("Thread");
pId=jsonLink.getInt("Post")
int pId = jsonLink.getInt("Post");
key=ClassIndex.getKey(tId,pId,doc.Klass)
String key = ClassIndex.getKey(tId, pId, doc.Klass);
hrefs=obj.getJSONArray("Hrefs")
JSONArray hrefs = obj.getJSONArray("Hrefs");
jsonHref=hrefs.getJSONObject(i)
JSONObject jsonHref = hrefs.getJSONObject(i);
link=DeserializeHref(jsonHref)
LinkElement link = DeserializeHref(jsonHref);
tId=jsonHref.getInt("Thread")
int tId = jsonHref.getInt("Thread");
pId=jsonHref.getInt("Post")
int pId = jsonHref.getInt("Post");
key=ClassIndex.getKey(tId,pId,doc.Klass)
String key = ClassIndex.getKey(tId, pId, doc.Klass);
List<JSONObject> codeSampleObjects = new ArrayList<JSONObject>();
List<CodeSampleElement> samples = new ArrayList<CodeSampleElement>();
JSONObject obj = new JSONObject();
List<JSONObject> blockObjects = new ArrayList<JSONObject>();
CodeSampleElement code = new CodeSampleElement();
blockObjectsJson=obj.getJSONArray("Blocks")
JSONArray blockObjectsJson = obj.getJSONArray("Blocks");
List<CodeBlock> blockObjects = new ArrayList<CodeBlock>();
JSONObject obj = new JSONObject();
PostElement post = new PostElement();
JSONObject obj = new JSONObject();
List<JSONObject> spanObjects = new ArrayList<JSONObject>();
CodeBlock block = new CodeBlock();
List<CodeSpan> spans = new ArrayList<CodeSpan>();
classMatchesJson=obj.getJSONArray("ClassMatches")
JSONArray classMatchesJson = obj.getJSONArray("ClassMatches");
JSONObject obj = new JSONObject();
List<JSONObject> linkObjects = new ArrayList<JSONObject>();
List<LinkElement_old> links  = new ArrayList<LinkElement_old>();
JSONObject obj = new JSONObject();
LinkElement_old link = new LinkElement_old();
extLinks=obj.getJSONArray("ExternalLinks")
JSONArray extLinks = obj.getJSONArray("ExternalLinks");
List<JSONObject> linkObjects = new ArrayList<JSONObject>();
List<ClusteredLinkElement> links = new ArrayList<ClusteredLinkElement>();
JSONObject obj = new JSONObject();
ClusteredLinkElement link = new ClusteredLinkElement();
List<JSONObject> threadObjects = new ArrayList<JSONObject>();
List<ThreadElement> threads = new ArrayList<ThreadElement>();
JSONObject obj = new JSONObject();
List<JSONObject> answers = new ArrayList<JSONObject>();
ThreadElement thread = new ThreadElement();
List<AnswerElement> answers = new ArrayList<AnswerElement>();
jsonAns=obj.getJSONArray("Answers")
JSONArray jsonAns = obj.getJSONArray("Answers");
JSONObject obj = new JSONObject();
AnswerElement answer = new AnswerElement();
SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
JSONObject obj = new JSONObject();
QuestionElement q = new QuestionElement();
JSONObject obj = new JSONObject();
LinkElement href = new LinkElement();
JSONObject obj = new JSONObject();
LinkSpan span = new LinkSpan();
Hashtable<Integer, CodeSampleElement> sampleMap = new Hashtable<Integer, CodeSampleElement>();
File outputDir = new File(path + File.separator + "samplepool");
String fullPath = outputDir.getAbsolutePath() + File.separator + filePath;
JSONObject obj = new JSONObject(readStream(new FileInputStream(fullPath)));
s=DeserializeCodeSampleElement(obj)
CodeSampleElement s = DeserializeCodeSampleElement(obj);
Hashtable<Integer, ThreadElement> threadMap = new Hashtable<Integer, ThreadElement>();
File outputDir = new File(path + File.separator + "threadpool");
String fullPath = outputDir.getAbsolutePath() + File.separator + filePath;
JSONObject obj = new JSONObject(readStream(new FileInputStream(fullPath)));
t=DeserializeThreadElement(obj)
ThreadElement t = DeserializeThreadElement(obj);
File outputDir = new File(outputPath + File.separator + "samplepool");
File outputFile = new File(outputDir.getAbsolutePath() + File.separator + "sample" + sample.Parent.Id + ".json");
obj=SerializeCodeSampleElement(sample)
JSONObject obj = SerializeCodeSampleElement(sample);
FileWriter writer = new FileWriter(outputFile);
File outputDir = new File(outputPath + File.separator + "threadpool");
File outputFile = new File(outputDir.getAbsolutePath() + File.separator + "thread" + thread.Question.Id + ".json");
obj=SerializeThreadElement(thread)
JSONObject obj = SerializeThreadElement(thread);
FileWriter writer = new FileWriter(outputFile);
CachedPostBody cachedBody = new CachedPostBody();
doc=Jsoup.parseBodyFragment(post.Body)
Document doc = Jsoup.parseBodyFragment(post.Body);
codeSnippets=doc.getElementsByTag("code")
Elements codeSnippets = doc.getElementsByTag("code");
hrefs=doc.getElementsByTag("a")
Elements hrefs = doc.getElementsByTag("a");
SimpleHref href = new SimpleHref();
paragraphs=doc.getElementsByTag("p")
Elements paragraphs = doc.getElementsByTag("p");
allSpans=ParseBody(klassElem,post,title,hrefs)
List<LinkSpan> allSpans = ParseBody(klassElem,post,title, hrefs);
List<LinkSpan> allSpans = ParseBody(klassElem,post,title, hrefs);
List<LinkSpan> allSpans = new ArrayList<LinkSpan>();
int i = 0;
postBody=CachePostBodyIndex.getInstance().ParseOrGet(post)
CachedPostBody postBody = CachePostBodyIndex.getInstance().ParseOrGet(post);
spans=GatherSpans(klassElem,text)
List<LinkSpan> spans = GatherSpans(klassElem, text);
List<LinkSpan> spans = GatherSpans(klassElem, text);
spans=GatherSpans(klassElem,href.AnchorText)
List<LinkSpan> spans = GatherSpans(klassElem, href.AnchorText);
List<LinkSpan> spans = GatherSpans(klassElem, href.AnchorText);
LinkElement link = new LinkElement();
WordDistributions wd = new WordDistributions();
spans=GatherSpans(klassElem,text)
List<LinkSpan> spans = GatherSpans(klassElem, text);
List<LinkSpan> spans = GatherSpans(klassElem, text);
spans=GatherSpans(klassElem,title)
List<LinkSpan> spans = GatherSpans(klassElem, title);
List<LinkSpan> spans = GatherSpans(klassElem, title);
List<LinkSpan> spans = new ArrayList<LinkSpan>();
String klassName = klassElem.Name;
p=Pattern.compile("\\b" + Pattern.quote(klassName) + "\\b")
Pattern p = Pattern.compile("\\b"+Pattern.quote(klassName)+"\\b");
matcher=p.matcher(text)
Matcher matcher = p.matcher(text);
int start=0;
s=matcher.start()
int s = matcher.start();
int e = matcher.start()+klassName.length();
LinkSpan span = new LinkSpan();
sub=text.substring(s)
String sub = text.substring(s);
o=Pattern.compile("^\\b" + Pattern.quote(otherClassName) + "\\b")
Pattern o = Pattern.compile("^\\b"+Pattern.quote(otherClassName)+"\\b");
matcher=o.matcher(text)
Matcher matcher = o.matcher(text);
FileWriter fw = new FileWriter(outFile);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outFile);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outputFile);
int num = klass.AnswerIds.size() + klass.QuestionIds.size();
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
list=ExportQuestions(questionsFile,tag)
List<PostInfo> list = ExportQuestions(questionsFile, tag);
List<PostInfo> list = ExportQuestions(questionsFile, tag);
FileWriter fw = new FileWriter(answersFile);
DBInfo info = new DBInfo();
FileWriter fw = new FileWriter(questionsFile);
DBInfo info = new DBInfo();
list=info.Questions(tag)
List<PostInfo> list = info.Questions(tag);
List<PostInfo> list = info.Questions(tag);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outFile);
DBInfo info = new DBInfo();
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
FileWriter fw = new FileWriter(outFile);
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
int sum = 0;
int coverageCount = 0;
int klassCount = 0;
int methodCoverageCount = 0;
int methodCount = 0;
int methodSum = 0;
int num = klass.QuestionIds.size() + klass.AnswerIds.size();
int mNum = meth.QuestionIds.size() + meth.AnswerIds.size();
Search search = new Search();
klassQuestions=search.GetIds(api.MainTag + "questions_table",klass.Name)
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
klassAnswers=search.GetIds(api.MainTag + "answers_table",klass.Name)
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
Search search = new Search();
s=search.conn.createStatement()
Statement s = search.conn.createStatement();
WordDistributions wd = new WordDistributions();
klassQuestions=search.GetIds(api.MainTag + "questions_table",klass.Name)
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table", klass.Name);
klassAnswers=search.GetIds(api.MainTag + "answers_table",klass.Name)
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table", klass.Name);
Search search = new Search();
methQuestions=search.GetIds(api.MainTag + "questions_table",meth.Name)
List<Integer> methQuestions = search.GetIds(api.MainTag + "questions_table",  meth.Name);
List<Integer> methQuestions = search.GetIds(api.MainTag + "questions_table",  meth.Name);
methAnswers=search.GetIds(api.MainTag + "answers_table",meth.Name)
List<Integer> methAnswers = search.GetIds(api.MainTag + "answers_table",  meth.Name);
List<Integer> methAnswers = search.GetIds(api.MainTag + "answers_table",  meth.Name);
klassQuestions=search.GetIds(api.MainTag + "questions_table",klass.Name)
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table",  klass.Name);
List<Integer> klassQuestions = search.GetIds(api.MainTag + "questions_table",  klass.Name);
klassAnswers=search.GetIds(api.MainTag + "answers_table",klass.Name)
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table",  klass.Name);
List<Integer> klassAnswers = search.GetIds(api.MainTag + "answers_table",  klass.Name);
HashSet<Integer> klassQs = new HashSet<Integer>(klassQuestions);
HashSet<Integer> klassAs = new HashSet<Integer>(klassAnswers);
List<Integer> toRemoveQ = new ArrayList<Integer>();
List<Integer> toRemoveA = new ArrayList<Integer>();
Search search = new Search();
klassQuestions=search.QuestionsInBodyTitle(api.MainTag + "_table",klass.Name)
int klassQuestions = search.QuestionsInBodyTitle(api.MainTag + "_table", klass.Name);
Search search = new Search();
methodQuestions=search.QuestionsInBodyTitle(api.MainTag + "_table",meth.Name)
int methodQuestions = search.QuestionsInBodyTitle(api.MainTag + "_table", meth.Name);
words=id.replaceAll("(?<=[A-Z])(?=[A-Z][a-z])|" + "(?<=[^A-Z])(?=[A-Z])|" + "(?<=[A-Za-z])(?=[^A-Za-z])"," ")
String words = id.replaceAll("(?<=[A-Z])(?=[A-Z][a-z])|" + "(?<=[^A-Z])(?=[A-Z])|" + "(?<=[A-Za-z])(?=[^A-Za-z])",
			      " ");
AbstractApi api = Android;
BuildDocumentation builder = new BuildDocumentation();
list=builder.PrepareApi(api)
List<ClassDocumentation> list = builder.PrepareApi(api);
List<ClassDocumentation> list = builder.PrepareApi(api);
subList=list.subList(700,list.size() - 1)
List<ClassDocumentation> subList = list.subList(700, list.size()-1);
List<ClassDocumentation> subList = list.subList(700, list.size()-1);
BaseAnalysis run = new AnalyzeDocumentation();
int classCount = 0;
HashSet<String> classSet = new HashSet<String>();
ApiAnalysis api = new ApiAnalysis();
String qTable = api.MainTag + "questions_table";
String aTable = api.MainTag + "answers_table";
ResultCache cache = new ResultCache();
Date now = new Date();
Date finish = new Date();
SerializeDocumentation serializeDoc = new SerializeDocumentation();
Search search = new Search();
StringBuilder builder = new StringBuilder();
iter=s.iterator()
Iterator iter = s.iterator();
StringBuilder builder = new StringBuilder();
strings=Arrays.asList(stringsA)
Collection<String> strings = Arrays.asList(stringsA);
Collection<String> strings = Arrays.asList(stringsA);
iter=strings.iterator()
Iterator iter = strings.iterator();
StringBuilder sb = new StringBuilder(512);
Reader r = new InputStreamReader(is, "UTF-8");
int c = 0;
androidValues=TagReliability(Android)
Hashtable<Integer,QATuple> androidValues = TagReliability( Android );
Hashtable<Integer,QATuple> androidValues = TagReliability( Android );
Hashtable<Integer,QATuple> androidValues = TagReliability( Android );
javaValues=TagReliability(Java)
Hashtable<Integer,QATuple> javaValues = TagReliability( Java );
Hashtable<Integer,QATuple> javaValues = TagReliability( Java );
Hashtable<Integer,QATuple> javaValues = TagReliability( Java );
tuple=values.get(length)
QATuple tuple = values.get(length);
WordDistributions d = new WordDistributions();
Search search = new Search();
Hashtable<Integer,QATuple> hash = new Hashtable<Integer,QATuple>();
length=d.WordLength(klass.Name)
int length = d.WordLength(klass.Name);
klassQuestionsTags=search.GetIdsViaTags(this.QuestionsTempTableName,klass.Name)
List<Integer> klassQuestionsTags = search.GetIdsViaTags(this.QuestionsTempTableName, klass.Name);
List<Integer> klassQuestionsTags = search.GetIdsViaTags(this.QuestionsTempTableName, klass.Name);
klassAnswersTags=search.GetIdsViaTags(this.AnswersTempTableName,klass.Name)
List<Integer> klassAnswersTags = search.GetIdsViaTags(this.AnswersTempTableName, klass.Name);
List<Integer> klassAnswersTags = search.GetIdsViaTags(this.AnswersTempTableName, klass.Name);
klassQuestionsWords=search.GetIdsViaWordMatches(this.QuestionsTempTableName,klass.Name)
List<Integer> klassQuestionsWords = search.GetIdsViaWordMatches(this.QuestionsTempTableName, klass.Name);
List<Integer> klassQuestionsWords = search.GetIdsViaWordMatches(this.QuestionsTempTableName, klass.Name);
klassAnswersWords=search.GetIdsViaWordMatches(this.AnswersTempTableName,klass.Name)
List<Integer> klassAnswersWords = search.GetIdsViaWordMatches(this.AnswersTempTableName, klass.Name);
List<Integer> klassAnswersWords = search.GetIdsViaWordMatches(this.AnswersTempTableName, klass.Name);
BaseAnalysis run = new ClassTagReliability();
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,ThreadElement> threadMap = new Hashtable<Integer,ThreadElement>();
int codeSamplesInAnswers = 0;
int codeSamplesInAccepted = 0;
int codeSamplesInQuestions = 0;
int total = 0;
int numLines = 0;
int numBlocks = 0;
body=block.getBody()
String body = block.getBody();
lines=body.split(System.getProperty("line.separator"))
String[] lines = body.split(System.getProperty("line.separator"));
AnswerElement ans = (AnswerElement)element.Parent;
FileWriter fw = new FileWriter(outputPath);
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
int numLines = 0;
int numBlocks = 0;
body=block.getBody()
String body = block.getBody();
lines=body.split(System.getProperty("line.separator"))
String[] lines = body.split(System.getProperty("line.separator"));
AnswerElement ans = (AnswerElement)element.Parent;
AnswerElement ans = (AnswerElement)element.Parent;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
int[] levels = new int[]{1,5,20};
List<AbstractThreadFilter> filters = new ArrayList<AbstractThreadFilter>();
AtLeastNFilter atLeast2Filter = new AtLeastNFilter(new ArrayList(filters), 2);
AtLeastNFilter atLeast3Filter = new AtLeastNFilter(new ArrayList(filters), 3);
AtLeastNFilter atLeast5Filter = new AtLeastNFilter(new ArrayList(filters), 5);
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
threads=GetIncludedThreads(threadMap.values(),filter)
HashSet<Integer> threads = GetIncludedThreads(threadMap.values(), filter);
HashSet<Integer> threads = GetIncludedThreads(threadMap.values(), filter);
HashSet<Integer> included = new HashSet<Integer>();
Hashtable<Integer,Integer> coverageScore = new Hashtable<Integer,Integer>();
int coveredClasses = 0;
int includedThreads = 0;
answered=thread.Answers.size()
int answered = thread.Answers.size();
int passed = 0;
info=getDBInfoInstance().GetPostDetail(thread.Question.Id)
PostInfo info = getDBInfoInstance().GetPostDetail(thread.Question.Id);
int threadBounty = 0;
Integer amount = ans.BountyAmount;
int views = thread.ViewCount;
int total = thread.Votes;
int sum = 0;
String self = StartPercentile + ":" + EndPercentile + "";
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,Integer> Askers = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> Advisors = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> SelfAdvisors = new Hashtable<Integer,Integer>();
HashSet<Integer> All = new HashSet<Integer>();
PercentileBucket bucket0_25  = new PercentileBucket(0,25,pool);
PercentileBucket bucket25_50 = new PercentileBucket(25,50,pool);
PercentileBucket bucket50_75 = new PercentileBucket(50,75,pool);
PercentileBucket bucket75_95 = new PercentileBucket(75,95,pool);
PercentileBucket bucket95_00 = new PercentileBucket(95,100,pool);
PercentileBucket bucket90_91 = new PercentileBucket(90,91,pool);
PercentileBucket bucket91_92 = new PercentileBucket(91,92,pool);
PercentileBucket bucket92_93 = new PercentileBucket(92,93,pool);
PercentileBucket bucket93_94 = new PercentileBucket(93,94,pool);
PercentileBucket bucket94_95 = new PercentileBucket(94,95,pool);
PercentileBucket bucket95_96 = new PercentileBucket(95,96,pool);
PercentileBucket bucket96_97 = new PercentileBucket(96,97,pool);
PercentileBucket bucket97_98 = new PercentileBucket(97,98,pool);
PercentileBucket bucket98_99 = new PercentileBucket(98,99,pool);
PercentileBucket bucket99_00 = new PercentileBucket(99,100,pool);
HashSet<Integer> results = new HashSet<Integer>(info.GetCurators(PostId));
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,Integer> Askers = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> Advisors = new Hashtable<Integer,Integer>();
Hashtable<Integer,Integer> SelfAdvisors = new Hashtable<Integer,Integer>();
HashSet<Integer> All = new HashSet<Integer>();
FileWriter fw = new FileWriter(outputPath);
int qContributions = Askers.containsKey(userId) ? Askers.get(userId) : 0;
int aContributions = Advisors.containsKey(userId) ? Advisors.get(userId) : 0;
int selfContributions = SelfAdvisors.containsKey(userId) ? SelfAdvisors.get(userId) : 0;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
HashSet<Integer> Askers = new HashSet<Integer>();
HashSet<Integer> Advisors = new HashSet<Integer>();
HashSet<Integer> Curators = new HashSet<Integer>();
HashSet<Integer> All = new HashSet<Integer>();
int linksInAnswers=0;
int linksInQuestions=0;
int linksInAcceptedAnswers=0;
int answerLinkOutcome=0;
int questionLinkOutcome=0;
int bothLinkOutcome=0;
int answerAcceptedLinkOutcome=0;
int codeMarks=0;
int codeSamples=0;
int wordMatches=0;
int hrefs=0;
int codeMarksThread=0;
int codeSamplesThread=0;
int wordMatchesThread=0;
int hrefsThread=0;
int threadAnswerLinks=0;
int threadQuestionLinks=0;
int threadAcceptedAnswerLinks=0;
int t_codeMarks=0;
int t_codeSamples=0;
int t_wordMatches=0;
int t_hrefs=0;
output=join(new String[]{doc.getValidatedThreads().size() + "",linksInAnswers + "",linksInQuestions + "",linksInAcceptedAnswers + "",answerLinkOutcome + "",questionLinkOutcome + "",bothLinkOutcome + "",answerAcceptedLinkOutcome + "",codeMarks + "",codeSamples + "",wordMatches + "",hrefs + "",codeMarksThread + "",codeSamplesThread + "",wordMatchesThread + "",hrefsThread + ""},",")
String output = join(new String[]
				{
					doc.getValidatedThreads().size()+"",
					linksInAnswers +"",
					linksInQuestions+"",
					linksInAcceptedAnswers+"",
					// why linkage occurred (site). 
					answerLinkOutcome+"",
					questionLinkOutcome+"",
					bothLinkOutcome+"",
					answerAcceptedLinkOutcome+"", // threads with links to accepted answer
					// types of links
					codeMarks+"",
					codeSamples+"",
					wordMatches+"",
					hrefs+"",
					// types of threads (flat)
					codeMarksThread+"",
					codeSamplesThread+"",
					wordMatchesThread+"",
					hrefsThread+""
				},",");
BaseAnalysis a = new LinkAnalysis();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
Hashtable<Integer,ThreadElement> threadMap = ClassIndex.getInstance().ThreadMap;
int otherMoreThanAccepted = 0;
int votedButNotAccepted = 0;
int threadVoted = 0;
int numAccepted = 0;
int maxVote = 0;
AnswerElement accepted = null;
int votes = 0;
DBInfo info = new DBInfo();
int bounty = 0;
int numWithBounty  = 0;
taggedPosts=info.Tags(tag)
List<PostInfo> taggedPosts = info.Tags(tag);
List<PostInfo> taggedPosts = info.Tags(tag);
int threadBounty = 0;
amount=info.GetBountyAmount(ans.Id)
Integer amount = info.GetBountyAmount(ans.Id);
V old = this.value;
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
Hashtable<String,HashSet<Integer>> PackageMap = new Hashtable<String,HashSet<Integer>>();
String p = doc.Klass.ParentPackage.Name;
List<MyEntry<String,Integer>> sortedPackages = new ArrayList<MyEntry<String,Integer>>();
count=PackageMap.get(key).size()
Integer count = PackageMap.get(key).size();
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Hashtable<Integer,ThreadElement> threadMap = new Hashtable<Integer,ThreadElement>();
List<PostInfo> linkedPosts = new ArrayList<PostInfo>();
taggedPosts=info.Tags(tag)
List<PostInfo> taggedPosts = info.Tags(tag);
List<PostInfo> taggedPosts = info.Tags(tag);
FileWriter fw = new FileWriter(outputPath);
Visitor coverage = new Visitor();
ConsoleFormatter format = new ConsoleFormatter();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
HashSet<LinkType> types = new HashSet<LinkType>();
docs=DeserializeModel(Java)
List<ClassDocumentation> docs = DeserializeModel(Java);
List<ClassDocumentation> docs = DeserializeModel(Java);
RankDocumentation ranker = new RankDocumentation();
ExportDocumentation exporter = new ExportDocumentation();
AbstractApi api = Android;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel( api);
List<ClassDocumentation> docs = DeserializeModel( api);
AbstractApi api = Java;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
FileWriter fw = new FileWriter(outFile);
FileWriter fw = new FileWriter(outFile);
DBInfo info = new DBInfo();
FileWriter fwAnswers = new FileWriter(answersFile);
FileWriter fwQuestions = new FileWriter(questionsFile);
DBInfo info = new DBInfo();
String packName = doc.Klass.ParentPackage.Name;
String klassName = doc.Klass.Name;
int id = ans.Id;
a=info.GetPostDetail(id)
PostInfo a = info.GetPostDetail(id);
int id = thread.Question.Id;
q=info.GetPostDetail(id)
PostInfo q = info.GetPostDetail(id);
FileWriter fw = new FileWriter(outFile);
String packName = doc.Klass.ParentPackage.Name;
String klassName = doc.Klass.Name;
int id = ans.Id;
int id = thread.Question.Id;
FileWriter fw = new FileWriter(outputFile);
num=doc.getValidatedThreads().size()
int num = doc.getValidatedThreads().size();
String packName = doc.Klass.ParentPackage.Name;
String klassName = doc.Klass.Name;
ExportDataForTreemap export = new ExportDataForTreemap();
LinkDocumentation linker = new LinkDocumentation();
docs=linker.LinkAndSerializeApi(Java)
List<ClassDocumentation> docs = linker.LinkAndSerializeApi(Java);
List<ClassDocumentation> docs = linker.LinkAndSerializeApi(Java);
int coverage1 = 0;
int coverage1 = 0;
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
Visitor coverage = new Visitor();
ConsoleFormatter format = new ConsoleFormatter();
c=Calendar.getInstance()
Calendar c = Calendar.getInstance();
int[] levels = new int[]{1,5,20,50,100};
classDocs=DeserializeModel(Java)
List<ClassDocumentation> classDocs = DeserializeModel(Java);
List<ClassDocumentation> classDocs = DeserializeModel(Java);
Hashtable<Integer,List<ClassSaturation>> saturationData = new Hashtable<Integer,List<ClassSaturation>>();
classSats=Saturation(level,classDocs)
List<ClassSaturation> classSats = Saturation(level,classDocs);
List<ClassSaturation> classSats = Saturation(level,classDocs);
SimpleDateFormat format = new SimpleDateFormat("MM-dd-yyyy");
ArrayList<Date> sortedAllDates = new ArrayList<Date>();
startDate=format.parse("07-31-2008")
Date startDate = format.parse("07-31-2008");
endDate=format.parse("12-01-2011")
Date endDate = format.parse("12-01-2011");
Date curDate = startDate;
Hashtable<Integer,ArrayList<Integer>> saturationResults = new Hashtable<Integer,ArrayList<Integer>>();
ArrayList<Integer> results = new ArrayList<Integer>();
saturatedSet=saturationData.get(level)
List<ClassSaturation> saturatedSet = saturationData.get(level);
List<ClassSaturation> saturatedSet = saturationData.get(level);
List<ClassSaturation> saturatedByDate = new ArrayList<ClassSaturation>();
int row = 0;
ArrayList<Integer> columns = new ArrayList<Integer>();
levelSat=saturationResults.get(level)
ArrayList<Integer> levelSat = saturationResults.get(level);
ArrayList<Integer> levelSat = saturationResults.get(level);
List<ClassSaturation> saturatedSet = new ArrayList<ClassSaturation>();
Hashtable<ThreadElement,Date> dateThreadMap = new Hashtable<ThreadElement,Date>();
d=GetDateComponent(MinDateInThread(thread,classDoc.Klass))
Date d = GetDateComponent(MinDateInThread(thread,classDoc.Klass));
ArrayList<Entry<ThreadElement,Date>> sortedThreadElements = new ArrayList<Entry<ThreadElement,Date>>(dateThreadMap.entrySet());
ClassSaturation sat = new ClassSaturation();
sub=sortedThreadElements.subList(0,level)
List<Entry<ThreadElement,Date>> sub = sortedThreadElements.subList(0, level);
List<Entry<ThreadElement,Date>> sub = sortedThreadElements.subList(0, level);
c=Calendar.getInstance()
Calendar c = Calendar.getInstance();
Date minDate = new Date();
SpeedOfSaturation run = new SpeedOfSaturation();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
int numberThreadQs = 0;
int numberThreadAs = 0;
int numberQs = 0;
int numberAs = 0;
int threadQs = 0;
int threadAs = 0;
SerializeDocumentation serializer = new SerializeDocumentation();
docs=serializer.DeserializeClassDocumentation(classdocpath,api)
List<ClassDocumentation> docs = serializer.DeserializeClassDocumentation(classdocpath,api);
List<ClassDocumentation> docs = serializer.DeserializeClassDocumentation(classdocpath,api);
usageMap=ReadUsage(usageCSV)
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
classFQN=doc.Klass.getFQN()
String classFQN = doc.Klass.getFQN();
usage=usageMap.get(classFQN)
int usage = usageMap.get(classFQN);
threads=doc.getValidatedThreads().size()
int threads = doc.getValidatedThreads().size();
contents=readStream(new FileInputStream(path))
String contents = readStream(new FileInputStream(path));
lines=contents.split(System.getProperty("line.separator"))
String[] lines = contents.split(System.getProperty("line.separator"));
Hashtable<String,Integer> usageMap = new Hashtable<String,Integer>();
BaseAnalysis a = new OutputActivityAndUsage();
docs=DeserializeModel(api)
List<ClassDocumentation> docs = DeserializeModel(api);
List<ClassDocumentation> docs = DeserializeModel(api);
usageMap=ReadUsage(usageCSV)
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
Hashtable<String,Integer> usageMap = ReadUsage(usageCSV);
classFQN=doc.Klass.getFQN()
String classFQN = doc.Klass.getFQN();
usage=usageMap.get(classFQN)
int usage = usageMap.get(classFQN);
threads=doc.getValidatedThreads().size()
int threads = doc.getValidatedThreads().size();
aQThreads=AnswerQuestionRatio(doc)
int[] aQThreads = AnswerQuestionRatio(doc);
int numberThreadQs = 0;
int numberThreadAs = 0;
int numberQs = 0;
int numberAs = 0;
int[] answerQuestions = new int[2];
int threadQs = 0;
int threadAs = 0;
contents=readStream(new FileInputStream(path))
String contents = readStream(new FileInputStream(path));
lines=contents.split(System.getProperty("line.separator"))
String[] lines = contents.split(System.getProperty("line.separator"));
Hashtable<String,Integer> usageMap = new Hashtable<String,Integer>();
docs=DeserializeModel(Android)
List<ClassDocumentation> docs = DeserializeModel(Android);
List<ClassDocumentation> docs = DeserializeModel(Android);
int firstNonZeroIndex = 0;
doc=docs.get(i)
ClassDocumentation doc = docs.get(i);
t=doc.getValidatedThreads().size()
int t = doc.getValidatedThreads().size();
int workingRange = docs.size() - firstNonZeroIndex;
int lowStart = firstNonZeroIndex;
int lowEnd = (int)(workingRange *.40) + firstNonZeroIndex;
int highStart = docs.size() - (int)(workingRange *.15);
highEnd=docs.size()
int highEnd = docs.size();
List<ClassDocumentation> lowSet = new ArrayList<ClassDocumentation>(docs.subList(lowStart, lowEnd));
List<ClassDocumentation> highSet = new ArrayList<ClassDocumentation>(docs.subList(highStart, highEnd));
List<ThreadElement> lowThreads = new ArrayList<ThreadElement>();
List<ThreadElement> highThreads = new ArrayList<ThreadElement>();
docthreads=doc.getValidatedThreads()
List<ThreadElement> docthreads = doc.getValidatedThreads();
List<ThreadElement> docthreads = doc.getValidatedThreads();
docthreads=doc.getValidatedThreads()
List<ThreadElement> docthreads = doc.getValidatedThreads();
List<ThreadElement> docthreads = doc.getValidatedThreads();
BaseAnalysis a = new SamplingForDifficultyAnalysis();
WordDistributions dist = new WordDistributions();
Hashtable<Integer,ArrayList<ClassElem>> bins = new Hashtable<Integer,ArrayList<ClassElem>>();
length=dist.WordLength(klass.Name)
int length = dist.WordLength(klass.Name);
poolSize=NonZeroQuestionsOrAnswersClasses(bins.get(b)).size()
int poolSize = NonZeroQuestionsOrAnswersClasses(bins.get(b)).size();
classPool=NonZeroQuestionsOrAnswersClasses(bins.get(b))
List<ClassElem> classPool = NonZeroQuestionsOrAnswersClasses(bins.get(b));
List<ClassElem> classPool = NonZeroQuestionsOrAnswersClasses(bins.get(b));
numClassesToInspect=Math.min((int)(percentage * classPool.size()),numQuestionsAnswers)
int numClassesToInspect = Math.min((int)( percentage * classPool.size()),numQuestionsAnswers);
List<String> inspectionPool = new ArrayList<String>();
questionId=klass.AnswerIdToParentId.get(answerId)
int questionId = klass.AnswerIdToParentId.get(answerId);
List<ClassElem> nonZero = new ArrayList<ClassElem>();
List<T> clone = new ArrayList<T>(items);
ByteArrayOutputStream os = new ByteArrayOutputStream(string.length());
GZIPOutputStream gos = new GZIPOutputStream(os);
compressed=os.toByteArray()
byte[] compressed = os.toByteArray();
final int BUFFER_SIZE = 64;
ByteArrayInputStream is = new ByteArrayInputStream(compressed);
GZIPInputStream gis = new GZIPInputStream(is, BUFFER_SIZE);
StringBuilder string = new StringBuilder();
byte[] data = new byte[BUFFER_SIZE];
int bytesRead;
set=_commonStatement.executeQuery("SELECT UserId FROM VOTES WHERE PostId =" + id)
ResultSet set = _commonStatement.executeQuery("SELECT UserId FROM VOTES WHERE PostId ="+ id);
List<Integer> list = new ArrayList<Integer>();
set=_commonStatement.executeQuery("SELECT BountyAmount FROM VOTES WHERE PostId =" + id + " AND VoteTypeId = 9")
ResultSet set = _commonStatement.executeQuery("SELECT BountyAmount FROM VOTES WHERE PostId ="+ id + " AND VoteTypeId = 9");
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id FROM POSTS WHERE Tags like '%" + tag + "%'")
ResultSet set = s.executeQuery("SELECT Id FROM POSTS WHERE Tags like '%"+ tag + "%'");
List<Integer> ids = new ArrayList<Integer>();
List<PostInfo> posts = new ArrayList<PostInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,Body,Score,AcceptedAnswerId,AnswerCount,FavoriteCount,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Id = " + id)
ResultSet set = s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,Body,Score,AcceptedAnswerId,AnswerCount,FavoriteCount,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Id = "+ id);
PostInfo info = new PostInfo();
List<UserInfo> results = new ArrayList<UserInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,DisplayName,Reputation,Age,CreationDate,LastAccessDate,Views,UpVotes,DownVotes FROM USERS")
ResultSet set = s.executeQuery("SELECT Id,DisplayName,Reputation,Age,CreationDate,LastAccessDate,Views,UpVotes,DownVotes FROM USERS");
UserInfo info = new UserInfo();
List<PostInfo> results = new ArrayList<PostInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Tags like '%" + tag + "%'")
ResultSet set = s.executeQuery("SELECT Id,PostTypeId,OwnerUserId,CreationDate,LastActivityDate,ViewCount,Tags,Title FROM POSTS WHERE Tags like '%"+ tag + "%'");
PostInfo info = new PostInfo();
List<PostInfo> results = new ArrayList<PostInfo>();
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT Id,PostTypeId,ParentId,OwnerUserId,CreationDate,LastActivityDate,Body,ViewCount,Title FROM POSTS WHERE ParentId = " + parentId)
ResultSet set = s.executeQuery("SELECT Id,PostTypeId,ParentId,OwnerUserId,CreationDate,LastActivityDate,Body,ViewCount,Title FROM POSTS WHERE ParentId = " + parentId);
PostInfo info = new PostInfo();
set=s.executeQuery("SELECT Id, ParentId FROM POSTS WHERE " + "Id = " + answerId)
ResultSet set = s.executeQuery("SELECT Id, ParentId FROM POSTS WHERE " + 
					   "Id = " + answerId);
CachedRowSet rowSet = new CachedRowSetImpl();
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("tag","SELECT Id FROM " + tempTable + " WHERE "+ "tags like '%<"+ klassName+ "%>'",s)
ResultSet set = ResultCache.CachedQueryExecution("tag",
					"SELECT Id FROM "+ tempTable + " WHERE " + 
					"tags like '%<"+ klassName +"%>'",
					s);
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("word","SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle REGEXP '[[:<:]]"+ klassName+ "[[:>:]]'",s)
ResultSet set = ResultCache.CachedQueryExecution("word",
								"SELECT Id FROM "+tempTable + " WHERE " + 
								"BodyAndTitle REGEXP '[[:<:]]"+klassName+"[[:>:]]'",
								s);
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("code","SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle REGEXP '<code>[^</]*[[:<:]]"+ klassName+ "[[:>:]][^</]*</code>'",s)
ResultSet set = ResultCache.CachedQueryExecution("code",
								"SELECT Id FROM "+tempTable + " WHERE " + 
								"BodyAndTitle REGEXP '<code>[^</]*[[:<:]]"+klassName+"[[:>:]][^</]*</code>'",
								s);
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("links","SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle REGEXP '<a[^>]*>[[:<:]]"+ klassName+ "[[:>:]][^</]*</a>'",s)
ResultSet set = ResultCache.CachedQueryExecution("links",
								"SELECT Id FROM "+tempTable + " WHERE " + 
								"BodyAndTitle REGEXP '<a[^>]*>[[:<:]]"+klassName+"[[:>:]][^</]*</a>'",
								s);
File cacheDir = new File("cachedir");
File cache = new File("cachedir/_"+tempTable+"___"+klassName);
CachedRowSet rowSet = new CachedRowSetImpl();
List<Integer> results = new ArrayList<Integer>();
set=ResultCache.CachedQueryExecution("tag","SELECT Id FROM " + tempTable + " WHERE "+ "tags like '%<"+ klassName+ "%>'",s)
ResultSet set = ResultCache.CachedQueryExecution("tag",
						"SELECT Id FROM "+ tempTable + " WHERE " + 
						"tags like '%<"+ klassName +"%>'",
						s);
set=s.executeQuery("SELECT Id FROM " + tempTable + " WHERE "+ "BodyAndTitle like '%"+ klassName+ "%'")
ResultSet set = s.executeQuery("SELECT Id FROM "+tempTable + " WHERE " + 
											   "BodyAndTitle like '%"+ klassName +"%'"
				);
FileOutputStream fos = new FileOutputStream(cache.getAbsolutePath());
ObjectOutputStream out = new ObjectOutputStream(fos);
FileInputStream fos = new FileInputStream(cache.getAbsolutePath());
ObjectInputStream in = new ObjectInputStream(fos);
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT count(*) as number FROM " + tempTable + " WHERE "+ "BodyAndTitle like '%"+ klassName+ "%'")
ResultSet set = s.executeQuery("SELECT count(*) as number FROM "+tempTable + " WHERE " + 
										   "BodyAndTitle like '%"+ klassName +"%'"
			);
s=conn.createStatement()
Statement s = conn.createStatement();
set=s.executeQuery("SELECT count(*) as number FROM " + tempTable + " WHERE "+ "BodyAndTitle like '%"+ klassName+ "%'"+ "AND BodyAndTitle like '%"+ methodName+ "%'")
ResultSet set = s.executeQuery("SELECT count(*) as number FROM "+tempTable + " WHERE " + 
					   					   "BodyAndTitle like '%"+ klassName +"%'" + 
										   "AND BodyAndTitle like '%"+ methodName +"%'"
			);
char c;
char q;
StringBuffer sb;
JSONArray ja = new JSONArray();
value=getValue(x)
String value = getValue(x);
c=x.next()
char c = x.next();
ja=rowToJSONArray(x)
JSONArray ja = rowToJSONArray(x);
StringBuffer sb = new StringBuffer();
object=ja.opt(i)
Object object = ja.opt(i);
string=object.toString()
String string = object.toString();
length=string.length()
int length = string.length();
c=string.charAt(j)
char c = string.charAt(j);
JSONArray ja = new JSONArray();
jo=rowToJSONObject(names,x)
JSONObject jo = rowToJSONObject(names, x);
jo=ja.optJSONObject(0)
JSONObject jo = ja.optJSONObject(0);
names=jo.names()
JSONArray names = jo.names();
StringBuffer sb = new StringBuffer();
jo=ja.optJSONObject(i)
JSONObject jo = ja.optJSONObject(i);
char         c;
s=string.trim()
String       s = string.trim();
StringBuffer sb = new StringBuffer();
length=s.length()
int          length = s.length();
String         name;
JSONObject     jo = new JSONObject();
Object         value;
JSONTokener x = new JSONTokener(string);
StringBuffer sb = new StringBuffer();
length=string.length()
int length = string.length();
StringBuffer sb = new StringBuffer();
c=string.charAt(i)
char c = string.charAt(i);
d=JSONTokener.dehexchar(string.charAt(i + 1))
int d = JSONTokener.dehexchar(string.charAt(i + 1));
e=JSONTokener.dehexchar(string.charAt(i + 2))
int e = JSONTokener.dehexchar(string.charAt(i + 2));
JSONObject jo = new JSONObject();
JSONTokener x = new JSONTokener(string);
name=Cookie.unescape(x.nextTo('='))
String name = Cookie.unescape(x.nextTo('='));
boolean      b = false;
keys=jo.keys()
Iterator     keys = jo.keys();
String       string;
StringBuffer sb = new StringBuffer();
JSONObject     jo = new JSONObject();
HTTPTokener    x = new HTTPTokener(string);
String         token;
name=x.nextTo(':')
String name = x.nextTo(':');
keys=jo.keys()
Iterator     keys = jo.keys();
String       string;
StringBuffer sb = new StringBuffer();
char c;
char q;
StringBuffer sb = new StringBuffer();
iter=collection.iterator()
Iterator iter = collection.iterator();
length=Array.getLength(array)
int length = Array.getLength(array);
object=this.opt(index)
Object object = this.opt(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
object=this.get(index)
Object object = this.get(index);
len=this.length()
int len = this.length();
StringBuffer sb = new StringBuffer();
o=this.opt(index)
Object o = this.opt(index);
o=this.opt(index)
Object o = this.opt(index);
object=this.opt(index)
Object object = this.opt(index);
Double d = new Double(value);
o=this.opt(index)
Object o = this.opt(index);
JSONObject jo = new JSONObject();
len=this.length()
int len = this.length();
int i;
StringBuffer sb = new StringBuffer("[");
int newindent = indent + indentFactor;
boolean b = false;
len=this.length()
int     len = this.length();
v=this.myArrayList.get(i)
Object v = this.myArrayList.get(i);
String     attribute;
char       c;
String       closeTag = null;
int        i;
JSONArray  newja = null;
JSONObject newjo = null;
Object     token;
String       tagName = null;
int             i;
JSONObject   jo;
String       key;
Iterator     keys;
int             length;
Object         object;
StringBuffer sb = new StringBuffer();
String       tagName;
String       value;
StringBuffer sb = new StringBuffer();
int          i;
JSONArray    ja;
String       key;
Iterator     keys;
int          length;
Object         object;
String       tagName;
String       value;
char c;
String key;
i=map.entrySet().iterator()
Iterator i = map.entrySet().iterator();
Map.Entry e = (Map.Entry)i.next();
value=e.getValue()
Object value = e.getValue();
c=object.getClass()
Class c = object.getClass();
String name = names[i];
bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader())
ResourceBundle bundle = ResourceBundle.getBundle(baseName, locale,
                Thread.currentThread().getContextClassLoader());
keys=bundle.getKeys()
Enumeration keys = bundle.getKeys();
key=keys.nextElement()
Object key = keys.nextElement();
path=((String)key).split("\\.")
String[] path = ((String)key).split("\\.");
int last = path.length - 1;
JSONObject target = this;
String segment = path[i];
nextTarget=target.optJSONObject(segment)
JSONObject nextTarget = target.optJSONObject(segment);
object=this.opt(key)
Object object = this.opt(key);
object=this.opt(key)
Object object = this.opt(key);
string=Double.toString(d)
String string = Double.toString(d);
object=this.opt(key)
Object object = this.opt(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
object=this.get(key)
Object object = this.get(key);
length=jo.length()
int length = jo.length();
iterator=jo.keys()
Iterator iterator = jo.keys();
String[] names = new String[length];
int i = 0;
klass=object.getClass()
Class klass = object.getClass();
fields=klass.getFields()
Field[] fields = klass.getFields();
int length = fields.length;
String[] names = new String[length];
object=this.get(key)
Object object = this.get(key);
value=this.opt(key)
Object value = this.opt(key);
JSONArray ja = new JSONArray();
keys=this.keys()
Iterator  keys = this.keys();
string=number.toString()
String string = number.toString();
o=this.opt(key)
Object o = this.opt(key);
object=this.opt(key)
Object object = this.opt(key);
object=this.opt(key)
Object object = this.opt(key);
klass=bean.getClass()
Class klass = bean.getClass();
boolean includeSuperClass = klass.getClassLoader() != null;
Method[] methods = includeSuperClass
                ? klass.getMethods()
                : klass.getDeclaredMethods();
Method method = methods[i];
name=method.getName()
String name = method.getName();
String key = "";
result=method.invoke(bean,(Object[])null)
Object result = method.invoke(bean, (Object[])null);
char         b;
char         c = 0;
String       hhhh;
int          i;
len=string.length()
int          len = string.length();
StringBuffer sb = new StringBuffer(len + 4);
Double d;
b=string.charAt(0)
char b = string.charAt(0);
Long myLong = new Long(string);
JSONArray ja = new JSONArray();
keys=this.keys()
Iterator     keys = this.keys();
StringBuffer sb = new StringBuffer("{");
o=keys.next()
Object o = keys.next();
int i;
length=this.length()
int length = this.length();
keys=this.keys()
Iterator     keys = this.keys();
int          newindent = indent + indentFactor;
Object       object;
StringBuffer sb = new StringBuffer("{");
Object object;
o=((JSONString)value).toJSONString()
Object o = ((JSONString)value).toJSONString();
objectPackage=object.getClass().getPackage()
Package objectPackage = object.getClass().getPackage();
String objectPackageName = objectPackage != null
                 ? objectPackage.getName()
                 : "";
boolean  commanate = false;
keys=this.keys()
Iterator keys = this.keys();
key=keys.next()
Object key = keys.next();
value=this.map.get(key)
Object value = this.map.get(key);
int c;
n=this.next()
char n = this.next();
char[] chars = new char[n];
int pos = 0;
c=this.next()
char c = this.next();
char c;
StringBuffer sb = new StringBuffer();
StringBuffer sb = new StringBuffer();
c=this.next()
char c = this.next();
char c;
StringBuffer sb = new StringBuffer();
c=this.nextClean()
char c = this.nextClean();
String string;
StringBuffer sb = new StringBuffer();
char c;
long startIndex = this.index;
long startCharacter = this.character;
long startLine = this.line;
char m = this.stack[this.top - 1] == null ? 'a' : 'k';
StringBuffer sb = new StringBuffer();
c=string.charAt(i)
char c = string.charAt(i);
length=string.length()
int i, length = string.length();
char       c;
int        i;
JSONObject jsonobject = null;
String     string;
String     tagName;
Object     token;
initial=string.charAt(0)
char initial = string.charAt(0);
boolean negative = false;
Long myLong = new Long(string);
JSONObject jo = new JSONObject();
XMLTokener x = new XMLTokener(string);
StringBuffer sb = new StringBuffer();
int          i;
JSONArray    ja;
JSONObject   jo;
String       key;
Iterator     keys;
int          length;
String       string;
Object       value;
char         c;
int          i;
StringBuffer sb = new StringBuffer();
char         c;
StringBuffer sb;
StringBuffer sb = new StringBuffer();
c=next()
char c = next();
string=sb.toString()
String string = sb.toString();
object=entity.get(string)
Object object = entity.get(string);
char c;
char q;
char c;
char q;
StringBuffer sb;
boolean b;
char c;
int i;
int j;
int offset = 0;
length=to.length()
int length = to.length();
char[] circle = new char[length];
List<Question> list = new ArrayList<Question>();
String query = "SELECT * FROM POSTS WHERE " + BuildLikeClauses(searchTags);
set=_commonStatement.executeQuery(query)
ResultSet set = _commonStatement.executeQuery(query);
post=PopulateQuestions(set,flattenHtml)
Question post = PopulateQuestions(set, flattenHtml);
int count= 0;
doc=Jsoup.parseBodyFragment(body)
Document doc = Jsoup.parseBodyFragment(body);
List<CommentInfo> list = new ArrayList<CommentInfo>();
set=_commonStatement.executeQuery("SELECT * FROM Comments WHERE PostId=" + id)
ResultSet set = _commonStatement.executeQuery("SELECT * FROM Comments WHERE PostId="+id);
CommentInfo comment = new CommentInfo();
List<String> queryParts = new ArrayList<String>();
Question info = new Question();
List<Answer> answers = new ArrayList<Answer>();
String query = "SELECT Id,PostTypeId,ParentId,OwnerUserId,CreationDate,LastActivityDate,Body,ViewCount,Title FROM POSTS WHERE ParentId = " + parentId;
set=_commonStatement.executeQuery(query)
ResultSet set = _commonStatement.executeQuery(query);
Answer info = new Answer();
CheckoutTaggedPostsAndComments checkout = new CheckoutTaggedPostsAndComments();
posts=checkout.Query(new String[]{"<internet-explorer>","<ie>","<ie6>","<ie7>","<ie8>","<ie9>","<ie10>","<ie11>"},true)
List<Question> posts = checkout.Query(new String[]
		{
			"<internet-explorer>", "<ie>","<ie6>","<ie7>","<ie8>","<ie9>","<ie10>","<ie11>",
		}, true);
gson=new GsonBuilder().setPrettyPrinting().create()
Gson gson = new GsonBuilder().setPrettyPrinting().create();
PrintWriter writer = new PrintWriter(new FileWriter("IEData.json"));
StringBuilder builder = new StringBuilder();
iter=s.iterator()
Iterator<?> iter = s.iterator();
Iterator<?> iter = s.iterator();
String createUsers = "CREATE TABLE USERS (" +
				"Id INT NOT NULL," +
				"Reputation INT NOT NULL," +
				"CreationDate DATETIME NOT NULL," +
				"DisplayName VARCHAR(200) NOT NULL," +
				"EmailHash VARCHAR(200)," +
				"LastAccessDate DATETIME NOT NULL," + 
				"WebsiteUrl VARCHAR(200)," + 
				"Location VARCHAR(200)," + 
				"Age INT NOT NULL," + 
				"Views INT NOT NULL," + 
				"UpVotes INT NOT NULL," + 
				"DownVotes INT NOT NULL," + 
				"PRIMARY KEY (ID)" +
				")";
String createPosts = "CREATE TABLE POSTS (" +
				"Id INT NOT NULL," +
				"PostTypeId INT NOT NULL," +
				"ParentID INT NOT NULL," +
				"AcceptedAnswerId INT," +
				"CreationDate DATETIME NOT NULL," +
				"Score INT," + 
		        "ViewCount INT," +
		        "Body TEXT," +
		        "OwnerUserId INT," + 
		        "LastEditorUserId INT," + 
		        "LastEditorDisplayName VARCHAR(200)," +  
		        "LastEditDate DATETIME," +
		        "LastActivityDate DATETIME NOT NULL," + 
		        "CommunityOwnedDate DATETIME," + 
		        "ClosedDate DATETIME," + 
		        "Title VARCHAR(500) NOT NULL," +
		        "Tags VARCHAR(200) NOT NULL," + 
		        "AnswerCount INT NOT NULL," +
		        "CommentCount INT NOT NULL," +
		        "FavoriteCount INT NOT NULL," +
		        "BodyAndTitle TEXT," +
				"PRIMARY KEY (ID)" +
				")";
id=Integer.parseInt(attributes.getValue("Id").trim().replaceAll("\\D+",""))
int id = Integer.parseInt(attributes.getValue("Id").trim().replaceAll("\\D+",""));
int postType = 0;
parentId=attributes.getValue("ParentId")
String parentId = attributes.getValue("ParentId");
acceptedId=attributes.getValue("AcceptedAnswerId")
String acceptedId = attributes.getValue("AcceptedAnswerId");
creationDate=attributes.getValue("CreationDate")
String creationDate = attributes.getValue("CreationDate");
int score = 0;
viewCount=attributes.getValue("ViewCount")
String viewCount = attributes.getValue("ViewCount");
body=attributes.getValue("Body")
String body = attributes.getValue("Body");
ownerUserId=attributes.getValue("OwnerUserId")
String ownerUserId = attributes.getValue("OwnerUserId");
lastEditorUserId=attributes.getValue("LastEditorUserId")
String lastEditorUserId = attributes.getValue("LastEditorUserId");
lastEditorDisplayName=attributes.getValue("LastEditorDisplayName")
String lastEditorDisplayName = attributes.getValue("LastEditorDisplayName");
lastEditDate=attributes.getValue("LastEditDate")
String lastEditDate = attributes.getValue("LastEditDate");
lastActivityDate=attributes.getValue("LastActivityDate")
String lastActivityDate = attributes.getValue("LastActivityDate");
communityOwnedDate=attributes.getValue("CommunityOwnedDate")
String communityOwnedDate = attributes.getValue("CommunityOwnedDate");
closedDate=attributes.getValue("ClosedDate")
String closedDate = attributes.getValue("ClosedDate");
String title = attributes.getValue("Title") == null ? "" : attributes.getValue("Title");
String tags = attributes.getValue("Tags") == null ? "" : attributes.getValue("Tags");
answerCount=attributes.getValue("AnswerCount")
String answerCount = attributes.getValue("AnswerCount");
commentCount=attributes.getValue("CommentCount")
String commentCount = attributes.getValue("CommentCount");
favoriteCount=attributes.getValue("FavoriteCount")
String favoriteCount = attributes.getValue("FavoriteCount");
String[] row = new String[]{id + "",postType +"",parentId,acceptedId,creationDate, score +"",
					viewCount,body,ownerUserId,lastEditorUserId,lastEditorDisplayName,
					lastEditDate,lastActivityDate,communityOwnedDate,closedDate,title,tags,
					answerCount,commentCount,favoriteCount};
ArrayList<String> list = new ArrayList<String>();
String rowStr = join(list,"��") + "��";
StringBuilder builder = new StringBuilder();
iter=s.iterator()
Iterator iter = s.iterator();
val=iter.next()
Object val = iter.next();
id=Integer.parseInt(attributes.getValue("Id"))
int id                = Integer.parseInt(attributes.getValue("Id"));
rep=Integer.parseInt(attributes.getValue("Reputation"))
int rep               = Integer.parseInt(attributes.getValue("Reputation"));
createDate=attributes.getValue("CreationDate")
String createDate     = attributes.getValue("CreationDate");
displayName=attributes.getValue("DisplayName")
String displayName    = attributes.getValue("DisplayName");
emailHash=attributes.getValue("EmailHash")
String emailHash      = attributes.getValue("EmailHash");
lastAccessDate=attributes.getValue("LastAccessDate")
String lastAccessDate = attributes.getValue("LastAccessDate");
webUrl=attributes.getValue("WebsiteUrl")
String webUrl         = attributes.getValue("WebsiteUrl");
location=attributes.getValue("Location")
String location       = attributes.getValue("Location");
age=attributes.getValue("Age")
String age            = attributes.getValue("Age");
views=Integer.parseInt(attributes.getValue("Views"))
int views             = Integer.parseInt(attributes.getValue("Views"));
upvotes=Integer.parseInt(attributes.getValue("UpVotes"))
int upvotes           = Integer.parseInt(attributes.getValue("UpVotes"));
downvotes=Integer.parseInt(attributes.getValue("DownVotes"))
int downvotes         = Integer.parseInt(attributes.getValue("DownVotes"));
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
UsersHandler users = new UsersHandler();
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
PostsHandler posts = new PostsHandler();
String createCommentsSQL = "CREATE TABLE COMMENTS (" +
					"Id INT NOT NULL," +
					"PostId INT NOT NULL," +
					"Score INT NOT NULL," +
					"Comment TEXT NULL," + 
					"CreationDate DATETIME NOT NULL," + 
					"UserId INT NULL," + 
					"PRIMARY KEY (ID)" +
					")";
id=Integer.parseInt(attributes.getValue("Id"))
int id = Integer.parseInt(attributes.getValue("Id"));
postId=Integer.parseInt(attributes.getValue("PostId"))
int postId = Integer.parseInt(attributes.getValue("PostId"));
score=Integer.parseInt(attributes.getValue("Score"))
int score = Integer.parseInt(attributes.getValue("Score"));
comment=attributes.getValue("Text")
String comment = attributes.getValue("Text");
date=attributes.getValue("CreationDate")
String date = attributes.getValue("CreationDate");
userId=attributes.getValue("UserId")
String userId = attributes.getValue("UserId");
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
CommentsHandler comments = new CommentsHandler();
String createVotesSQL = "CREATE TABLE VOTES (" +
					"Id INT NOT NULL," +
					"PostId INT NOT NULL," +
					"VoteTypeId INT NOT NULL," +
					"CreationDate DATETIME NOT NULL," + 
					"UserId INT NULL," + 
					"BountyAmount INT NULL," + 
					"PRIMARY KEY (ID)" +
					")";
id=Integer.parseInt(attributes.getValue("Id"))
int id = Integer.parseInt(attributes.getValue("Id"));
postId=Integer.parseInt(attributes.getValue("PostId"))
int postId = Integer.parseInt(attributes.getValue("PostId"));
voteTypeId=Integer.parseInt(attributes.getValue("VoteTypeId"))
int voteTypeId = Integer.parseInt(attributes.getValue("VoteTypeId"));
date=attributes.getValue("CreationDate")
String date = attributes.getValue("CreationDate");
userId=attributes.getValue("UserId")
String userId = attributes.getValue("UserId");
bountyAmount=attributes.getValue("BountyAmount")
String bountyAmount = attributes.getValue("BountyAmount");
parser=SAXParserFactory.newInstance().newSAXParser()
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
xr=parser.getXMLReader()
XMLReader xr = parser.getXMLReader();
VotesHandler users = new VotesHandler();

Diff of fa79b83495e83efa783f03abab994f4e7524c9a7 and f6e31e22df368ace868a6fc5544e326a05ff0698:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision fa79b83495e83efa783f03abab994f4e7524c9a7 to f6e31e22df368ace868a6fc5544e326a05ff0698

************Analysis complete************
Added generics to repository anacrowd = 0

Chris Parnin added type argument method count = 0
	--> recency = null
Chris Parnin added wildcard count = 0
	--> recency = null
Chris Parnin added type declaration count = 0
	--> recency = null
Chris Parnin added type parameter method count = 0
	--> recency = null
Chris Parnin added type parameter field count = 0
	--> recency = null
Chris Parnin added diamond count = 0
	--> recency = null
Chris Parnin added method invocation count = 0
	--> recency = null
Chris Parnin added implicit method invocation count = 0
	--> recency = null
Chris Parnin added class instantiation count = 0
	--> recency = null
Chris Parnin added nested count = 0
	--> recency = null
Chris Parnin added bounds count = 0
	--> recency = null
File copied successfully!
