flood -- mafagafogigante -- Bernardo Sulzbach
https://github.com/mafagafogigante/flood.git
git clone https://github.com/mafagafogigante/flood.git
.\flood\
.\flood\.git
0
Project cloned!
Bernardo Sulzbach is responsible for commit d1db58a95e9da9de8d910e6eab52836a998f144c
Bernardo Sulzbach is responsible for commit 46c0601ebfae90f2f2636db32636c7f64f923c18
Bernardo Sulzbach is responsible for commit b3f6624f3b3d846c57cbe4025020ac9244894af7
Bernardo Sulzbach is responsible for commit 427e7824eb269d3c33be992b05a57a1f57500b9c
Bernardo Sulzbach is responsible for commit 5dc38ca489ac0c1bddbbff99d098ae53968ca751
Bernardo Sulzbach is responsible for commit 8a607695ec145da9d5733a17208f3112aa11c748
Bernardo Sulzbach is responsible for commit d6e886da3122d3d06f2d69dc7af92bcdf90ca979
Bernardo Sulzbach is responsible for commit fab7f18cfb4446b9c560628ecf2845737dfd57fc
Bernardo Sulzbach is responsible for commit 55c9bebe347fbceeb4fef8b8f9b75ba59f488449
Bernardo Sulzbach is responsible for commit 9201285e2a7b119549ada0e8430c0417e91e40e0
Bernardo Sulzbach is responsible for commit 8d5dc84fac05a12b14847dc8d0e74412648a16df
Bernardo Sulzbach is responsible for commit 7e8b87887572a9514babd613690f49e2368bbd95
Bernardo Sulzbach is responsible for commit 0b7b3102629c34ff1079460d4701cdb95cb69b13
Bernardo Sulzbach is responsible for commit 51a2a7248634b5e175b5ea67937886226c0c97f4
Bernardo Sulzbach is responsible for commit 1396c4a9c5bc3370a3be2892b5c9c6c339995ea1
Bernardo Sulzbach is responsible for commit 54221efe504d474aefd71a70ec680531c3135c8a
Bernardo Sulzbach is responsible for commit b1b005e3561bf72935e1ddfd1e0a1b967af2108a
Bernardo Sulzbach is responsible for commit ab1ea6a3945114d12670a7e889d49663c2534b23
Bernardo Sulzbach is responsible for commit acefe80257e038c184b9565c08960fb69ef3e1b3
Bernardo Sulzbach is responsible for commit 2c1e8f367a32b1f86102c42797222ac17d85a0e6
Bernardo Sulzbach is responsible for commit 6fcdc5bee25fece2dbcc37cb2b93e1fb297f0ce3
Bernardo Sulzbach is responsible for commit d532d5cc5b501ee8e4165f9e72a012b5244b08c3
Bernardo Sulzbach is responsible for commit 85964cdcb5b8cba635e24e8de9ff4f3ef0157dc2
Bernardo Sulzbach is responsible for commit e48de87d21bf28e62e7649ea72017c13b63c933a
Bernardo Sulzbach is responsible for commit 162645957bc4c41ca199708be6883e8e9fece380
Bernardo Sulzbach is responsible for commit 74f951ab4180e76d6b881d2d007a2cb006bdef0b
Bernardo Sulzbach is responsible for commit 007102bcbb2952a091dfbce89ae1adfee20fe717
Bernardo Sulzbach is responsible for commit 30f0f3c21911bbc378d2474dfc7a26e742a50015
Bernardo Sulzbach is responsible for commit ff218b5f940174e52513b3fbce84bc073e73c31e
Bernardo Sulzbach is responsible for commit 393dcf1c6afaeeec8e52bbf22e2a2db3cb044224
Bernardo Sulzbach is responsible for commit 0766b6ce0636338a70a2391b97438910ac756bd1
Bernardo Sulzbach is responsible for commit efc6424c12594e9cc060a3043c86e79817b97fdc
Bernardo Sulzbach is responsible for commit 62844f167394cadc289297fa607c6b38cfae9a72
Bernardo Sulzbach is responsible for commit 65b167f5c8b543cd38feb7a748ca818eb6fe4561
Bernardo Sulzbach is responsible for commit bfbdac953d89e67ac7a4edd930a33f26cc57400c
Bernardo Sulzbach is responsible for commit 21c36cd67a125655fdadb46cecc615a7cdc9ad48
Bernardo Sulzbach is responsible for commit 9b44298c383f0cbc711ae46e0bdf434c203ae263
Bernardo Sulzbach is responsible for commit 69d3082fbe5cd10068fcea08058ee24f71d7c31e
Bernardo Sulzbach is responsible for commit 09685eb752d3311ac4dab7a513fc5d9ff76e166b
Bernardo Sulzbach is responsible for commit 90be325707cf9481b6bb899ee5afb5e961f48a4a
Bernardo Sulzbach is responsible for commit ada2c6c0249e0c283807eb3a8e6d1df2be6169e5
Bernardo Sulzbach is responsible for commit 9f5818866690dfe78596902ce92ac7c686ed1523
Bernardo Sulzbach is responsible for commit e6fe4e206142bc35125d71a89502c02f94f8ae7a
Bernardo Sulzbach is responsible for commit 87e11741062b5ad1af48dab8982ec3703deccaa5
Bernardo Sulzbach is responsible for commit 4d4acb898374516d13602a3b48aa915bf43c1c55
Bernardo Sulzbach is responsible for commit 61fb9caa111e092e84049708e9ed892869e683db
Bernardo Sulzbach is responsible for commit e372d35a362b408c561a2b1e245879fb578abf6f
Bernardo Sulzbach is responsible for commit 10d77c2048951301f150e323b9374b6883891163
Bernardo Sulzbach is responsible for commit 6fc6ed953ab75a68b0273e13a5885d34e5d7f2ab
Bernardo Sulzbach is responsible for commit 8a1b1ed2ee5c46afda7141462dca699de97c18a0
Bernardo Sulzbach is responsible for commit f67e1f85535e8edd984df5967c373f82f9fc9163
Bernardo Sulzbach is responsible for commit a2a126084f6ccd1dbd78d8b3d20971ae5b7dc8b9
Bernardo Sulzbach is responsible for commit c41ccd2c0060870b9572d05a5f1949af21613628
Bernardo Sulzbach is responsible for commit a75f47ea5a79876f254bf6e071f55916fe413943
Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added CircularQueue.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.

 ************ ANALYZING FOR USAGE PATTERN ADDITION ************


****Parsing for addition at revision d1db58a95e9da9de8d910e6eab52836a998f144c****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added CircularQueue.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
element=queue.poll()
E element = queue.poll();
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem tip = new JMenuItem("Tip");
nextTip=TIPS.poll()
String nextTip = TIPS.poll();
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of d1db58a95e9da9de8d910e6eab52836a998f144c and 46c0601ebfae90f2f2636db32636c7f64f923c18:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision d1db58a95e9da9de8d910e6eab52836a998f144c to 46c0601ebfae90f2f2636db32636c7f64f923c18


****Parsing for addition at revision 46c0601ebfae90f2f2636db32636c7f64f923c18****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added CircularQueue.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
element=queue.poll()
E element = queue.poll();
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem tip = new JMenuItem("Tip");
nextTip=TIPS.poll()
String nextTip = TIPS.poll();
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 46c0601ebfae90f2f2636db32636c7f64f923c18 and b3f6624f3b3d846c57cbe4025020ac9244894af7:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 46c0601ebfae90f2f2636db32636c7f64f923c18 to b3f6624f3b3d846c57cbe4025020ac9244894af7


****Parsing for addition at revision b3f6624f3b3d846c57cbe4025020ac9244894af7****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added CircularQueue.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
element=queue.poll()
E element = queue.poll();
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem tip = new JMenuItem("Tip");
nextTip=TIPS.poll()
String nextTip = TIPS.poll();
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of b3f6624f3b3d846c57cbe4025020ac9244894af7 and 427e7824eb269d3c33be992b05a57a1f57500b9c:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision b3f6624f3b3d846c57cbe4025020ac9244894af7 to 427e7824eb269d3c33be992b05a57a1f57500b9c


****Parsing for addition at revision 427e7824eb269d3c33be992b05a57a1f57500b9c****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added CircularQueue.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
element=queue.poll()
E element = queue.poll();
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem tip = new JMenuItem("Tip");
nextTip=TIPS.poll()
String nextTip = TIPS.poll();
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 427e7824eb269d3c33be992b05a57a1f57500b9c and 5dc38ca489ac0c1bddbbff99d098ae53968ca751:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 427e7824eb269d3c33be992b05a57a1f57500b9c to 5dc38ca489ac0c1bddbbff99d098ae53968ca751


****Parsing for addition at revision 5dc38ca489ac0c1bddbbff99d098ae53968ca751****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added CircularQueue.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
element=queue.poll()
E element = queue.poll();
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();

 Generics pattern public class Configuration was added at revision 5dc38ca489ac0c1bddbbff99d098ae53968ca751


 Generics pattern private static <E> JComboBox<E> makeComboBox(Collection<E> collection, E selected) was added at revision 5dc38ca489ac0c1bddbbff99d098ae53968ca751


 Generics pattern new JComboBox<E>() was added at revision 5dc38ca489ac0c1bddbbff99d098ae53968ca751


 Generics pattern List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms(); was added at revision 5dc38ca489ac0c1bddbbff99d098ae53968ca751


 Generics pattern JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm); was added at revision 5dc38ca489ac0c1bddbbff99d098ae53968ca751


 Generics pattern JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme); was added at revision 5dc38ca489ac0c1bddbbff99d098ae53968ca751


 Generics pattern JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize); was added at revision 5dc38ca489ac0c1bddbbff99d098ae53968ca751

JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 5dc38ca489ac0c1bddbbff99d098ae53968ca751 and 8a607695ec145da9d5733a17208f3112aa11c748:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5dc38ca489ac0c1bddbbff99d098ae53968ca751 to 8a607695ec145da9d5733a17208f3112aa11c748


****Parsing for addition at revision 8a607695ec145da9d5733a17208f3112aa11c748****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added CircularQueue.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
element=queue.poll()
E element = queue.poll();
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 8a607695ec145da9d5733a17208f3112aa11c748 and d6e886da3122d3d06f2d69dc7af92bcdf90ca979:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 8a607695ec145da9d5733a17208f3112aa11c748 to d6e886da3122d3d06f2d69dc7af92bcdf90ca979


****Parsing for addition at revision d6e886da3122d3d06f2d69dc7af92bcdf90ca979****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added CircularQueue.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
element=queue.poll()
E element = queue.poll();
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of d6e886da3122d3d06f2d69dc7af92bcdf90ca979 and fab7f18cfb4446b9c560628ecf2845737dfd57fc:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision d6e886da3122d3d06f2d69dc7af92bcdf90ca979 to fab7f18cfb4446b9c560628ecf2845737dfd57fc


****Parsing for addition at revision fab7f18cfb4446b9c560628ecf2845737dfd57fc****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added CircularQueue.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
element=queue.poll()
E element = queue.poll();
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of fab7f18cfb4446b9c560628ecf2845737dfd57fc and 55c9bebe347fbceeb4fef8b8f9b75ba59f488449:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision fab7f18cfb4446b9c560628ecf2845737dfd57fc to 55c9bebe347fbceeb4fef8b8f9b75ba59f488449


****Parsing for addition at revision 55c9bebe347fbceeb4fef8b8f9b75ba59f488449****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added CircularQueue.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
element=queue.poll()
E element = queue.poll();
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 55c9bebe347fbceeb4fef8b8f9b75ba59f488449 and 9201285e2a7b119549ada0e8430c0417e91e40e0:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 55c9bebe347fbceeb4fef8b8f9b75ba59f488449 to 9201285e2a7b119549ada0e8430c0417e91e40e0


****Parsing for addition at revision 9201285e2a7b119549ada0e8430c0417e91e40e0****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;

 Generics pattern class ComplexInitializationAlgorithm was added at revision 9201285e2a7b119549ada0e8430c0417e91e40e0

matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 9201285e2a7b119549ada0e8430c0417e91e40e0 and 8d5dc84fac05a12b14847dc8d0e74412648a16df:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 9201285e2a7b119549ada0e8430c0417e91e40e0 to 8d5dc84fac05a12b14847dc8d0e74412648a16df


****Parsing for addition at revision 8d5dc84fac05a12b14847dc8d0e74412648a16df****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;

 Generics pattern public class GameData was added at revision 8d5dc84fac05a12b14847dc8d0e74412648a16df

c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};

 Generics pattern public class Tile was added at revision 8d5dc84fac05a12b14847dc8d0e74412648a16df

gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

 Generics pattern public class TileMatrix was added at revision 8d5dc84fac05a12b14847dc8d0e74412648a16df


Diff of 8d5dc84fac05a12b14847dc8d0e74412648a16df and 7e8b87887572a9514babd613690f49e2368bbd95:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 5
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 8d5dc84fac05a12b14847dc8d0e74412648a16df to 7e8b87887572a9514babd613690f49e2368bbd95


****Parsing for addition at revision 7e8b87887572a9514babd613690f49e2368bbd95****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 7e8b87887572a9514babd613690f49e2368bbd95 and 0b7b3102629c34ff1079460d4701cdb95cb69b13:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 5
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 7e8b87887572a9514babd613690f49e2368bbd95 to 0b7b3102629c34ff1079460d4701cdb95cb69b13


****Parsing for addition at revision 0b7b3102629c34ff1079460d4701cdb95cb69b13****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 0b7b3102629c34ff1079460d4701cdb95cb69b13 and 51a2a7248634b5e175b5ea67937886226c0c97f4:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 5
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 0b7b3102629c34ff1079460d4701cdb95cb69b13 to 51a2a7248634b5e175b5ea67937886226c0c97f4


****Parsing for addition at revision 51a2a7248634b5e175b5ea67937886226c0c97f4****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;

 Generics pattern public abstract class InitializationAlgorithms was added at revision 51a2a7248634b5e175b5ea67937886226c0c97f4

matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();

 Generics pattern public class Dimension was added at revision 51a2a7248634b5e175b5ea67937886226c0c97f4

JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 51a2a7248634b5e175b5ea67937886226c0c97f4 and 1396c4a9c5bc3370a3be2892b5c9c6c339995ea1:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 7
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 51a2a7248634b5e175b5ea67937886226c0c97f4 to 1396c4a9c5bc3370a3be2892b5c9c6c339995ea1


****Parsing for addition at revision 1396c4a9c5bc3370a3be2892b5c9c6c339995ea1****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 1396c4a9c5bc3370a3be2892b5c9c6c339995ea1 and 54221efe504d474aefd71a70ec680531c3135c8a:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 7
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 1396c4a9c5bc3370a3be2892b5c9c6c339995ea1 to 54221efe504d474aefd71a70ec680531c3135c8a


****Parsing for addition at revision 54221efe504d474aefd71a70ec680531c3135c8a****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 54221efe504d474aefd71a70ec680531c3135c8a and b1b005e3561bf72935e1ddfd1e0a1b967af2108a:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 7
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 54221efe504d474aefd71a70ec680531c3135c8a to b1b005e3561bf72935e1ddfd1e0a1b967af2108a


****Parsing for addition at revision b1b005e3561bf72935e1ddfd1e0a1b967af2108a****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of b1b005e3561bf72935e1ddfd1e0a1b967af2108a and ab1ea6a3945114d12670a7e889d49663c2534b23:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 7
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision b1b005e3561bf72935e1ddfd1e0a1b967af2108a to ab1ea6a3945114d12670a7e889d49663c2534b23


****Parsing for addition at revision ab1ea6a3945114d12670a7e889d49663c2534b23****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of ab1ea6a3945114d12670a7e889d49663c2534b23 and acefe80257e038c184b9565c08960fb69ef3e1b3:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 7
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision ab1ea6a3945114d12670a7e889d49663c2534b23 to acefe80257e038c184b9565c08960fb69ef3e1b3


****Parsing for addition at revision acefe80257e038c184b9565c08960fb69ef3e1b3****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of acefe80257e038c184b9565c08960fb69ef3e1b3 and 2c1e8f367a32b1f86102c42797222ac17d85a0e6:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 7
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision acefe80257e038c184b9565c08960fb69ef3e1b3 to 2c1e8f367a32b1f86102c42797222ac17d85a0e6


****Parsing for addition at revision 2c1e8f367a32b1f86102c42797222ac17d85a0e6****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 2c1e8f367a32b1f86102c42797222ac17d85a0e6 and 6fcdc5bee25fece2dbcc37cb2b93e1fb297f0ce3:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 7
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 2c1e8f367a32b1f86102c42797222ac17d85a0e6 to 6fcdc5bee25fece2dbcc37cb2b93e1fb297f0ce3


****Parsing for addition at revision 6fcdc5bee25fece2dbcc37cb2b93e1fb297f0ce3****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 6fcdc5bee25fece2dbcc37cb2b93e1fb297f0ce3 and d532d5cc5b501ee8e4165f9e72a012b5244b08c3:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 7
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 6fcdc5bee25fece2dbcc37cb2b93e1fb297f0ce3 to d532d5cc5b501ee8e4165f9e72a012b5244b08c3


****Parsing for addition at revision d532d5cc5b501ee8e4165f9e72a012b5244b08c3****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of d532d5cc5b501ee8e4165f9e72a012b5244b08c3 and 85964cdcb5b8cba635e24e8de9ff4f3ef0157dc2:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 7
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision d532d5cc5b501ee8e4165f9e72a012b5244b08c3 to 85964cdcb5b8cba635e24e8de9ff4f3ef0157dc2


****Parsing for addition at revision 85964cdcb5b8cba635e24e8de9ff4f3ef0157dc2****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 85964cdcb5b8cba635e24e8de9ff4f3ef0157dc2 and e48de87d21bf28e62e7649ea72017c13b63c933a:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 7
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit '85964cdcb5b8cba635e24e8de9ff4f3ef0157dc2' because it has 2 parents, only commits with exactly one parent are supported

****Parsing for addition at revision e48de87d21bf28e62e7649ea72017c13b63c933a****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};

 Generics pattern public class Population was added at revision e48de87d21bf28e62e7649ea72017c13b63c933a

gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of e48de87d21bf28e62e7649ea72017c13b63c933a and 162645957bc4c41ca199708be6883e8e9fece380:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision e48de87d21bf28e62e7649ea72017c13b63c933a to 162645957bc4c41ca199708be6883e8e9fece380


****Parsing for addition at revision 162645957bc4c41ca199708be6883e8e9fece380****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 162645957bc4c41ca199708be6883e8e9fece380 and 74f951ab4180e76d6b881d2d007a2cb006bdef0b:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 162645957bc4c41ca199708be6883e8e9fece380 to 74f951ab4180e76d6b881d2d007a2cb006bdef0b


****Parsing for addition at revision 74f951ab4180e76d6b881d2d007a2cb006bdef0b****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 74f951ab4180e76d6b881d2d007a2cb006bdef0b and 007102bcbb2952a091dfbce89ae1adfee20fe717:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 74f951ab4180e76d6b881d2d007a2cb006bdef0b to 007102bcbb2952a091dfbce89ae1adfee20fe717


****Parsing for addition at revision 007102bcbb2952a091dfbce89ae1adfee20fe717****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 007102bcbb2952a091dfbce89ae1adfee20fe717 and 30f0f3c21911bbc378d2474dfc7a26e742a50015:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 007102bcbb2952a091dfbce89ae1adfee20fe717 to 30f0f3c21911bbc378d2474dfc7a26e742a50015


****Parsing for addition at revision 30f0f3c21911bbc378d2474dfc7a26e742a50015****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();

 Generics pattern new ArrayList<Tile>() was added at revision 30f0f3c21911bbc378d2474dfc7a26e742a50015

Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 30f0f3c21911bbc378d2474dfc7a26e742a50015 and ff218b5f940174e52513b3fbce84bc073e73c31e:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 2
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 30f0f3c21911bbc378d2474dfc7a26e742a50015 to ff218b5f940174e52513b3fbce84bc073e73c31e


****Parsing for addition at revision ff218b5f940174e52513b3fbce84bc073e73c31e****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of ff218b5f940174e52513b3fbce84bc073e73c31e and 393dcf1c6afaeeec8e52bbf22e2a2db3cb044224:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 2
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision ff218b5f940174e52513b3fbce84bc073e73c31e to 393dcf1c6afaeeec8e52bbf22e2a2db3cb044224


****Parsing for addition at revision 393dcf1c6afaeeec8e52bbf22e2a2db3cb044224****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 393dcf1c6afaeeec8e52bbf22e2a2db3cb044224 and 0766b6ce0636338a70a2391b97438910ac756bd1:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 2
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 393dcf1c6afaeeec8e52bbf22e2a2db3cb044224 to 0766b6ce0636338a70a2391b97438910ac756bd1


****Parsing for addition at revision 0766b6ce0636338a70a2391b97438910ac756bd1****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 0766b6ce0636338a70a2391b97438910ac756bd1 and efc6424c12594e9cc060a3043c86e79817b97fdc:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 2
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 0766b6ce0636338a70a2391b97438910ac756bd1 to efc6424c12594e9cc060a3043c86e79817b97fdc


****Parsing for addition at revision efc6424c12594e9cc060a3043c86e79817b97fdc****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of efc6424c12594e9cc060a3043c86e79817b97fdc and 62844f167394cadc289297fa607c6b38cfae9a72:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 2
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision efc6424c12594e9cc060a3043c86e79817b97fdc to 62844f167394cadc289297fa607c6b38cfae9a72


****Parsing for addition at revision 62844f167394cadc289297fa607c6b38cfae9a72****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 62844f167394cadc289297fa607c6b38cfae9a72 and 65b167f5c8b543cd38feb7a748ca818eb6fe4561:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 2
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 62844f167394cadc289297fa607c6b38cfae9a72 to 65b167f5c8b543cd38feb7a748ca818eb6fe4561


****Parsing for addition at revision 65b167f5c8b543cd38feb7a748ca818eb6fe4561****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 65b167f5c8b543cd38feb7a748ca818eb6fe4561 and bfbdac953d89e67ac7a4edd930a33f26cc57400c:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 2
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 65b167f5c8b543cd38feb7a748ca818eb6fe4561 to bfbdac953d89e67ac7a4edd930a33f26cc57400c


****Parsing for addition at revision bfbdac953d89e67ac7a4edd930a33f26cc57400c****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of bfbdac953d89e67ac7a4edd930a33f26cc57400c and 21c36cd67a125655fdadb46cecc615a7cdc9ad48:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 2
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision bfbdac953d89e67ac7a4edd930a33f26cc57400c to 21c36cd67a125655fdadb46cecc615a7cdc9ad48


****Parsing for addition at revision 21c36cd67a125655fdadb46cecc615a7cdc9ad48****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 21c36cd67a125655fdadb46cecc615a7cdc9ad48 and 9b44298c383f0cbc711ae46e0bdf434c203ae263:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 2
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 21c36cd67a125655fdadb46cecc615a7cdc9ad48 to 9b44298c383f0cbc711ae46e0bdf434c203ae263


****Parsing for addition at revision 9b44298c383f0cbc711ae46e0bdf434c203ae263****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 9b44298c383f0cbc711ae46e0bdf434c203ae263 and 69d3082fbe5cd10068fcea08058ee24f71d7c31e:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 2
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 9b44298c383f0cbc711ae46e0bdf434c203ae263 to 69d3082fbe5cd10068fcea08058ee24f71d7c31e


****Parsing for addition at revision 69d3082fbe5cd10068fcea08058ee24f71d7c31e****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 69d3082fbe5cd10068fcea08058ee24f71d7c31e and 09685eb752d3311ac4dab7a513fc5d9ff76e166b:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 2
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 69d3082fbe5cd10068fcea08058ee24f71d7c31e to 09685eb752d3311ac4dab7a513fc5d9ff76e166b


****Parsing for addition at revision 09685eb752d3311ac4dab7a513fc5d9ff76e166b****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 09685eb752d3311ac4dab7a513fc5d9ff76e166b and 90be325707cf9481b6bb899ee5afb5e961f48a4a:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 2
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 09685eb752d3311ac4dab7a513fc5d9ff76e166b to 90be325707cf9481b6bb899ee5afb5e961f48a4a


****Parsing for addition at revision 90be325707cf9481b6bb899ee5afb5e961f48a4a****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 90be325707cf9481b6bb899ee5afb5e961f48a4a and ada2c6c0249e0c283807eb3a8e6d1df2be6169e5:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 2
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 90be325707cf9481b6bb899ee5afb5e961f48a4a to ada2c6c0249e0c283807eb3a8e6d1df2be6169e5


****Parsing for addition at revision ada2c6c0249e0c283807eb3a8e6d1df2be6169e5****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of ada2c6c0249e0c283807eb3a8e6d1df2be6169e5 and 9f5818866690dfe78596902ce92ac7c686ed1523:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 2
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision ada2c6c0249e0c283807eb3a8e6d1df2be6169e5 to 9f5818866690dfe78596902ce92ac7c686ed1523


****Parsing for addition at revision 9f5818866690dfe78596902ce92ac7c686ed1523****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 9f5818866690dfe78596902ce92ac7c686ed1523 and e6fe4e206142bc35125d71a89502c02f94f8ae7a:
	--> Added type argument methods = 1
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 2
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 9f5818866690dfe78596902ce92ac7c686ed1523 to e6fe4e206142bc35125d71a89502c02f94f8ae7a


****Parsing for addition at revision e6fe4e206142bc35125d71a89502c02f94f8ae7a****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

 Generics pattern ArrayList<Tile> getSelection(int i, int j) was added at revision e6fe4e206142bc35125d71a89502c02f94f8ae7a


 Generics pattern new ArrayList<Tile>(alreadyHitInThisChainReaction.size()) was added at revision e6fe4e206142bc35125d71a89502c02f94f8ae7a


Diff of e6fe4e206142bc35125d71a89502c02f94f8ae7a and 87e11741062b5ad1af48dab8982ec3703deccaa5:
	--> Added type argument methods = 2
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 3
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision e6fe4e206142bc35125d71a89502c02f94f8ae7a to 87e11741062b5ad1af48dab8982ec3703deccaa5


****Parsing for addition at revision 87e11741062b5ad1af48dab8982ec3703deccaa5****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 87e11741062b5ad1af48dab8982ec3703deccaa5 and 4d4acb898374516d13602a3b48aa915bf43c1c55:
	--> Added type argument methods = 2
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 3
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 87e11741062b5ad1af48dab8982ec3703deccaa5 to 4d4acb898374516d13602a3b48aa915bf43c1c55


****Parsing for addition at revision 4d4acb898374516d13602a3b48aa915bf43c1c55****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 4d4acb898374516d13602a3b48aa915bf43c1c55 and 61fb9caa111e092e84049708e9ed892869e683db:
	--> Added type argument methods = 2
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 3
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 4d4acb898374516d13602a3b48aa915bf43c1c55 to 61fb9caa111e092e84049708e9ed892869e683db


****Parsing for addition at revision 61fb9caa111e092e84049708e9ed892869e683db****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 61fb9caa111e092e84049708e9ed892869e683db and e372d35a362b408c561a2b1e245879fb578abf6f:
	--> Added type argument methods = 2
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 3
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 61fb9caa111e092e84049708e9ed892869e683db to e372d35a362b408c561a2b1e245879fb578abf6f


****Parsing for addition at revision e372d35a362b408c561a2b1e245879fb578abf6f****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of e372d35a362b408c561a2b1e245879fb578abf6f and 10d77c2048951301f150e323b9374b6883891163:
	--> Added type argument methods = 2
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 3
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision e372d35a362b408c561a2b1e245879fb578abf6f to 10d77c2048951301f150e323b9374b6883891163


****Parsing for addition at revision 10d77c2048951301f150e323b9374b6883891163****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 10d77c2048951301f150e323b9374b6883891163 and 6fc6ed953ab75a68b0273e13a5885d34e5d7f2ab:
	--> Added type argument methods = 2
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 3
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 10d77c2048951301f150e323b9374b6883891163 to 6fc6ed953ab75a68b0273e13a5885d34e5d7f2ab


****Parsing for addition at revision 6fc6ed953ab75a68b0273e13a5885d34e5d7f2ab****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 6fc6ed953ab75a68b0273e13a5885d34e5d7f2ab and 8a1b1ed2ee5c46afda7141462dca699de97c18a0:
	--> Added type argument methods = 2
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 3
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 6fc6ed953ab75a68b0273e13a5885d34e5d7f2ab to 8a1b1ed2ee5c46afda7141462dca699de97c18a0


****Parsing for addition at revision 8a1b1ed2ee5c46afda7141462dca699de97c18a0****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();

 Generics pattern class GamePanel was added at revision 8a1b1ed2ee5c46afda7141462dca699de97c18a0

Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of 8a1b1ed2ee5c46afda7141462dca699de97c18a0 and f67e1f85535e8edd984df5967c373f82f9fc9163:
	--> Added type argument methods = 2
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 12
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 3
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 8a1b1ed2ee5c46afda7141462dca699de97c18a0 to f67e1f85535e8edd984df5967c373f82f9fc9163


****Parsing for addition at revision f67e1f85535e8edd984df5967c373f82f9fc9163****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of f67e1f85535e8edd984df5967c373f82f9fc9163 and a2a126084f6ccd1dbd78d8b3d20971ae5b7dc8b9:
	--> Added type argument methods = 2
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 12
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 3
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f67e1f85535e8edd984df5967c373f82f9fc9163 to a2a126084f6ccd1dbd78d8b3d20971ae5b7dc8b9


****Parsing for addition at revision a2a126084f6ccd1dbd78d8b3d20971ae5b7dc8b9****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of a2a126084f6ccd1dbd78d8b3d20971ae5b7dc8b9 and c41ccd2c0060870b9572d05a5f1949af21613628:
	--> Added type argument methods = 2
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 12
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 3
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision a2a126084f6ccd1dbd78d8b3d20971ae5b7dc8b9 to c41ccd2c0060870b9572d05a5f1949af21613628


****Parsing for addition at revision c41ccd2c0060870b9572d05a5f1949af21613628****

Added ComplexInitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithm.java to .\flood\ repository source files.
Added InitializationAlgorithms.java to .\flood\ repository source files.
Added SimpleInitializationAlgorithm.java to .\flood\ repository source files.
Added SquaresInitializationAlgorithm.java to .\flood\ repository source files.
Added Configuration.java to .\flood\ repository source files.
Added Dimension.java to .\flood\ repository source files.
Added Direction.java to .\flood\ repository source files.
Added Game.java to .\flood\ repository source files.
Added GameData.java to .\flood\ repository source files.
Added GamePanel.java to .\flood\ repository source files.
Added GameSize.java to .\flood\ repository source files.
Added HighlightMode.java to .\flood\ repository source files.
Added Launcher.java to .\flood\ repository source files.
Added Population.java to .\flood\ repository source files.
Added Theme.java to .\flood\ repository source files.
Added Tile.java to .\flood\ repository source files.
Added TileMatrix.java to .\flood\ repository source files.
Added TileType.java to .\flood\ repository source files.
Added Utils.java to .\flood\ repository source files.
double randomDouble;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
int spreading = 0;
notDiagonalNeighbors=calculateNotDiagonalNeighbors(i,j,matrixDimensions)
int notDiagonalNeighbors = calculateNotDiagonalNeighbors(i, j, matrixDimensions);
int remainingNeighbors = notDiagonalNeighbors;
int y = j + b;
int x = i + a;
int y = j + b;
int x = i + a;
int neighbors = 0;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
matrixDimensions=tileMatrix.getDimensions()
Dimension matrixDimensions = tileMatrix.getDimensions();
Tile tile;
JComboBox<E> comboBox = new JComboBox<E>();
final JDialog dialog = new JDialog(owner, "Configuration Panel", true);
algorithmPanel=makeAlgorithmPanel()
JPanel algorithmPanel = makeAlgorithmPanel();
themePanel=makeThemePanel()
JPanel themePanel = makeThemePanel();
sizePanel=makeSizePanel()
JPanel sizePanel = makeSizePanel();
final JButton doneButton = new JButton("Done");
GridLayout panelLayout = new GridLayout(0, 1, 5, 5);
JPanel panel = new JPanel(panelLayout);
initializationAlgorithms=InitializationAlgorithms.getInitializationAlgorithms()
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
List<InitializationAlgorithm> initializationAlgorithms = InitializationAlgorithms.getInitializationAlgorithms();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Initialization Algorithm");
comboBox=makeComboBox(initializationAlgorithms,initializationAlgorithm)
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox<InitializationAlgorithm> comboBox = makeComboBox(initializationAlgorithms, initializationAlgorithm);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Theme");
comboBox=makeComboBox(Arrays.asList(GameData.THEMES),theme)
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox<Theme> comboBox = makeComboBox(Arrays.asList(GameData.THEMES), theme);
JComboBox box = (JComboBox) e.getSource();
JPanel panel = new JPanel(new BorderLayout());
JLabel label = new JLabel("Size");
comboBox=makeComboBox(Arrays.asList(GameSize.values()),gameSize)
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox<GameSize> comboBox = makeComboBox(Arrays.asList(GameSize.values()), gameSize);
JComboBox box = (JComboBox) e.getSource();
JMenuBar menuBar = new JMenuBar();
JMenu optionsMenu = new JMenu("Options");
JMenu sizeMenu = new JMenu("Size");
JMenu themeMenu = new JMenu("Theme");
JMenu highlightMenu = new JMenu("Highlight");
JMenuItem menuItem = new JMenuItem(Utils.toTitle(possibleSize.toString()));
ButtonGroup themeButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(theme.name);
ButtonGroup highlightButtonGroup = new ButtonGroup();
JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(Utils.toTitle(highlightMode.toString()));
JMenuItem resetOption = new JMenuItem("Reset");
JMenuItem configurationsOption = new JMenuItem("Configurations");
JMenuItem exitOption = new JMenuItem("Exit");
int panelSide = gameSize.tileSide * gameSize.tilesPerRow;
insets=frame.getInsets()
Insets insets = frame.getInsets();
int width = panelSide + insets.right + insets.left;
int height = panelSide + MENU_BAR_HEIGHT + STATUS_BAR_HEIGHT + insets.bottom + insets.top;
c=getMouseCoordinates(e.getPoint())
int[] c = getMouseCoordinates(e.getPoint());
choice=JOptionPane.showConfirmDialog(this,END_GAME_MESSAGE,END_GAME_TITLE,JOptionPane.YES_NO_OPTION)
int choice = JOptionPane.showConfirmDialog(this, END_GAME_MESSAGE, END_GAME_TITLE, JOptionPane.YES_NO_OPTION);
int[] coordinates = new int[2];
coordinates=getMouseCoordinates(getMousePosition())
int[] coordinates = getMouseCoordinates(getMousePosition());
ArrayList<Tile> selection = new ArrayList<Tile>();
currentTile=tileMatrix.getTile(i,j)
Tile currentTile = tileMatrix.getTile(i, j);
int factor = tileSide - PEOPLE_SQUARE_SIDE - 1;
int x = 1 + (int) (factor * human[0]);
int y = 1 + (int) (factor * human[1]);
water=tileMatrix.getWaterCount()
int water = tileMatrix.getWaterCount();
int total = totalTiles;
StringBuilder stringBuilder = new StringBuilder();
human=tileMatrix.getTotalPopulation()
int human = tileMatrix.getTotalPopulation();
humansRemaining=String.format("%d humans remaining.",human)
String humansRemaining = String.format("%d humans remaining.", human);
int stringWidth = (int) g.getFontMetrics().getStringBounds(humansRemaining, g).getBounds2D().getWidth();
Population population = new Population();
Double[] human = {GameData.random.nextDouble(), GameData.random.nextDouble()};
gameSize=configuration.getGameSize()
GameSize gameSize = configuration.getGameSize();
ArrayList<Tile> selection = new ArrayList<Tile>(alreadyHitInThisChainReaction.size());
x=GameData.random.nextInt(tileArray.length)
int x = GameData.random.nextInt(tileArray.length);
y=GameData.random.nextInt(tileArray.length)
int y = GameData.random.nextInt(tileArray.length);
Tile tile = tileArray[j][i];
int y = j + b;
int x = i + a;
int total = 0;

Diff of c41ccd2c0060870b9572d05a5f1949af21613628 and a75f47ea5a79876f254bf6e071f55916fe413943:
	--> Added type argument methods = 2
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 12
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 4
	--> recency = year
	--> Added class instantiations = 3
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision c41ccd2c0060870b9572d05a5f1949af21613628 to a75f47ea5a79876f254bf6e071f55916fe413943

************Analysis complete************
Added generics to repository flood = 18

Bernardo Sulzbach added type argument method count = 2
	--> recency = year
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 12
	--> recency = year
Bernardo Sulzbach added type parameter method count = 1
	--> recency = year
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 4
	--> recency = year
Bernardo Sulzbach added class instantiation count = 3
	--> recency = year
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
File copied successfully!
