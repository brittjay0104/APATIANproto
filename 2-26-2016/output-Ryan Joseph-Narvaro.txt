Narvaro -- ryan-joseph -- Ryan Joseph
https://github.com/ryan-joseph/Narvaro.git
git clone https://github.com/ryan-joseph/Narvaro.git
.\Narvaro\
.\Narvaro\.git
0
Project cloned!
Ryan Joseph is responsible for commit 92d17f985716db15ad2dea5f99d048d7bf9643cc
Ryan Joseph is responsible for commit 54b4a39e5dbfa11b6626a5db621dcb47ef06b362
Ryan Joseph is responsible for commit 8800c05cec89146e032de02d4c0537df94c0191e
Ryan Joseph is responsible for commit c3a4ab3834b7bdc652e99c50d3b3054258e01ec4
Ryan Joseph is responsible for commit b6b7432e09b6ea34b81b5b7f70d1779f5f733772
Ryan Joseph is responsible for commit 17dea39e2b1823a8f5ddef1242f56bb828162ed8
Ryan Joseph is responsible for commit 4ce4bc33bac1b8ae741638c3eb17f388cd7140e2
Ryan Joseph is responsible for commit 7fed30384ac625aa1c467ec46f127ed7a080c578
Ryan Joseph is responsible for commit 23a8f5b21e17e5f0f9beeea00d040fe1cab22011
Ryan Joseph is responsible for commit 5a8e26b67aaa7c0ee7468c19092cca6fa591d6a3
Ryan Joseph is responsible for commit f8603bf463279e3977bd117afa1dd64c865fe0aa
Ryan Joseph is responsible for commit 66353b907ee8d7854e5d58aed7465d4f18a0960e
Ryan Joseph is responsible for commit 71c004f065d95a9206b5c03d93eb2091ba220e81
Ryan Joseph is responsible for commit 16d9fe1d22789d568bae35799695fecbcc2dd176
Ryan Joseph is responsible for commit 51f533f63d8f14c655eb9e164805f34b90fee90e
Ryan Joseph is responsible for commit 1b7debf1a1cccbcda7cb053095ebc280dbf925bc
Ryan Joseph is responsible for commit b7c310f2b638277135bde441779d833f27f8305b
Ryan Joseph is responsible for commit 802764a30dc24f93e3b275e06dca292cae4abd71
Ryan Joseph is responsible for commit 307f90298465f007ba066bc6c8ee692ac51a50e2
Ryan Joseph is responsible for commit b8e5876f4cec5e58ffd68e48c08afa980bc8a4fa
Ryan Joseph is responsible for commit 461dea3331a1f1d6e70e458d5d256b4e62e8205a
Ryan Joseph is responsible for commit f6edb51b85544ff9200cd1213c41dd7a7a17fe64
Ryan Joseph is responsible for commit 4009f7141b1e935b1954addcb36385d2366b2037
Ryan Joseph is responsible for commit b1b9a379f8569b76aa8ba35fc1def0d2c8fd515c
Ryan Joseph is responsible for commit 721e529d757870546c3667c0b90b10e70da73882
Ryan Joseph is responsible for commit c0da0071c85e2fa8b7760206f3886c48ef31825c
Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.

 ************ ANALYZING FOR USAGE PATTERN ADDITION ************


****Parsing for addition at revision 92d17f985716db15ad2dea5f99d048d7bf9643cc****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
boolean ok = true;
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ParkMonth pm;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
BigDecimal recordCount;
BigDecimal[] bdtotals = new BigDecimal[14];
int[] itotals = new int[100];
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(),
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(),
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(),
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(),
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(),
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(),
                        md.getoHangtown(), md.getoOther());
SimpleDataProperty sdp = new SimpleDataProperty("TOTALS: " + parkName, bdtotals[0], itotals[1],
                    itotals[2], itotals[3], itotals[4], itotals[5], itotals[6], itotals[7], itotals[8], itotals[9],
                    itotals[10], itotals[11], itotals[12], bdtotals[13], itotals[14], itotals[15],
                    itotals[16], itotals[17], itotals[18], itotals[19], itotals[20], itotals[21], itotals[22],
                    itotals[23], itotals[24]);
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 92d17f985716db15ad2dea5f99d048d7bf9643cc and 54b4a39e5dbfa11b6626a5db621dcb47ef06b362:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 92d17f985716db15ad2dea5f99d048d7bf9643cc to 54b4a39e5dbfa11b6626a5db621dcb47ef06b362


****Parsing for addition at revision 54b4a39e5dbfa11b6626a5db621dcb47ef06b362****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
boolean ok = true;
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ParkMonth pm;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
BigDecimal recordCount;
BigDecimal[] bdtotals = new BigDecimal[14];
int[] itotals = new int[100];
SimpleDataProperty sdp = new SimpleDataProperty(parkName, bdtotals[0], itotals[1],
                    itotals[2], itotals[3], itotals[4], itotals[5], itotals[6], itotals[7], itotals[8], itotals[9],
                    itotals[10], itotals[11], itotals[12], bdtotals[13], itotals[14], itotals[15],
                    itotals[16], itotals[17], itotals[18], itotals[19], itotals[20], itotals[21], itotals[22],
                    itotals[23], itotals[24]);
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());

 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("goldenBear") was added at revision 54b4a39e5dbfa11b6626a5db621dcb47ef06b362


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("nonResOHVPass") was added at revision 54b4a39e5dbfa11b6626a5db621dcb47ef06b362


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("disabledCamping") was added at revision 54b4a39e5dbfa11b6626a5db621dcb47ef06b362

final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 54b4a39e5dbfa11b6626a5db621dcb47ef06b362 and 32f94b7e1980796c9acecfea38f833e8166cd300:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 8
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 54b4a39e5dbfa11b6626a5db621dcb47ef06b362 to 32f94b7e1980796c9acecfea38f833e8166cd300

************Analysis complete************
Added generics to repository Narvaro = 3

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 0
	--> recency = null
Ryan Joseph added type declaration count = 0
	--> recency = null
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 0
	--> recency = null
Ryan Joseph added class instantiation count = 8
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 3

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 0
	--> recency = null
Ryan Joseph added type declaration count = 0
	--> recency = null
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 0
	--> recency = null
Ryan Joseph added class instantiation count = 8
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 3

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 0
	--> recency = null
Ryan Joseph added type declaration count = 0
	--> recency = null
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 0
	--> recency = null
Ryan Joseph added class instantiation count = 8
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 3

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 0
	--> recency = null
Ryan Joseph added type declaration count = 0
	--> recency = null
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 0
	--> recency = null
Ryan Joseph added class instantiation count = 8
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 3

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 0
	--> recency = null
Ryan Joseph added type declaration count = 0
	--> recency = null
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 0
	--> recency = null
Ryan Joseph added class instantiation count = 8
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 3

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 0
	--> recency = null
Ryan Joseph added type declaration count = 0
	--> recency = null
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 0
	--> recency = null
Ryan Joseph added class instantiation count = 8
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null

****Parsing for addition at revision 8800c05cec89146e032de02d4c0537df94c0191e****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");

 Generics pattern public class SimpleDataProperty was added at revision 8800c05cec89146e032de02d4c0537df94c0191e

con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
boolean ok = true;
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ParkMonth pm;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());

 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("park") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("paidConversionFactor") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("paidTotals") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("specialEvents") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("dayUse") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("senior") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("disabled") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("annualPassSale") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("camping") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("seniorCamping") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("disabledVeteran") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("freeConversionFactor") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("freeTotals") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("classVehicles") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("classPeople") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("mc") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("atv") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("fourByFour") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("rov") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("aqma") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("allStarKarting") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("hangtown") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e


 Generics pattern new PropertyValueFactory<SimpleDataProperty, String>("other") was added at revision 8800c05cec89146e032de02d4c0537df94c0191e

final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 8800c05cec89146e032de02d4c0537df94c0191e and 0c72724ba9d3437033b28ba87686bc0d3efcb00d:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 54
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 8800c05cec89146e032de02d4c0537df94c0191e to 0c72724ba9d3437033b28ba87686bc0d3efcb00d

************Analysis complete************
Added generics to repository Narvaro = 27

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 0
	--> recency = null
Ryan Joseph added type declaration count = 1
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 0
	--> recency = null
Ryan Joseph added class instantiation count = 54
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 27

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 0
	--> recency = null
Ryan Joseph added type declaration count = 1
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 0
	--> recency = null
Ryan Joseph added class instantiation count = 54
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 27

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 0
	--> recency = null
Ryan Joseph added type declaration count = 1
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 0
	--> recency = null
Ryan Joseph added class instantiation count = 54
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 27

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 0
	--> recency = null
Ryan Joseph added type declaration count = 1
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 0
	--> recency = null
Ryan Joseph added class instantiation count = 54
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 27

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 0
	--> recency = null
Ryan Joseph added type declaration count = 1
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 0
	--> recency = null
Ryan Joseph added class instantiation count = 54
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 27

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 0
	--> recency = null
Ryan Joseph added type declaration count = 1
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 0
	--> recency = null
Ryan Joseph added class instantiation count = 54
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 27

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 0
	--> recency = null
Ryan Joseph added type declaration count = 1
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 0
	--> recency = null
Ryan Joseph added class instantiation count = 54
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null

****Parsing for addition at revision c3a4ab3834b7bdc652e99c50d3b3054258e01ec4****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());

 Generics pattern new ChangeListener<String>() was added at revision c3a4ab3834b7bdc652e99c50d3b3054258e01ec4


 Generics pattern ObservableValue<? extends String> was added at revision c3a4ab3834b7bdc652e99c50d3b3054258e01ec4


 Generics pattern new ChangeListener<Integer>() was added at revision c3a4ab3834b7bdc652e99c50d3b3054258e01ec4


 Generics pattern ObservableValue<? extends Integer> was added at revision c3a4ab3834b7bdc652e99c50d3b3054258e01ec4


 Generics pattern new ChangeListener<Month>() was added at revision c3a4ab3834b7bdc652e99c50d3b3054258e01ec4


 Generics pattern ObservableValue<? extends Month> was added at revision c3a4ab3834b7bdc652e99c50d3b3054258e01ec4


 Generics pattern private class StoreParkMonthTask was added at revision c3a4ab3834b7bdc652e99c50d3b3054258e01ec4

final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;

 Generics pattern new EventHandler<WindowEvent>() was added at revision c3a4ab3834b7bdc652e99c50d3b3054258e01ec4

Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of c3a4ab3834b7bdc652e99c50d3b3054258e01ec4 and b6b7432e09b6ea34b81b5b7f70d1779f5f733772:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 58
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit 'c3a4ab3834b7bdc652e99c50d3b3054258e01ec4' because it has 2 parents, only commits with exactly one parent are supported

****Parsing for addition at revision b6b7432e09b6ea34b81b5b7f70d1779f5f733772****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of b6b7432e09b6ea34b81b5b7f70d1779f5f733772 and 17dea39e2b1823a8f5ddef1242f56bb828162ed8:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 58
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision b6b7432e09b6ea34b81b5b7f70d1779f5f733772 to 17dea39e2b1823a8f5ddef1242f56bb828162ed8


****Parsing for addition at revision 17dea39e2b1823a8f5ddef1242f56bb828162ed8****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());

 Generics pattern ObservableList<ObservableList> entries; was added at revision 17dea39e2b1823a8f5ddef1242f56bb828162ed8


 Generics pattern List<String> parkNames = parkView.getSelectionModel().getSelectedItems(); was added at revision 17dea39e2b1823a8f5ddef1242f56bb828162ed8


 Generics pattern new Callback<TableColumn.CellDataFeatures, ObservableValue>() was added at revision 17dea39e2b1823a8f5ddef1242f56bb828162ed8


 Generics pattern ObservableList<String> row = FXCollections.observableArrayList(); was added at revision 17dea39e2b1823a8f5ddef1242f56bb828162ed8

final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;

 Generics pattern new EventHandler<KeyEvent>() was added at revision 17dea39e2b1823a8f5ddef1242f56bb828162ed8

Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 17dea39e2b1823a8f5ddef1242f56bb828162ed8 and 0c83b5e8e121f2dc27f9265080796bc720947530:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 3
	--> recency = year
	--> Added class instantiations = 61
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 17dea39e2b1823a8f5ddef1242f56bb828162ed8 to 0c83b5e8e121f2dc27f9265080796bc720947530

************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 40

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 3
	--> recency = year
Ryan Joseph added class instantiation count = 61
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null

****Parsing for addition at revision 4ce4bc33bac1b8ae741638c3eb17f388cd7140e2****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());

 Generics pattern ObservableList<ObservableList> entries; was added at revision 4ce4bc33bac1b8ae741638c3eb17f388cd7140e2


 Generics pattern List<String> parkNames = parkView.getSelectionModel().getSelectedItems(); was added at revision 4ce4bc33bac1b8ae741638c3eb17f388cd7140e2


 Generics pattern new Callback<TableColumn.CellDataFeatures, ObservableValue>() was added at revision 4ce4bc33bac1b8ae741638c3eb17f388cd7140e2


 Generics pattern ObservableList<String> row = FXCollections.observableArrayList(); was added at revision 4ce4bc33bac1b8ae741638c3eb17f388cd7140e2

final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 4ce4bc33bac1b8ae741638c3eb17f388cd7140e2 and b0ef4919759dfbd7d84e8f4aab87f7ae32a849c3:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 63
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 4ce4bc33bac1b8ae741638c3eb17f388cd7140e2 to b0ef4919759dfbd7d84e8f4aab87f7ae32a849c3

************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 44

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 63
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null

****Parsing for addition at revision 7fed30384ac625aa1c467ec46f127ed7a080c578****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 7fed30384ac625aa1c467ec46f127ed7a080c578 and 23a8f5b21e17e5f0f9beeea00d040fe1cab22011:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 63
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 7fed30384ac625aa1c467ec46f127ed7a080c578 to 23a8f5b21e17e5f0f9beeea00d040fe1cab22011


****Parsing for addition at revision 23a8f5b21e17e5f0f9beeea00d040fe1cab22011****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;

 Generics pattern new EventHandler<KeyEvent>() was added at revision 23a8f5b21e17e5f0f9beeea00d040fe1cab22011

Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 23a8f5b21e17e5f0f9beeea00d040fe1cab22011 and 5a8e26b67aaa7c0ee7468c19092cca6fa591d6a3:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 23a8f5b21e17e5f0f9beeea00d040fe1cab22011 to 5a8e26b67aaa7c0ee7468c19092cca6fa591d6a3


****Parsing for addition at revision 5a8e26b67aaa7c0ee7468c19092cca6fa591d6a3****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 5a8e26b67aaa7c0ee7468c19092cca6fa591d6a3 and ae1cd49f54c279e00878bf14625fe61e4b5825ab:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit '5a8e26b67aaa7c0ee7468c19092cca6fa591d6a3' because it has 2 parents, only commits with exactly one parent are supported
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null

****Parsing for addition at revision f8603bf463279e3977bd117afa1dd64c865fe0aa****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of f8603bf463279e3977bd117afa1dd64c865fe0aa and 66353b907ee8d7854e5d58aed7465d4f18a0960e:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f8603bf463279e3977bd117afa1dd64c865fe0aa to 66353b907ee8d7854e5d58aed7465d4f18a0960e


****Parsing for addition at revision 66353b907ee8d7854e5d58aed7465d4f18a0960e****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 66353b907ee8d7854e5d58aed7465d4f18a0960e and 4517d5309125160e6539f329524f6df7efe95a38:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 66353b907ee8d7854e5d58aed7465d4f18a0960e to 4517d5309125160e6539f329524f6df7efe95a38

************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null

****Parsing for addition at revision 71c004f065d95a9206b5c03d93eb2091ba220e81****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 71c004f065d95a9206b5c03d93eb2091ba220e81 and b4dff3681c57c0bd40945fda1a76c07943c3daa7:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit '71c004f065d95a9206b5c03d93eb2091ba220e81' because it has 2 parents, only commits with exactly one parent are supported
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null

****Parsing for addition at revision 16d9fe1d22789d568bae35799695fecbcc2dd176****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 16d9fe1d22789d568bae35799695fecbcc2dd176 and da9ba2b4cd8cec7b96c148c5522387d2887f7f87:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit '16d9fe1d22789d568bae35799695fecbcc2dd176' because it has 2 parents, only commits with exactly one parent are supported
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null

****Parsing for addition at revision 51f533f63d8f14c655eb9e164805f34b90fee90e****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 51f533f63d8f14c655eb9e164805f34b90fee90e and 1b7debf1a1cccbcda7cb053095ebc280dbf925bc:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 51f533f63d8f14c655eb9e164805f34b90fee90e to 1b7debf1a1cccbcda7cb053095ebc280dbf925bc


****Parsing for addition at revision 1b7debf1a1cccbcda7cb053095ebc280dbf925bc****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 1b7debf1a1cccbcda7cb053095ebc280dbf925bc and ed8497bf5d7368046188724ae94afc5db712b27d:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 1b7debf1a1cccbcda7cb053095ebc280dbf925bc to ed8497bf5d7368046188724ae94afc5db712b27d

************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null

****Parsing for addition at revision b7c310f2b638277135bde441779d833f27f8305b****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of b7c310f2b638277135bde441779d833f27f8305b and 802764a30dc24f93e3b275e06dca292cae4abd71:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision b7c310f2b638277135bde441779d833f27f8305b to 802764a30dc24f93e3b275e06dca292cae4abd71


****Parsing for addition at revision 802764a30dc24f93e3b275e06dca292cae4abd71****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 802764a30dc24f93e3b275e06dca292cae4abd71 and 307f90298465f007ba066bc6c8ee692ac51a50e2:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 802764a30dc24f93e3b275e06dca292cae4abd71 to 307f90298465f007ba066bc6c8ee692ac51a50e2


****Parsing for addition at revision 307f90298465f007ba066bc6c8ee692ac51a50e2****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 307f90298465f007ba066bc6c8ee692ac51a50e2 and ab08f6b41dd098389ca920988807d6785b8eacf8:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 307f90298465f007ba066bc6c8ee692ac51a50e2 to ab08f6b41dd098389ca920988807d6785b8eacf8

************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null

****Parsing for addition at revision b8e5876f4cec5e58ffd68e48c08afa980bc8a4fa****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of b8e5876f4cec5e58ffd68e48c08afa980bc8a4fa and ee40577141c6d2849291ce281405195e31da5ee4:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit 'b8e5876f4cec5e58ffd68e48c08afa980bc8a4fa' because it has 2 parents, only commits with exactly one parent are supported
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null

****Parsing for addition at revision 461dea3331a1f1d6e70e458d5d256b4e62e8205a****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 461dea3331a1f1d6e70e458d5d256b4e62e8205a and 35add42cefeadd584774005d458a335b0fd09342:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 461dea3331a1f1d6e70e458d5d256b4e62e8205a to 35add42cefeadd584774005d458a335b0fd09342

************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 45

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 3
	--> recency = year
Ryan Joseph added type declaration count = 2
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 6
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null

****Parsing for addition at revision f6edb51b85544ff9200cd1213c41dd7a7a17fe64****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of f6edb51b85544ff9200cd1213c41dd7a7a17fe64 and 4009f7141b1e935b1954addcb36385d2366b2037:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 3
	--> recency = year
	--> Added type declarations  = 2
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit 'f6edb51b85544ff9200cd1213c41dd7a7a17fe64' because it has 2 parents, only commits with exactly one parent are supported

****Parsing for addition at revision 4009f7141b1e935b1954addcb36385d2366b2037****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.

 Generics pattern public abstract class AbstractConnectionProvider was added at revision 4009f7141b1e935b1954addcb36385d2366b2037

className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;

 Generics pattern Class<?> conClass = ClassUtils.forName(className); was added at revision 4009f7141b1e935b1954addcb36385d2366b2037


 Generics pattern Class<?> was added at revision 4009f7141b1e935b1954addcb36385d2366b2037

File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 4009f7141b1e935b1954addcb36385d2366b2037 and b1b9a379f8569b76aa8ba35fc1def0d2c8fd515c:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 4
	--> recency = year
	--> Added type declarations  = 4
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 8
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit '4009f7141b1e935b1954addcb36385d2366b2037' because it has 2 parents, only commits with exactly one parent are supported

****Parsing for addition at revision b1b9a379f8569b76aa8ba35fc1def0d2c8fd515c****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of b1b9a379f8569b76aa8ba35fc1def0d2c8fd515c and c0d39ad93d0c372afc28c41b3748a54fda9332a7:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 4
	--> recency = year
	--> Added type declarations  = 5
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 8
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision b1b9a379f8569b76aa8ba35fc1def0d2c8fd515c to c0d39ad93d0c372afc28c41b3748a54fda9332a7

************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null

****Parsing for addition at revision 721e529d757870546c3667c0b90b10e70da73882****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of 721e529d757870546c3667c0b90b10e70da73882 and c48091e6dbde4e136b708416b5afe520fbbe0b8c:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 4
	--> recency = year
	--> Added type declarations  = 5
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 8
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit '721e529d757870546c3667c0b90b10e70da73882' because it has 2 parents, only commits with exactly one parent are supported
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null

****Parsing for addition at revision c0da0071c85e2fa8b7760206f3886c48ef31825c****

Added AbstractConnectionProvider.java to .\Narvaro\ repository source files.
Added ConnectionProvider.java to .\Narvaro\ repository source files.
Added DatabaseManager.java to .\Narvaro\ repository source files.
Added DatabaseType.java to .\Narvaro\ repository source files.
Added MySQLConnectionProvider.java to .\Narvaro\ repository source files.
Added SQLServerConnectionProvider.java to .\Narvaro\ repository source files.
Added SchemaManager.java to .\Narvaro\ repository source files.
Added DataManager.java to .\Narvaro\ repository source files.
Added MonthData.java to .\Narvaro\ repository source files.
Added ParkMonth.java to .\Narvaro\ repository source files.
Added SimpleDataProperty.java to .\Narvaro\ repository source files.
Added TimeSpan.java to .\Narvaro\ repository source files.
Added Narvaro.java to .\Narvaro\ repository source files.
Added Launcher.java to .\Narvaro\ repository source files.
Added NarvaroClassLoader.java to .\Narvaro\ repository source files.
Added Controller.java to .\Narvaro\ repository source files.
Added NarvaroSetup.java to .\Narvaro\ repository source files.
Added ClassUtils.java to .\Narvaro\ repository source files.
Added ConfigurationManager.java to .\Narvaro\ repository source files.
Added TaskEngine.java to .\Narvaro\ repository source files.
Added SubDirInfoTask.java to .\Narvaro\ repository source files.
className=ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname")
String className = ConfigurationManager.NARVARO.getString("narvaro.connectionprovider.classname");
conClass=ClassUtils.forName(className)
Class<?> conClass = ClassUtils.forName(className);
Class<?> conClass = ClassUtils.forName(className);
Integer retryCount = 0;
Integer retryMax = 10;
Integer retryWait = 250;
Connection con = null;
SQLException lastException = null;
con=getConnection()
Connection con = getConnection();
Connection con = null;
File file = new File(ConfigurationManager.NARVARO.getHomeDirectory() 
                            + File.separator + "resources" + File.separator + "database", resourceName);
int currentVersion = -1;
PreparedStatement ps = null;
ResultSet rs = null;
String resourceName = schemaKey + "_" + "mysql.sql";
resource=resourceLoader.loadResource(resourceName)
InputStream resource = resourceLoader.loadResource(resourceName);
resource=getUpgradeResource(resourceLoader,i,schemaKey)
InputStream resource = getUpgradeResource(resourceLoader, i, schemaKey);
InputStream resource = null;
String path = ConfigurationManager.NARVARO.getHomeDirectory() + File.separator 
                    + "resources" + File.separator + "database" + File.separator + "upgrade" + File.separator + upgradeVersion;
String filename = schemaKey + "_" + "mysql.sql";
File file = new File(path, filename);
String resourceName = "upgrade" + File.separator + upgradeVersion + File.separator + schemaKey + "_" + "mysql.sql";
BufferedReader in = null;
boolean done = false;
StringBuilder command = new StringBuilder();
line=in.readLine()
String line = in.readLine();
PreparedStatement ps = null;
cmdString=command.toString()
String cmdString = command.toString();
TimeSpan timeSpan = new TimeSpan(start, end);
parkName=rs.getString(2)
String parkName = rs.getString(2);
MonthData md = new MonthData(dateToYearMonth(rs.getDate(2)), rs.getBigDecimal(3), 
                            rs.getLong(4), rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), 
                            rs.getLong(9), rs.getLong(10), rs.getLong(11), rs.getLong(12), rs.getLong(13), 
                            rs.getLong(14), rs.getLong(15), rs.getLong(16), rs.getBigDecimal(17), rs.getLong(18), 
                            rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), rs.getLong(22), rs.getLong(23), 
                            rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), rs.getLong(28), 
                            rs.getLong(29), rs.getString(30), rs.getLong(31), null);
TimeSpan ts = new TimeSpan(start, end);
ParkMonth pm = new ParkMonth(parkName);
ym=dateToYearMonth(rs.getDate(2))
YearMonth ym = dateToYearMonth(rs.getDate(2));
MonthData md = new MonthData(ym, rs.getBigDecimal(3), rs.getLong(4), 
                            rs.getLong(5), rs.getLong(6), rs.getLong(7), rs.getLong(8), rs.getLong(9), rs.getLong(10), 
                            rs.getLong(11), rs.getLong(12), rs.getLong(13), rs.getLong(14), rs.getLong(15), rs.getLong(16), 
                            rs.getBigDecimal(17), rs.getLong(18), rs.getLong(19), rs.getLong(20), rs.getBigDecimal(21), 
                            rs.getLong(22), rs.getLong(23), rs.getLong(24), rs.getLong(25), rs.getLong(26), rs.getLong(27), 
                            rs.getLong(28), rs.getLong(29), rs.getString(30), rs.getInt(31), null);
int parkId = -1;
Blob blob = null;
path=md.getForm449File().toPath()
Path path = md.getForm449File().toPath();
pathBytes=Files.readAllBytes(path)
byte[] pathBytes = Files.readAllBytes(path);
List<String> parkNames = new ArrayList<String>();
row=rs.getInt(1)
int row = rs.getInt(1);
StringBuilder sb = new StringBuilder("SELECT ");
Map<String, HashMap<YearMonth, Long>> map = 
                new HashMap<String, HashMap<YearMonth, Long>>();
query=getCustomGraphQuery(field,start,end,parkName)
String query = getCustomGraphQuery(field, start, end, parkName);
PreparedStatement statement = null;
ResultSet results = null;
HashMap<YearMonth, Long> m = new HashMap<YearMonth, Long>();
List<String> s = new ArrayList<String>();
cal=Calendar.getInstance()
Calendar cal = Calendar.getInstance();
File file = null;
Connection con = null;
PreparedStatement ps = null;
ResultSet rs = null;
FileOutputStream fout = null;
filename=rs.getString(1)
String filename = rs.getString(1);
blob=rs.getBlob(2)
Blob blob = rs.getBlob(2);
byte[] bytes = new byte[(int)blob.length()];
String pathName = getDataDir().toPath().toString() + File.separator + filename;
File home = new File(ConfigurationManager.NARVARO.getHomeDirectory());
File dataDir = new File(home, "data");
con=DatabaseManager.Narvaro.getConnection()
Connection con = DatabaseManager.Narvaro.getConnection();
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.fxml");
css=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "Narvaro.css")
Path css = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "Narvaro.css");
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                + File.separator + "resources" + File.separator + "moneybeets_logo.png");
String narvaroDefaultConfigName = "conf" + File.separator + "default_narvaro.properties";
String narvaroConfigName = "conf" + File.separator + "narvaro.properties";
homeProperty=System.getProperty("narvaroHome")
String homeProperty = System.getProperty("narvaroHome");
wd=System.getProperty("user.dir")
String wd = System.getProperty("user.dir");
wdParent=Paths.get(wd).getParent().toString()
String wdParent = Paths.get(wd).getParent().toString();
home=Paths.get(homeGuess)
Path home = Paths.get(homeGuess);
configFile=home.resolve(configName)
Path configFile = home.resolve(configName);
path=Paths.get(config)
Path path = Paths.get(config);
Pane subRoot = null;
fxml=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "FirstBoot.fxml")
Path fxml = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "FirstBoot.fxml");
Scene subScene = new Scene(subRoot);
icon=Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() + File.separator + "resources"+ File.separator+ "moneybeets_logo.png")
Path icon = Paths.get(ConfigurationManager.NARVARO.getHomeDirectory() 
                    + File.separator + "resources" + File.separator + "moneybeets_logo.png");
parent=findParentClassLoader()
final ClassLoader parent = findParentClassLoader();
libDirString=System.getProperty("narvaro.lib.dir")
String libDirString = System.getProperty("narvaro.lib.dir");
File libDir = null;
ClassLoader loader = new NarvaroClassLoader(parent, libDir);
narvaroClass=loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro")
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
Class<?> narvaroClass = loader.loadClass("edu.csus.ecs.moneybeets.narvaro.Narvaro");
startupMethod=narvaroClass.getDeclaredMethod("startup")
Method startupMethod = narvaroClass.getDeclaredMethod("startup");
parent=Thread.currentThread().getContextClassLoader()
ClassLoader parent = Thread.currentThread().getContextClassLoader();
jars=libDir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  final File dir,  final String name){
    String smallName=name.toLowerCase();
    if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
      return true;
    }
    return false;
  }
}
)
File[] jars = libDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(final File dir, final String name) {
                String smallName = name.toLowerCase();
                // allow only jar files and zips (some JDBC drivers are zips)
                if (smallName.endsWith(".jar") || smallName.endsWith(".zip")) {
                    return true;
                }
                return false;
            }
        });
smallName=name.toLowerCase()
String smallName = name.toLowerCase();
ldt=LocalDateTime.now()
LocalDateTime ldt = LocalDateTime.now();
year=ldt.getYear()
int year = ldt.getYear();
columns=DataManager.Narvaro.getSchemaColumnNamesFromData()
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
List<String> columns = DataManager.Narvaro.getSchemaColumnNamesFromData();
s=getEnterPark()
String s = getEnterPark();
y=getEnterYear()
int y = getEnterYear();
m=getEnterMonth()
int m = getEnterMonth();
MonthData md = null;
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkName=addParkTF.getText()
String parkName = addParkTF.getText();
start=YearMonth.of(startingYearGraphData.getSelectionModel().getSelectedItem(),startingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth start = YearMonth.of(
                    startingYearGraphData.getSelectionModel().getSelectedItem(), 
                    startingMonthGraphData.getSelectionModel().getSelectedItem());
end=YearMonth.of(endingYearGraphData.getSelectionModel().getSelectedItem(),endingMonthGraphData.getSelectionModel().getSelectedItem())
YearMonth end = YearMonth.of(
                    endingYearGraphData.getSelectionModel().getSelectedItem(), 
                    endingMonthGraphData.getSelectionModel().getSelectedItem());
parkNames=selectParksGraphData.getSelectionModel().getSelectedItems()
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
List<String> parkNames = selectParksGraphData.getSelectionModel().getSelectedItems();
field=selectAFieldGraphData.getSelectionModel().getSelectedItem()
String field = selectAFieldGraphData.getSelectionModel().getSelectedItem();
data=DataManager.Narvaro.getGraphData(field,start,end,parkNames)
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
Map<String, HashMap<YearMonth, Long>> data = DataManager.Narvaro.getGraphData(field, start, end, parkNames);
CategoryAxis xAxis = new CategoryAxis();
NumberAxis yAxis = new NumberAxis();
LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
m=data.get(parkName)
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
Map<YearMonth, Long> m = data.get(parkName);
XYChart.Series series = new XYChart.Series();
f=getbrowseFile()
File f = getbrowseFile();
InputStream in = null;
InputStream in = null;
InputStream in = null;
FileChooser fileChooser = new FileChooser();
file=fileChooser.showOpenDialog(browseFileButton.getScene().getWindow())
File file = fileChooser.showOpenDialog(browseFileButton.getScene().getWindow());
filePath=file.getPath()
String filePath = file.getPath();
o=userDataGroup.getChildren().toArray()
Object[] o = userDataGroup.getChildren().toArray();
parkNames=DataManager.Narvaro.getAllParkNames()
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
List<String> parkNames = DataManager.Narvaro.getAllParkNames();
startYear=yearSelectionOne.getValue()
int startYear = yearSelectionOne.getValue();
startMonth=monthSelectionOne.getValue()
Month startMonth = monthSelectionOne.getValue();
endYear=yearSelectionTwo.getValue()
int endYear = yearSelectionTwo.getValue();
endMonth=monthSelectionTwo.getValue()
Month endMonth = monthSelectionTwo.getValue();
TimeSpan ts = null;
ObservableList<ObservableList> entries;
ObservableList<ObservableList> entries;
Collection tempData;
parkNames=parkView.getSelectionModel().getSelectedItems()
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
List<String> parkNames = parkView.getSelectionModel().getSelectedItems();
SimpleDataProperty sdp = new SimpleDataProperty(parkName, md.getPduConversionFactor(), 
                        md.getPduTotals(), md.getPduSpecialEvents(), md.getPduDayUse(), md.getPduSenior(), 
                        md.getPduDisabled(), md.getPduGoldenBear(), md.getPduDisabledVeteran(), md.getPduNonResOHVPass(), 
                        md.getPduAnnualPassSale(), md.getPduCamping(), md.getPduSeniorCamping(), md.getPduDisabledCamping(), 
                        md.getFduConversionFactor(), md.getFduTotals(), md.getFscTotalVehicles(), md.getFscTotalPeople(), 
                        md.getoMC(), md.getoATV(), md.getO4X4(), md.getoROV(), md.getoAQMA(), md.getoAllStarKarting(), 
                        md.getoHangtown(), md.getoOther());
TableColumn col = new TableColumn();
data[]=tempData.toArray()
Object data[] = tempData.toArray();
row=FXCollections.observableArrayList()
ObservableList<String> row = FXCollections.observableArrayList();
ObservableList<String> row = FXCollections.observableArrayList();
BigDecimal temp;
long temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
BigDecimal temp;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
int temp = -1;
File file = new File(getbrowseFileTF());
final EventHandler<KeyEvent> keyEventHandler = new EventHandler<KeyEvent>() {
            @Override
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    handleOKButton(null);
                }
            }
        };
boolean success = true;
s=getServerName()
String s = getServerName();
s=getDatabasePassword()
String s = getDatabasePassword();
s=getDatabaseUser()
String s = getDatabaseUser();
i=getPortNumber()
int i = getPortNumber();
DatabaseType dbType = null;
StringBuilder url = new StringBuilder("jdbc:");
DatabaseType dbType = null;
int port = -1;
Class<?> theClass = null;
Class<?> theClass = null;
in=getClass().getResourceAsStream(name)
InputStream in = getClass().getResourceAsStream(name);
File nh = new File(pathname);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=this.narvaroProperties.getProperty(key)
String val = this.narvaroProperties.getProperty(key);
val=getString(key)
String val = getString(key);
FileOutputStream out = null;
Properties props = new Properties();
FileInputStream in = null;
Thread thread = new Thread(Thread.currentThread().getThreadGroup(), 
                        runnable, "TaskEngine-pool-" + threadNumber.getAndIncrement(), 0);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
TimerTaskWrapper taskWrapper = new TimerTaskWrapper(task);
taskWrapper=wrappedTasks.remove(task)
TaskEngine.TimerTaskWrapper taskWrapper = wrappedTasks.remove(task);
subdirs=dir.listFiles()
File[] subdirs = dir.listFiles();
StringBuffer buf = new StringBuffer();
String value = null;
String sep = "";
File subdir = subdirs[i];
boolean add = false;
File file = new File(subdir, getIfexists());

Diff of c0da0071c85e2fa8b7760206f3886c48ef31825c and 7dbed67ac7576605e79d7ee3063b35ba4b55fbfc:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 4
	--> recency = year
	--> Added type declarations  = 5
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 8
	--> recency = year
	--> Added class instantiations = 64
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit 'c0da0071c85e2fa8b7760206f3886c48ef31825c' because it has 2 parents, only commits with exactly one parent are supported
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository Narvaro = 48

Ryan Joseph added type argument method count = 0
	--> recency = null
Ryan Joseph added wildcard count = 4
	--> recency = year
Ryan Joseph added type declaration count = 5
	--> recency = year
Ryan Joseph added type parameter method count = 0
	--> recency = null
Ryan Joseph added type parameter field count = 0
	--> recency = null
Ryan Joseph added diamond count = 0
	--> recency = null
Ryan Joseph added method invocation count = 0
	--> recency = null
Ryan Joseph added implicit method invocation count = 8
	--> recency = year
Ryan Joseph added class instantiation count = 64
	--> recency = year
Ryan Joseph added nested count = 0
	--> recency = null
Ryan Joseph added bounds count = 0
	--> recency = null
File copied successfully!
