Virtual-Lab-Using-Drag-and-Drop -- animesh1993 -- Animesh Das
https://github.com/animesh1993/Virtual-Lab-Using-Drag-and-Drop.git
git clone https://github.com/animesh1993/Virtual-Lab-Using-Drag-and-Drop.git
.\Virtual-Lab-Using-Drag-and-Drop\
.\Virtual-Lab-Using-Drag-and-Drop\.git
0
Project cloned!
Animesh Das is responsible for commit 44e865727583f8975c026c3e8d43354620a39ef2
Animesh Das is responsible for commit 99ac049c003dca1c66b7f06027fb01e2bd186bab
Animesh Das is responsible for commit 70af5aa368e8b8614c43f2a9b0fd3e1a65dfa88e
Animesh Das is responsible for commit 60fc14effa70a42f8b9750c8c6f1503fa62591bc
Animesh Das is responsible for commit 36b81d6b9c4ea9f34767b53f07786b784c990574
Animesh Das is responsible for commit c578564e688b7b64de3989053b869c40023943a2
Animesh Das is responsible for commit 63bcd9ff4cb830a3ee9a3d0b20679de97fefcc0d
Animesh Das is responsible for commit 4cfddeb0561bcce318c5a875a82eb53598a96fba
Animesh Das is responsible for commit 0d8850df8ac1ae1a0812eda2e0d6355c0a40527f
Animesh Das is responsible for commit 2743fa82fceface79d4c5ec3e398f1325a204458
Animesh Das is responsible for commit 75396c073cf96ee3969c76738bd7f44b98652108
Animesh Das is responsible for commit 95d85a7363363f40153b1d1aa9514dd36e5c44d2
Animesh Das is responsible for commit e9ed0073aff587f1006033b42143a2da93ab60af
Animesh Das is responsible for commit f956dad41620594c765d546fcde7c8f9e29bff12
Animesh Das is responsible for commit e981f50df096f54dcfa212f7149b995c53891e13
Animesh Das is responsible for commit c71450fd4865ddcb0536949d0bedcb1fb90ec226
Animesh Das is responsible for commit 6c643863b5f119069331cf6a4ef5851f605189de
Animesh Das is responsible for commit 094f7f830f70cf9fb7b4730f732a10ba059431a8
Animesh Das is responsible for commit 8a8176fe8ab39aba63ad7048b5d656f137cb7b8a
Animesh Das is responsible for commit eeefc7ace74b4465fef1cade056cfed3b2538dc0
Animesh Das is responsible for commit b63457edf1d295fb35e96fa4682e55585168b931
Animesh Das is responsible for commit 369ea35c27d90fae7a8fb4287b1929dfc4398dda
Animesh Das is responsible for commit 156ca0f1d988b62d3f77eabc620dff63a9cb681a
Animesh Das is responsible for commit d97aa148c89b4bfe6e5d8c67f77084e9f09aba55
Animesh Das is responsible for commit e1fa67355723931d41fe273b06acf9a2f9d8a4dd
Animesh Das is responsible for commit 42a07e6f35c13a4b5bacee442870a7894bc53fb2
Animesh Das is responsible for commit d8d69b5d2c013577fe2ecb75b7b10e774faf794f
Animesh Das is responsible for commit 9f5c37bfc359ade152e873512b68cd69e0eb0292
Animesh Das is responsible for commit f5603e24a1a8755fe21f75059db584c2eeefb357
Animesh Das is responsible for commit d438b59e3eff8d56e51bc3fd56ca8f1564e13473
Animesh Das is responsible for commit cb205122943912f738260e26ff74bf2bdfe8fe88
Animesh Das is responsible for commit db338cc3a31fa1b3ff8b828cbbf54c7134aacadd
Animesh Das is responsible for commit 2b89e531227fb90e36506e62b856251ecd37001a
Animesh Das is responsible for commit 4af5e29ecaf07f285875cab9261d67fb55ef52aa
Animesh Das is responsible for commit 24776cddef68dd4db14cbec46e297ce4b1c2f2d7
Animesh Das is responsible for commit 07e59a29fe21f5325f989c5699aae0c310bea431
Animesh Das is responsible for commit 4e54f0af82a131c498f5d6f0d8f8a15973f76dee
Animesh Das is responsible for commit f127e99827fa2acaca9f99c9768aa4e9eb381dff
Animesh Das is responsible for commit adc4c24f0bbc11deda0cd64995091d781a5fed29
Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.

 ************ ANALYZING FOR USAGE PATTERN ADDITION ************


****Parsing for addition at revision 44e865727583f8975c026c3e8d43354620a39ef2****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.exp_simulation_list_single,null,true)
View rowView= inflater.inflate(R.layout.exp_simulation_list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
char movePer ;
FileInputStream fis = null ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
final Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
ImageView newViewForUser = new ImageView (this);
DragLayer.LayoutParams lpForUser = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMoveForUser = (MyAbsoluteLayout.LayoutParams) newViewForUser.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tvForUser = new TextView(this) ;
MyAbsoluteLayout.LayoutParams lpTextForUser = (MyAbsoluteLayout.LayoutParams) tvForUser.getLayoutParams();
final String ansComp = ansRead ;
final int imageIdFinal = imageId ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
							.setView(input)
							.setTitle(quesRead)
							.setMessage(quesRead)
							.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
							.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
TextView tv = new TextView((Context) thisObj);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tvForUser = new TextView((Context) thisObj) ;
MyAbsoluteLayout.LayoutParams lpTextForUser = (MyAbsoluteLayout.LayoutParams) tvForUser.getLayoutParams();
TextView tv = new TextView(this);
TextView tvForUser = new TextView(this) ;
MyAbsoluteLayout.LayoutParams lpTextForUser = (MyAbsoluteLayout.LayoutParams) tvForUser.getLayoutParams();
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
imageNoChange=Integer.parseInt(RowData[2])
int imageNoChange = Integer.parseInt(RowData[2]) ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
Rect bounds = new Rect();
textPaint=((TextView)v).getPaint()
Paint textPaint = ((TextView) v).getPaint();
height=bounds.height()
int height = bounds.height();
width=bounds.width()
int width = bounds.width();
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput(fileName,MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput(fileName, MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=true;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput(fileName);
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = true ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput(fileName) ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 44e865727583f8975c026c3e8d43354620a39ef2 and 99ac049c003dca1c66b7f06027fb01e2bd186bab:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 44e865727583f8975c026c3e8d43354620a39ef2 to 99ac049c003dca1c66b7f06027fb01e2bd186bab


****Parsing for addition at revision 99ac049c003dca1c66b7f06027fb01e2bd186bab****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.exp_simulation_list_single,null,true)
View rowView= inflater.inflate(R.layout.exp_simulation_list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
char movePer ;
FileInputStream fis = null ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
final Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
ImageView newViewForUser = new ImageView (this);
DragLayer.LayoutParams lpForUser = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMoveForUser = (MyAbsoluteLayout.LayoutParams) newViewForUser.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tvForUser = new TextView(this) ;
MyAbsoluteLayout.LayoutParams lpTextForUser = (MyAbsoluteLayout.LayoutParams) tvForUser.getLayoutParams();
final String ansComp = ansRead ;
final int imageIdFinal = imageId ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
							.setView(input)
							.setTitle(quesRead)
							.setMessage(quesRead)
							.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
							.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
TextView tv = new TextView((Context) thisObj);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tvForUser = new TextView((Context) thisObj) ;
MyAbsoluteLayout.LayoutParams lpTextForUser = (MyAbsoluteLayout.LayoutParams) tvForUser.getLayoutParams();
TextView tv = new TextView(this);
TextView tvForUser = new TextView(this) ;
MyAbsoluteLayout.LayoutParams lpTextForUser = (MyAbsoluteLayout.LayoutParams) tvForUser.getLayoutParams();
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
imageNoChange=Integer.parseInt(RowData[2])
int imageNoChange = Integer.parseInt(RowData[2]) ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
Rect bounds = new Rect();
textPaint=((TextView)v).getPaint()
Paint textPaint = ((TextView) v).getPaint();
height=bounds.height()
int height = bounds.height();
width=bounds.width()
int width = bounds.width();
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput(fileName,MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput(fileName, MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=true;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput(fileName);
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = true ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput(fileName) ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 99ac049c003dca1c66b7f06027fb01e2bd186bab and 70af5aa368e8b8614c43f2a9b0fd3e1a65dfa88e:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 99ac049c003dca1c66b7f06027fb01e2bd186bab to 70af5aa368e8b8614c43f2a9b0fd3e1a65dfa88e


****Parsing for addition at revision 70af5aa368e8b8614c43f2a9b0fd3e1a65dfa88e****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.exp_simulation_list_single,null,true)
View rowView= inflater.inflate(R.layout.exp_simulation_list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
char movePer ;
FileInputStream fis = null ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
final Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
ImageView newViewForUser = new ImageView (this);
DragLayer.LayoutParams lpForUser = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMoveForUser = (MyAbsoluteLayout.LayoutParams) newViewForUser.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tvForUser = new TextView(this) ;
MyAbsoluteLayout.LayoutParams lpTextForUser = (MyAbsoluteLayout.LayoutParams) tvForUser.getLayoutParams();
final String ansComp = ansRead ;
final int imageIdFinal = imageId ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
							.setView(input)
							.setTitle(quesRead)
							.setMessage(quesRead)
							.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
							.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
TextView tv = new TextView((Context) thisObj);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tvForUser = new TextView((Context) thisObj) ;
MyAbsoluteLayout.LayoutParams lpTextForUser = (MyAbsoluteLayout.LayoutParams) tvForUser.getLayoutParams();
TextView tv = new TextView(this);
TextView tvForUser = new TextView(this) ;
MyAbsoluteLayout.LayoutParams lpTextForUser = (MyAbsoluteLayout.LayoutParams) tvForUser.getLayoutParams();
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
imageNoChange=Integer.parseInt(RowData[2])
int imageNoChange = Integer.parseInt(RowData[2]) ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
Rect bounds = new Rect();
textPaint=((TextView)v).getPaint()
Paint textPaint = ((TextView) v).getPaint();
height=bounds.height()
int height = bounds.height();
width=bounds.width()
int width = bounds.width();
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput(fileName,MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput(fileName, MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=true;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput(fileName);
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = true ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput(fileName) ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 70af5aa368e8b8614c43f2a9b0fd3e1a65dfa88e and 60fc14effa70a42f8b9750c8c6f1503fa62591bc:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 70af5aa368e8b8614c43f2a9b0fd3e1a65dfa88e to 60fc14effa70a42f8b9750c8c6f1503fa62591bc


****Parsing for addition at revision 60fc14effa70a42f8b9750c8c6f1503fa62591bc****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.exp_simulation_list_single,null,true)
View rowView= inflater.inflate(R.layout.exp_simulation_list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
char movePer ;
FileInputStream fis = null ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
final Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
ImageView newViewForUser = new ImageView (this);
DragLayer.LayoutParams lpForUser = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMoveForUser = (MyAbsoluteLayout.LayoutParams) newViewForUser.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tvForUser = new TextView(this) ;
MyAbsoluteLayout.LayoutParams lpTextForUser = (MyAbsoluteLayout.LayoutParams) tvForUser.getLayoutParams();
final String ansComp = ansRead ;
final int imageIdFinal = imageId ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
							.setView(input)
							.setTitle(quesRead)
							.setMessage(quesRead)
							.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
							.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
TextView tv = new TextView((Context) thisObj);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tvForUser = new TextView((Context) thisObj) ;
MyAbsoluteLayout.LayoutParams lpTextForUser = (MyAbsoluteLayout.LayoutParams) tvForUser.getLayoutParams();
TextView tv = new TextView(this);
TextView tvForUser = new TextView(this) ;
MyAbsoluteLayout.LayoutParams lpTextForUser = (MyAbsoluteLayout.LayoutParams) tvForUser.getLayoutParams();
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
imageNoChange=Integer.parseInt(RowData[2])
int imageNoChange = Integer.parseInt(RowData[2]) ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
Rect bounds = new Rect();
textPaint=((TextView)v).getPaint()
Paint textPaint = ((TextView) v).getPaint();
height=bounds.height()
int height = bounds.height();
width=bounds.width()
int width = bounds.width();
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput(fileName,MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput(fileName, MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=true;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput(fileName);
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = true ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput(fileName) ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 60fc14effa70a42f8b9750c8c6f1503fa62591bc and 36b81d6b9c4ea9f34767b53f07786b784c990574:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 60fc14effa70a42f8b9750c8c6f1503fa62591bc to 36b81d6b9c4ea9f34767b53f07786b784c990574


****Parsing for addition at revision 36b81d6b9c4ea9f34767b53f07786b784c990574****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.exp_simulation_list_single,null,true)
View rowView= inflater.inflate(R.layout.exp_simulation_list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
FileInputStream fis = null ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
final Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
ImageView newViewForUser = new ImageView (this);
DragLayer.LayoutParams lpForUser = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMoveForUser = (MyAbsoluteLayout.LayoutParams) newViewForUser.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
final String ansComp = ansRead ;
final int imageIdFinal = imageId ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
							.setView(input)
							.setTitle(quesRead)
							.setMessage(quesRead)
							.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
							//				        .setNegativeButton(android.R.string.cancel, null)
							.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
TextView tv = new TextView((Context) thisObj);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
imageNoChange=Integer.parseInt(RowData[2])
int imageNoChange = Integer.parseInt(RowData[2]) ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
Rect bounds = new Rect();
textPaint=((TextView)v).getPaint()
Paint textPaint = ((TextView) v).getPaint();
height=bounds.height()
int height = bounds.height();
width=bounds.width()
int width = bounds.width();
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput(fileName,MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput(fileName, MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=true;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput(fileName);
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = true ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput(fileName) ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 36b81d6b9c4ea9f34767b53f07786b784c990574 and c578564e688b7b64de3989053b869c40023943a2:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 36b81d6b9c4ea9f34767b53f07786b784c990574 to c578564e688b7b64de3989053b869c40023943a2


****Parsing for addition at revision c578564e688b7b64de3989053b869c40023943a2****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.exp_simulation_list_single,null,true)
View rowView= inflater.inflate(R.layout.exp_simulation_list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
FileInputStream fis = null ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
final Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
ImageView newViewForUser = new ImageView (this);
DragLayer.LayoutParams lpForUser = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMoveForUser = (MyAbsoluteLayout.LayoutParams) newViewForUser.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
final String ansComp = ansRead ;
final int imageIdFinal = imageId ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
							.setView(input)
							.setTitle(quesRead)
							.setMessage(quesRead)
							.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
							//				        .setNegativeButton(android.R.string.cancel, null)
							.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
TextView tv = new TextView((Context) thisObj);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
imageNoChange=Integer.parseInt(RowData[2])
int imageNoChange = Integer.parseInt(RowData[2]) ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
Rect bounds = new Rect();
textPaint=((TextView)v).getPaint()
Paint textPaint = ((TextView) v).getPaint();
height=bounds.height()
int height = bounds.height();
width=bounds.width()
int width = bounds.width();
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput("media",MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput("media", MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=true;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput("media");
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = true ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput("media") ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of c578564e688b7b64de3989053b869c40023943a2 and 63bcd9ff4cb830a3ee9a3d0b20679de97fefcc0d:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision c578564e688b7b64de3989053b869c40023943a2 to 63bcd9ff4cb830a3ee9a3d0b20679de97fefcc0d


****Parsing for addition at revision 63bcd9ff4cb830a3ee9a3d0b20679de97fefcc0d****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.exp_simulation_list_single,null,true)
View rowView= inflater.inflate(R.layout.exp_simulation_list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
rotationDiff=Math.abs(objectSelectedForScaleRotate.getRotation() - rotateRead)
float rotationDiff = Math.abs(objectSelectedForScaleRotate.getRotation() - rotateRead) ;
FileInputStream fis = null ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
final Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
ImageView newViewForUser = new ImageView (this);
DragLayer.LayoutParams lpForUser = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMoveForUser = (MyAbsoluteLayout.LayoutParams) newViewForUser.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
final String ansComp = ansRead ;
final int imageIdFinal = imageId ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
							.setView(input)
							.setTitle(quesRead)
							.setMessage(quesRead)
							.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
							//				        .setNegativeButton(android.R.string.cancel, null)
							.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
TextView tv = new TextView((Context) thisObj);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
imageNoChange=Integer.parseInt(RowData[2])
int imageNoChange = Integer.parseInt(RowData[2]) ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
Rect bounds = new Rect();
textPaint=((TextView)v).getPaint()
Paint textPaint = ((TextView) v).getPaint();
height=bounds.height()
int height = bounds.height();
width=bounds.width()
int width = bounds.width();
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput("media",MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput("media", MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=true;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput("media");
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = true ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput("media") ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 63bcd9ff4cb830a3ee9a3d0b20679de97fefcc0d and 4cfddeb0561bcce318c5a875a82eb53598a96fba:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 63bcd9ff4cb830a3ee9a3d0b20679de97fefcc0d to 4cfddeb0561bcce318c5a875a82eb53598a96fba


****Parsing for addition at revision 4cfddeb0561bcce318c5a875a82eb53598a96fba****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.exp_simulation_list_single,null,true)
View rowView= inflater.inflate(R.layout.exp_simulation_list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
FileInputStream fis = null ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
final Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
ImageView newViewForUser = new ImageView (this);
DragLayer.LayoutParams lpForUser = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMoveForUser = (MyAbsoluteLayout.LayoutParams) newViewForUser.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
final String ansComp = ansRead ;
final int imageIdFinal = imageId ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
							.setView(input)
							.setTitle(quesRead)
							.setMessage(quesRead)
							.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
							//				        .setNegativeButton(android.R.string.cancel, null)
							.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
TextView tv = new TextView((Context) thisObj);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
imageNoChange=Integer.parseInt(RowData[2])
int imageNoChange = Integer.parseInt(RowData[2]) ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
Rect bounds = new Rect();
textPaint=((TextView)v).getPaint()
Paint textPaint = ((TextView) v).getPaint();
height=bounds.height()
int height = bounds.height();
width=bounds.width()
int width = bounds.width();
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput("media",MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput("media", MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=true;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput("media");
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = true ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput("media") ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 4cfddeb0561bcce318c5a875a82eb53598a96fba and 0d8850df8ac1ae1a0812eda2e0d6355c0a40527f:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 4cfddeb0561bcce318c5a875a82eb53598a96fba to 0d8850df8ac1ae1a0812eda2e0d6355c0a40527f


****Parsing for addition at revision 0d8850df8ac1ae1a0812eda2e0d6355c0a40527f****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.exp_simulation_list_single,null,true)
View rowView= inflater.inflate(R.layout.exp_simulation_list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
FileInputStream fis = null ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
final Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
ImageView newViewForUser = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMoveForUser = (MyAbsoluteLayout.LayoutParams) newViewForUser.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
final String ansComp = ansRead ;
final int imageIdFinal = imageId ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
							.setView(input)
							.setTitle(quesRead)
							.setMessage(quesRead)
							.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
							//				        .setNegativeButton(android.R.string.cancel, null)
							.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
TextView tv = new TextView((Context) thisObj);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
imageNoChange=Integer.parseInt(RowData[2])
int imageNoChange = Integer.parseInt(RowData[2]) ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
Rect bounds = new Rect();
textPaint=((TextView)v).getPaint()
Paint textPaint = ((TextView) v).getPaint();
height=bounds.height()
int height = bounds.height();
width=bounds.width()
int width = bounds.width();
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput("media",MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput("media", MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=true;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput("media");
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = true ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput("media") ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 0d8850df8ac1ae1a0812eda2e0d6355c0a40527f and 2743fa82fceface79d4c5ec3e398f1325a204458:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 0d8850df8ac1ae1a0812eda2e0d6355c0a40527f to 2743fa82fceface79d4c5ec3e398f1325a204458


****Parsing for addition at revision 2743fa82fceface79d4c5ec3e398f1325a204458****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.exp_simulation_list_single,null,true)
View rowView= inflater.inflate(R.layout.exp_simulation_list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
FileInputStream fis = null ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
final Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
ImageView newViewForUser = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMoveForUser = (MyAbsoluteLayout.LayoutParams) newViewForUser.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
final String ansComp = ansRead ;
final int imageIdFinal = imageId ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
							.setView(input)
							.setTitle(quesRead)
							.setMessage(quesRead)
							.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
							//				        .setNegativeButton(android.R.string.cancel, null)
							.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
TextView tv = new TextView((Context) thisObj);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
imageNoChange=Integer.parseInt(RowData[2])
int imageNoChange = Integer.parseInt(RowData[2]) ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
Rect bounds = new Rect();
textPaint=((TextView)v).getPaint()
Paint textPaint = ((TextView) v).getPaint();
height=bounds.height()
int height = bounds.height();
width=bounds.width()
int width = bounds.width();
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput("media",MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput("media", MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=true;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput("media");
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = true ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput("media") ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 2743fa82fceface79d4c5ec3e398f1325a204458 and 75396c073cf96ee3969c76738bd7f44b98652108:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 2743fa82fceface79d4c5ec3e398f1325a204458 to 75396c073cf96ee3969c76738bd7f44b98652108


****Parsing for addition at revision 75396c073cf96ee3969c76738bd7f44b98652108****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.exp_simulation_list_single,null,true)
View rowView= inflater.inflate(R.layout.exp_simulation_list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
FileInputStream fis = null ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
final Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
ImageView newViewForUser = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMoveForUser = (MyAbsoluteLayout.LayoutParams) newViewForUser.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
final String ansComp = ansRead ;
final int imageIdFinal = imageId ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
							.setView(input)
							.setTitle(quesRead)
							.setMessage(quesRead)
							.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
							//				        .setNegativeButton(android.R.string.cancel, null)
							.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
TextView tv = new TextView((Context) thisObj);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
imageNoChange=Integer.parseInt(RowData[2])
int imageNoChange = Integer.parseInt(RowData[2]) ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
Rect bounds = new Rect();
textPaint=((TextView)v).getPaint()
Paint textPaint = ((TextView) v).getPaint();
height=bounds.height()
int height = bounds.height();
width=bounds.width()
int width = bounds.width();
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput("media",MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput("media", MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=true;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput("media");
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = true ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput("media") ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 75396c073cf96ee3969c76738bd7f44b98652108 and 95d85a7363363f40153b1d1aa9514dd36e5c44d2:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 75396c073cf96ee3969c76738bd7f44b98652108 to 95d85a7363363f40153b1d1aa9514dd36e5c44d2


****Parsing for addition at revision 95d85a7363363f40153b1d1aa9514dd36e5c44d2****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.

Diff of 95d85a7363363f40153b1d1aa9514dd36e5c44d2 and e9ed0073aff587f1006033b42143a2da93ab60af:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 95d85a7363363f40153b1d1aa9514dd36e5c44d2 to e9ed0073aff587f1006033b42143a2da93ab60af


****Parsing for addition at revision e9ed0073aff587f1006033b42143a2da93ab60af****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
FileInputStream fis = null ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
final Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
ImageView newViewForUser = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMoveForUser = (MyAbsoluteLayout.LayoutParams) newViewForUser.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
final String ansComp = ansRead ;
final int imageIdFinal = imageId ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
							.setView(input)
							.setTitle(quesRead)
							.setMessage(quesRead)
							.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
							//				        .setNegativeButton(android.R.string.cancel, null)
							.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
TextView tv = new TextView((Context) thisObj);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
imageNoChange=Integer.parseInt(RowData[2])
int imageNoChange = Integer.parseInt(RowData[2]) ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
Rect bounds = new Rect();
textPaint=((TextView)v).getPaint()
Paint textPaint = ((TextView) v).getPaint();
height=bounds.height()
int height = bounds.height();
width=bounds.width()
int width = bounds.width();
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput("media",MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput("media", MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=true;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput("media");
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = true ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput("media") ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of e9ed0073aff587f1006033b42143a2da93ab60af and f956dad41620594c765d546fcde7c8f9e29bff12:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision e9ed0073aff587f1006033b42143a2da93ab60af to f956dad41620594c765d546fcde7c8f9e29bff12


****Parsing for addition at revision f956dad41620594c765d546fcde7c8f9e29bff12****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
FileInputStream fis = null ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
final Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
ImageView newViewForUser = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMoveForUser = (MyAbsoluteLayout.LayoutParams) newViewForUser.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
final String ansComp = ansRead ;
final int imageIdFinal = imageId ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
							.setView(input)
							.setTitle(quesRead)
							.setMessage(quesRead)
							.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
							//				        .setNegativeButton(android.R.string.cancel, null)
							.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
TextView tv = new TextView((Context) thisObj);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
imageNoChange=Integer.parseInt(RowData[2])
int imageNoChange = Integer.parseInt(RowData[2]) ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
Rect bounds = new Rect();
textPaint=((TextView)v).getPaint()
Paint textPaint = ((TextView) v).getPaint();
height=bounds.height()
int height = bounds.height();
width=bounds.width()
int width = bounds.width();
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput("media",MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput("media", MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=true;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput("media");
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = true ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput("media") ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of f956dad41620594c765d546fcde7c8f9e29bff12 and e981f50df096f54dcfa212f7149b995c53891e13:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f956dad41620594c765d546fcde7c8f9e29bff12 to e981f50df096f54dcfa212f7149b995c53891e13


****Parsing for addition at revision e981f50df096f54dcfa212f7149b995c53891e13****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
FileInputStream fis = null ;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
final Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
final String ansComp = ansRead ;
final int imageIdFinal = imageId ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
							.setView(input)
							.setTitle(quesRead)
							.setMessage(quesRead)
							.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
							//				        .setNegativeButton(android.R.string.cancel, null)
							.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
TextView tv = new TextView((Context) thisObj);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
TextView tv = new TextView(this);
MyAbsoluteLayout.LayoutParams lpText = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
imageNoChange=Integer.parseInt(RowData[3])
int imageNoChange = Integer.parseInt(RowData[3]) ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
Rect bounds = new Rect();
textPaint=((TextView)v).getPaint()
Paint textPaint = ((TextView) v).getPaint();
height=bounds.height()
int height = bounds.height();
width=bounds.width()
int width = bounds.width();
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) tv.getLayoutParams();
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput("media",MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput("media", MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=false;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput("media");
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = false ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput("media") ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of e981f50df096f54dcfa212f7149b995c53891e13 and c71450fd4865ddcb0536949d0bedcb1fb90ec226:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision e981f50df096f54dcfa212f7149b995c53891e13 to c71450fd4865ddcb0536949d0bedcb1fb90ec226


****Parsing for addition at revision c71450fd4865ddcb0536949d0bedcb1fb90ec226****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
FileInputStream fis = null ;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String textRead = "";
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
TextView tv = new TextView(this);
final String ansComp = ansRead ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
						.setView(input)
						.setTitle(quesRead)
						.setMessage(quesRead)
						.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
						//				        .setNegativeButton(android.R.string.cancel, null)
						.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput("media",MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput("media", MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=false;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput("media");
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = false ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput("media") ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of c71450fd4865ddcb0536949d0bedcb1fb90ec226 and 6c643863b5f119069331cf6a4ef5851f605189de:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision c71450fd4865ddcb0536949d0bedcb1fb90ec226 to 6c643863b5f119069331cf6a4ef5851f605189de


****Parsing for addition at revision 6c643863b5f119069331cf6a4ef5851f605189de****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
MyAbsoluteLayout.LayoutParams lpMove = (MyAbsoluteLayout.LayoutParams) newView.getLayoutParams();
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line = null;
FileInputStream fis = null ;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
Object thisObj = this ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String textRead = "";
String quesRead = "" ;
String ansRead = "" ;
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
TextView tv = new TextView(this);
final String ansComp = ansRead ;
final EditText input = new EditText((Context) thisObj);
d=new AlertDialog.Builder((Context)thisObj).setView(input).setTitle(quesRead).setMessage(quesRead).setPositiveButton(android.R.string.ok,null).create()
final AlertDialog d = new AlertDialog.Builder((Context) thisObj)
						.setView(input)
						.setTitle(quesRead)
						.setMessage(quesRead)
						.setPositiveButton(android.R.string.ok, null) //Set to null. We override the onclick
						//				        .setNegativeButton(android.R.string.cancel, null)
						.create();
b=d.getButton(AlertDialog.BUTTON_POSITIVE)
Button b = d.getButton(AlertDialog.BUTTON_POSITIVE);
value=input.getText()
Editable value = input.getText();
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
char movePerformed ;
confirmBox=resetConfirmation()
AlertDialog confirmBox = resetConfirmation();
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput("media",MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput("media", MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Reset").setMessage("Are you sure you want to reset ?").setPositiveButton("Reset",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    onCreate(null);
    lineNo=1;
    mLongClickStartsDrag=false;
    stepMode=false;
    objectSelectedForScaleRotate=null;
    currentTouchMode=TouchMode.MOVE;
    ghostMode=false;
    studentMode=false;
    DragController.setMoveNo(0);
    fileEndReached=false;
    deleteMode=false;
    objectSelectedForDelete=null;
    if (studentMode)     setTitle("Virtual Labs - Student Mode");
 else     setTitle("Virtual Labs - Teacher/Admin Mode");
    FileInputStream fis=null;
    try {
      fis=openFileInput("media");
    }
 catch (    FileNotFoundException e1) {
      toast("Error: File Not Found");
      trace("File Error");
      return;
    }
    reader=new BufferedReader(new InputStreamReader(fis));
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Reset") 
		.setMessage("Are you sure you want to reset ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Reset", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				onCreate(null);
				lineNo = 1 ;
				mLongClickStartsDrag = false ;
				stepMode = false ;
				objectSelectedForScaleRotate = null ;
				currentTouchMode = TouchMode.MOVE ;
				ghostMode = false ;
				studentMode = false ;
				DragController.setMoveNo(0);
				fileEndReached = false ;
				deleteMode = false ;
				objectSelectedForDelete = null ;
				//				DragController.resetReader();

				if(studentMode)
					setTitle("Virtual Labs - Student Mode");
				else
					setTitle("Virtual Labs - Teacher/Admin Mode");

				FileInputStream fis = null ;

				try {
					fis = openFileInput("media") ;
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					//			e1.printStackTrace();
					toast("Error: File Not Found") ;
					trace("File Error");
					return ;
				}

				reader = new BufferedReader(new InputStreamReader(fis));
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileInputStream fis = null ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 6c643863b5f119069331cf6a4ef5851f605189de and 094f7f830f70cf9fb7b4730f732a10ba059431a8:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 6c643863b5f119069331cf6a4ef5851f605189de to 094f7f830f70cf9fb7b4730f732a10ba059431a8


****Parsing for addition at revision 094f7f830f70cf9fb7b4730f732a10ba059431a8****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
FileInputStream fis = null ;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String textRead = "";
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
TextView tv = new TextView(this);
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
char movePerformed ;
FileInputStream fis = null ;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput("media",MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput("media", MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 094f7f830f70cf9fb7b4730f732a10ba059431a8 and 8a8176fe8ab39aba63ad7048b5d656f137cb7b8a:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 094f7f830f70cf9fb7b4730f732a10ba059431a8 to 8a8176fe8ab39aba63ad7048b5d656f137cb7b8a


****Parsing for addition at revision 8a8176fe8ab39aba63ad7048b5d656f137cb7b8a****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
FileInputStream fis = null ;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String textRead = "";
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
TextView tv = new TextView(this);
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
char movePerformed ;
FileInputStream fis = null ;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput("media",MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput("media", MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 8a8176fe8ab39aba63ad7048b5d656f137cb7b8a and eeefc7ace74b4465fef1cade056cfed3b2538dc0:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 8a8176fe8ab39aba63ad7048b5d656f137cb7b8a to eeefc7ace74b4465fef1cade056cfed3b2538dc0


****Parsing for addition at revision eeefc7ace74b4465fef1cade056cfed3b2538dc0****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
FileInputStream fis = null ;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String textRead = "";
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
TextView tv = new TextView(this);
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
char movePerformed ;
FileInputStream fis = null ;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput("media",MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput("media", MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of eeefc7ace74b4465fef1cade056cfed3b2538dc0 and b63457edf1d295fb35e96fa4682e55585168b931:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision eeefc7ace74b4465fef1cade056cfed3b2538dc0 to b63457edf1d295fb35e96fa4682e55585168b931


****Parsing for addition at revision b63457edf1d295fb35e96fa4682e55585168b931****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
FileInputStream fis = null ;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String textRead = "";
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
TextView tv = new TextView(this);
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
char movePerformed ;
FileInputStream fis = null ;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    if (!studentMode) {
      FileOutputStream fos=null;
      try {
        fos=openFileOutput("media",MODE_APPEND);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        fos.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);

				if(!studentMode)
				{
					FileOutputStream fos = null;
					try {
						fos = openFileOutput("media", MODE_APPEND);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}

					try {
						fos.write(("d" + "," + objectSelectedForDelete.getId() + "\n").getBytes());
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
FileOutputStream fos = null;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of b63457edf1d295fb35e96fa4682e55585168b931 and 369ea35c27d90fae7a8fb4287b1929dfc4398dda:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision b63457edf1d295fb35e96fa4682e55585168b931 to 369ea35c27d90fae7a8fb4287b1929dfc4398dda


****Parsing for addition at revision 369ea35c27d90fae7a8fb4287b1929dfc4398dda****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
FileInputStream fis = null ;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
char movePer ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String textRead = "";
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
TextView tv = new TextView(this);
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
char movePerformed ;
FileInputStream fis = null ;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
confirmBox=deleteConfirmation()
AlertDialog confirmBox = deleteConfirmation();
myQuittingDialogBox=new AlertDialog.Builder(this).setTitle("Delete").setMessage("Are you sure you want to delete ?").setPositiveButton("Delete",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int whichButton){
    objectSelectedForDelete.setVisibility(View.GONE);
    dialog.dismiss();
  }
}
).setNegativeButton("Cancel",new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
).create()
AlertDialog myQuittingDialogBox =new AlertDialog.Builder(this) 
		//set message, title, and icon
		.setTitle("Delete") 
		.setMessage("Are you sure you want to delete ?") 
		//		.setIcon(R.drawable.delete_confirmation)

		.setPositiveButton("Delete", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int whichButton) { 
				objectSelectedForDelete.setVisibility(View.GONE);
				dialog.dismiss();
			}   

		})



		.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				dialog.dismiss();

			}
		})
		.create();
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 369ea35c27d90fae7a8fb4287b1929dfc4398dda and 156ca0f1d988b62d3f77eabc620dff63a9cb681a:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 369ea35c27d90fae7a8fb4287b1929dfc4398dda to 156ca0f1d988b62d3f77eabc620dff63a9cb681a


****Parsing for addition at revision 156ca0f1d988b62d3f77eabc620dff63a9cb681a****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
FileInputStream fis = null ;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
char movePer ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String textRead = "";
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
TextView tv = new TextView(this);
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
char movePerformed ;
FileInputStream fis = null ;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
char movePer ;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 156ca0f1d988b62d3f77eabc620dff63a9cb681a and d97aa148c89b4bfe6e5d8c67f77084e9f09aba55:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 156ca0f1d988b62d3f77eabc620dff63a9cb681a to d97aa148c89b4bfe6e5d8c67f77084e9f09aba55


****Parsing for addition at revision d97aa148c89b4bfe6e5d8c67f77084e9f09aba55****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
FileInputStream fis = null ;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
char movePer ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String textRead = "";
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
TextView tv = new TextView(this);
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
char movePerformed ;
FileInputStream fis = null ;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of d97aa148c89b4bfe6e5d8c67f77084e9f09aba55 and e1fa67355723931d41fe273b06acf9a2f9d8a4dd:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision d97aa148c89b4bfe6e5d8c67f77084e9f09aba55 to e1fa67355723931d41fe273b06acf9a2f9d8a4dd


****Parsing for addition at revision e1fa67355723931d41fe273b06acf9a2f9d8a4dd****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
FileInputStream fis = null ;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
FileOutputStream fos = null;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
char movePer ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int w,h,left,top ;
String textRead = "";
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
TextView tv = new TextView(this);
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
char movePerformed ;
FileInputStream fis = null ;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of e1fa67355723931d41fe273b06acf9a2f9d8a4dd and 42a07e6f35c13a4b5bacee442870a7894bc53fb2:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision e1fa67355723931d41fe273b06acf9a2f9d8a4dd to 42a07e6f35c13a4b5bacee442870a7894bc53fb2


****Parsing for addition at revision 42a07e6f35c13a4b5bacee442870a7894bc53fb2****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
ImageView lineImage = (ImageView) findViewById(R.id.blankBackground) ;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
resources=context.getResources()
Resources resources = context.getResources();
metrics=resources.getDisplayMetrics()
DisplayMetrics metrics = resources.getDisplayMetrics();
float px = dp * (metrics.densityDpi / 160f);
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final View logoFocus = (View)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int i = 1 ;
int w,h,left,top ;
String textRead = "";
DragLayer.LayoutParams lp ;
String line;
ImageView newView = new ImageView (this);
TextView tv = new TextView(this);
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
@SuppressWarnings("unused")
					int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
final Object thisObject = this ;
AlertDialog.Builder builder = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
TextView tv = new TextView((Context) thisObject);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileOutputStream fos = null;
bmp=Bitmap.createBitmap(lineImage.getWidth(),lineImage.getHeight(),Config.ARGB_8888)
Bitmap bmp = Bitmap.createBitmap(lineImage.getWidth(), lineImage.getHeight(), Config.ARGB_8888);
Canvas c = new Canvas(bmp);
Paint p = new Paint();
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 42a07e6f35c13a4b5bacee442870a7894bc53fb2 and d8d69b5d2c013577fe2ecb75b7b10e774faf794f:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 42a07e6f35c13a4b5bacee442870a7894bc53fb2 to d8d69b5d2c013577fe2ecb75b7b10e774faf794f


****Parsing for addition at revision d8d69b5d2c013577fe2ecb75b7b10e774faf794f****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float rotateRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final ImageView logoFocus = (ImageView)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int i = 1 ;
String line;
ImageView newView = new ImageView (this);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
int imageId ;
float scaleRead ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 0 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
String line;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(R.color.progress_gray)
int progressColor = res.getColor(R.color.progress_gray);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of d8d69b5d2c013577fe2ecb75b7b10e774faf794f and 9f5c37bfc359ade152e873512b68cd69e0eb0292:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision d8d69b5d2c013577fe2ecb75b7b10e774faf794f to 9f5c37bfc359ade152e873512b68cd69e0eb0292


****Parsing for addition at revision 9f5c37bfc359ade152e873512b68cd69e0eb0292****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final ImageView logoFocus = (ImageView)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int i = 1 ;
String line;
ImageView newView = new ImageView (this);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(android.R.color.holo_blue_light)
int progressColor = res.getColor(android.R.color.holo_blue_light);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of 9f5c37bfc359ade152e873512b68cd69e0eb0292 and f5603e24a1a8755fe21f75059db584c2eeefb357:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 9f5c37bfc359ade152e873512b68cd69e0eb0292 to f5603e24a1a8755fe21f75059db584c2eeefb357


****Parsing for addition at revision f5603e24a1a8755fe21f75059db584c2eeefb357****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final ImageView logoFocus = (ImageView)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int i = 1 ;
String line;
ImageView newView = new ImageView (this);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(android.R.color.holo_blue_light)
int progressColor = res.getColor(android.R.color.holo_blue_light);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of f5603e24a1a8755fe21f75059db584c2eeefb357 and d438b59e3eff8d56e51bc3fd56ca8f1564e13473:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f5603e24a1a8755fe21f75059db584c2eeefb357 to d438b59e3eff8d56e51bc3fd56ca8f1564e13473


****Parsing for addition at revision d438b59e3eff8d56e51bc3fd56ca8f1564e13473****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added SeekArc.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added VerticalSeekBar.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.

 Generics pattern public static final class styleable was added at revision d438b59e3eff8d56e51bc3fd56ca8f1564e13473

inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
VerticalSeekBar scaleSeekBar=(VerticalSeekBar) findViewById(R.id.scaleBar);
SeekArc mSeekArc = (SeekArc) findViewById(R.id.seekArc) ;
float rotate = progress ;
rotate=seekArc.getProgress()
float rotate = seekArc.getProgress() ;
FileOutputStream fos = null;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final ImageView logoFocus = (ImageView)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int i = 1 ;
String line;
ImageView newView = new ImageView (this);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
checked=((RadioButton)view).isChecked()
boolean checked = ((RadioButton) view).isChecked();
float scale = progress ;
scale=seekBar.getProgress()
float scale = seekBar.getProgress() ;
FileOutputStream fos = null;
float rotate = progress ;
rotate=seekBar.getProgress()
float rotate = seekBar.getProgress() ;
FileOutputStream fos = null;
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();

 Generics pattern private class scaleListener was added at revision d438b59e3eff8d56e51bc3fd56ca8f1564e13473

doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
				textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
FileOutputStream fos = null;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;
res=getResources()
final Resources res = getResources();
float density = context.getResources().getDisplayMetrics().density;
arcColor=res.getColor(R.color.progress_gray)
int arcColor = res.getColor(R.color.progress_gray);
progressColor=res.getColor(android.R.color.holo_blue_light)
int progressColor = res.getColor(android.R.color.holo_blue_light);
int thumbHalfheight = 0;
int thumbHalfWidth = 0;
a=context.obtainStyledAttributes(attrs,R.styleable.SeekArc,defStyle,0)
final TypedArray a = context.obtainStyledAttributes(attrs,
					R.styleable.SeekArc, defStyle, 0);
thumb=a.getDrawable(R.styleable.SeekArc_thumb)
Drawable thumb = a.getDrawable(R.styleable.SeekArc_thumb);
final int arcStart = mStartAngle + mAngleOffset + mRotation;
final int arcSweep = mSweepAngle;
height=getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
final int height = getDefaultSize(getSuggestedMinimumHeight(),
				heightMeasureSpec);
width=getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec)
final int width = getDefaultSize(getSuggestedMinimumWidth(),
				widthMeasureSpec);
min=Math.min(width,height)
final int min = Math.min(width, height);
float top = 0;
float left = 0;
int arcDiameter = 0;
int arcStart = (int)mProgressSweep + mStartAngle  + mRotation + 90;
state=getDrawableState()
int[] state = getDrawableState();
ignoreTouch=ignoreTouch(event.getX(),event.getY())
boolean ignoreTouch = ignoreTouch(event.getX(), event.getY());
progress=getProgressForAngle(mTouchAngle)
int progress = getProgressForAngle(mTouchAngle);
boolean ignore = false;
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
float touchRadius = (float) Math.sqrt(((x * x) + (y * y)));
float x = xPos - mTranslateX;
float y = yPos - mTranslateY;
angle=Math.toDegrees(Math.atan2(y,x) + (Math.PI / 2) - Math.toRadians(mRotation))
double angle = Math.toDegrees(Math.atan2(y, x) + (Math.PI / 2)
				- Math.toRadians(mRotation));
int touchProgress = (int) Math.round(valuePerDegree() * angle);
int thumbAngle = (int) (mStartAngle + mProgressSweep + mRotation + 90);
int thumbHalfheight = (int) mThumb.getIntrinsicHeight() / 2;
int thumbHalfWidth = (int) mThumb.getIntrinsicWidth() / 2;
int progress = getMax() - (int) (getMax() * event.getY() / getHeight());

Diff of d438b59e3eff8d56e51bc3fd56ca8f1564e13473 and cb205122943912f738260e26ff74bf2bdfe8fe88:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 6
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = years
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision d438b59e3eff8d56e51bc3fd56ca8f1564e13473 to cb205122943912f738260e26ff74bf2bdfe8fe88


****Parsing for addition at revision cb205122943912f738260e26ff74bf2bdfe8fe88****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new
				CustomList(DragActivityV2.this, equipmentItems, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
AlertDialog.Builder alert = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
value=input.getText().toString()
String value = input.getText().toString();
scale=Float.parseFloat(value)
Float scale = Float.parseFloat(value) ;
FileOutputStream fos = null;
value=input.getText().toString()
String value = input.getText().toString() ;
rotate=Float.parseFloat(value)
Float rotate = Float.parseFloat(value) ;
FileOutputStream fos = null;
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final ImageView logoFocus = (ImageView)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int i = 1 ;
String line;
ImageView newView = new ImageView (this);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
float scaleDec = scale / 100 ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
on=((ToggleButton)v).isChecked()
boolean on = ((ToggleButton) v).isChecked();
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
                textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
layout=DragActivityV2.dragInfo.getLayout()
final Layout layout = DragActivityV2.dragInfo.getLayout();
int scrollDelta = layout.getLineBottom(DragActivityV2.dragInfo.getLineCount() - 1) 
                        - DragActivityV2.dragInfo.getScrollY() - DragActivityV2.dragInfo.getHeight();
FileOutputStream fos = null;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;

Diff of cb205122943912f738260e26ff74bf2bdfe8fe88 and db338cc3a31fa1b3ff8b828cbbf54c7134aacadd:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 6
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = years
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision cb205122943912f738260e26ff74bf2bdfe8fe88 to db338cc3a31fa1b3ff8b828cbbf54c7134aacadd


****Parsing for addition at revision db338cc3a31fa1b3ff8b828cbbf54c7134aacadd****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);
final Object objectDef = this ;
CustomList adapter = new
				CustomList(DragActivityV2.this, web, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
AlertDialog.Builder alert = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
value=input.getText().toString()
String value = input.getText().toString();
scale=Float.parseFloat(value)
Float scale = Float.parseFloat(value) ;
FileOutputStream fos = null;
value=input.getText().toString()
String value = input.getText().toString() ;
rotate=Float.parseFloat(value)
Float rotate = Float.parseFloat(value) ;
FileOutputStream fos = null;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final ImageView logoFocus = (ImageView)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int i = 1 ;
String line;
ImageView newView = new ImageView (this);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
float scaleDec = scale / 100 ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
                textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
layout=DragActivityV2.dragInfo.getLayout()
final Layout layout = DragActivityV2.dragInfo.getLayout();
int scrollDelta = layout.getLineBottom(DragActivityV2.dragInfo.getLineCount() - 1) 
                        - DragActivityV2.dragInfo.getScrollY() - DragActivityV2.dragInfo.getHeight();
FileOutputStream fos = null;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;

Diff of db338cc3a31fa1b3ff8b828cbbf54c7134aacadd and 2b89e531227fb90e36506e62b856251ecd37001a:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 6
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = years
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision db338cc3a31fa1b3ff8b828cbbf54c7134aacadd to 2b89e531227fb90e36506e62b856251ecd37001a


****Parsing for addition at revision 2b89e531227fb90e36506e62b856251ecd37001a****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added CustomList.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
inflater=context.getLayoutInflater()
LayoutInflater inflater = context.getLayoutInflater();
rowView=inflater.inflate(R.layout.list_single,null,true)
View rowView= inflater.inflate(R.layout.list_single, null, true);
TextView txtTitle = (TextView) rowView.findViewById(R.id.txt);
ImageView imageView = (ImageView) rowView.findViewById(R.id.img);

 Generics pattern public class CustomList was added at revision 2b89e531227fb90e36506e62b856251ecd37001a

final Object objectDef = this ;
CustomList adapter = new
				CustomList(DragActivityV2.this, web, imageId);
final ImageView newView = new ImageView (getApplicationContext());
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
AlertDialog.Builder alert = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
value=input.getText().toString()
String value = input.getText().toString();
scale=Float.parseFloat(value)
Float scale = Float.parseFloat(value) ;
FileOutputStream fos = null;
value=input.getText().toString()
String value = input.getText().toString() ;
rotate=Float.parseFloat(value)
Float rotate = Float.parseFloat(value) ;
FileOutputStream fos = null;
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final ImageView logoFocus = (ImageView)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int i = 1 ;
String line;
ImageView newView = new ImageView (this);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
float scaleDec = scale / 100 ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;

 Generics pattern AdapterView<?> was added at revision 2b89e531227fb90e36506e62b856251ecd37001a

doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
                textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
layout=DragActivityV2.dragInfo.getLayout()
final Layout layout = DragActivityV2.dragInfo.getLayout();
int scrollDelta = layout.getLineBottom(DragActivityV2.dragInfo.getLineCount() - 1) 
                        - DragActivityV2.dragInfo.getScrollY() - DragActivityV2.dragInfo.getHeight();
FileOutputStream fos = null;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
Matrix matrix = new Matrix();
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;

Diff of 2b89e531227fb90e36506e62b856251ecd37001a and 4af5e29ecaf07f285875cab9261d67fb55ef52aa:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 1
	--> recency = years
	--> Added type declarations  = 7
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = years
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 2b89e531227fb90e36506e62b856251ecd37001a to 4af5e29ecaf07f285875cab9261d67fb55ef52aa


****Parsing for addition at revision 4af5e29ecaf07f285875cab9261d67fb55ef52aa****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
AlertDialog.Builder alert = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
value=input.getText().toString()
String value = input.getText().toString();
scale=Float.parseFloat(value)
Float scale = Float.parseFloat(value) ;
FileOutputStream fos = null;
value=input.getText().toString()
String value = input.getText().toString() ;
rotate=Float.parseFloat(value)
Float rotate = Float.parseFloat(value) ;
FileOutputStream fos = null;
final ImageView newView = new ImageView (this);
CharSequence equipment[] = new CharSequence[] {"burrete", "beaker", "testtube"};
AlertDialog.Builder builder = new AlertDialog.Builder(this);
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 60;
int top = 60;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final ImageView logoFocus = (ImageView)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
float rotate = 0 ;
float scale = 0;
int i = 1 ;
String line;
ImageView newView = new ImageView (this);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
float scaleDec = scale / 100 ;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
                textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
layout=DragActivityV2.dragInfo.getLayout()
final Layout layout = DragActivityV2.dragInfo.getLayout();
int scrollDelta = layout.getLineBottom(DragActivityV2.dragInfo.getLineCount() - 1) 
                        - DragActivityV2.dragInfo.getScrollY() - DragActivityV2.dragInfo.getHeight();
FileOutputStream fos = null;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;

Diff of 4af5e29ecaf07f285875cab9261d67fb55ef52aa and 24776cddef68dd4db14cbec46e297ce4b1c2f2d7:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 1
	--> recency = years
	--> Added type declarations  = 7
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = years
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 4af5e29ecaf07f285875cab9261d67fb55ef52aa to 24776cddef68dd4db14cbec46e297ce4b1c2f2d7


****Parsing for addition at revision 24776cddef68dd4db14cbec46e297ce4b1c2f2d7****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
AlertDialog.Builder alert = new AlertDialog.Builder(this);
final EditText input = new EditText(this);
value=input.getText().toString()
String value = input.getText().toString();
scale=Float.parseFloat(value)
Float scale = Float.parseFloat(value) ;
value=input.getText().toString()
String value = input.getText().toString() ;
rotate=Float.parseFloat(value)
Float rotate = Float.parseFloat(value) ;
final ImageView newView = new ImageView (this);
CharSequence equipment[] = new CharSequence[] {"burrete", "beaker", "testtube"};
AlertDialog.Builder builder = new AlertDialog.Builder(this);
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 60;
int top = 60;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final ImageView logoFocus = (ImageView)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
int i = 1 ;
String line;
ImageView newView = new ImageView (this);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
float xScale = ((float) boundBoxInDp) / width;
float yScale = ((float) boundBoxInDp) / height;
float scale = (xScale <= yScale) ? xScale : yScale;
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
drawing=view.getDrawable()
Drawable drawing = view.getDrawable();
bitmap=((BitmapDrawable)drawing).getBitmap()
Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();
width=bitmap.getWidth()
int width = bitmap.getWidth();
height=bitmap.getHeight()
int height = bitmap.getHeight();
Matrix matrix = new Matrix();
scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true)
Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
@SuppressWarnings("deprecation")
		BitmapDrawable result = new BitmapDrawable(scaledBitmap);
DragLayer.LayoutParams params = (DragLayer.LayoutParams) view.getLayoutParams();
float density = getApplicationContext().getResources().getDisplayMetrics().density;
float scaleDec = scale / 100 ;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
                textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
layout=DragActivityV2.dragInfo.getLayout()
final Layout layout = DragActivityV2.dragInfo.getLayout();
int scrollDelta = layout.getLineBottom(DragActivityV2.dragInfo.getLineCount() - 1) 
                        - DragActivityV2.dragInfo.getScrollY() - DragActivityV2.dragInfo.getHeight();
FileOutputStream fos = null;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;

Diff of 24776cddef68dd4db14cbec46e297ce4b1c2f2d7 and 07e59a29fe21f5325f989c5699aae0c310bea431:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 1
	--> recency = years
	--> Added type declarations  = 7
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = years
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 24776cddef68dd4db14cbec46e297ce4b1c2f2d7 to 07e59a29fe21f5325f989c5699aae0c310bea431


****Parsing for addition at revision 07e59a29fe21f5325f989c5699aae0c310bea431****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
final ImageView newView = new ImageView (this);
CharSequence equipment[] = new CharSequence[] {"burrete", "beaker", "testtube"};
AlertDialog.Builder builder = new AlertDialog.Builder(this);
FileOutputStream fos = null;
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final ImageView logoFocus = (ImageView)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
moveRead=nextMove(reader)
char moveRead = nextMove(reader)  ;
int imageId ;
char caseRead = 'm';
float initX, finX, initY, finY ;
String[] RowData = null;
int imageAdded = 0 ;
int i = 1 ;
String line;
ImageView newView = new ImageView (this);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
                textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
layout=DragActivityV2.dragInfo.getLayout()
final Layout layout = DragActivityV2.dragInfo.getLayout();
int scrollDelta = layout.getLineBottom(DragActivityV2.dragInfo.getLineCount() - 1) 
                        - DragActivityV2.dragInfo.getScrollY() - DragActivityV2.dragInfo.getHeight();
FileOutputStream fos = null;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;

Diff of 07e59a29fe21f5325f989c5699aae0c310bea431 and 4e54f0af82a131c498f5d6f0d8f8a15973f76dee:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 1
	--> recency = years
	--> Added type declarations  = 7
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = years
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 07e59a29fe21f5325f989c5699aae0c310bea431 to 4e54f0af82a131c498f5d6f0d8f8a15973f76dee


****Parsing for addition at revision 4e54f0af82a131c498f5d6f0d8f8a15973f76dee****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
final ImageView newView = new ImageView (this);
CharSequence equipment[] = new CharSequence[] {"burrete", "beaker", "testtube"};
AlertDialog.Builder builder = new AlertDialog.Builder(this);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
Object dragInfo = v;
DragController dragController = mDragController;
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final ImageView logoFocus = (ImageView)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
String line;
bm=loadImageFromUrl(params[0])
Bitmap bm = loadImageFromUrl(params[0]);
Bitmap bm = null;
URL url = new URL(targetUrl);
connection=url.openConnection()
URLConnection connection = url.openConnection();
inputStream=connection.getInputStream()
InputStream inputStream = connection.getInputStream();

 Generics pattern private class LoadImageTask was added at revision 4e54f0af82a131c498f5d6f0d8f8a15973f76dee

doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
                textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
layout=DragActivityV2.dragInfo.getLayout()
final Layout layout = DragActivityV2.dragInfo.getLayout();
int scrollDelta = layout.getLineBottom(DragActivityV2.dragInfo.getLineCount() - 1) 
                        - DragActivityV2.dragInfo.getScrollY() - DragActivityV2.dragInfo.getHeight();
FileOutputStream fos = null;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;

Diff of 4e54f0af82a131c498f5d6f0d8f8a15973f76dee and f127e99827fa2acaca9f99c9768aa4e9eb381dff:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 1
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = years
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 4e54f0af82a131c498f5d6f0d8f8a15973f76dee to f127e99827fa2acaca9f99c9768aa4e9eb381dff


****Parsing for addition at revision f127e99827fa2acaca9f99c9768aa4e9eb381dff****

Added BuildConfig.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added R.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragActivityV2.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragController.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragLayer.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragSource.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DragView.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropSpot.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added DropTarget.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added IDGen.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
Added MyAbsoluteLayout.java to .\Virtual-Lab-Using-Drag-and-Drop\ repository source files.
ImageView newView = new ImageView (this);
int w = 60;
int h = 60;
int left = 80;
int top = 100;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
File file = new File(getFilesDir().getAbsolutePath()+"/media") ;
boolean handledHere = false;
action=ev.getAction()
final int action = ev.getAction();
Object dragInfo = v;
DragController dragController = mDragController;
ImageView i1 = (ImageView) findViewById (R.id.Image1);
ImageView i2 = (ImageView) findViewById (R.id.Image2);
String message = mLongClickStartsDrag ? "Press and hold to start dragging." 
				: "Touch a view to start dragging.";
final ImageView logoFocus = (ImageView)findViewById(imageId) ;
Animation anim = new TranslateAnimation(0,(xFinal-xInitial),0,(yFinal-yInitial)) ;
MyAbsoluteLayout.LayoutParams lp = (MyAbsoluteLayout.LayoutParams) logoFocus.getLayoutParams();
FileInputStream fis = null ;
BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
int imageId ;
float initX, finX, initY, finY ;
String[] RowData = null;
int i = 1 ;
String line;
doDrag=source.allowDrag()
boolean doDrag = source.allowDrag ();
b=getViewBitmap(v)
Bitmap b = getViewBitmap(v);
int[] loc = mCoordinatesTemp;
int screenX = loc[0];
int screenY = loc[1];
int registrationX = ((int)mMotionDownX) - screenX;
int registrationY = ((int)mMotionDownY) - screenY;
DragView dragView = mDragView = new DragView(mContext, b, registrationX, registrationY,
                textureLeft, textureTop, textureWidth, textureHeight);
willNotCache=v.willNotCacheDrawing()
boolean willNotCache = v.willNotCacheDrawing();
color=v.getDrawingCacheBackgroundColor()
int color = v.getDrawingCacheBackgroundColor();
cacheBitmap=v.getDrawingCache()
Bitmap cacheBitmap = v.getDrawingCache();
bitmap=Bitmap.createBitmap(cacheBitmap)
Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
action=ev.getAction()
final int action = ev.getAction();
screenX=clamp((int)ev.getRawX(),0,mDisplayMetrics.widthPixels)
final int screenX = clamp((int)ev.getRawX(), 0, mDisplayMetrics.widthPixels);
screenY=clamp((int)ev.getRawY(),0,mDisplayMetrics.heightPixels)
final int screenY = clamp((int)ev.getRawY(), 0, mDisplayMetrics.heightPixels);
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget(screenX,screenY,coordinates)
DropTarget dropTarget = findDropTarget(screenX, screenY, coordinates);
viewId=((View)mDragInfo).getId()
int viewId = ((View)mDragInfo).getId() ;
layout=DragActivityV2.dragInfo.getLayout()
final Layout layout = DragActivityV2.dragInfo.getLayout();
int scrollDelta = layout.getLineBottom(DragActivityV2.dragInfo.getLineCount() - 1) 
                        - DragActivityV2.dragInfo.getScrollY() - DragActivityV2.dragInfo.getHeight();
FileOutputStream fos = null;
final int[] coordinates = mCoordinatesTemp;
dropTarget=findDropTarget((int)x,(int)y,coordinates)
DropTarget dropTarget = findDropTarget((int) x, (int) y, coordinates);
final Rect r = mRectTemp;
final ArrayList<DropTarget> dropTargets = mDropTargets;
final ArrayList<DropTarget> dropTargets = mDropTargets;
count=dropTargets.size()
final int count = dropTargets.size();
target=dropTargets.get(i)
final DropTarget target = dropTargets.get(i);
View v = (View) dragInfo;
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset;
int top = y - yOffset;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
Matrix scale = new Matrix();
float scaleFactor = width;
Paint p = new Paint();
float scale = mAnimationScale;
width=mBitmap.getWidth()
float width = mBitmap.getWidth();
float offset = (width-(width*scale))/2;
WindowManager.LayoutParams lp;
int pixelFormat;
WindowManager.LayoutParams lp = mLayoutParams;
View v = (View) dragInfo;
viewX=this.getLeft()
int viewX = this.getLeft ();
viewY=this.getTop()
int viewY = this.getTop ();
w=v.getWidth()
int w = v.getWidth ();
h=v.getHeight()
int h = v.getHeight ();
int left = x - xOffset + viewX;
int top = y - yOffset + viewY;
DragLayer.LayoutParams lp = new DragLayer.LayoutParams (w, h, left, top);
int bg = isEnabled () ? R.color.drop_target_enabled : R.color.drop_target_disabled;
result=sNextGeneratedId.get()
final int result = sNextGeneratedId.get();
int newValue = result + 1;
count=getChildCount()
int count = getChildCount();
int maxHeight = 0;
int maxWidth = 0;
child=getChildAt(i)
View child = getChildAt(i);
int childRight;
int childBottom;
MyAbsoluteLayout.LayoutParams lp
                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
count=getChildCount()
int count = getChildCount();
paddingL=getPaddingLeft()
int paddingL = getPaddingLeft ();
paddingT=getPaddingTop()
int paddingT = getPaddingTop ();
child=getChildAt(i)
View child = getChildAt(i);
MyAbsoluteLayout.LayoutParams lp =
                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
int childLeft = paddingL + lp.x;
int childTop = paddingT + lp.y;

Diff of f127e99827fa2acaca9f99c9768aa4e9eb381dff and adc4c24f0bbc11deda0cd64995091d781a5fed29:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 1
	--> recency = years
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = years
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f127e99827fa2acaca9f99c9768aa4e9eb381dff to adc4c24f0bbc11deda0cd64995091d781a5fed29

************Analysis complete************
Added generics to repository Virtual-Lab-Using-Drag-and-Drop = 5

Animesh Das added type argument method count = 0
	--> recency = null
Animesh Das added wildcard count = 1
	--> recency = years
Animesh Das added type declaration count = 8
	--> recency = years
Animesh Das added type parameter method count = 0
	--> recency = null
Animesh Das added type parameter field count = 0
	--> recency = null
Animesh Das added diamond count = 0
	--> recency = null
Animesh Das added method invocation count = 0
	--> recency = null
Animesh Das added implicit method invocation count = 1
	--> recency = years
Animesh Das added class instantiation count = 0
	--> recency = null
Animesh Das added nested count = 0
	--> recency = null
Animesh Das added bounds count = 0
	--> recency = null
File copied successfully!
