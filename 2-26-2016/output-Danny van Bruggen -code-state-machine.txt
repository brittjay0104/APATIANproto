code-state-machine -- matozoid -- Danny van Bruggen 
https://github.com/matozoid/code-state-machine.git
git clone https://github.com/matozoid/code-state-machine.git
.\code-state-machine\
.\code-state-machine\.git
0
Project cloned!
Danny van Bruggen  is responsible for commit c0bef105a6610eb210d3a0f9c2f0453b5d35a023
Danny van Bruggen  is responsible for commit bac03e88da4750ad76c5866c751b86b9bc98239b
Danny van Bruggen  is responsible for commit 6b25acdac2a59ce502cc967de19f52ea66a27d8e
Danny van Bruggen  is responsible for commit d9d055645fde529581c81b7b9be10c31fd5afefb
Danny van Bruggen  is responsible for commit d7202b09cab74b644b151e94a97e70384fd99450
Danny van Bruggen  is responsible for commit 94ea3c4dacd8b69e595bd1bf0accb6f8b22e114c
Danny van Bruggen  is responsible for commit 7eb096feebe22f564287b50d5e53528c4a0b55ee
Danny van Bruggen  is responsible for commit bc26dc0656b796ce4fb5c1673be3d88874662e37
Danny van Bruggen  is responsible for commit c6555ca51638a0dd080dd353adf39daae6d71f57
Danny van Bruggen  is responsible for commit fc95bc2c2209d9e1ab84325a04247ca0d217007e
Danny van Bruggen  is responsible for commit 6b751d0731d3b0ec3c2852e00ece86a745ed6cc6
Danny van Bruggen  is responsible for commit 794f6694f781d440559ce59d71d61979ede2b1bc
Danny van Bruggen  is responsible for commit 719d9a774b0c2c99f8221886632fc786c2852565
Danny van Bruggen  is responsible for commit e4ce7f84c5aef934afedee9d5a8258f50209fffb
Danny van Bruggen  is responsible for commit b2941cc5307273c4824fb957a06f7534b73f05c6
Danny van Bruggen  is responsible for commit f6779c421f9d1ef8b9cff780278de5c4a2fe1c55
Danny van Bruggen  is responsible for commit 0bacbd262b2d152b434ce9db94a85dfb7e634c58
Danny van Bruggen  is responsible for commit 7f58df6638e126ae0d9f7f0601fc1038cd72d56a
Danny van Bruggen  is responsible for commit b735304ba81a5a177e225681a893fdf80e39787f
Danny van Bruggen  is responsible for commit ede2f823c4b04f690fd9b7ff7be7672121fd4ad3
Danny van Bruggen  is responsible for commit 944c31b071bdf8803a2f6781381b4be3ac052fcb
Danny van Bruggen  is responsible for commit 69479df38f94af81826b3f25167895302f48d71f
Danny van Bruggen  is responsible for commit 7b523c860b8fde8a9efc26bef100680e1007c57b
Danny van Bruggen  is responsible for commit 8b7a1c04c42cf73b86738b0c4827583798c862f7
Danny van Bruggen  is responsible for commit 230f41b4b35749aaa734dd55a21b2a822c817786
Danny van Bruggen  is responsible for commit 46349cb2a9ccdebc884fbdcee010b90feead9075
Danny van Bruggen  is responsible for commit f44ed3711785f611fafd86ab0af3208483a87994
Danny van Bruggen  is responsible for commit f1cfbc22e94a4b070b14909172a295dfe0af0466
Danny van Bruggen  is responsible for commit 21a94bfc9cc587c4fb357cc2e6a8151537c8d676
Danny van Bruggen  is responsible for commit 5e4a351514750df998947774469f844f5a32327c
Danny van Bruggen  is responsible for commit 73c523a060fb8da00416da0e91fbd6e09b435d6b
Danny van Bruggen  is responsible for commit 57e72f0bd0be81ff96f0e5dd300cae0419857c75
Danny van Bruggen  is responsible for commit 9c891ba196980ed48c4981555ad05bac4faec781
Danny van Bruggen  is responsible for commit dbffe9e3c099595ef532ec802bf673da9989509a
Danny van Bruggen  is responsible for commit a5b8ee027333e9cf7490f4685d15c9b8e83cdd4a
Danny van Bruggen  is responsible for commit f6a365adc8e58a68d40d1a29156d048a44ab971b
Danny van Bruggen  is responsible for commit ddee06bf5386e05476b2a293cf230aeee34cf3cc
Danny van Bruggen  is responsible for commit 089b171acb6a805c40ee86b1e98ddb2c2cdc9346
Danny van Bruggen  is responsible for commit 9294077a06918f64fba9a1aee3c9e5ccef8a3948
Danny van Bruggen  is responsible for commit 5c134282a9c489b3f11aed20cd97d218fd98d17f
Danny van Bruggen  is responsible for commit 2f2b8bbd63e507e7f508c7e5b6f65290dd06c19f
Danny van Bruggen  is responsible for commit 30090bc8f68ebbd1700fd3618a50f60388b2087d
Danny van Bruggen  is responsible for commit 08dc990bcbeef73b84bc46349e98b7cb8153ea49
Danny van Bruggen  is responsible for commit 39061195758419048cd5e031de96edc37f609673
Danny van Bruggen  is responsible for commit 761bc382d1b2b167aaa608f3f763267107ca8e9e
Danny van Bruggen  is responsible for commit dbeafa707bbbbb619e031967df4998835410b4b0
Danny van Bruggen  is responsible for commit e114b0623a3d3c6080d2fb48843dd13ebeb47a8c
Danny van Bruggen  is responsible for commit 8f72023e516ca0d8e90b3d3c945fddef7e48eaf2
Danny van Bruggen  is responsible for commit 9ed906c6043bc7fb1eb72db47494b293fb3616a6
Danny van Bruggen  is responsible for commit 8a3b74b4ee4022057c952347d9c630f17e525e3b
Danny van Bruggen  is responsible for commit aee9c69117ebdb7380368e21462675e522e09c71
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.

 ************ ANALYZING FOR USAGE PATTERN ADDITION ************


****Parsing for addition at revision c0bef105a6610eb210d3a0f9c2f0453b5d35a023****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of c0bef105a6610eb210d3a0f9c2f0453b5d35a023 and bac03e88da4750ad76c5866c751b86b9bc98239b:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision c0bef105a6610eb210d3a0f9c2f0453b5d35a023 to bac03e88da4750ad76c5866c751b86b9bc98239b


****Parsing for addition at revision bac03e88da4750ad76c5866c751b86b9bc98239b****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of bac03e88da4750ad76c5866c751b86b9bc98239b and 6b25acdac2a59ce502cc967de19f52ea66a27d8e:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision bac03e88da4750ad76c5866c751b86b9bc98239b to 6b25acdac2a59ce502cc967de19f52ea66a27d8e


****Parsing for addition at revision 6b25acdac2a59ce502cc967de19f52ea66a27d8e****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 6b25acdac2a59ce502cc967de19f52ea66a27d8e and d9d055645fde529581c81b7b9be10c31fd5afefb:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 6b25acdac2a59ce502cc967de19f52ea66a27d8e to d9d055645fde529581c81b7b9be10c31fd5afefb


****Parsing for addition at revision d9d055645fde529581c81b7b9be10c31fd5afefb****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of d9d055645fde529581c81b7b9be10c31fd5afefb and d7202b09cab74b644b151e94a97e70384fd99450:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision d9d055645fde529581c81b7b9be10c31fd5afefb to d7202b09cab74b644b151e94a97e70384fd99450


****Parsing for addition at revision d7202b09cab74b644b151e94a97e70384fd99450****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of d7202b09cab74b644b151e94a97e70384fd99450 and 94ea3c4dacd8b69e595bd1bf0accb6f8b22e114c:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision d7202b09cab74b644b151e94a97e70384fd99450 to 94ea3c4dacd8b69e595bd1bf0accb6f8b22e114c


****Parsing for addition at revision 94ea3c4dacd8b69e595bd1bf0accb6f8b22e114c****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 94ea3c4dacd8b69e595bd1bf0accb6f8b22e114c and 7eb096feebe22f564287b50d5e53528c4a0b55ee:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 94ea3c4dacd8b69e595bd1bf0accb6f8b22e114c to 7eb096feebe22f564287b50d5e53528c4a0b55ee


****Parsing for addition at revision 7eb096feebe22f564287b50d5e53528c4a0b55ee****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 7eb096feebe22f564287b50d5e53528c4a0b55ee and bc26dc0656b796ce4fb5c1673be3d88874662e37:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 7eb096feebe22f564287b50d5e53528c4a0b55ee to bc26dc0656b796ce4fb5c1673be3d88874662e37


****Parsing for addition at revision bc26dc0656b796ce4fb5c1673be3d88874662e37****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of bc26dc0656b796ce4fb5c1673be3d88874662e37 and c6555ca51638a0dd080dd353adf39daae6d71f57:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision bc26dc0656b796ce4fb5c1673be3d88874662e37 to c6555ca51638a0dd080dd353adf39daae6d71f57


****Parsing for addition at revision c6555ca51638a0dd080dd353adf39daae6d71f57****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of c6555ca51638a0dd080dd353adf39daae6d71f57 and fc95bc2c2209d9e1ab84325a04247ca0d217007e:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision c6555ca51638a0dd080dd353adf39daae6d71f57 to fc95bc2c2209d9e1ab84325a04247ca0d217007e


****Parsing for addition at revision fc95bc2c2209d9e1ab84325a04247ca0d217007e****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of fc95bc2c2209d9e1ab84325a04247ca0d217007e and 6b751d0731d3b0ec3c2852e00ece86a745ed6cc6:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision fc95bc2c2209d9e1ab84325a04247ca0d217007e to 6b751d0731d3b0ec3c2852e00ece86a745ed6cc6


****Parsing for addition at revision 6b751d0731d3b0ec3c2852e00ece86a745ed6cc6****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 6b751d0731d3b0ec3c2852e00ece86a745ed6cc6 and 794f6694f781d440559ce59d71d61979ede2b1bc:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 6b751d0731d3b0ec3c2852e00ece86a745ed6cc6 to 794f6694f781d440559ce59d71d61979ede2b1bc


****Parsing for addition at revision 794f6694f781d440559ce59d71d61979ede2b1bc****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 794f6694f781d440559ce59d71d61979ede2b1bc and 719d9a774b0c2c99f8221886632fc786c2852565:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 794f6694f781d440559ce59d71d61979ede2b1bc to 719d9a774b0c2c99f8221886632fc786c2852565


****Parsing for addition at revision 719d9a774b0c2c99f8221886632fc786c2852565****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 719d9a774b0c2c99f8221886632fc786c2852565 and e4ce7f84c5aef934afedee9d5a8258f50209fffb:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 719d9a774b0c2c99f8221886632fc786c2852565 to e4ce7f84c5aef934afedee9d5a8258f50209fffb


****Parsing for addition at revision e4ce7f84c5aef934afedee9d5a8258f50209fffb****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of e4ce7f84c5aef934afedee9d5a8258f50209fffb and b2941cc5307273c4824fb957a06f7534b73f05c6:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision e4ce7f84c5aef934afedee9d5a8258f50209fffb to b2941cc5307273c4824fb957a06f7534b73f05c6


****Parsing for addition at revision b2941cc5307273c4824fb957a06f7534b73f05c6****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of b2941cc5307273c4824fb957a06f7534b73f05c6 and f6779c421f9d1ef8b9cff780278de5c4a2fe1c55:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision b2941cc5307273c4824fb957a06f7534b73f05c6 to f6779c421f9d1ef8b9cff780278de5c4a2fe1c55


****Parsing for addition at revision f6779c421f9d1ef8b9cff780278de5c4a2fe1c55****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of f6779c421f9d1ef8b9cff780278de5c4a2fe1c55 and 0bacbd262b2d152b434ce9db94a85dfb7e634c58:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f6779c421f9d1ef8b9cff780278de5c4a2fe1c55 to 0bacbd262b2d152b434ce9db94a85dfb7e634c58


****Parsing for addition at revision 0bacbd262b2d152b434ce9db94a85dfb7e634c58****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 0bacbd262b2d152b434ce9db94a85dfb7e634c58 and 7f58df6638e126ae0d9f7f0601fc1038cd72d56a:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 0bacbd262b2d152b434ce9db94a85dfb7e634c58 to 7f58df6638e126ae0d9f7f0601fc1038cd72d56a


****Parsing for addition at revision 7f58df6638e126ae0d9f7f0601fc1038cd72d56a****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 7f58df6638e126ae0d9f7f0601fc1038cd72d56a and b735304ba81a5a177e225681a893fdf80e39787f:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 7f58df6638e126ae0d9f7f0601fc1038cd72d56a to b735304ba81a5a177e225681a893fdf80e39787f


****Parsing for addition at revision b735304ba81a5a177e225681a893fdf80e39787f****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of b735304ba81a5a177e225681a893fdf80e39787f and ede2f823c4b04f690fd9b7ff7be7672121fd4ad3:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision b735304ba81a5a177e225681a893fdf80e39787f to ede2f823c4b04f690fd9b7ff7be7672121fd4ad3


****Parsing for addition at revision ede2f823c4b04f690fd9b7ff7be7672121fd4ad3****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of ede2f823c4b04f690fd9b7ff7be7672121fd4ad3 and 944c31b071bdf8803a2f6781381b4be3ac052fcb:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision ede2f823c4b04f690fd9b7ff7be7672121fd4ad3 to 944c31b071bdf8803a2f6781381b4be3ac052fcb


****Parsing for addition at revision 944c31b071bdf8803a2f6781381b4be3ac052fcb****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 944c31b071bdf8803a2f6781381b4be3ac052fcb and 69479df38f94af81826b3f25167895302f48d71f:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 944c31b071bdf8803a2f6781381b4be3ac052fcb to 69479df38f94af81826b3f25167895302f48d71f


****Parsing for addition at revision 69479df38f94af81826b3f25167895302f48d71f****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 69479df38f94af81826b3f25167895302f48d71f and 7b523c860b8fde8a9efc26bef100680e1007c57b:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 69479df38f94af81826b3f25167895302f48d71f to 7b523c860b8fde8a9efc26bef100680e1007c57b


****Parsing for addition at revision 7b523c860b8fde8a9efc26bef100680e1007c57b****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 7b523c860b8fde8a9efc26bef100680e1007c57b and 8b7a1c04c42cf73b86738b0c4827583798c862f7:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 7b523c860b8fde8a9efc26bef100680e1007c57b to 8b7a1c04c42cf73b86738b0c4827583798c862f7


****Parsing for addition at revision 8b7a1c04c42cf73b86738b0c4827583798c862f7****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 8b7a1c04c42cf73b86738b0c4827583798c862f7 and 230f41b4b35749aaa734dd55a21b2a822c817786:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 8b7a1c04c42cf73b86738b0c4827583798c862f7 to 230f41b4b35749aaa734dd55a21b2a822c817786


****Parsing for addition at revision 230f41b4b35749aaa734dd55a21b2a822c817786****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 230f41b4b35749aaa734dd55a21b2a822c817786 and 46349cb2a9ccdebc884fbdcee010b90feead9075:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 230f41b4b35749aaa734dd55a21b2a822c817786 to 46349cb2a9ccdebc884fbdcee010b90feead9075


****Parsing for addition at revision 46349cb2a9ccdebc884fbdcee010b90feead9075****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 46349cb2a9ccdebc884fbdcee010b90feead9075 and f44ed3711785f611fafd86ab0af3208483a87994:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 46349cb2a9ccdebc884fbdcee010b90feead9075 to f44ed3711785f611fafd86ab0af3208483a87994


****Parsing for addition at revision f44ed3711785f611fafd86ab0af3208483a87994****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of f44ed3711785f611fafd86ab0af3208483a87994 and f1cfbc22e94a4b070b14909172a295dfe0af0466:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f44ed3711785f611fafd86ab0af3208483a87994 to f1cfbc22e94a4b070b14909172a295dfe0af0466


****Parsing for addition at revision f1cfbc22e94a4b070b14909172a295dfe0af0466****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of f1cfbc22e94a4b070b14909172a295dfe0af0466 and 21a94bfc9cc587c4fb357cc2e6a8151537c8d676:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f1cfbc22e94a4b070b14909172a295dfe0af0466 to 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


****Parsing for addition at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.

 Generics pattern public class Actions was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676

final E singleEvent = events[0];

 Generics pattern public static <E> Conditions<E> is(final E... events) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new Conditions<E>(new SingleEventMatchCondition<E>(singleEvent)) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new Conditions<E>(new MultiEventMatchCondition<E>(events)) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern public Condition<E> active(final T... statesThatMustBeActive) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new StatesActiveCondition<T, E, P>(machine, statesThatMustBeActive) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern public Condition<E> inactive(final T... statesThatMustBeInactive) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new StatesInactiveCondition<T, E, P>(machine, statesThatMustBeInactive) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676

documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();

 Generics pattern new StateMachine<T, E, Integer>() was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern private T parseState(final Element stateElement, final StateMachine<T, E, Integer>.Internals builder) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new Conditions<E>() was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676

final StringBuilder str = new StringBuilder("one of (");

 Generics pattern new HashSet<T>(Arrays.asList(statesThatMustBeActive)) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern public class Conditions<E> was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676

final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();

 Generics pattern public final class PriorityDeterminizer was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676

boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");

 Generics pattern public class Chain<T> was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new ArrayList<T>(Arrays.asList(items)) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern protected Iterable<T> getItems() was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new StateMachine<SimpleState, Object, Priority>() was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676

final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();

 Generics pattern new AlwaysCondition<String>() was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern final StateMachine<String, String, Integer> stateMachine = scxmlParser.build(); was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new DotOutput<String, String, Integer>() was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676

final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

 Generics pattern public class Actions was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676

final E singleEvent = events[0];

 Generics pattern public static <E> Conditions<E> is(final E... events) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new Conditions<E>(new SingleEventMatchCondition<E>(singleEvent)) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new Conditions<E>(new MultiEventMatchCondition<E>(events)) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern public Condition<E> active(final T... statesThatMustBeActive) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new StatesActiveCondition<T, E, P>(machine, statesThatMustBeActive) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern public Condition<E> inactive(final T... statesThatMustBeInactive) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new StatesInactiveCondition<T, E, P>(machine, statesThatMustBeInactive) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676

documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();

 Generics pattern new StateMachine<T, E, Integer>() was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern private T parseState(final Element stateElement, final StateMachine<T, E, Integer>.Internals builder) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new Conditions<E>() was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676

final StringBuilder str = new StringBuilder("one of (");

 Generics pattern new HashSet<T>(Arrays.asList(statesThatMustBeActive)) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern public class Conditions<E> was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676

final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();

 Generics pattern public final class PriorityDeterminizer was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676

boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");

 Generics pattern public class Chain<T> was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new ArrayList<T>(Arrays.asList(items)) was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern protected Iterable<T> getItems() was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new StateMachine<SimpleState, Object, Priority>() was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676

final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();

 Generics pattern new AlwaysCondition<String>() was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern final StateMachine<String, String, Integer> stateMachine = scxmlParser.build(); was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676


 Generics pattern new DotOutput<String, String, Integer>() was added at revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676

final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 21a94bfc9cc587c4fb357cc2e6a8151537c8d676 and 5e4a351514750df998947774469f844f5a32327c:
	--> Added type argument methods = 8
	--> recency = years
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = years
	--> Added type parameter methods = 4
	--> recency = years
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 178
	--> recency = years
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 21a94bfc9cc587c4fb357cc2e6a8151537c8d676 to 5e4a351514750df998947774469f844f5a32327c


****Parsing for addition at revision 5e4a351514750df998947774469f844f5a32327c****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];

 Generics pattern new StateMachine<T, E, P>() was added at revision 5e4a351514750df998947774469f844f5a32327c

documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();

 Generics pattern public class Internals was added at revision 5e4a351514750df998947774469f844f5a32327c

final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];

 Generics pattern new StateMachine<T, E, P>() was added at revision 5e4a351514750df998947774469f844f5a32327c

documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();

 Generics pattern public class Internals was added at revision 5e4a351514750df998947774469f844f5a32327c

final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 5e4a351514750df998947774469f844f5a32327c and 73c523a060fb8da00416da0e91fbd6e09b435d6b:
	--> Added type argument methods = 8
	--> recency = years
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 10
	--> recency = years
	--> Added type parameter methods = 4
	--> recency = years
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 200
	--> recency = years
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5e4a351514750df998947774469f844f5a32327c to 73c523a060fb8da00416da0e91fbd6e09b435d6b


****Parsing for addition at revision 73c523a060fb8da00416da0e91fbd6e09b435d6b****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 73c523a060fb8da00416da0e91fbd6e09b435d6b and 57e72f0bd0be81ff96f0e5dd300cae0419857c75:
	--> Added type argument methods = 8
	--> recency = years
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 10
	--> recency = years
	--> Added type parameter methods = 4
	--> recency = years
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 200
	--> recency = years
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 73c523a060fb8da00416da0e91fbd6e09b435d6b to 57e72f0bd0be81ff96f0e5dd300cae0419857c75


****Parsing for addition at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.

 Generics pattern Condition<E> isFinished() was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern new NonEventBasedCondition<E>() was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75

final E singleEvent = events[0];

 Generics pattern public static <E> Condition<E> always() was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern new AlwaysCondition<E>() was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public static <E> Condition<E> never() was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern new NeverCondition<E>() was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public static <E> Condition<E> after(final long milliseconds) was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern new AfterCondition<E>(milliseconds) was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern new SingleEventMatchCondition<E>(singleEvent) was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern new MultiEventMatchCondition<E>(events) was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75

documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();

 Generics pattern protected abstract Condition<E> interpretCondition(final String attribute) was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public final class AfterCondition<E> was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public final class AlwaysCondition<E> was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public abstract class EventBasedCondition<E> was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75

final StringBuilder str = new StringBuilder("one of (");

 Generics pattern public final class MultiEventMatchCondition<E> was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern new HashSet<E>(Arrays.asList(events)) was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public final class NeverCondition<E> was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public abstract class NonEventBasedCondition<E> was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public final class SingleEventMatchCondition<E> was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern private final E singleEvent; was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75

final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

 Generics pattern Condition<E> isFinished() was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern new NonEventBasedCondition<E>() was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75

final E singleEvent = events[0];

 Generics pattern public static <E> Condition<E> always() was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern new AlwaysCondition<E>() was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public static <E> Condition<E> never() was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern new NeverCondition<E>() was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public static <E> Condition<E> after(final long milliseconds) was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern new AfterCondition<E>(milliseconds) was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern new SingleEventMatchCondition<E>(singleEvent) was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern new MultiEventMatchCondition<E>(events) was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75

documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();

 Generics pattern protected abstract Condition<E> interpretCondition(final String attribute) was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public final class AfterCondition<E> was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public final class AlwaysCondition<E> was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public abstract class EventBasedCondition<E> was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75

final StringBuilder str = new StringBuilder("one of (");

 Generics pattern public final class MultiEventMatchCondition<E> was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern new HashSet<E>(Arrays.asList(events)) was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public final class NeverCondition<E> was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public abstract class NonEventBasedCondition<E> was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern public final class SingleEventMatchCondition<E> was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75


 Generics pattern private final E singleEvent; was added at revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75

final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 57e72f0bd0be81ff96f0e5dd300cae0419857c75 and 9c891ba196980ed48c4981555ad05bac4faec781:
	--> Added type argument methods = 18
	--> recency = years
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 24
	--> recency = years
	--> Added type parameter methods = 10
	--> recency = years
	--> Added type parameter fields = 2
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 218
	--> recency = years
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 57e72f0bd0be81ff96f0e5dd300cae0419857c75 to 9c891ba196980ed48c4981555ad05bac4faec781


****Parsing for addition at revision 9c891ba196980ed48c4981555ad05bac4faec781****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.

 Generics pattern public abstract class TaskAction<E> was added at revision 9c891ba196980ed48c4981555ad05bac4faec781

final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

 Generics pattern public abstract class TaskAction<E> was added at revision 9c891ba196980ed48c4981555ad05bac4faec781

final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 9c891ba196980ed48c4981555ad05bac4faec781 and dbffe9e3c099595ef532ec802bf673da9989509a:
	--> Added type argument methods = 18
	--> recency = years
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 26
	--> recency = years
	--> Added type parameter methods = 10
	--> recency = years
	--> Added type parameter fields = 2
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 218
	--> recency = years
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 9c891ba196980ed48c4981555ad05bac4faec781 to dbffe9e3c099595ef532ec802bf673da9989509a


****Parsing for addition at revision dbffe9e3c099595ef532ec802bf673da9989509a****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of dbffe9e3c099595ef532ec802bf673da9989509a and a5b8ee027333e9cf7490f4685d15c9b8e83cdd4a:
	--> Added type argument methods = 18
	--> recency = years
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 26
	--> recency = years
	--> Added type parameter methods = 10
	--> recency = years
	--> Added type parameter fields = 2
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 218
	--> recency = years
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision dbffe9e3c099595ef532ec802bf673da9989509a to a5b8ee027333e9cf7490f4685d15c9b8e83cdd4a


****Parsing for addition at revision a5b8ee027333e9cf7490f4685d15c9b8e83cdd4a****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.

 Generics pattern public class Actions was added at revision a5b8ee027333e9cf7490f4685d15c9b8e83cdd4a

final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();

 Generics pattern private final T destinationState; was added at revision a5b8ee027333e9cf7490f4685d15c9b8e83cdd4a


 Generics pattern private final T sourceState; was added at revision a5b8ee027333e9cf7490f4685d15c9b8e83cdd4a

final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

 Generics pattern public class Actions was added at revision a5b8ee027333e9cf7490f4685d15c9b8e83cdd4a

final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();

 Generics pattern private final T destinationState; was added at revision a5b8ee027333e9cf7490f4685d15c9b8e83cdd4a


 Generics pattern private final T sourceState; was added at revision a5b8ee027333e9cf7490f4685d15c9b8e83cdd4a

final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of a5b8ee027333e9cf7490f4685d15c9b8e83cdd4a and f6a365adc8e58a68d40d1a29156d048a44ab971b:
	--> Added type argument methods = 18
	--> recency = years
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 28
	--> recency = years
	--> Added type parameter methods = 10
	--> recency = years
	--> Added type parameter fields = 6
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 218
	--> recency = years
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision a5b8ee027333e9cf7490f4685d15c9b8e83cdd4a to f6a365adc8e58a68d40d1a29156d048a44ab971b


****Parsing for addition at revision f6a365adc8e58a68d40d1a29156d048a44ab971b****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");

 Generics pattern new DotOutput<SimpleState, Object, Priority>() was added at revision f6a365adc8e58a68d40d1a29156d048a44ab971b

final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

 Generics pattern new DotOutput<GameState, GameEvent, Priority>() was added at revision f6a365adc8e58a68d40d1a29156d048a44ab971b

final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");

 Generics pattern new DotOutput<SimpleState, Object, Priority>() was added at revision f6a365adc8e58a68d40d1a29156d048a44ab971b

final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

 Generics pattern new DotOutput<GameState, GameEvent, Priority>() was added at revision f6a365adc8e58a68d40d1a29156d048a44ab971b


Diff of f6a365adc8e58a68d40d1a29156d048a44ab971b and ddee06bf5386e05476b2a293cf230aeee34cf3cc:
	--> Added type argument methods = 18
	--> recency = years
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 28
	--> recency = years
	--> Added type parameter methods = 10
	--> recency = years
	--> Added type parameter fields = 6
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 230
	--> recency = years
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f6a365adc8e58a68d40d1a29156d048a44ab971b to ddee06bf5386e05476b2a293cf230aeee34cf3cc


****Parsing for addition at revision ddee06bf5386e05476b2a293cf230aeee34cf3cc****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();

 Generics pattern private Queue<Transition<T, E, P>> findTransitionsForState(final T sourceState) was added at revision ddee06bf5386e05476b2a293cf230aeee34cf3cc


 Generics pattern new PriorityQueue<Transition<T, E, P>>() was added at revision ddee06bf5386e05476b2a293cf230aeee34cf3cc

final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();

 Generics pattern private Queue<Transition<T, E, P>> findTransitionsForState(final T sourceState) was added at revision ddee06bf5386e05476b2a293cf230aeee34cf3cc


 Generics pattern new PriorityQueue<Transition<T, E, P>>() was added at revision ddee06bf5386e05476b2a293cf230aeee34cf3cc

final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of ddee06bf5386e05476b2a293cf230aeee34cf3cc and 089b171acb6a805c40ee86b1e98ddb2c2cdc9346:
	--> Added type argument methods = 20
	--> recency = years
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 28
	--> recency = years
	--> Added type parameter methods = 10
	--> recency = years
	--> Added type parameter fields = 6
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 232
	--> recency = years
	--> Added nested = 6
	--> recency = years
	--> Added bounds = 0
	--> recency = null

 Reverted revision ddee06bf5386e05476b2a293cf230aeee34cf3cc to 089b171acb6a805c40ee86b1e98ddb2c2cdc9346


****Parsing for addition at revision 089b171acb6a805c40ee86b1e98ddb2c2cdc9346****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.

 Generics pattern public final class LogAction was added at revision 089b171acb6a805c40ee86b1e98ddb2c2cdc9346

final E singleEvent = events[0];

 Generics pattern public class DefiningState was added at revision 089b171acb6a805c40ee86b1e98ddb2c2cdc9346


 Generics pattern public class DefiningTransition was added at revision 089b171acb6a805c40ee86b1e98ddb2c2cdc9346

documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();

 Generics pattern public class PriorityTests was added at revision 089b171acb6a805c40ee86b1e98ddb2c2cdc9346


 Generics pattern new DslStateMachineBuilder<SimpleState, Object, Priority>(Priority.NORMAL) was added at revision 089b171acb6a805c40ee86b1e98ddb2c2cdc9346

final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));

 Generics pattern public class StateMachineAssert was added at revision 089b171acb6a805c40ee86b1e98ddb2c2cdc9346

final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

 Generics pattern public final class LogAction was added at revision 089b171acb6a805c40ee86b1e98ddb2c2cdc9346

final E singleEvent = events[0];

 Generics pattern public class DefiningState was added at revision 089b171acb6a805c40ee86b1e98ddb2c2cdc9346


 Generics pattern public class DefiningTransition was added at revision 089b171acb6a805c40ee86b1e98ddb2c2cdc9346

documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();

 Generics pattern public class PriorityTests was added at revision 089b171acb6a805c40ee86b1e98ddb2c2cdc9346


 Generics pattern new DslStateMachineBuilder<SimpleState, Object, Priority>(Priority.NORMAL) was added at revision 089b171acb6a805c40ee86b1e98ddb2c2cdc9346

final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));

 Generics pattern public class StateMachineAssert was added at revision 089b171acb6a805c40ee86b1e98ddb2c2cdc9346

final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 089b171acb6a805c40ee86b1e98ddb2c2cdc9346 and 9294077a06918f64fba9a1aee3c9e5ccef8a3948:
	--> Added type argument methods = 20
	--> recency = years
	--> Added wildcards = 2
	--> recency = years
	--> Added type declarations  = 38
	--> recency = years
	--> Added type parameter methods = 16
	--> recency = years
	--> Added type parameter fields = 6
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 272
	--> recency = years
	--> Added nested = 6
	--> recency = years
	--> Added bounds = 4
	--> recency = years

 Reverted revision 089b171acb6a805c40ee86b1e98ddb2c2cdc9346 to 9294077a06918f64fba9a1aee3c9e5ccef8a3948


****Parsing for addition at revision 9294077a06918f64fba9a1aee3c9e5ccef8a3948****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 9294077a06918f64fba9a1aee3c9e5ccef8a3948 and 5c134282a9c489b3f11aed20cd97d218fd98d17f:
	--> Added type argument methods = 20
	--> recency = years
	--> Added wildcards = 2
	--> recency = years
	--> Added type declarations  = 38
	--> recency = years
	--> Added type parameter methods = 16
	--> recency = years
	--> Added type parameter fields = 6
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 280
	--> recency = years
	--> Added nested = 6
	--> recency = years
	--> Added bounds = 4
	--> recency = years

 Reverted revision 9294077a06918f64fba9a1aee3c9e5ccef8a3948 to 5c134282a9c489b3f11aed20cd97d218fd98d17f


****Parsing for addition at revision 5c134282a9c489b3f11aed20cd97d218fd98d17f****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 5c134282a9c489b3f11aed20cd97d218fd98d17f and 2f2b8bbd63e507e7f508c7e5b6f65290dd06c19f:
	--> Added type argument methods = 20
	--> recency = years
	--> Added wildcards = 2
	--> recency = years
	--> Added type declarations  = 38
	--> recency = years
	--> Added type parameter methods = 16
	--> recency = years
	--> Added type parameter fields = 6
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 280
	--> recency = years
	--> Added nested = 6
	--> recency = years
	--> Added bounds = 4
	--> recency = years

 Reverted revision 5c134282a9c489b3f11aed20cd97d218fd98d17f to 2f2b8bbd63e507e7f508c7e5b6f65290dd06c19f


****Parsing for addition at revision 2f2b8bbd63e507e7f508c7e5b6f65290dd06c19f****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 2f2b8bbd63e507e7f508c7e5b6f65290dd06c19f and 30090bc8f68ebbd1700fd3618a50f60388b2087d:
	--> Added type argument methods = 20
	--> recency = years
	--> Added wildcards = 2
	--> recency = years
	--> Added type declarations  = 38
	--> recency = years
	--> Added type parameter methods = 16
	--> recency = years
	--> Added type parameter fields = 6
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 280
	--> recency = years
	--> Added nested = 6
	--> recency = years
	--> Added bounds = 4
	--> recency = years

 Reverted revision 2f2b8bbd63e507e7f508c7e5b6f65290dd06c19f to 30090bc8f68ebbd1700fd3618a50f60388b2087d


****Parsing for addition at revision 30090bc8f68ebbd1700fd3618a50f60388b2087d****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 30090bc8f68ebbd1700fd3618a50f60388b2087d and 08dc990bcbeef73b84bc46349e98b7cb8153ea49:
	--> Added type argument methods = 20
	--> recency = years
	--> Added wildcards = 2
	--> recency = years
	--> Added type declarations  = 38
	--> recency = years
	--> Added type parameter methods = 16
	--> recency = years
	--> Added type parameter fields = 6
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 280
	--> recency = years
	--> Added nested = 6
	--> recency = years
	--> Added bounds = 4
	--> recency = years

 Reverted revision 30090bc8f68ebbd1700fd3618a50f60388b2087d to 08dc990bcbeef73b84bc46349e98b7cb8153ea49


****Parsing for addition at revision 08dc990bcbeef73b84bc46349e98b7cb8153ea49****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 08dc990bcbeef73b84bc46349e98b7cb8153ea49 and 39061195758419048cd5e031de96edc37f609673:
	--> Added type argument methods = 20
	--> recency = years
	--> Added wildcards = 2
	--> recency = years
	--> Added type declarations  = 38
	--> recency = years
	--> Added type parameter methods = 16
	--> recency = years
	--> Added type parameter fields = 6
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 280
	--> recency = years
	--> Added nested = 6
	--> recency = years
	--> Added bounds = 4
	--> recency = years

 Reverted revision 08dc990bcbeef73b84bc46349e98b7cb8153ea49 to 39061195758419048cd5e031de96edc37f609673


****Parsing for addition at revision 39061195758419048cd5e031de96edc37f609673****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();

 Generics pattern new HashSet<T>(StateMachine.this.endStates) was added at revision 39061195758419048cd5e031de96edc37f609673


 Generics pattern new HashSet<T>(StateMachine.this.startStates) was added at revision 39061195758419048cd5e031de96edc37f609673


 Generics pattern new HashSet<T>(StateMachine.this.transitions.keySet()) was added at revision 39061195758419048cd5e031de96edc37f609673

final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();

 Generics pattern new HashSet<T>(StateMachine.this.endStates) was added at revision 39061195758419048cd5e031de96edc37f609673


 Generics pattern new HashSet<T>(StateMachine.this.startStates) was added at revision 39061195758419048cd5e031de96edc37f609673


 Generics pattern new HashSet<T>(StateMachine.this.transitions.keySet()) was added at revision 39061195758419048cd5e031de96edc37f609673

final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 39061195758419048cd5e031de96edc37f609673 and 761bc382d1b2b167aaa608f3f763267107ca8e9e:
	--> Added type argument methods = 20
	--> recency = years
	--> Added wildcards = 2
	--> recency = years
	--> Added type declarations  = 38
	--> recency = years
	--> Added type parameter methods = 16
	--> recency = years
	--> Added type parameter fields = 6
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 294
	--> recency = years
	--> Added nested = 6
	--> recency = years
	--> Added bounds = 4
	--> recency = years

 Reverted revision 39061195758419048cd5e031de96edc37f609673 to 761bc382d1b2b167aaa608f3f763267107ca8e9e


****Parsing for addition at revision 761bc382d1b2b167aaa608f3f763267107ca8e9e****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 761bc382d1b2b167aaa608f3f763267107ca8e9e and dbeafa707bbbbb619e031967df4998835410b4b0:
	--> Added type argument methods = 20
	--> recency = years
	--> Added wildcards = 2
	--> recency = years
	--> Added type declarations  = 38
	--> recency = years
	--> Added type parameter methods = 16
	--> recency = years
	--> Added type parameter fields = 6
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 294
	--> recency = years
	--> Added nested = 6
	--> recency = years
	--> Added bounds = 4
	--> recency = years

 Reverted revision 761bc382d1b2b167aaa608f3f763267107ca8e9e to dbeafa707bbbbb619e031967df4998835410b4b0


****Parsing for addition at revision dbeafa707bbbbb619e031967df4998835410b4b0****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of dbeafa707bbbbb619e031967df4998835410b4b0 and e114b0623a3d3c6080d2fb48843dd13ebeb47a8c:
	--> Added type argument methods = 20
	--> recency = years
	--> Added wildcards = 2
	--> recency = years
	--> Added type declarations  = 38
	--> recency = years
	--> Added type parameter methods = 16
	--> recency = years
	--> Added type parameter fields = 6
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 294
	--> recency = years
	--> Added nested = 6
	--> recency = years
	--> Added bounds = 4
	--> recency = years

 Reverted revision dbeafa707bbbbb619e031967df4998835410b4b0 to e114b0623a3d3c6080d2fb48843dd13ebeb47a8c


****Parsing for addition at revision e114b0623a3d3c6080d2fb48843dd13ebeb47a8c****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of e114b0623a3d3c6080d2fb48843dd13ebeb47a8c and 8f72023e516ca0d8e90b3d3c945fddef7e48eaf2:
	--> Added type argument methods = 20
	--> recency = years
	--> Added wildcards = 2
	--> recency = years
	--> Added type declarations  = 38
	--> recency = years
	--> Added type parameter methods = 16
	--> recency = years
	--> Added type parameter fields = 6
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 294
	--> recency = years
	--> Added nested = 6
	--> recency = years
	--> Added bounds = 4
	--> recency = years

 Reverted revision e114b0623a3d3c6080d2fb48843dd13ebeb47a8c to 8f72023e516ca0d8e90b3d3c945fddef7e48eaf2


****Parsing for addition at revision 8f72023e516ca0d8e90b3d3c945fddef7e48eaf2****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 8f72023e516ca0d8e90b3d3c945fddef7e48eaf2 and c645bbb9b4fbaf1d44858d67f1b4cadeceb46d44:
	--> Added type argument methods = 20
	--> recency = years
	--> Added wildcards = 2
	--> recency = years
	--> Added type declarations  = 38
	--> recency = years
	--> Added type parameter methods = 16
	--> recency = years
	--> Added type parameter fields = 6
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 294
	--> recency = years
	--> Added nested = 6
	--> recency = years
	--> Added bounds = 4
	--> recency = years

 Reverted revision 8f72023e516ca0d8e90b3d3c945fddef7e48eaf2 to c645bbb9b4fbaf1d44858d67f1b4cadeceb46d44

************Analysis complete************
Added generics to repository code-state-machine = 120

Danny van Bruggen  added type argument method count = 20
	--> recency = years
Danny van Bruggen  added wildcard count = 2
	--> recency = years
Danny van Bruggen  added type declaration count = 38
	--> recency = years
Danny van Bruggen  added type parameter method count = 16
	--> recency = years
Danny van Bruggen  added type parameter field count = 6
	--> recency = years
Danny van Bruggen  added diamond count = 0
	--> recency = null
Danny van Bruggen  added method invocation count = 0
	--> recency = null
Danny van Bruggen  added implicit method invocation count = 6
	--> recency = years
Danny van Bruggen  added class instantiation count = 294
	--> recency = years
Danny van Bruggen  added nested count = 6
	--> recency = null
Danny van Bruggen  added bounds count = 4
	--> recency = years

****Parsing for addition at revision 9ed906c6043bc7fb1eb72db47494b293fb3616a6****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];

 Generics pattern new HashSet<T>(Arrays.asList(states)) was added at revision 9ed906c6043bc7fb1eb72db47494b293fb3616a6

documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();

 Generics pattern private final T destinationState; was added at revision 9ed906c6043bc7fb1eb72db47494b293fb3616a6


 Generics pattern private final T sourceState; was added at revision 9ed906c6043bc7fb1eb72db47494b293fb3616a6

final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];

 Generics pattern new HashSet<T>(Arrays.asList(states)) was added at revision 9ed906c6043bc7fb1eb72db47494b293fb3616a6

documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();

 Generics pattern private final T destinationState; was added at revision 9ed906c6043bc7fb1eb72db47494b293fb3616a6


 Generics pattern private final T sourceState; was added at revision 9ed906c6043bc7fb1eb72db47494b293fb3616a6

final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 9ed906c6043bc7fb1eb72db47494b293fb3616a6 and 8a3b74b4ee4022057c952347d9c630f17e525e3b:
	--> Added type argument methods = 20
	--> recency = years
	--> Added wildcards = 2
	--> recency = years
	--> Added type declarations  = 38
	--> recency = years
	--> Added type parameter methods = 16
	--> recency = years
	--> Added type parameter fields = 10
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 316
	--> recency = years
	--> Added nested = 6
	--> recency = years
	--> Added bounds = 4
	--> recency = years

 Reverted revision 9ed906c6043bc7fb1eb72db47494b293fb3616a6 to 8a3b74b4ee4022057c952347d9c630f17e525e3b


****Parsing for addition at revision 8a3b74b4ee4022057c952347d9c630f17e525e3b****

Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
Added FinishableAction.java to .\code-state-machine\ repository source files.
Added LogAction.java to .\code-state-machine\ repository source files.
Added TaskAction.java to .\code-state-machine\ repository source files.
Added Action.java to .\code-state-machine\ repository source files.
Added Actions.java to .\code-state-machine\ repository source files.
Added DslStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added ScxmlStateMachineBuilder.java to .\code-state-machine\ repository source files.
Added StateMachineBuilder.java to .\code-state-machine\ repository source files.
Added AfterCondition.java to .\code-state-machine\ repository source files.
Added AlwaysCondition.java to .\code-state-machine\ repository source files.
Added EventBasedCondition.java to .\code-state-machine\ repository source files.
Added MultiEventMatchCondition.java to .\code-state-machine\ repository source files.
Added NeverCondition.java to .\code-state-machine\ repository source files.
Added NonEventBasedCondition.java to .\code-state-machine\ repository source files.
Added SingleEventMatchCondition.java to .\code-state-machine\ repository source files.
Added StatesActiveCondition.java to .\code-state-machine\ repository source files.
Added StatesInactiveCondition.java to .\code-state-machine\ repository source files.
Added SubStateMachineCondition.java to .\code-state-machine\ repository source files.
Added Condition.java to .\code-state-machine\ repository source files.
Added Conditions.java to .\code-state-machine\ repository source files.
Added DotOutput.java to .\code-state-machine\ repository source files.
Added Priority.java to .\code-state-machine\ repository source files.
Added PriorityDeterminizer.java to .\code-state-machine\ repository source files.
Added StateMachine.java to .\code-state-machine\ repository source files.
Added Transition.java to .\code-state-machine\ repository source files.
Added Chain.java to .\code-state-machine\ repository source files.
Added AutomaticFiringTests.java to .\code-state-machine\ repository source files.
Added ScxmlParserTest.java to .\code-state-machine\ repository source files.
Added GameEvent.java to .\code-state-machine\ repository source files.
Added GameState.java to .\code-state-machine\ repository source files.
Added PriorityTests.java to .\code-state-machine\ repository source files.
Added StateMachineAssert.java to .\code-state-machine\ repository source files.
Added StateTests.java to .\code-state-machine\ repository source files.
Added TraceAction.java to .\code-state-machine\ repository source files.
Added SimpleEvent.java to .\code-state-machine\ repository source files.
Added SimpleState.java to .\code-state-machine\ repository source files.
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};
final E singleEvent = events[0];
documentBuilder=documentBuilderFactory.newDocumentBuilder()
final DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
final Element root = (Element) documentBuilder.parse(inputSource).getChildNodes().item(0);
initialState=interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE))
final T initialState = interpretStateName(stateElement.getAttribute(INITIAL_ATTRIBUTE));
stateName=stateElement.getAttribute(ID_ATTRIBUTE)
final String stateName = stateElement.getAttribute(ID_ATTRIBUTE);
state=interpretStateName(stateName)
final T state = interpretStateName(stateName);
childNodes=stateElement.getChildNodes()
final NodeList childNodes = stateElement.getChildNodes();
subNode=childNodes.item(i)
final Node subNode = childNodes.item(i);
final Element subElement = (Element) subNode;
subNodeName=subElement.getNodeName()
final String subNodeName = subElement.getNodeName();
targetState=interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE))
final T targetState = interpretStateName(subElement.getAttribute(TARGET_ATTRIBUTE));
final Conditions<E> conditions = new Conditions<E>();
final Actions actions = new Actions();
final StringBuilder str = new StringBuilder("one of (");
final StateMachine<T, E, P>.Internals internals = machine.new Internals();
final StringBuilder output = new StringBuilder();
boolean stillNewTransitionsFiring = true;
final Set<Transition<T, E, P>> transitionsThatHaveFiredBefore = new HashSet<Transition<T, E, P>>();
final Set<T> statesToExit = new HashSet<T>();
final Set<Transition<T, E, P>> transitionsToFire = new HashSet<Transition<T, E, P>>();
final Set<T> statesToEnter = new HashSet<T>();
P firingPriority = null;
sourceState=transition.getSourceState()
final T sourceState = transition.getSourceState();
final StringBuffer buffer = new StringBuffer("[");
final InputSource inputSource = new InputSource(
				ScxmlStateMachineBuilder.class.getResourceAsStream("/test.scxml"));
final ScxmlStateMachineBuilder<String, String> scxmlParser = new ScxmlStateMachineBuilder<String, String>(
				inputSource) {
			@Override
			protected String interpretStateName(final String name) {
				return name;
			}

			@Override
			protected Action interpretEvent(final String attribute) {
				return new LogAction(attribute);
			}

			@Override
			protected Condition<String> interpretCondition(final String attribute) {
				return new AlwaysCondition<String>();
			}
		};
stateMachine=scxmlParser.build()
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final StateMachine<String, String, Integer> stateMachine = scxmlParser.build();
final Set<T> expectedStatesSet = new HashSet<T>(Arrays.asList(expectedStates));
final DslStateMachineBuilder<GameState, GameEvent, Priority> gameMachineBuilder = new DslStateMachineBuilder<GameState, GameEvent, Priority>(
				Priority.NORMAL) {
			@Override
			protected void executeBuildInstructions() {
				state(LOADER).onExit(log("exit!")).onEntry(log("enter!"));

				state(LOADER).isAStartState().when(DONE).action(log("bing!")).then(INTRO);
				state(INTRO).when(DONE).then(MENU);
				state(MENU).when(START).then(GET_READY).when(ESCAPE).then(EXIT);
				state(GET_READY).when(DONE).then(LEVEL);
				state(LEVEL_FINISH).when(DONE).then(GET_READY);
				state(LEVEL).when(DEAD).then(GAME_OVER).when(COMPLETE).then(LEVEL_FINISH);
				state(GAME_OVER).when(DONE).then(MENU);
				states(GameState.values()).except(MENU, LOADER, EXIT).when(ESCAPE).then(MENU);

				state(MENU).when(FIRE_A, FIRE_B).then(CONFIGURATION);
				state(CONFIGURATION).when(FIRE_A, FIRE_B).then(MENU);

				state(CONFIGURATION).when(FIRE_A).then(INTRO);

				state(EXIT).isAnEndState();
			}
		};

Diff of 8a3b74b4ee4022057c952347d9c630f17e525e3b and aee9c69117ebdb7380368e21462675e522e09c71:
	--> Added type argument methods = 20
	--> recency = years
	--> Added wildcards = 2
	--> recency = years
	--> Added type declarations  = 38
	--> recency = years
	--> Added type parameter methods = 16
	--> recency = years
	--> Added type parameter fields = 10
	--> recency = years
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 6
	--> recency = years
	--> Added class instantiations = 316
	--> recency = years
	--> Added nested = 6
	--> recency = years
	--> Added bounds = 4
	--> recency = years

 Reverted revision 8a3b74b4ee4022057c952347d9c630f17e525e3b to aee9c69117ebdb7380368e21462675e522e09c71

************Analysis complete************
Added generics to repository code-state-machine = 126

Danny van Bruggen  added type argument method count = 20
	--> recency = years
Danny van Bruggen  added wildcard count = 2
	--> recency = years
Danny van Bruggen  added type declaration count = 38
	--> recency = years
Danny van Bruggen  added type parameter method count = 16
	--> recency = years
Danny van Bruggen  added type parameter field count = 10
	--> recency = years
Danny van Bruggen  added diamond count = 0
	--> recency = null
Danny van Bruggen  added method invocation count = 0
	--> recency = null
Danny van Bruggen  added implicit method invocation count = 6
	--> recency = years
Danny van Bruggen  added class instantiation count = 316
	--> recency = years
Danny van Bruggen  added nested count = 6
	--> recency = null
Danny van Bruggen  added bounds count = 4
	--> recency = years
File copied successfully!
