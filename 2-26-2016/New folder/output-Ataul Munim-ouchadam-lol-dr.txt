ouchadam/lol-dr -- ataulm -- Ataul Munim
https://github.com/ouchadam/lol-dr.git
git clone https://github.com/ouchadam/lol-dr.git
.\/lol-dr\
.\/lol-dr\.git
0
Project cloned!
Ataul Munim is responsible for commit aa266c3212c81571b1e325aea138f71af2c551a2
Ataul Munim is responsible for commit 66fb5e15c9008a2d83abf46e0ce7435a7aae7bbd
Ataul Munim is responsible for commit f6d352a503c60625c30cd77a8a56e9c85cbb90b5
Ataul Munim is responsible for commit d9d3e1e938d8928667a3e3e8b403e9ec29df1c31
Ataul Munim is responsible for commit 7b3a9954d968f377e9980129aac2bdffc2394bfa
Ataul Munim is responsible for commit e3b03082afa779dcf4c299cecec467219039c183
Ataul Munim is responsible for commit 169682d8d702a1d2902610804ae833010dd5fc33
Ataul Munim is responsible for commit f280c555e2cbf7c8700bbf33b34b726949df6aab
Ataul Munim is responsible for commit 90e03dc6733fd5a6a5f1cd3dc4d3bf77d7e1b37d
Ataul Munim is responsible for commit 52cf5020b95f83236857cfd2b698c049b9bb9acd
Ataul Munim is responsible for commit dd04503f485e8e358152afb9724d1631ce01db15
Ataul Munim is responsible for commit 8b17c6d50db95e2c56fe31fdf64213370884c4e4
Ataul Munim is responsible for commit de2159c5d6d27a580b0db93cb03cc310f20f145d
Ataul Munim is responsible for commit 5e52c4b0ea24d54b0bfac11d398caeec1d87fcea
Ataul Munim is responsible for commit af5916354d7f381c867d20d5f790f6451210d6bd
Ataul Munim is responsible for commit ebcda8c66d0d4b8c0361fb56fb717d33eb47d3c5
Ataul Munim is responsible for commit 17c44e24aced34a92c0328b43b5da6098a822854
Ataul Munim is responsible for commit 4533afee82e21dad3f6f354dd262adb6804e0497
Ataul Munim is responsible for commit 2397ae430ddf415f64dccd726439d8e5aa480977
Ataul Munim is responsible for commit 72c90ebef39675aca8438ee883d79a1b3a0a0103
Ataul Munim is responsible for commit 178e8f3945e61211a2f128744db90e02e5de460f
Ataul Munim is responsible for commit b48ae4eba63871a91e3d6b20b07e4af8c2bd183b
Ataul Munim is responsible for commit 7e8c539ce5f60f5b56d08e51f686b985a91fe701
Ataul Munim is responsible for commit d654bf68baead9110400d0493196d03f83361201
Ataul Munim is responsible for commit 4c2e046a12114e2fe178cb348c926dab129bda02
Ataul Munim is responsible for commit 334002445a692e469fbc5ac9d9209dbadcd0f035
Ataul Munim is responsible for commit 5a5b76991e75f8b52104126cd90fa3a7ea4d544d
Ataul Munim is responsible for commit d8042ab691fa1f1685fc2691a3a8bfd5921e6a4f
Ataul Munim is responsible for commit 17216a16fe28bb10935b05464a1594457923b5ee
Ataul Munim is responsible for commit 5d5ac06e0c66473af9ed0011614a7d7a53833fb5
Ataul Munim is responsible for commit d09a82c9e0352cd31eacfc58412eb235954553a1
Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.

 ************ ANALYZING FOR USAGE PATTERN ADDITION ************

************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision aa266c3212c81571b1e325aea138f71af2c551a2****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of aa266c3212c81571b1e325aea138f71af2c551a2 and 66fb5e15c9008a2d83abf46e0ce7435a7aae7bbd:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision aa266c3212c81571b1e325aea138f71af2c551a2 to 66fb5e15c9008a2d83abf46e0ce7435a7aae7bbd


****Parsing for addition at revision 66fb5e15c9008a2d83abf46e0ce7435a7aae7bbd****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 66fb5e15c9008a2d83abf46e0ce7435a7aae7bbd and f6d352a503c60625c30cd77a8a56e9c85cbb90b5:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 66fb5e15c9008a2d83abf46e0ce7435a7aae7bbd to f6d352a503c60625c30cd77a8a56e9c85cbb90b5


****Parsing for addition at revision f6d352a503c60625c30cd77a8a56e9c85cbb90b5****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of f6d352a503c60625c30cd77a8a56e9c85cbb90b5 and d9d3e1e938d8928667a3e3e8b403e9ec29df1c31:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f6d352a503c60625c30cd77a8a56e9c85cbb90b5 to d9d3e1e938d8928667a3e3e8b403e9ec29df1c31


****Parsing for addition at revision d9d3e1e938d8928667a3e3e8b403e9ec29df1c31****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of d9d3e1e938d8928667a3e3e8b403e9ec29df1c31 and 7b3a9954d968f377e9980129aac2bdffc2394bfa:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision d9d3e1e938d8928667a3e3e8b403e9ec29df1c31 to 7b3a9954d968f377e9980129aac2bdffc2394bfa


****Parsing for addition at revision 7b3a9954d968f377e9980129aac2bdffc2394bfa****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 7b3a9954d968f377e9980129aac2bdffc2394bfa and aadc74ac66389e0c56acb988a4e755aed1ccb677:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 7b3a9954d968f377e9980129aac2bdffc2394bfa to aadc74ac66389e0c56acb988a4e755aed1ccb677

************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision e3b03082afa779dcf4c299cecec467219039c183****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of e3b03082afa779dcf4c299cecec467219039c183 and 722bf9d5fa0dc31548ccb002a7647b72c69c619b:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit 'e3b03082afa779dcf4c299cecec467219039c183' because it has 2 parents, only commits with exactly one parent are supported
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision 169682d8d702a1d2902610804ae833010dd5fc33****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 169682d8d702a1d2902610804ae833010dd5fc33 and f280c555e2cbf7c8700bbf33b34b726949df6aab:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit '169682d8d702a1d2902610804ae833010dd5fc33' because it has 2 parents, only commits with exactly one parent are supported

****Parsing for addition at revision f280c555e2cbf7c8700bbf33b34b726949df6aab****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);

 Generics pattern public class SubscriptionProvider was added at revision f280c555e2cbf7c8700bbf33b34b726949df6aab


 Generics pattern public static class SubscriptionSource was added at revision f280c555e2cbf7c8700bbf33b34b726949df6aab


 Generics pattern new ArrayList<Ui.Subscription>() was added at revision f280c555e2cbf7c8700bbf33b34b726949df6aab

Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();

 Generics pattern new DrawerPresenter<>((NavigationView) findViewById(R.id.navigation_view), drawerListener, new SubscriptionProvider()) was added at revision f280c555e2cbf7c8700bbf33b34b726949df6aab


 Generics pattern private Subscriber<Data.Subscriptions> updateDrawer() was added at revision f280c555e2cbf7c8700bbf33b34b726949df6aab


 Generics pattern new ArrayList<>() was added at revision f280c555e2cbf7c8700bbf33b34b726949df6aab

postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );

 Generics pattern List<Subreddit> getSubscribedSubreddits() was added at revision f280c555e2cbf7c8700bbf33b34b726949df6aab

GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();

 Generics pattern public class SubscriptionsDeserializer was added at revision f280c555e2cbf7c8700bbf33b34b726949df6aab


 Generics pattern new ArrayList<>(children.size()) was added at revision f280c555e2cbf7c8700bbf33b34b726949df6aab


 Generics pattern private static class Subscriptions was added at revision f280c555e2cbf7c8700bbf33b34b726949df6aab


 Generics pattern private static class Subreddit was added at revision f280c555e2cbf7c8700bbf33b34b726949df6aab

OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();

 Generics pattern public Observable<Data.Subscriptions> defaultSubscriptions() was added at revision f280c555e2cbf7c8700bbf33b34b726949df6aab

Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);

 Generics pattern public class SubscriptionsDefaultDeserializerTest was added at revision f280c555e2cbf7c8700bbf33b34b726949df6aab

Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);

 Generics pattern public class SubscriptionsMineDeserializerTest was added at revision f280c555e2cbf7c8700bbf33b34b726949df6aab

subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();

 Generics pattern public class DrawerPresenter<T extends DataSource<Ui.Subscription>> was added at revision f280c555e2cbf7c8700bbf33b34b726949df6aab

postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of f280c555e2cbf7c8700bbf33b34b726949df6aab and 90e03dc6733fd5a6a5f1cd3dc4d3bf77d7e1b37d:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit 'f280c555e2cbf7c8700bbf33b34b726949df6aab' because it has 2 parents, only commits with exactly one parent are supported

****Parsing for addition at revision 90e03dc6733fd5a6a5f1cd3dc4d3bf77d7e1b37d****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);

 Generics pattern public final class PostSummarySimpleDateFormatter was added at revision 90e03dc6733fd5a6a5f1cd3dc4d3bf77d7e1b37d

token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 90e03dc6733fd5a6a5f1cd3dc4d3bf77d7e1b37d and 6cd82fa6b6840d1369a4035345b2c4e5029f9e7a:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 9
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 90e03dc6733fd5a6a5f1cd3dc4d3bf77d7e1b37d to 6cd82fa6b6840d1369a4035345b2c4e5029f9e7a

************Analysis complete************
Added generics to repository ouchadam/lol-dr = 16

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 9
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 16

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 9
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 16

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 9
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 16

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 9
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 16

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 9
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 16

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 9
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 16

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 9
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 16

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 9
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision 52cf5020b95f83236857cfd2b698c049b9bb9acd****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 52cf5020b95f83236857cfd2b698c049b9bb9acd and dd04503f485e8e358152afb9724d1631ce01db15:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 9
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 52cf5020b95f83236857cfd2b698c049b9bb9acd to dd04503f485e8e358152afb9724d1631ce01db15


****Parsing for addition at revision dd04503f485e8e358152afb9724d1631ce01db15****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);

 Generics pattern public class DebugActivity was added at revision dd04503f485e8e358152afb9724d1631ce01db15

Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);

 Generics pattern public class Presenter was added at revision dd04503f485e8e358152afb9724d1631ce01db15

subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);

 Generics pattern public class Presenter was added at revision dd04503f485e8e358152afb9724d1631ce01db15

root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of dd04503f485e8e358152afb9724d1631ce01db15 and 8b17c6d50db95e2c56fe31fdf64213370884c4e4:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 12
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit 'dd04503f485e8e358152afb9724d1631ce01db15' because it has 2 parents, only commits with exactly one parent are supported

****Parsing for addition at revision 8b17c6d50db95e2c56fe31fdf64213370884c4e4****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;

 Generics pattern public final class SimpleDate was added at revision 8b17c6d50db95e2c56fe31fdf64213370884c4e4

result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 8b17c6d50db95e2c56fe31fdf64213370884c4e4 and 042d7306364fc98a801d9bd800f2625a33643981:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 13
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 8b17c6d50db95e2c56fe31fdf64213370884c4e4 to 042d7306364fc98a801d9bd800f2625a33643981

************Analysis complete************
Added generics to repository ouchadam/lol-dr = 20

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 13
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 20

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 13
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision de2159c5d6d27a580b0db93cb03cc310f20f145d****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of de2159c5d6d27a580b0db93cb03cc310f20f145d and 5e52c4b0ea24d54b0bfac11d398caeec1d87fcea:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 13
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision de2159c5d6d27a580b0db93cb03cc310f20f145d to 5e52c4b0ea24d54b0bfac11d398caeec1d87fcea


****Parsing for addition at revision 5e52c4b0ea24d54b0bfac11d398caeec1d87fcea****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);

 Generics pattern public class DebugActivity was added at revision 5e52c4b0ea24d54b0bfac11d398caeec1d87fcea

Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);

 Generics pattern public class Presenter was added at revision 5e52c4b0ea24d54b0bfac11d398caeec1d87fcea

subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);

 Generics pattern public class Presenter was added at revision 5e52c4b0ea24d54b0bfac11d398caeec1d87fcea

root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 5e52c4b0ea24d54b0bfac11d398caeec1d87fcea and 5a7278fd2d1281b035d3cdb5572ee11f1efbcd93:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 16
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5e52c4b0ea24d54b0bfac11d398caeec1d87fcea to 5a7278fd2d1281b035d3cdb5572ee11f1efbcd93

************Analysis complete************
Added generics to repository ouchadam/lol-dr = 23

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 16
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 23

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 16
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision af5916354d7f381c867d20d5f790f6451210d6bd****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of af5916354d7f381c867d20d5f790f6451210d6bd and ebcda8c66d0d4b8c0361fb56fb717d33eb47d3c5:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 16
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision af5916354d7f381c867d20d5f790f6451210d6bd to ebcda8c66d0d4b8c0361fb56fb717d33eb47d3c5


****Parsing for addition at revision ebcda8c66d0d4b8c0361fb56fb717d33eb47d3c5****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);

 Generics pattern public class DebugActivity was added at revision ebcda8c66d0d4b8c0361fb56fb717d33eb47d3c5

Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);

 Generics pattern public class Presenter was added at revision ebcda8c66d0d4b8c0361fb56fb717d33eb47d3c5

subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);

 Generics pattern public class Presenter was added at revision ebcda8c66d0d4b8c0361fb56fb717d33eb47d3c5

root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of ebcda8c66d0d4b8c0361fb56fb717d33eb47d3c5 and 17c44e24aced34a92c0328b43b5da6098a822854:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 19
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision ebcda8c66d0d4b8c0361fb56fb717d33eb47d3c5 to 17c44e24aced34a92c0328b43b5da6098a822854


****Parsing for addition at revision 17c44e24aced34a92c0328b43b5da6098a822854****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 17c44e24aced34a92c0328b43b5da6098a822854 and d922322fa43f70f74ad627b0ab1e8539114e1255:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 19
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 17c44e24aced34a92c0328b43b5da6098a822854 to d922322fa43f70f74ad627b0ab1e8539114e1255

************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision 4533afee82e21dad3f6f354dd262adb6804e0497****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 4533afee82e21dad3f6f354dd262adb6804e0497 and 4328e9082f6cda9ba0ba06ef8c3ee3845928862e:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 19
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit '4533afee82e21dad3f6f354dd262adb6804e0497' because it has 2 parents, only commits with exactly one parent are supported
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 26

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision 2397ae430ddf415f64dccd726439d8e5aa480977****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 2397ae430ddf415f64dccd726439d8e5aa480977 and 72c90ebef39675aca8438ee883d79a1b3a0a0103:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 19
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 2397ae430ddf415f64dccd726439d8e5aa480977 to 72c90ebef39675aca8438ee883d79a1b3a0a0103


****Parsing for addition at revision 72c90ebef39675aca8438ee883d79a1b3a0a0103****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 72c90ebef39675aca8438ee883d79a1b3a0a0103 and 178e8f3945e61211a2f128744db90e02e5de460f:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 19
	--> recency = year
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 72c90ebef39675aca8438ee883d79a1b3a0a0103 to 178e8f3945e61211a2f128744db90e02e5de460f


****Parsing for addition at revision 178e8f3945e61211a2f128744db90e02e5de460f****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);

 Generics pattern T get(int position) was added at revision 178e8f3945e61211a2f128744db90e02e5de460f

subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 178e8f3945e61211a2f128744db90e02e5de460f and 2b9482cf6b30ebfb6c76421719b11d615c80fa95:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 19
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 178e8f3945e61211a2f128744db90e02e5de460f to 2b9482cf6b30ebfb6c76421719b11d615c80fa95

************Analysis complete************
Added generics to repository ouchadam/lol-dr = 27

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision b48ae4eba63871a91e3d6b20b07e4af8c2bd183b****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of b48ae4eba63871a91e3d6b20b07e4af8c2bd183b and d092a1f05d857c328d9254e9efea1d39afc895b9:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 19
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit 'b48ae4eba63871a91e3d6b20b07e4af8c2bd183b' because it has 2 parents, only commits with exactly one parent are supported
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 27

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 27

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 27

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 27

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 27

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 27

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 27

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 27

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 27

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 27

Ataul Munim added type argument method count = 3
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 19
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 20
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision 7e8c539ce5f60f5b56d08e51f686b985a91fe701****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 7e8c539ce5f60f5b56d08e51f686b985a91fe701 and d654bf68baead9110400d0493196d03f83361201:
	--> Added type argument methods = 3
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 19
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 20
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 7e8c539ce5f60f5b56d08e51f686b985a91fe701 to d654bf68baead9110400d0493196d03f83361201


****Parsing for addition at revision d654bf68baead9110400d0493196d03f83361201****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");

 Generics pattern Map<String, List<String>> queryParams = getQueryParams(redirectUrl); was added at revision d654bf68baead9110400d0493196d03f83361201


 Generics pattern private static Map<String, List<String>> getQueryParams(String url) was added at revision d654bf68baead9110400d0493196d03f83361201

String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();

 Generics pattern public class TokenProvider was added at revision d654bf68baead9110400d0493196d03f83361201

Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of d654bf68baead9110400d0493196d03f83361201 and 4c2e046a12114e2fe178cb348c926dab129bda02:
	--> Added type argument methods = 5
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 23
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 22
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 1
	--> recency = year
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit 'd654bf68baead9110400d0493196d03f83361201' because it has 2 parents, only commits with exactly one parent are supported

****Parsing for addition at revision 4c2e046a12114e2fe178cb348c926dab129bda02****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 4c2e046a12114e2fe178cb348c926dab129bda02 and 334002445a692e469fbc5ac9d9209dbadcd0f035:
	--> Added type argument methods = 5
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 23
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 22
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 1
	--> recency = year
	--> Added bounds = 0
	--> recency = null

 Reverted revision 4c2e046a12114e2fe178cb348c926dab129bda02 to 334002445a692e469fbc5ac9d9209dbadcd0f035


****Parsing for addition at revision 334002445a692e469fbc5ac9d9209dbadcd0f035****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);

 Generics pattern public abstract class BaseActivity was added at revision 334002445a692e469fbc5ac9d9209dbadcd0f035

Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();

 Generics pattern public class FeedActivity was added at revision 334002445a692e469fbc5ac9d9209dbadcd0f035

postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);

 Generics pattern final class PostSummaryViewHolder was added at revision 334002445a692e469fbc5ac9d9209dbadcd0f035

TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 334002445a692e469fbc5ac9d9209dbadcd0f035 and 0447be57f1b5790e9f526993a1bfde26db4c545c:
	--> Added type argument methods = 5
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 27
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 22
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 1
	--> recency = year
	--> Added bounds = 0
	--> recency = null

 Reverted revision 334002445a692e469fbc5ac9d9209dbadcd0f035 to 0447be57f1b5790e9f526993a1bfde26db4c545c

************Analysis complete************
Added generics to repository ouchadam/lol-dr = 33

Ataul Munim added type argument method count = 5
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 27
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 22
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 1
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 33

Ataul Munim added type argument method count = 5
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 27
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 22
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 1
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision 5a5b76991e75f8b52104126cd90fa3a7ea4d544d****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 5a5b76991e75f8b52104126cd90fa3a7ea4d544d and d8042ab691fa1f1685fc2691a3a8bfd5921e6a4f:
	--> Added type argument methods = 5
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 27
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 22
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 1
	--> recency = year
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5a5b76991e75f8b52104126cd90fa3a7ea4d544d to d8042ab691fa1f1685fc2691a3a8bfd5921e6a4f


****Parsing for addition at revision d8042ab691fa1f1685fc2691a3a8bfd5921e6a4f****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of d8042ab691fa1f1685fc2691a3a8bfd5921e6a4f and 057fa6d7b9d632e3bdab483934f48fd84528abd9:
	--> Added type argument methods = 5
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 27
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 22
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 1
	--> recency = year
	--> Added bounds = 0
	--> recency = null

 Reverted revision d8042ab691fa1f1685fc2691a3a8bfd5921e6a4f to 057fa6d7b9d632e3bdab483934f48fd84528abd9

************Analysis complete************
Added generics to repository ouchadam/lol-dr = 33

Ataul Munim added type argument method count = 5
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 27
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 22
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 1
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 33

Ataul Munim added type argument method count = 5
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 27
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 22
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 1
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 33

Ataul Munim added type argument method count = 5
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 27
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 22
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 1
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 33

Ataul Munim added type argument method count = 5
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 27
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 22
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 1
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 33

Ataul Munim added type argument method count = 5
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 27
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 22
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 1
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 33

Ataul Munim added type argument method count = 5
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 27
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 22
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 1
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision 17216a16fe28bb10935b05464a1594457923b5ee****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 17216a16fe28bb10935b05464a1594457923b5ee and 5d5ac06e0c66473af9ed0011614a7d7a53833fb5:
	--> Added type argument methods = 5
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 27
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 22
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 1
	--> recency = year
	--> Added bounds = 0
	--> recency = null

 Reverted revision 17216a16fe28bb10935b05464a1594457923b5ee to 5d5ac06e0c66473af9ed0011614a7d7a53833fb5


****Parsing for addition at revision 5d5ac06e0c66473af9ed0011614a7d7a53833fb5****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of 5d5ac06e0c66473af9ed0011614a7d7a53833fb5 and d09a82c9e0352cd31eacfc58412eb235954553a1:
	--> Added type argument methods = 5
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 27
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 22
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 1
	--> recency = year
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5d5ac06e0c66473af9ed0011614a7d7a53833fb5 to d09a82c9e0352cd31eacfc58412eb235954553a1


****Parsing for addition at revision d09a82c9e0352cd31eacfc58412eb235954553a1****

Added AccountService.java to .\/lol-dr\ repository source files.
Added AnonToken.java to .\/lol-dr\ repository source files.
Added AnonTokenStorage.java to .\/lol-dr\ repository source files.
Added Authenticator.java to .\/lol-dr\ repository source files.
Added Foo.java to .\/lol-dr\ repository source files.
Added OAuthSignInActivity.java to .\/lol-dr\ repository source files.
Added RefreshTokenResponse.java to .\/lol-dr\ repository source files.
Added Token.java to .\/lol-dr\ repository source files.
Added TokenAcquirer.java to .\/lol-dr\ repository source files.
Added TokenResponse.java to .\/lol-dr\ repository source files.
Added UserFetcher.java to .\/lol-dr\ repository source files.
Added UserToken.java to .\/lol-dr\ repository source files.
Added ApplicationTest.java to .\/lol-dr\ repository source files.
Added BaseActivity.java to .\/lol-dr\ repository source files.
Added SimpleDate.java to .\/lol-dr\ repository source files.
Added DebugActivity.java to .\/lol-dr\ repository source files.
Added SubscriptionProvider.java to .\/lol-dr\ repository source files.
Added Executor.java to .\/lol-dr\ repository source files.
Added FeedActivity.java to .\/lol-dr\ repository source files.
Added MarshallerFactory.java to .\/lol-dr\ repository source files.
Added PostProvider.java to .\/lol-dr\ repository source files.
Added LogSubscriber.java to .\/lol-dr\ repository source files.
Added CommentProvider.java to .\/lol-dr\ repository source files.
Added PostActivity.java to .\/lol-dr\ repository source files.
Added PostDetailsProvider.java to .\/lol-dr\ repository source files.
Added PostSummarySimpleDateFormatter.java to .\/lol-dr\ repository source files.
Added SearchActivity.java to .\/lol-dr\ repository source files.
Added UserTokenProvider.java to .\/lol-dr\ repository source files.
Added AuthInteceptor.java to .\/lol-dr\ repository source files.
Added Data.java to .\/lol-dr\ repository source files.
Added DeserializerFactory.java to .\/lol-dr\ repository source files.
Added FeedDeserializer.java to .\/lol-dr\ repository source files.
Added PostDeserializer.java to .\/lol-dr\ repository source files.
Added PostDetailsDeserializer.java to .\/lol-dr\ repository source files.
Added SubscriptionsDeserializer.java to .\/lol-dr\ repository source files.
Added Repository.java to .\/lol-dr\ repository source files.
Added TokenProvider.java to .\/lol-dr\ repository source files.
Added PostDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsDefaultDeserializerTest.java to .\/lol-dr\ repository source files.
Added SubscriptionsMineDeserializerTest.java to .\/lol-dr\ repository source files.
Added BindableViewHolder.java to .\/lol-dr\ repository source files.
Added DataSource.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added DrawerPresenter.java to .\/lol-dr\ repository source files.
Added PostSummaryAdapter.java to .\/lol-dr\ repository source files.
Added PostSummaryViewHolder.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added CommentViewHolder.java to .\/lol-dr\ repository source files.
Added LinkDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added PostDetailsAdapter.java to .\/lol-dr\ repository source files.
Added Presenter.java to .\/lol-dr\ repository source files.
Added SelfDetailsViewHolder.java to .\/lol-dr\ repository source files.
Added ViewHolderFactory.java to .\/lol-dr\ repository source files.
Added SourceProvider.java to .\/lol-dr\ repository source files.
Added Ui.java to .\/lol-dr\ repository source files.
editor=preferences.edit()
SharedPreferences.Editor editor = preferences.edit();
Bundle result = new Bundle();
intent=OAuthSignInActivity.create(context,response)
Intent intent = OAuthSignInActivity.create(context, response);
refreshToken=accountManager.getPassword(account)
String refreshToken = accountManager.getPassword(account);
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
tokenExpiry=Long.parseLong(accountManager.getUserData(account,KEY_TOKEN_EXPIRY))
long tokenExpiry = Long.parseLong(accountManager.getUserData(account, KEY_TOKEN_EXPIRY));
refreshedToken=refreshAccount(refreshToken).toBlocking().first()
RefreshTokenResponse refreshedToken = refreshAccount(refreshToken).toBlocking().first();
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=refresh_token&refresh_token=" + refreshToken)).addHeader("Authorization",Credentials.basic(OAuthSignInActivity.CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=refresh_token&refresh_token=" + refreshToken))
                            .addHeader("Authorization", Credentials.basic(OAuthSignInActivity.CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
Bundle bundle = new Bundle();
Bundle bundle = new Bundle();
extra=createUserFromToken(token)
Bundle extra = createUserFromToken(token);
Bundle userData = new Bundle();
Bundle activityOptions = new Bundle();
accountActivity=OAuthSignInActivity.create(context,response)
Intent accountActivity = OAuthSignInActivity.create(context, response);
AnonToken anonymousAccessTokenResponse;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString())).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                .url("https://www.reddit.com/api/v1/access_token")
                .post(RequestBody.create(textMediaType, "grant_type=https://oauth.reddit.com/grants/installed_client&device_id=" + uniqueDeviceId.toString()))
                .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
queryParams=getQueryParams(redirectUrl)
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
Map<String, List<String>> queryParams = getQueryParams(redirectUrl);
code=queryParams.get("code").get(0)
String code = queryParams.get("code").get(0);
String uri = REDIRECT_URI;
textMediaType=MediaType.parse("application/x-www-form-urlencoded")
MediaType textMediaType = MediaType.parse("application/x-www-form-urlencoded");
request=new Request.Builder().url("https://www.reddit.com/api/v1/access_token").post(RequestBody.create(textMediaType,"grant_type=authorization_code&code=" + code + "&redirect_uri="+ uri)).addHeader("Authorization",Credentials.basic(CLIENT_ID,"")).build()
Request request = new Request.Builder()
                            .url("https://www.reddit.com/api/v1/access_token")
                            .post(RequestBody.create(textMediaType, "grant_type=authorization_code&code=" + code + "&redirect_uri=" + uri))
                            .addHeader("Authorization", Credentials.basic(CLIENT_ID, ""))
                            .build();
response=new OkHttpClient().newCall(request).execute()
Response response = new OkHttpClient().newCall(request).execute();
result=response.body().string()
String result = response.body().string();
Map<String, List<String>> params = new HashMap<>();
urlParts=url.split("\\?")
String[] urlParts = url.split("\\?");
String query = urlParts[1];
pair=param.split("=")
String[] pair = param.split("=");
key=URLDecoder.decode(pair[0],"UTF-8")
String key = URLDecoder.decode(pair[0], "UTF-8");
String value = "";
values=params.get(key)
List<String> values = params.get(key);
List<String> values = params.get(key);
JSONObject jsonObject = new JSONObject(result);
rawToken=jsonObject.getString("access_token")
String rawToken = jsonObject.getString("access_token");
refreshToken=jsonObject.getString("refresh_token")
String refreshToken = jsonObject.getString("refresh_token");
expiryInSeconds=jsonObject.getInt("expires_in")
int expiryInSeconds = jsonObject.getInt("expires_in");
String responseType = "code";
String requestId = "RANDOM_STRING";
String duration = "permanent";
String scope = "read,identity,mysubreddits";
Intent intent = new Intent(context, OAuthSignInActivity.class);
WebView webView = (WebView) findViewById(R.id.web);
Account account = new Account(accessToken.getAccoutName(), getResources().getString(R.string.account_type));
accountManager=AccountManager.get(OAuthSignInActivity.this)
AccountManager accountManager = AccountManager.get(OAuthSignInActivity.this);
userdata=createUserData(accessToken)
Bundle userdata = createUserData(accessToken);
Bundle bundle = new Bundle();
Intent intent = new Intent();
deviceId=UUID.randomUUID()
UUID deviceId = UUID.randomUUID();
storedToken=anonTokenStorage.getToken()
AnonToken storedToken = anonTokenStorage.getToken();
accessToken=accountManager.blockingGetAuthToken(account,"",true)
final String accessToken = accountManager.blockingGetAuthToken(account, "", true);
accountsByType=accountManager.getAccountsByType(accountType)
Account[] accountsByType = accountManager.getAccountsByType(accountType);
accountName=new UserFetcher().fetchUserName(tokenResponse)
String accountName = new UserFetcher().fetchUserName(tokenResponse);
request=new Request.Builder().url(ENDPOINT + "/api/v1/me").addHeader("Authorization","bearer " + tokenResponse.getRawToken()).get().build()
Request request = new Request.Builder()
                    .url(ENDPOINT + "/api/v1/me")
                    .addHeader("Authorization", "bearer " + tokenResponse.getRawToken())
                    .get()
                    .build();
result=new OkHttpClient().newCall(request).execute().body().string()
String result = new OkHttpClient().newCall(request).execute().body().string();
JSONObject jsonObject = new JSONObject(result);
Date date = new Date(TimeUnit.SECONDS.toMillis(utcTimeStamp));
SimpleDate that = (SimpleDate) o;
result=accountManagerFuture.getResult()
Bundle result = accountManagerFuture.getResult();
accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME)
String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);
Intent intent = new Intent(ACTION);
PostProvider postProvider = new PostProvider();
summaries=MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts())
List<Ui.PostSummary> summaries = MarshallerFactory.newInstance(getResources()).posts().marshall(feed.getPosts());
List<Ui.Subscription> uiSubscriptions = new ArrayList<>();
postSummarySimpleDateFormatter=PostSummarySimpleDateFormatter.newInstance(resources)
PostSummarySimpleDateFormatter postSummarySimpleDateFormatter = PostSummarySimpleDateFormatter.newInstance(resources);
List<T> marshalledItems = new ArrayList<>(from.size());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
Intent intent = new Intent(ACTION);
postId=getIntent().getStringExtra(EXTA_POST_ID)
String postId = getIntent().getStringExtra(EXTA_POST_ID);
repository=Repository.newInstance(UserTokenProvider.newInstance(this))
Repository repository = Repository.newInstance(UserTokenProvider.newInstance(this));
postSummary=post.getPostSummary()
Ui.PostSummary postSummary = post.getPostSummary();
dateFormatter=PostSummarySimpleDateFormatter.newInstance(getResources())
PostSummarySimpleDateFormatter dateFormatter = PostSummarySimpleDateFormatter.newInstance(getResources());
date=SimpleDate.from(post.getCreatedDate())
SimpleDate date = SimpleDate.from(post.getCreatedDate());
yearsFormat=resources.getString(R.string.post_summary_age_years)
String yearsFormat = resources.getString(R.string.post_summary_age_years);
daysFormat=resources.getString(R.string.post_summary_age_days)
String daysFormat = resources.getString(R.string.post_summary_age_days);
hoursFormat=resources.getString(R.string.post_summary_age_hours)
String hoursFormat = resources.getString(R.string.post_summary_age_hours);
minutesFormat=resources.getString(R.string.post_summary_age_minutes)
String minutesFormat = resources.getString(R.string.post_summary_age_minutes);
differenceMillis=date.differenceFromNowInMillis()
long differenceMillis = date.differenceFromNowInMillis();
days=TimeUnit.MILLISECONDS.toDays(differenceMillis)
long days = TimeUnit.MILLISECONDS.toDays(differenceMillis);
int wholeYears = (int) (days / DAYS_IN_YEAR);
hours=TimeUnit.MILLISECONDS.toHours(differenceMillis)
long hours = TimeUnit.MILLISECONDS.toHours(differenceMillis);
minutes=TimeUnit.MILLISECONDS.toMinutes(differenceMillis)
long minutes = TimeUnit.MILLISECONDS.toMinutes(differenceMillis);
token=tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first()
Token token = tokenAcquirer.acquireToken(currentUserProvider.provideCurrentUser()).toBlocking().first();
accessToken=tokenProvider.provideAccessToken()
TokenProvider.AccessToken accessToken = tokenProvider.provideAccessToken();
response=chain.proceed(chain.request().newBuilder().addHeader("Authorization","bearer " + accessToken.get()).build())
Response response = chain.proceed(chain.request().newBuilder()
                        .addHeader("Authorization", "bearer " + accessToken.get())
                        .build()
        );
GsonBuilder gsonBuilder = new GsonBuilder();
dataJson=json.getAsJsonObject().get("data").getAsJsonObject()
JsonObject dataJson = json.getAsJsonObject().get("data").getAsJsonObject();
afterId=dataJson.get("after").getAsString()
String afterId = dataJson.get("after").getAsString();
postsJson=dataJson.get("children").getAsJsonArray()
JsonArray postsJson = dataJson.get("children").getAsJsonArray();
List<Data.Post> posts = new ArrayList<>(postsJson.size());
postJson=postRootJson.getAsJsonObject().get("data").getAsJsonObject()
JsonObject postJson = postRootJson.getAsJsonObject().get("data").getAsJsonObject();
post=postDeserializer.deserialize(postJson,typeOfT,context)
Data.Post post = postDeserializer.deserialize(postJson, typeOfT, context);
postJson=json.getAsJsonObject()
JsonObject postJson = json.getAsJsonObject();
post=postDeserializer.deserialize(getPostDetailsRootJson(json),typeOfT,context)
Data.Post post = postDeserializer.deserialize(getPostDetailsRootJson(json), typeOfT, context);
commentsRootJson=json.getAsJsonArray().get(1).getAsJsonObject()
JsonObject commentsRootJson = json.getAsJsonArray().get(1).getAsJsonObject();
rootCommentThread=commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray rootCommentThread = commentsRootJson.get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Comment> comments = new ArrayList<>();
asJsonObject=jsonElement.getAsJsonObject()
JsonObject asJsonObject = jsonElement.getAsJsonObject();
kind=commentThread.get("kind").getAsString()
String kind = commentThread.get("kind").getAsString();
moreComment=moreComment(commentThread.get("data").getAsJsonObject(),depth)
Data.Comment moreComment = moreComment(commentThread.get("data").getAsJsonObject(), depth);
commentJson=commentThread.get("data").getAsJsonObject()
JsonObject commentJson = commentThread.get("data").getAsJsonObject();
repliesRoot=commentJson.get("replies")
JsonElement repliesRoot = commentJson.get("replies");
replies=repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray replies = repliesRoot.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
id=data.get("id").getAsString()
String id = data.get("id").getAsString();
name=data.get("name").getAsString()
String name = data.get("name").getAsString();
commentId=jsonComment.get("id").getAsString().trim()
String commentId = jsonComment.get("id").getAsString().trim();
commentBody=jsonComment.get("body").getAsString().trim()
String commentBody = jsonComment.get("body").getAsString().trim();
commentName=jsonComment.get("name").getAsString().trim()
String commentName = jsonComment.get("name").getAsString().trim();
commentTimestamp=jsonComment.get("created_utc").getAsLong()
long commentTimestamp = jsonComment.get("created_utc").getAsLong();
commentAuthor=jsonComment.get("author").getAsString().trim()
String commentAuthor = jsonComment.get("author").getAsString().trim();
children=json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray()
JsonArray children = json.getAsJsonObject().get("data").getAsJsonObject().get("children").getAsJsonArray();
List<Data.Subreddit> subreddits = new ArrayList<>(children.size());
jsonSubreddit=child.getAsJsonObject().get("data").getAsJsonObject()
JsonObject jsonSubreddit = child.getAsJsonObject().get("data").getAsJsonObject();
id=jsonSubreddit.get("id").getAsString()
String id = jsonSubreddit.get("id").getAsString();
name=jsonSubreddit.get("display_name").getAsString()
String name = jsonSubreddit.get("display_name").getAsString();
OkHttpClient okHttpClient = new OkHttpClient();
OkClient okClient = new OkClient(okHttpClient);
retrofit=new RestAdapter.Builder().setEndpoint(ENDPOINT).setConverter(new GsonConverter(new DeserializerFactory().create())).setLogLevel(RestAdapter.LogLevel.FULL).setClient(okClient).build()
RestAdapter retrofit = new RestAdapter.Builder()
                .setEndpoint(ENDPOINT)
                .setConverter(new GsonConverter(new DeserializerFactory().create()))
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setClient(okClient)
                .build();
Class<Data.Comments> type = Data.Comments.class;
Class<Data.Comments> type = Data.Comments.class;
gson=new GsonBuilder().registerTypeAdapter(type,new PostDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new PostDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("comment.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
List<Data.Comment> comments = new ArrayList<>();
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_default.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
Class<Data.Subscriptions> type = Data.Subscriptions.class;
Class<Data.Subscriptions> type = Data.Subscriptions.class;
gson=new GsonBuilder().registerTypeAdapter(type,new SubscriptionsDeserializer()).create()
Gson gson = new GsonBuilder().registerTypeAdapter(type, new SubscriptionsDeserializer()).create();
resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json")
InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("subreddits_mine.json");
InputStreamReader reader = new InputStreamReader(resourceAsStream);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscribedSubreddits=subscriptions.getSubscribedSubreddits()
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
List<Data.Subreddit> subscribedSubreddits = subscriptions.getSubscribedSubreddits();
subreddit=subscribedSubreddits.get(0)
Data.Subreddit subreddit = subscribedSubreddits.get(0);
subscription=dataSource.get(index)
Ui.Subscription subscription = dataSource.get(index);
intent=toFeedIntent(subscription)
Intent intent = toFeedIntent(subscription);
intent=menuItem.getIntent()
Intent intent = menuItem.getIntent();
Intent intent = new Intent();
postSummary=dataSource.get(position)
Ui.PostSummary postSummary = dataSource.get(position);
previousSize=getItemCount()
int previousSize = getItemCount();
view=layoutInflater.inflate(R.layout.view_feed_post_summary,parent,false)
View view = layoutInflater.inflate(R.layout.view_feed_post_summary, parent, false);
TextView titleView = (TextView) view.findViewById(R.id.feed_post_summary_text_title);
TextView authorAndSubreddit = (TextView) view.findViewById(R.id.feed_post_summary_text_author_and_subreddit);
TextView scoreAndCommentCount = (TextView) view.findViewById(R.id.feed_post_summary_text_score_and_comment_count);
ImageView thumbnailView = (ImageView) view.findViewById(R.id.feed_post_summary_image_thumbnail);
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
PostSummaryAdapter<T> adapter = new PostSummaryAdapter<>(activity.getLayoutInflater(), listener, dataSource);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.feed_recycler);
SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) activity.findViewById(R.id.swipe_container);
adapter=recyclerView.getAdapter()
RecyclerView.Adapter adapter = recyclerView.getAdapter();
LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
lastVisibleItemPosition=layoutManager.findLastVisibleItemPosition()
int lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
itemCount=adapter.getItemCount()
int itemCount = adapter.getItemCount();
view=layoutInflater.inflate(R.layout.view_post_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
TextView authorView = (TextView) view.findViewById(R.id.post_comment_author);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
view=layoutInflater.inflate(R.layout.view_post_more_comment,parent,false)
View view = layoutInflater.inflate(R.layout.view_post_more_comment, parent, false);
TextView bodyView = (TextView) view.findViewById(R.id.post_comment_body);
indentationView=view.findViewById(R.id.comment_indentation)
View indentationView = view.findViewById(R.id.comment_indentation);
content=view.findViewById(R.id.comment_content)
View content = view.findViewById(R.id.comment_content);
int depthOffset = rootView.getResources().getDimensionPixelSize(R.dimen.comment_indent) * depth;
resources=rootView.getResources()
Resources resources = rootView.getResources();
int normalisedDepth = (depth % DEPTH_COLOURS.length);
int colour = DEPTH_COLOURS[normalisedDepth];
root=layoutInflater.inflate(R.layout.view_post_link_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_link_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
ImageView thumbnailView = (ImageView) root.findViewById(R.id.post_details_link_thumbnail);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
TextView titleView = (TextView) activity.findViewById(R.id.toolbar_title);
layoutInflater=activity.getLayoutInflater()
LayoutInflater layoutInflater = activity.getLayoutInflater();
PostDetailsAdapter adapter = new PostDetailsAdapter(new ViewHolderFactory(layoutInflater), commentProvider, p, listener);
RecyclerView recyclerView = (RecyclerView) activity.findViewById(R.id.comment_recycler);
root=layoutInflater.inflate(R.layout.view_post_self_details,parent,false)
View root = layoutInflater.inflate(R.layout.view_post_self_details, parent, false);
TextView titleView = (TextView) root.findViewById(R.id.post_details_link_title);
TextView authorSubreddit = (TextView) root.findViewById(R.id.post_details_link_author_subreddit);
TextView scoreCommentCount = (TextView) root.findViewById(R.id.post_details_link_score_comment_count);
TextView bodyView = (TextView) root.findViewById(R.id.post_details_body);
postSummary=postDetails.getPostSummary()
Ui.PostSummary postSummary = postDetails.getPostSummary();
String source = postSummary.getAuthor() + " in " + postSummary.getSubreddit();
spannableStringBuilder=SpannableStringBuilder.valueOf(source)
SpannableStringBuilder spannableStringBuilder = SpannableStringBuilder.valueOf(source);
postDetails=postSource.get(position)
Ui.PostDetails postDetails = postSource.get(position);
truePosition=getTruePosition(position)
int truePosition = getTruePosition(position);
comment=commentSource.get(truePosition)
Ui.Comment comment = commentSource.get(truePosition);

Diff of d09a82c9e0352cd31eacfc58412eb235954553a1 and 0dc928809710e607bfaec42b8861281d4de55833:
	--> Added type argument methods = 5
	--> recency = year
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 27
	--> recency = year
	--> Added type parameter methods = 1
	--> recency = year
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = year
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 22
	--> recency = year
	--> Added class instantiations = 1
	--> recency = year
	--> Added nested = 1
	--> recency = year
	--> Added bounds = 0
	--> recency = null

 Reverted revision d09a82c9e0352cd31eacfc58412eb235954553a1 to 0dc928809710e607bfaec42b8861281d4de55833

************Analysis complete************
Added generics to repository ouchadam/lol-dr = 33

Ataul Munim added type argument method count = 5
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 27
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 22
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 1
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 33

Ataul Munim added type argument method count = 5
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 27
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 22
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 1
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository ouchadam/lol-dr = 33

Ataul Munim added type argument method count = 5
	--> recency = year
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 27
	--> recency = year
Ataul Munim added type parameter method count = 1
	--> recency = year
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 3
	--> recency = year
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 22
	--> recency = year
Ataul Munim added class instantiation count = 1
	--> recency = year
Ataul Munim added nested count = 1
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
