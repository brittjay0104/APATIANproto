iluwatar/java-design-patterns -- mafagafogigante -- Bernardo Sulzbach
https://github.com/iluwatar/java-design-patterns.git
git clone https://github.com/iluwatar/java-design-patterns.git
.\/java-design-patterns\
.\/java-design-patterns\.git
0
Project cloned!
Bernardo Sulzbach is responsible for commit e09dda60371d5c03e946b4f68759adef9926b4f2
Bernardo Sulzbach is responsible for commit 2238369fc0d61cf45b23a1db3c4ed82163d54219
Bernardo Sulzbach is responsible for commit e3f2da8544b23cc95579aa50da962c6ab15917eb
Bernardo Sulzbach is responsible for commit 8a4911a4eb335463b9f290ee7b22bd4056977acf
Bernardo Sulzbach is responsible for commit 5e28382021a579d27717962ed8d7a45acbbff40e
Bernardo Sulzbach is responsible for commit bc060309e3164e1dbe6775235ba14d5a2bd87d99
Bernardo Sulzbach is responsible for commit a4637fcf99dabad0f13650f01d4a383eb3427f13
Bernardo Sulzbach is responsible for commit 031bbe9f096762ec4c6852bf63eff957e3ef5ac0
Bernardo Sulzbach is responsible for commit 5109c8f4623c4f052df323d30bee8e5e86b0897b
Bernardo Sulzbach is responsible for commit edc93ea7cf79430d13f9d0c5a5dcf0420ef34863
Bernardo Sulzbach is responsible for commit 74c0ab90ac259edeccac72ce627c0b2d411fcfdc
Added App.java to .\/java-design-patterns\ repository source files.
Added Army.java to .\/java-design-patterns\ repository source files.
Added Castle.java to .\/java-design-patterns\ repository source files.
Added ElfArmy.java to .\/java-design-patterns\ repository source files.
Added ElfCastle.java to .\/java-design-patterns\ repository source files.
Added ElfKing.java to .\/java-design-patterns\ repository source files.
Added ElfKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added KingdomFactory.java to .\/java-design-patterns\ repository source files.
Added OrcArmy.java to .\/java-design-patterns\ repository source files.
Added OrcCastle.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added AbstractFactoryTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BattleFishingBoat.java to .\/java-design-patterns\ repository source files.
Added BattleShip.java to .\/java-design-patterns\ repository source files.
Added Captain.java to .\/java-design-patterns\ repository source files.
Added FishingBoat.java to .\/java-design-patterns\ repository source files.
Added AdapterPatternTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsyncCallback.java to .\/java-design-patterns\ repository source files.
Added AsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AsyncResult.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Excalibur.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added MagicWeapon.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Mjollnir.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Stormbringer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Armor.java to .\/java-design-patterns\ repository source files.
Added HairColor.java to .\/java-design-patterns\ repository source files.
Added HairType.java to .\/java-design-patterns\ repository source files.
Added Hero.java to .\/java-design-patterns\ repository source files.
Added Profession.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegate.java to .\/java-design-patterns\ repository source files.
Added BusinessLookup.java to .\/java-design-patterns\ repository source files.
Added BusinessService.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added EjbService.java to .\/java-design-patterns\ repository source files.
Added JmsService.java to .\/java-design-patterns\ repository source files.
Added ServiceType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegateTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppManager.java to .\/java-design-patterns\ repository source files.
Added CacheStore.java to .\/java-design-patterns\ repository source files.
Added CachingPolicy.java to .\/java-design-patterns\ repository source files.
Added DbManager.java to .\/java-design-patterns\ repository source files.
Added LruCache.java to .\/java-design-patterns\ repository source files.
Added UserAccount.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CachingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Callback.java to .\/java-design-patterns\ repository source files.
Added LambdasApp.java to .\/java-design-patterns\ repository source files.
Added SimpleTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CallbackTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added OrcCommander.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcOfficer.java to .\/java-design-patterns\ repository source files.
Added OrcSoldier.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added RequestHandler.java to .\/java-design-patterns\ repository source files.
Added RequestType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OrcKingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added InvisibilitySpell.java to .\/java-design-patterns\ repository source files.
Added ShrinkSpell.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added Visibility.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Letter.java to .\/java-design-patterns\ repository source files.
Added LetterComposite.java to .\/java-design-patterns\ repository source files.
Added Messenger.java to .\/java-design-patterns\ repository source files.
Added Sentence.java to .\/java-design-patterns\ repository source files.
Added Word.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MessengerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Customer.java to .\/java-design-patterns\ repository source files.
Added CustomerDao.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added CustomerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hostile.java to .\/java-design-patterns\ repository source files.
Added SmartHostile.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SmartHostileTest.java to .\/java-design-patterns\ repository source files.
Added TrollTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Printer.java to .\/java-design-patterns\ repository source files.
Added PrinterController.java to .\/java-design-patterns\ repository source files.
Added CanonPrinter.java to .\/java-design-patterns\ repository source files.
Added EpsonPrinter.java to .\/java-design-patterns\ repository source files.
Added HpPrinter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DelegateTest.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizard.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GuiceWizard.java to .\/java-design-patterns\ repository source files.
Added OldTobyTobacco.java to .\/java-design-patterns\ repository source files.
Added RivendellTobacco.java to .\/java-design-patterns\ repository source files.
Added SecondBreakfastTobacco.java to .\/java-design-patterns\ repository source files.
Added SimpleWizard.java to .\/java-design-patterns\ repository source files.
Added Tobacco.java to .\/java-design-patterns\ repository source files.
Added TobaccoModule.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizardTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GuiceWizardTest.java to .\/java-design-patterns\ repository source files.
Added SimpleWizardTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Inventory.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added InventoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroid.java to .\/java-design-patterns\ repository source files.
Added GameObject.java to .\/java-design-patterns\ repository source files.
Added Meteoroid.java to .\/java-design-patterns\ repository source files.
Added Rectangle.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIss.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMir.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CollisionTest.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroidTest.java to .\/java-design-patterns\ repository source files.
Added MeteoroidTest.java to .\/java-design-patterns\ repository source files.
Added RectangleTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIssTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMirTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added EventEmitter.java to .\/java-design-patterns\ repository source files.
Added EventObserver.java to .\/java-design-patterns\ repository source files.
Added KingJoffrey.java to .\/java-design-patterns\ repository source files.
Added KingsHand.java to .\/java-design-patterns\ repository source files.
Added LordBaelish.java to .\/java-design-patterns\ repository source files.
Added LordVarys.java to .\/java-design-patterns\ repository source files.
Added Scout.java to .\/java-design-patterns\ repository source files.
Added Weekday.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EventEmitterTest.java to .\/java-design-patterns\ repository source files.
Added EventTest.java to .\/java-design-patterns\ repository source files.
Added KingJoffreyTest.java to .\/java-design-patterns\ repository source files.
Added KingsHandTest.java to .\/java-design-patterns\ repository source files.
Added LordBaelishTest.java to .\/java-design-patterns\ repository source files.
Added LordVarysTest.java to .\/java-design-patterns\ repository source files.
Added ScoutTest.java to .\/java-design-patterns\ repository source files.
Added WeekdayTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEvent.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEvent.java to .\/java-design-patterns\ repository source files.
Added EventDispatcher.java to .\/java-design-patterns\ repository source files.
Added Handler.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventTest.java to .\/java-design-patterns\ repository source files.
Added EventDispatcherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileWriterAction.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DwarvenCartOperator.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldDigger.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacade.java to .\/java-design-patterns\ repository source files.
Added DwarvenMineWorker.java to .\/java-design-patterns\ repository source files.
Added DwarvenTunnelDigger.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacadeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Axe.java to .\/java-design-patterns\ repository source files.
Added Bow.java to .\/java-design-patterns\ repository source files.
Added Builder.java to .\/java-design-patterns\ repository source files.
Added Spear.java to .\/java-design-patterns\ repository source files.
Added Sword.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponFactory.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryKitTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Blacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfBlacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfWeapon.java to .\/java-design-patterns\ repository source files.
Added OrcBlacksmith.java to .\/java-design-patterns\ repository source files.
Added OrcWeapon.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added UserGroup.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added UserGroupTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FluentIterable.java to .\/java-design-patterns\ repository source files.
Added DecoratingIterator.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterable.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterable.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added ActionType.java to .\/java-design-patterns\ repository source files.
Added Content.java to .\/java-design-patterns\ repository source files.
Added ContentAction.java to .\/java-design-patterns\ repository source files.
Added MenuAction.java to .\/java-design-patterns\ repository source files.
Added MenuItem.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added ContentStore.java to .\/java-design-patterns\ repository source files.
Added MenuStore.java to .\/java-design-patterns\ repository source files.
Added Store.java to .\/java-design-patterns\ repository source files.
Added ContentView.java to .\/java-design-patterns\ repository source files.
Added MenuView.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ContentTest.java to .\/java-design-patterns\ repository source files.
Added MenuItemTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DispatcherTest.java to .\/java-design-patterns\ repository source files.
Added ContentStoreTest.java to .\/java-design-patterns\ repository source files.
Added MenuStoreTest.java to .\/java-design-patterns\ repository source files.
Added ContentViewTest.java to .\/java-design-patterns\ repository source files.
Added MenuViewTest.java to .\/java-design-patterns\ repository source files.
Added AlchemistShop.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HealingPotion.java to .\/java-design-patterns\ repository source files.
Added HolyWaterPotion.java to .\/java-design-patterns\ repository source files.
Added InvisibilityPotion.java to .\/java-design-patterns\ repository source files.
Added PoisonPotion.java to .\/java-design-patterns\ repository source files.
Added Potion.java to .\/java-design-patterns\ repository source files.
Added PotionFactory.java to .\/java-design-patterns\ repository source files.
Added PotionType.java to .\/java-design-patterns\ repository source files.
Added StrengthPotion.java to .\/java-design-patterns\ repository source files.
Added AlchemistShopTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ApplicationException.java to .\/java-design-patterns\ repository source files.
Added ArcherCommand.java to .\/java-design-patterns\ repository source files.
Added ArcherView.java to .\/java-design-patterns\ repository source files.
Added CatapultCommand.java to .\/java-design-patterns\ repository source files.
Added CatapultView.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added ErrorView.java to .\/java-design-patterns\ repository source files.
Added FrontController.java to .\/java-design-patterns\ repository source files.
Added UnknownCommand.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ApplicationExceptionTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added FrontControllerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added ViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsynchronousService.java to .\/java-design-patterns\ repository source files.
Added AsyncTask.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added AsynchronousServiceTest.java to .\/java-design-patterns\ repository source files.
Added AbstractFilter.java to .\/java-design-patterns\ repository source files.
Added AddressFilter.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added ContactFilter.java to .\/java-design-patterns\ repository source files.
Added DepositFilter.java to .\/java-design-patterns\ repository source files.
Added Filter.java to .\/java-design-patterns\ repository source files.
Added FilterChain.java to .\/java-design-patterns\ repository source files.
Added FilterManager.java to .\/java-design-patterns\ repository source files.
Added NameFilter.java to .\/java-design-patterns\ repository source files.
Added Order.java to .\/java-design-patterns\ repository source files.
Added OrderFilter.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FilterManagerTest.java to .\/java-design-patterns\ repository source files.
Added FilterTest.java to .\/java-design-patterns\ repository source files.
Added OrderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Expression.java to .\/java-design-patterns\ repository source files.
Added MinusExpression.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpression.java to .\/java-design-patterns\ repository source files.
Added NumberExpression.java to .\/java-design-patterns\ repository source files.
Added PlusExpression.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MinusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpressionTest.java to .\/java-design-patterns\ repository source files.
Added NumberExpressionTest.java to .\/java-design-patterns\ repository source files.
Added PlusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemIterator.java to .\/java-design-patterns\ repository source files.
Added ItemType.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestItemIterator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Cake.java to .\/java-design-patterns\ repository source files.
Added CakeBakingException.java to .\/java-design-patterns\ repository source files.
Added CakeBakingService.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImpl.java to .\/java-design-patterns\ repository source files.
Added CakeDao.java to .\/java-design-patterns\ repository source files.
Added CakeInfo.java to .\/java-design-patterns\ repository source files.
Added CakeLayer.java to .\/java-design-patterns\ repository source files.
Added CakeLayerDao.java to .\/java-design-patterns\ repository source files.
Added CakeLayerInfo.java to .\/java-design-patterns\ repository source files.
Added CakeTopping.java to .\/java-design-patterns\ repository source files.
Added CakeToppingDao.java to .\/java-design-patterns\ repository source files.
Added CakeToppingInfo.java to .\/java-design-patterns\ repository source files.
Added CakeViewImpl.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingExceptionTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added CakeTest.java to .\/java-design-patterns\ repository source files.
Added CakeViewImplTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Heavy.java to .\/java-design-patterns\ repository source files.
Added HolderNaive.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafe.java to .\/java-design-patterns\ repository source files.
Added Java8Holder.java to .\/java-design-patterns\ repository source files.
Added AbstractHolderTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HolderNaiveTest.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafeTest.java to .\/java-design-patterns\ repository source files.
Added Java8HolderTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hobbit.java to .\/java-design-patterns\ repository source files.
Added Hunter.java to .\/java-design-patterns\ repository source files.
Added Party.java to .\/java-design-patterns\ repository source files.
Added PartyImpl.java to .\/java-design-patterns\ repository source files.
Added PartyMember.java to .\/java-design-patterns\ repository source files.
Added PartyMemberBase.java to .\/java-design-patterns\ repository source files.
Added Rogue.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added PartyImplTest.java to .\/java-design-patterns\ repository source files.
Added PartyMemberTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Star.java to .\/java-design-patterns\ repository source files.
Added StarMemento.java to .\/java-design-patterns\ repository source files.
Added StarType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StarTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Fatigue.java to .\/java-design-patterns\ repository source files.
Added GiantController.java to .\/java-design-patterns\ repository source files.
Added GiantModel.java to .\/java-design-patterns\ repository source files.
Added GiantView.java to .\/java-design-patterns\ repository source files.
Added Health.java to .\/java-design-patterns\ repository source files.
Added Nourishment.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GiantControllerTest.java to .\/java-design-patterns\ repository source files.
Added GiantModelTest.java to .\/java-design-patterns\ repository source files.
Added GiantViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileLoader.java to .\/java-design-patterns\ repository source files.
Added FileSelectorJFrame.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenter.java to .\/java-design-patterns\ repository source files.
Added FileSelectorStub.java to .\/java-design-patterns\ repository source files.
Added FileSelectorView.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FileLoaderTest.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Sex.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added Validator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MonadTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added LoadBalancer.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added Server.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added LoadBalancerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Nazgul.java to .\/java-design-patterns\ repository source files.
Added NazgulName.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NazgulTest.java to .\/java-design-patterns\ repository source files.
Added HomePageService.java to .\/java-design-patterns\ repository source files.
Added HomePageViewModel.java to .\/java-design-patterns\ repository source files.
Added SimpleObject.java to .\/java-design-patterns\ repository source files.
Added SimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectTest.java to .\/java-design-patterns\ repository source files.
Added DomainAppFixturesProvider.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectCreate.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTearDown.java to .\/java-design-patterns\ repository source files.
Added RecreateSimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleAppSystemInitializer.java to .\/java-design-patterns\ repository source files.
Added BootstrappingGlue.java to .\/java-design-patterns\ repository source files.
Added CatalogOfFixturesGlue.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectGlue.java to .\/java-design-patterns\ repository source files.
Added RunSpecs.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleAppIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleApplication.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Node.java to .\/java-design-patterns\ repository source files.
Added NodeImpl.java to .\/java-design-patterns\ repository source files.
Added NullNode.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NullNodeTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added TreeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ObjectPool.java to .\/java-design-patterns\ repository source files.
Added Oliphaunt.java to .\/java-design-patterns\ repository source files.
Added OliphauntPool.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OliphauntPoolTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GHobbits.java to .\/java-design-patterns\ repository source files.
Added GOrcs.java to .\/java-design-patterns\ repository source files.
Added GWeather.java to .\/java-design-patterns\ repository source files.
Added Observable.java to .\/java-design-patterns\ repository source files.
Added Observer.java to .\/java-design-patterns\ repository source files.
Added Race.java to .\/java-design-patterns\ repository source files.
Added Hobbits.java to .\/java-design-patterns\ repository source files.
Added Orcs.java to .\/java-design-patterns\ repository source files.
Added Weather.java to .\/java-design-patterns\ repository source files.
Added WeatherObserver.java to .\/java-design-patterns\ repository source files.
Added WeatherType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GHobbitsTest.java to .\/java-design-patterns\ repository source files.
Added GWeatherTest.java to .\/java-design-patterns\ repository source files.
Added ObserverTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added HobbitsTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WeatherObserverTest.java to .\/java-design-patterns\ repository source files.
Added WeatherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added MessageQueue.java to .\/java-design-patterns\ repository source files.
Added MqPublishPoint.java to .\/java-design-patterns\ repository source files.
Added MqSubscribePoint.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added SimpleMessage.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageQueue.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added PoisonMessageTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ImmutableStew.java to .\/java-design-patterns\ repository source files.
Added Stew.java to .\/java-design-patterns\ repository source files.
Added StewData.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ImmutableStewTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added StewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemQueue.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Stats.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Beast.java to .\/java-design-patterns\ repository source files.
Added ElfBeast.java to .\/java-design-patterns\ repository source files.
Added ElfMage.java to .\/java-design-patterns\ repository source files.
Added ElfWarlord.java to .\/java-design-patterns\ repository source files.
Added HeroFactory.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImpl.java to .\/java-design-patterns\ repository source files.
Added Mage.java to .\/java-design-patterns\ repository source files.
Added OrcBeast.java to .\/java-design-patterns\ repository source files.
Added OrcMage.java to .\/java-design-patterns\ repository source files.
Added OrcWarlord.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Warlord.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImplTest.java to .\/java-design-patterns\ repository source files.
Added PrototypeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardTower.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WizardTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxyTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppClient.java to .\/java-design-patterns\ repository source files.
Added LoggingHandler.java to .\/java-design-patterns\ repository source files.
Added AbstractNioChannel.java to .\/java-design-patterns\ repository source files.
Added ChannelHandler.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added NioDatagramChannel.java to .\/java-design-patterns\ repository source files.
Added NioReactor.java to .\/java-design-patterns\ repository source files.
Added NioServerSocketChannel.java to .\/java-design-patterns\ repository source files.
Added SameThreadDispatcher.java to .\/java-design-patterns\ repository source files.
Added ThreadPoolDispatcher.java to .\/java-design-patterns\ repository source files.
Added ReactorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Reader.java to .\/java-design-patterns\ repository source files.
Added ReaderWriterLock.java to .\/java-design-patterns\ repository source files.
Added Writer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ReaderAndWriterTest.java to .\/java-design-patterns\ repository source files.
Added ReaderTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppConfig.java to .\/java-design-patterns\ repository source files.
Added Person.java to .\/java-design-patterns\ repository source files.
Added PersonRepository.java to .\/java-design-patterns\ repository source files.
Added PersonSpecifications.java to .\/java-design-patterns\ repository source files.
Added AnnotationBasedRepositoryTest.java to .\/java-design-patterns\ repository source files.
Added AppConfigTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RepositoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added SlidingDoor.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ClosableTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added Queen.java to .\/java-design-patterns\ repository source files.
Added Royalty.java to .\/java-design-patterns\ repository source files.
Added Servant.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added KingTest.java to .\/java-design-patterns\ repository source files.
Added QueenTest.java to .\/java-design-patterns\ repository source files.
Added ServantTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BaseEntity.java to .\/java-design-patterns\ repository source files.
Added Dao.java to .\/java-design-patterns\ repository source files.
Added DaoBaseImpl.java to .\/java-design-patterns\ repository source files.
Added HibernateUtil.java to .\/java-design-patterns\ repository source files.
Added MagicService.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImpl.java to .\/java-design-patterns\ repository source files.
Added Spell.java to .\/java-design-patterns\ repository source files.
Added SpellDao.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Spellbook.java to .\/java-design-patterns\ repository source files.
Added SpellbookDao.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardDao.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BaseDaoTest.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added InitContext.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added ServiceCache.java to .\/java-design-patterns\ repository source files.
Added ServiceImpl.java to .\/java-design-patterns\ repository source files.
Added ServiceLocator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ServiceLocatorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTower.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiom.java to .\/java-design-patterns\ repository source files.
Added IvoryTower.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLocking.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTower.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiomTest.java to .\/java-design-patterns\ repository source files.
Added IvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added SingletonTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLockingTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AbstractCreature.java to .\/java-design-patterns\ repository source files.
Added Creature.java to .\/java-design-patterns\ repository source files.
Added Dragon.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added KillerBee.java to .\/java-design-patterns\ repository source files.
Added Octopus.java to .\/java-design-patterns\ repository source files.
Added Shark.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added Color.java to .\/java-design-patterns\ repository source files.
Added Movement.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added ColorSelector.java to .\/java-design-patterns\ repository source files.
Added MovementSelector.java to .\/java-design-patterns\ repository source files.
Added SizeSelector.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CreatureTest.java to .\/java-design-patterns\ repository source files.
Added ColorSelectorTest.java to .\/java-design-patterns\ repository source files.
Added MovementSelectorTest.java to .\/java-design-patterns\ repository source files.
Added SizeSelectorTest.java to .\/java-design-patterns\ repository source files.
Added AngryState.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Mammoth.java to .\/java-design-patterns\ repository source files.
Added PeacefulState.java to .\/java-design-patterns\ repository source files.
Added State.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MammothTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilder.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DragonSlayer.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategy.java to .\/java-design-patterns\ repository source files.
Added MeleeStrategy.java to .\/java-design-patterns\ repository source files.
Added ProjectileStrategy.java to .\/java-design-patterns\ repository source files.
Added SpellStrategy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayerTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategyTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HalflingThief.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethod.java to .\/java-design-patterns\ repository source files.
Added StealingMethod.java to .\/java-design-patterns\ repository source files.
Added SubtleMethod.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HalflingThiefTest.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethodTest.java to .\/java-design-patterns\ repository source files.
Added StealingMethodTest.java to .\/java-design-patterns\ repository source files.
Added SubtleMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTask.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added Worker.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTaskTest.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTaskTest.java to .\/java-design-patterns\ repository source files.
Added TaskTest.java to .\/java-design-patterns\ repository source files.
Added WorkerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added RainbowFish.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializer.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializerTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2Test.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BallItem.java to .\/java-design-patterns\ repository source files.
Added BallThread.java to .\/java-design-patterns\ repository source files.
Added GameItem.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BallItemTest.java to .\/java-design-patterns\ repository source files.
Added BallThreadTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HeroStat.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroStatTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Commander.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitor.java to .\/java-design-patterns\ repository source files.
Added Sergeant.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitor.java to .\/java-design-patterns\ repository source files.
Added Soldier.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitor.java to .\/java-design-patterns\ repository source files.
Added Unit.java to .\/java-design-patterns\ repository source files.
Added UnitVisitor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommanderTest.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SergeantTest.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SoldierTest.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitorTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added UnitTest.java to .\/java-design-patterns\ repository source files.
Added VisitorTest.java to .\/java-design-patterns\ repository source files.

 ************ ANALYZING FOR USAGE PATTERN ADDITION ************

************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 0

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 0
	--> recency = null
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 0
	--> recency = null
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null

****Parsing for addition at revision e09dda60371d5c03e946b4f68759adef9926b4f2****

Added App.java to .\/java-design-patterns\ repository source files.
Added Army.java to .\/java-design-patterns\ repository source files.
Added Castle.java to .\/java-design-patterns\ repository source files.
Added ElfArmy.java to .\/java-design-patterns\ repository source files.
Added ElfCastle.java to .\/java-design-patterns\ repository source files.
Added ElfKing.java to .\/java-design-patterns\ repository source files.
Added ElfKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added KingdomFactory.java to .\/java-design-patterns\ repository source files.
Added OrcArmy.java to .\/java-design-patterns\ repository source files.
Added OrcCastle.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added AbstractFactoryTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BattleFishingBoat.java to .\/java-design-patterns\ repository source files.
Added BattleShip.java to .\/java-design-patterns\ repository source files.
Added Captain.java to .\/java-design-patterns\ repository source files.
Added FishingBoat.java to .\/java-design-patterns\ repository source files.
Added AdapterPatternTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsyncCallback.java to .\/java-design-patterns\ repository source files.
Added AsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AsyncResult.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Excalibur.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added MagicWeapon.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Mjollnir.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Stormbringer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Armor.java to .\/java-design-patterns\ repository source files.
Added HairColor.java to .\/java-design-patterns\ repository source files.
Added HairType.java to .\/java-design-patterns\ repository source files.
Added Hero.java to .\/java-design-patterns\ repository source files.
Added Profession.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegate.java to .\/java-design-patterns\ repository source files.
Added BusinessLookup.java to .\/java-design-patterns\ repository source files.
Added BusinessService.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added EjbService.java to .\/java-design-patterns\ repository source files.
Added JmsService.java to .\/java-design-patterns\ repository source files.
Added ServiceType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegateTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppManager.java to .\/java-design-patterns\ repository source files.
Added CacheStore.java to .\/java-design-patterns\ repository source files.
Added CachingPolicy.java to .\/java-design-patterns\ repository source files.
Added DbManager.java to .\/java-design-patterns\ repository source files.
Added LruCache.java to .\/java-design-patterns\ repository source files.
Added UserAccount.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CachingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Callback.java to .\/java-design-patterns\ repository source files.
Added LambdasApp.java to .\/java-design-patterns\ repository source files.
Added SimpleTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CallbackTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added OrcCommander.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcOfficer.java to .\/java-design-patterns\ repository source files.
Added OrcSoldier.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added RequestHandler.java to .\/java-design-patterns\ repository source files.
Added RequestType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OrcKingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added InvisibilitySpell.java to .\/java-design-patterns\ repository source files.
Added ShrinkSpell.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added Visibility.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Letter.java to .\/java-design-patterns\ repository source files.
Added LetterComposite.java to .\/java-design-patterns\ repository source files.
Added Messenger.java to .\/java-design-patterns\ repository source files.
Added Sentence.java to .\/java-design-patterns\ repository source files.
Added Word.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MessengerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Customer.java to .\/java-design-patterns\ repository source files.
Added CustomerDao.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added CustomerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hostile.java to .\/java-design-patterns\ repository source files.
Added SmartHostile.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SmartHostileTest.java to .\/java-design-patterns\ repository source files.
Added TrollTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Printer.java to .\/java-design-patterns\ repository source files.
Added PrinterController.java to .\/java-design-patterns\ repository source files.
Added CanonPrinter.java to .\/java-design-patterns\ repository source files.
Added EpsonPrinter.java to .\/java-design-patterns\ repository source files.
Added HpPrinter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DelegateTest.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizard.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GuiceWizard.java to .\/java-design-patterns\ repository source files.
Added OldTobyTobacco.java to .\/java-design-patterns\ repository source files.
Added RivendellTobacco.java to .\/java-design-patterns\ repository source files.
Added SecondBreakfastTobacco.java to .\/java-design-patterns\ repository source files.
Added SimpleWizard.java to .\/java-design-patterns\ repository source files.
Added Tobacco.java to .\/java-design-patterns\ repository source files.
Added TobaccoModule.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizardTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GuiceWizardTest.java to .\/java-design-patterns\ repository source files.
Added SimpleWizardTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Inventory.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added InventoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroid.java to .\/java-design-patterns\ repository source files.
Added GameObject.java to .\/java-design-patterns\ repository source files.
Added Meteoroid.java to .\/java-design-patterns\ repository source files.
Added Rectangle.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIss.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMir.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CollisionTest.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroidTest.java to .\/java-design-patterns\ repository source files.
Added MeteoroidTest.java to .\/java-design-patterns\ repository source files.
Added RectangleTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIssTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMirTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added EventEmitter.java to .\/java-design-patterns\ repository source files.
Added EventObserver.java to .\/java-design-patterns\ repository source files.
Added KingJoffrey.java to .\/java-design-patterns\ repository source files.
Added KingsHand.java to .\/java-design-patterns\ repository source files.
Added LordBaelish.java to .\/java-design-patterns\ repository source files.
Added LordVarys.java to .\/java-design-patterns\ repository source files.
Added Scout.java to .\/java-design-patterns\ repository source files.
Added Weekday.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EventEmitterTest.java to .\/java-design-patterns\ repository source files.
Added EventTest.java to .\/java-design-patterns\ repository source files.
Added KingJoffreyTest.java to .\/java-design-patterns\ repository source files.
Added KingsHandTest.java to .\/java-design-patterns\ repository source files.
Added LordBaelishTest.java to .\/java-design-patterns\ repository source files.
Added LordVarysTest.java to .\/java-design-patterns\ repository source files.
Added ScoutTest.java to .\/java-design-patterns\ repository source files.
Added WeekdayTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEvent.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEvent.java to .\/java-design-patterns\ repository source files.
Added EventDispatcher.java to .\/java-design-patterns\ repository source files.
Added Handler.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventTest.java to .\/java-design-patterns\ repository source files.
Added EventDispatcherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileWriterAction.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DwarvenCartOperator.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldDigger.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacade.java to .\/java-design-patterns\ repository source files.
Added DwarvenMineWorker.java to .\/java-design-patterns\ repository source files.
Added DwarvenTunnelDigger.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacadeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Axe.java to .\/java-design-patterns\ repository source files.
Added Bow.java to .\/java-design-patterns\ repository source files.
Added Builder.java to .\/java-design-patterns\ repository source files.
Added Spear.java to .\/java-design-patterns\ repository source files.
Added Sword.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponFactory.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryKitTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Blacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfBlacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfWeapon.java to .\/java-design-patterns\ repository source files.
Added OrcBlacksmith.java to .\/java-design-patterns\ repository source files.
Added OrcWeapon.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added UserGroup.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added UserGroupTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FluentIterable.java to .\/java-design-patterns\ repository source files.
Added DecoratingIterator.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterable.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterable.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added ActionType.java to .\/java-design-patterns\ repository source files.
Added Content.java to .\/java-design-patterns\ repository source files.
Added ContentAction.java to .\/java-design-patterns\ repository source files.
Added MenuAction.java to .\/java-design-patterns\ repository source files.
Added MenuItem.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added ContentStore.java to .\/java-design-patterns\ repository source files.
Added MenuStore.java to .\/java-design-patterns\ repository source files.
Added Store.java to .\/java-design-patterns\ repository source files.
Added ContentView.java to .\/java-design-patterns\ repository source files.
Added MenuView.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ContentTest.java to .\/java-design-patterns\ repository source files.
Added MenuItemTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DispatcherTest.java to .\/java-design-patterns\ repository source files.
Added ContentStoreTest.java to .\/java-design-patterns\ repository source files.
Added MenuStoreTest.java to .\/java-design-patterns\ repository source files.
Added ContentViewTest.java to .\/java-design-patterns\ repository source files.
Added MenuViewTest.java to .\/java-design-patterns\ repository source files.
Added AlchemistShop.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HealingPotion.java to .\/java-design-patterns\ repository source files.
Added HolyWaterPotion.java to .\/java-design-patterns\ repository source files.
Added InvisibilityPotion.java to .\/java-design-patterns\ repository source files.
Added PoisonPotion.java to .\/java-design-patterns\ repository source files.
Added Potion.java to .\/java-design-patterns\ repository source files.
Added PotionFactory.java to .\/java-design-patterns\ repository source files.
Added PotionType.java to .\/java-design-patterns\ repository source files.
Added StrengthPotion.java to .\/java-design-patterns\ repository source files.
Added AlchemistShopTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ApplicationException.java to .\/java-design-patterns\ repository source files.
Added ArcherCommand.java to .\/java-design-patterns\ repository source files.
Added ArcherView.java to .\/java-design-patterns\ repository source files.
Added CatapultCommand.java to .\/java-design-patterns\ repository source files.
Added CatapultView.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added ErrorView.java to .\/java-design-patterns\ repository source files.
Added FrontController.java to .\/java-design-patterns\ repository source files.
Added UnknownCommand.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ApplicationExceptionTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added FrontControllerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added ViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsynchronousService.java to .\/java-design-patterns\ repository source files.
Added AsyncTask.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added AsynchronousServiceTest.java to .\/java-design-patterns\ repository source files.
Added AbstractFilter.java to .\/java-design-patterns\ repository source files.
Added AddressFilter.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added ContactFilter.java to .\/java-design-patterns\ repository source files.
Added DepositFilter.java to .\/java-design-patterns\ repository source files.
Added Filter.java to .\/java-design-patterns\ repository source files.
Added FilterChain.java to .\/java-design-patterns\ repository source files.
Added FilterManager.java to .\/java-design-patterns\ repository source files.
Added NameFilter.java to .\/java-design-patterns\ repository source files.
Added Order.java to .\/java-design-patterns\ repository source files.
Added OrderFilter.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FilterManagerTest.java to .\/java-design-patterns\ repository source files.
Added FilterTest.java to .\/java-design-patterns\ repository source files.
Added OrderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Expression.java to .\/java-design-patterns\ repository source files.
Added MinusExpression.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpression.java to .\/java-design-patterns\ repository source files.
Added NumberExpression.java to .\/java-design-patterns\ repository source files.
Added PlusExpression.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MinusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpressionTest.java to .\/java-design-patterns\ repository source files.
Added NumberExpressionTest.java to .\/java-design-patterns\ repository source files.
Added PlusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemIterator.java to .\/java-design-patterns\ repository source files.
Added ItemType.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestItemIterator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Cake.java to .\/java-design-patterns\ repository source files.
Added CakeBakingException.java to .\/java-design-patterns\ repository source files.
Added CakeBakingService.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImpl.java to .\/java-design-patterns\ repository source files.
Added CakeDao.java to .\/java-design-patterns\ repository source files.
Added CakeInfo.java to .\/java-design-patterns\ repository source files.
Added CakeLayer.java to .\/java-design-patterns\ repository source files.
Added CakeLayerDao.java to .\/java-design-patterns\ repository source files.
Added CakeLayerInfo.java to .\/java-design-patterns\ repository source files.
Added CakeTopping.java to .\/java-design-patterns\ repository source files.
Added CakeToppingDao.java to .\/java-design-patterns\ repository source files.
Added CakeToppingInfo.java to .\/java-design-patterns\ repository source files.
Added CakeViewImpl.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingExceptionTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added CakeTest.java to .\/java-design-patterns\ repository source files.
Added CakeViewImplTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Heavy.java to .\/java-design-patterns\ repository source files.
Added HolderNaive.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafe.java to .\/java-design-patterns\ repository source files.
Added Java8Holder.java to .\/java-design-patterns\ repository source files.
Added AbstractHolderTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HolderNaiveTest.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafeTest.java to .\/java-design-patterns\ repository source files.
Added Java8HolderTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hobbit.java to .\/java-design-patterns\ repository source files.
Added Hunter.java to .\/java-design-patterns\ repository source files.
Added Party.java to .\/java-design-patterns\ repository source files.
Added PartyImpl.java to .\/java-design-patterns\ repository source files.
Added PartyMember.java to .\/java-design-patterns\ repository source files.
Added PartyMemberBase.java to .\/java-design-patterns\ repository source files.
Added Rogue.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added PartyImplTest.java to .\/java-design-patterns\ repository source files.
Added PartyMemberTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Star.java to .\/java-design-patterns\ repository source files.
Added StarMemento.java to .\/java-design-patterns\ repository source files.
Added StarType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StarTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Fatigue.java to .\/java-design-patterns\ repository source files.
Added GiantController.java to .\/java-design-patterns\ repository source files.
Added GiantModel.java to .\/java-design-patterns\ repository source files.
Added GiantView.java to .\/java-design-patterns\ repository source files.
Added Health.java to .\/java-design-patterns\ repository source files.
Added Nourishment.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GiantControllerTest.java to .\/java-design-patterns\ repository source files.
Added GiantModelTest.java to .\/java-design-patterns\ repository source files.
Added GiantViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileLoader.java to .\/java-design-patterns\ repository source files.
Added FileSelectorJFrame.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenter.java to .\/java-design-patterns\ repository source files.
Added FileSelectorStub.java to .\/java-design-patterns\ repository source files.
Added FileSelectorView.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FileLoaderTest.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Sex.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added Validator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MonadTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added LoadBalancer.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added Server.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added LoadBalancerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Nazgul.java to .\/java-design-patterns\ repository source files.
Added NazgulName.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NazgulTest.java to .\/java-design-patterns\ repository source files.
Added HomePageService.java to .\/java-design-patterns\ repository source files.
Added HomePageViewModel.java to .\/java-design-patterns\ repository source files.
Added SimpleObject.java to .\/java-design-patterns\ repository source files.
Added SimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectTest.java to .\/java-design-patterns\ repository source files.
Added DomainAppFixturesProvider.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectCreate.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTearDown.java to .\/java-design-patterns\ repository source files.
Added RecreateSimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleAppSystemInitializer.java to .\/java-design-patterns\ repository source files.
Added BootstrappingGlue.java to .\/java-design-patterns\ repository source files.
Added CatalogOfFixturesGlue.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectGlue.java to .\/java-design-patterns\ repository source files.
Added RunSpecs.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleAppIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleApplication.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Node.java to .\/java-design-patterns\ repository source files.
Added NodeImpl.java to .\/java-design-patterns\ repository source files.
Added NullNode.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NullNodeTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added TreeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ObjectPool.java to .\/java-design-patterns\ repository source files.
Added Oliphaunt.java to .\/java-design-patterns\ repository source files.
Added OliphauntPool.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OliphauntPoolTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GHobbits.java to .\/java-design-patterns\ repository source files.
Added GOrcs.java to .\/java-design-patterns\ repository source files.
Added GWeather.java to .\/java-design-patterns\ repository source files.
Added Observable.java to .\/java-design-patterns\ repository source files.
Added Observer.java to .\/java-design-patterns\ repository source files.
Added Race.java to .\/java-design-patterns\ repository source files.
Added Hobbits.java to .\/java-design-patterns\ repository source files.
Added Orcs.java to .\/java-design-patterns\ repository source files.
Added Weather.java to .\/java-design-patterns\ repository source files.
Added WeatherObserver.java to .\/java-design-patterns\ repository source files.
Added WeatherType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GHobbitsTest.java to .\/java-design-patterns\ repository source files.
Added GWeatherTest.java to .\/java-design-patterns\ repository source files.
Added ObserverTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added HobbitsTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WeatherObserverTest.java to .\/java-design-patterns\ repository source files.
Added WeatherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added MessageQueue.java to .\/java-design-patterns\ repository source files.
Added MqPublishPoint.java to .\/java-design-patterns\ repository source files.
Added MqSubscribePoint.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added SimpleMessage.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageQueue.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added PoisonMessageTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ImmutableStew.java to .\/java-design-patterns\ repository source files.
Added Stew.java to .\/java-design-patterns\ repository source files.
Added StewData.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ImmutableStewTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added StewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemQueue.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Stats.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Beast.java to .\/java-design-patterns\ repository source files.
Added ElfBeast.java to .\/java-design-patterns\ repository source files.
Added ElfMage.java to .\/java-design-patterns\ repository source files.
Added ElfWarlord.java to .\/java-design-patterns\ repository source files.
Added HeroFactory.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImpl.java to .\/java-design-patterns\ repository source files.
Added Mage.java to .\/java-design-patterns\ repository source files.
Added OrcBeast.java to .\/java-design-patterns\ repository source files.
Added OrcMage.java to .\/java-design-patterns\ repository source files.
Added OrcWarlord.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Warlord.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImplTest.java to .\/java-design-patterns\ repository source files.
Added PrototypeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardTower.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WizardTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxyTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppClient.java to .\/java-design-patterns\ repository source files.
Added LoggingHandler.java to .\/java-design-patterns\ repository source files.
Added AbstractNioChannel.java to .\/java-design-patterns\ repository source files.
Added ChannelHandler.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added NioDatagramChannel.java to .\/java-design-patterns\ repository source files.
Added NioReactor.java to .\/java-design-patterns\ repository source files.
Added NioServerSocketChannel.java to .\/java-design-patterns\ repository source files.
Added SameThreadDispatcher.java to .\/java-design-patterns\ repository source files.
Added ThreadPoolDispatcher.java to .\/java-design-patterns\ repository source files.
Added ReactorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Reader.java to .\/java-design-patterns\ repository source files.
Added ReaderWriterLock.java to .\/java-design-patterns\ repository source files.
Added Writer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ReaderAndWriterTest.java to .\/java-design-patterns\ repository source files.
Added ReaderTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppConfig.java to .\/java-design-patterns\ repository source files.
Added Person.java to .\/java-design-patterns\ repository source files.
Added PersonRepository.java to .\/java-design-patterns\ repository source files.
Added PersonSpecifications.java to .\/java-design-patterns\ repository source files.
Added AnnotationBasedRepositoryTest.java to .\/java-design-patterns\ repository source files.
Added AppConfigTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RepositoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added SlidingDoor.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ClosableTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added Queen.java to .\/java-design-patterns\ repository source files.
Added Royalty.java to .\/java-design-patterns\ repository source files.
Added Servant.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added KingTest.java to .\/java-design-patterns\ repository source files.
Added QueenTest.java to .\/java-design-patterns\ repository source files.
Added ServantTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BaseEntity.java to .\/java-design-patterns\ repository source files.
Added Dao.java to .\/java-design-patterns\ repository source files.
Added DaoBaseImpl.java to .\/java-design-patterns\ repository source files.
Added HibernateUtil.java to .\/java-design-patterns\ repository source files.
Added MagicService.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImpl.java to .\/java-design-patterns\ repository source files.
Added Spell.java to .\/java-design-patterns\ repository source files.
Added SpellDao.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Spellbook.java to .\/java-design-patterns\ repository source files.
Added SpellbookDao.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardDao.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BaseDaoTest.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added InitContext.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added ServiceCache.java to .\/java-design-patterns\ repository source files.
Added ServiceImpl.java to .\/java-design-patterns\ repository source files.
Added ServiceLocator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ServiceLocatorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTower.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiom.java to .\/java-design-patterns\ repository source files.
Added IvoryTower.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLocking.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTower.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiomTest.java to .\/java-design-patterns\ repository source files.
Added IvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added SingletonTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLockingTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AbstractCreature.java to .\/java-design-patterns\ repository source files.
Added Creature.java to .\/java-design-patterns\ repository source files.
Added Dragon.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added KillerBee.java to .\/java-design-patterns\ repository source files.
Added Octopus.java to .\/java-design-patterns\ repository source files.
Added Shark.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added Color.java to .\/java-design-patterns\ repository source files.
Added Movement.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added ColorSelector.java to .\/java-design-patterns\ repository source files.
Added MovementSelector.java to .\/java-design-patterns\ repository source files.
Added SizeSelector.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CreatureTest.java to .\/java-design-patterns\ repository source files.
Added ColorSelectorTest.java to .\/java-design-patterns\ repository source files.
Added MovementSelectorTest.java to .\/java-design-patterns\ repository source files.
Added SizeSelectorTest.java to .\/java-design-patterns\ repository source files.
Added AngryState.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Mammoth.java to .\/java-design-patterns\ repository source files.
Added PeacefulState.java to .\/java-design-patterns\ repository source files.
Added State.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MammothTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilder.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DragonSlayer.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategy.java to .\/java-design-patterns\ repository source files.
Added MeleeStrategy.java to .\/java-design-patterns\ repository source files.
Added ProjectileStrategy.java to .\/java-design-patterns\ repository source files.
Added SpellStrategy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayerTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategyTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HalflingThief.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethod.java to .\/java-design-patterns\ repository source files.
Added StealingMethod.java to .\/java-design-patterns\ repository source files.
Added SubtleMethod.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HalflingThiefTest.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethodTest.java to .\/java-design-patterns\ repository source files.
Added StealingMethodTest.java to .\/java-design-patterns\ repository source files.
Added SubtleMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTask.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added Worker.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTaskTest.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTaskTest.java to .\/java-design-patterns\ repository source files.
Added TaskTest.java to .\/java-design-patterns\ repository source files.
Added WorkerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added RainbowFish.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializer.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializerTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2Test.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BallItem.java to .\/java-design-patterns\ repository source files.
Added BallThread.java to .\/java-design-patterns\ repository source files.
Added GameItem.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BallItemTest.java to .\/java-design-patterns\ repository source files.
Added BallThreadTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HeroStat.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroStatTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Commander.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitor.java to .\/java-design-patterns\ repository source files.
Added Sergeant.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitor.java to .\/java-design-patterns\ repository source files.
Added Soldier.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitor.java to .\/java-design-patterns\ repository source files.
Added Unit.java to .\/java-design-patterns\ repository source files.
Added UnitVisitor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommanderTest.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SergeantTest.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SoldierTest.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitorTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added UnitTest.java to .\/java-design-patterns\ repository source files.
Added VisitorTest.java to .\/java-design-patterns\ repository source files.
App app = new App();
elfKing=app.getKing(elfFactory)
final King elfKing = app.getKing(elfFactory);
orcKing=app.getKing(orcFactory)
final King orcKing = app.getKing(orcFactory);
elfCastle=app.getCastle(elfFactory)
final Castle elfCastle = app.getCastle(elfFactory);
orcCastle=app.getCastle(orcFactory)
final Castle orcCastle = app.getCastle(orcFactory);
elfArmy=app.getArmy(elfFactory)
final Army elfArmy = app.getArmy(elfFactory);
orcArmy=app.getArmy(orcFactory)
final Army orcArmy = app.getArmy(orcFactory);
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

Captain captain = new Captain(new BattleFishingBoat());
battleFishingBoat=spy(new BattleFishingBoat())
BattleFishingBoat battleFishingBoat = spy(new BattleFishingBoat());
Captain captain = new Captain();
BattleShip captain = (BattleShip) beans.get(CAPTAIN_BEAN);
BattleShip battleship = (BattleShip) beans.get(BATTLESHIP_BEAN);
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

AsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult1=executor.startProcess(lazyval(10,500))
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
asyncResult2=executor.startProcess(lazyval("test",300))
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
asyncResult3=executor.startProcess(lazyval(50L,700))
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
asyncResult4=executor.startProcess(lazyval(20,400),callback("Callback result 4"))
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
asyncResult5=executor.startProcess(lazyval("callback",600),callback("Callback result 5"))
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
result1=executor.endProcess(asyncResult1)
Integer result1 = executor.endProcess(asyncResult1);
result2=executor.endProcess(asyncResult2)
String result2 = executor.endProcess(asyncResult2);
result3=executor.endProcess(asyncResult3)
Long result3 = executor.endProcess(asyncResult3);
CompletableResult<T> result = new CompletableResult<>(callback);
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null)
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(null,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
exception=optionalException.get()
final Exception exception = optionalException.get();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null,null)
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());
FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());
SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

excalibur=spy(new Excalibur())
final Excalibur excalibur = spy(new Excalibur());
final BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(excalibur);
mjollnir=spy(new Mjollnir())
final Mjollnir mjollnir = spy(new Mjollnir());
final FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(mjollnir);
stormbringer=spy(new Stormbringer())
final Stormbringer stormbringer = spy(new Stormbringer());
final SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(stormbringer);
mage=new HeroBuilder(Profession.MAGE,"Riobard").withHairColor(HairColor.BLACK).withWeapon(Weapon.DAGGER).build()
Hero mage =
        new HeroBuilder(Profession.MAGE, "Riobard").withHairColor(HairColor.BLACK)
            .withWeapon(Weapon.DAGGER).build();
warrior=new HeroBuilder(Profession.WARRIOR,"Amberjill").withHairColor(HairColor.BLOND).withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).build()
Hero warrior =
        new HeroBuilder(Profession.WARRIOR, "Amberjill").withHairColor(HairColor.BLOND)
            .withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD)
            .build();
thief=new HeroBuilder(Profession.THIEF,"Desmond").withHairType(HairType.BALD).withWeapon(Weapon.BOW).build()
Hero thief =
        new HeroBuilder(Profession.THIEF, "Desmond").withHairType(HairType.BALD)
            .withWeapon(Weapon.BOW).build();
StringBuilder sb = new StringBuilder();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final String heroName = "Sir Lancelot";
hero=new Hero.HeroBuilder(Profession.WARRIOR,heroName).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).withHairType(HairType.LONG_CURLY).withHairColor(HairColor.BLOND).build()
final Hero hero = new Hero.HeroBuilder(Profession.WARRIOR, heroName)
        .withArmor(Armor.CHAIN_MAIL)
        .withWeapon(Weapon.SWORD)
        .withHairType(HairType.LONG_CURLY)
        .withHairColor(HairColor.BLOND)
        .build();
BusinessDelegate businessDelegate = new BusinessDelegate();
BusinessLookup businessLookup = new BusinessLookup();
Client client = new Client(businessDelegate);
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

Client client = new Client(businessDelegate);
App app = new App();
UserAccount userAccount1 = new UserAccount("001", "John", "He is a boy.");
UserAccount userAccount2 = new UserAccount("002", "Jane", "She is a girl.");
UserAccount userAccount3 = new UserAccount("003", "Adam", "He likes food.");
UserAccount userAccount4 = new UserAccount("004", "Rita", "She hates cats.");
UserAccount userAccount5 = new UserAccount("005", "Isaac", "He is allergic to mustard.");
UserAccount userAccount6 = new UserAccount("006", "Yasha", "She is an only child.");
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
StringBuilder sb = new StringBuilder();
iterable=db.getCollection("user_accounts").find(new Document("userID",userId))
FindIterable<Document> iterable =
        db.getCollection("user_accounts").find(new Document("userID", userId));
doc=iterable.first()
Document doc = iterable.first();
node=cache.get(userId)
Node node = cache.get(userId);
old=cache.get(userId)
Node old = cache.get(userId);
Node newNode = new Node(userId, userAccount);
toBeRemoved=cache.get(userId)
Node toBeRemoved = cache.get(userId);
ArrayList<UserAccount> listOfCacheData = new ArrayList<>();
Node temp = head;
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

Task task = new SimpleTask();
Callback callback = new Callback() {
      @Override
      public void call() {
        System.out.println("I'm done now.");
      }
    };
Task task = new SimpleTask();
Callback c = () -> System.out.println("I'm done now.");
    task.executeWith(c);
  
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

Callback callback = new Callback() {
      @Override
      public void call() {
        callingCount++;
      }
    };
Task task = new SimpleTask();
Callback callback = () -> callingCount++;

    Task task = new SimpleTask();

    assertEquals("Initial calling count of 0", new Integer(0), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called once", new Integer(1), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called twice", new Integer(2), callingCount);

  
OrcKing king = new OrcKing();

 Generics pattern public class Request was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final OrcKing king = new OrcKing();
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
temp=target.getSize()
Size temp = target.getSize();
previousSpell=undoStack.pollLast()
Command previousSpell = undoStack.pollLast();
previousSpell=redoStack.pollLast()
Command previousSpell = redoStack.pollLast();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
orcMessage=new Messenger().messageFromOrcs()
LetterComposite orcMessage = new Messenger().messageFromOrcs();
elfMessage=new Messenger().messageFromElves()
LetterComposite elfMessage = new Messenger().messageFromElves();
List<Word> words = new ArrayList<>();
List<Word> words = new ArrayList<>();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final Messenger messenger = new Messenger();
final Messenger messenger = new Messenger();
words=message.split(" ")
final String[] words = message.split(" ");
final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());
final Customer customer = new Customer(4, "Dan", "Danson");
final Customer customer1 = new Customer(1, "Adam", "Adamson");
final Customer customer2 = new Customer(2, "Bob", "Bobson");
final Customer customer3 = new Customer(3, "Carl", "Carlson");
final List<Customer> customers = new ArrayList<>();

 Generics pattern new ArrayList<>() was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

boolean isEqual = false;
final Customer customer = (Customer) o;
Customer customer = null;
index=getAllCustomers().indexOf(customer)
final int index = getAllCustomers().indexOf(customer);
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final Customer nonExistingCustomer = new Customer(2, "Robert", "Englund");
final String newFirstname = "Bernard";
final String newLastname = "Montgomery";
final Customer customer = new Customer(CUSTOMER.getId(), newFirstname, newLastname);
cust=impl.getCustomerById(CUSTOMER.getId())
final Customer cust = impl.getCustomerById(CUSTOMER.getId());
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final String newFirstname = "Douglas";
final String newLastname = "MacArthur";
final Customer customer = new Customer(nonExistingId, newFirstname, newLastname);
existingCustomer=impl.getCustomerById(CUSTOMER.getId())
final Customer existingCustomer = impl.getCustomerById(CUSTOMER.getId());
final Customer newCustomer = new Customer(3, "George", "Patton");
final Customer newCustomer = new Customer(3, "George", "Patton");
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final int newId = 2;
final String newFirstname = "Bill";
final String newLastname = "Clinton";
final int newId = 2;
final Customer otherCustomer = new Customer(newId, FIRSTNAME, LASTNAME);
final Customer otherCustomer = new Customer(ID, FIRSTNAME, LASTNAME);
final StringBuffer buffer = new StringBuffer();
Hostile troll = new Troll();
Hostile smart = new SmartHostile(troll);
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

simpleTroll=spy(new Troll())
final Hostile simpleTroll = spy(new Troll());
final Hostile smartTroll = new SmartHostile(simpleTroll);
final Troll troll = new Troll();
PrinterController hpPrinterController = new PrinterController(new HpPrinter());
PrinterController canonPrinterController = new PrinterController(new CanonPrinter());
PrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

PrinterController printerController = new PrinterController(new CanonPrinter());
PrinterController printerController = new PrinterController(new HpPrinter());
PrinterController printerController = new PrinterController(new EpsonPrinter());
SimpleWizard simpleWizard = new SimpleWizard();
AdvancedWizard advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());
injector=Guice.createInjector(new TobaccoModule())
Injector injector = Guice.createInjector(new TobaccoModule());
guiceWizard=injector.getInstance(GuiceWizard.class)
GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final AdvancedWizard advancedWizard = new AdvancedWizard(tobacco);
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final GuiceWizard guiceWizard = new GuiceWizard(tobacco);
@SuppressWarnings("unchecked")
    final Class<? extends Tobacco>[] tobaccos = new Class[]{
        OldTobyTobacco.class, RivendellTobacco.class, SecondBreakfastTobacco.class
    };
injector=Guice.createInjector(new AbstractModule(){
  @Override protected void configure(){
    bind(Tobacco.class).to(tobaccoClass);
  }
}
)
final Injector injector = Guice.createInjector(new AbstractModule() {
        @Override
        protected void configure() {
          bind(Tobacco.class).to(tobaccoClass);
        }
      });
guiceWizard=injector.getInstance(GuiceWizard.class)
final GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final SimpleWizard simpleWizard = new SimpleWizard();
final Inventory inventory = new Inventory(1000);
executorService=Executors.newFixedThreadPool(3)
ExecutorService executorService = Executors.newFixedThreadPool(3);
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final Inventory inventory = new Inventory(INVENTORY_SIZE);
executorService=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);
items=inventory.getItems()
final List<Item> items = inventory.getItems();
final List<Item> items = inventory.getItems();
stdOutCaptor=ArgumentCaptor.forClass(String.class)
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
values=stdOutCaptor.getAllValues()
final List<String> values = stdOutCaptor.getAllValues();
final List<String> values = stdOutCaptor.getAllValues();
List<GameObject> objects = new ArrayList<>();

 Generics pattern new ArrayList<>() was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

tested=getTestedObject()
final O tested = getTestedObject();
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectTargetOnFire 
        ? "Expected [" + targetName + "] to be on fire after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be on fire after colliding with [" + otherName + "] but it was!";
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectedDamage
        ? "Expected [" + targetName + "] to be damaged after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be damaged after colliding with [" + otherName + "] but it was!";
final FlamingAsteroid asteroid = new FlamingAsteroid(1, 2, 3, 4);
final Meteoroid meteoroid = new Meteoroid(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final SpaceStationIss iss = new SpaceStationIss(1, 2, 3, 4);
final SpaceStationMir mir = new SpaceStationMir(1, 2, 3, 4);
KingJoffrey kingJoffrey = new KingJoffrey();
KingsHand kingsHand = new KingsHand(kingJoffrey);
List<EventEmitter> emitters = new ArrayList<>();

 Generics pattern new ArrayList<>() was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithoutDefaultObserver.get()
final E emitter = this.factoryWithoutDefaultObserver.get();
defaultObserver=mock(EventObserver.class)
final EventObserver defaultObserver = mock(EventObserver.class);
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithDefaultObserver.apply(defaultObserver)
final E emitter = this.factoryWithDefaultObserver.apply(defaultObserver);
toString=event.toString()
final String toString = event.toString();
final KingJoffrey kingJoffrey = new KingJoffrey();
final String expectedMessage = "Received event from the King's Hand: " + event.toString();
observer=mock(EventObserver.class)
final EventObserver observer = mock(EventObserver.class);
final KingsHand kingsHand = new KingsHand(observer);
toString=weekday.toString()
final String toString = weekday.toString();
EventDispatcher dispatcher = new EventDispatcher();
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = (UserCreatedEvent) message;
UserUpdatedEvent userUpdatedEvent = (UserUpdatedEvent) message;
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
dispatcher=spy(new EventDispatcher())
EventDispatcher dispatcher = spy(new EventDispatcher());
userCreatedEventHandler=spy(new UserCreatedEventHandler())
UserCreatedEventHandler userCreatedEventHandler = spy(new UserCreatedEventHandler());
userUpdatedEventHandler=spy(new UserUpdatedEventHandler())
UserUpdatedEventHandler userUpdatedEventHandler = spy(new UserUpdatedEventHandler());
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
UserUpdatedEvent userUpdatedEvent = new UserUpdatedEvent(user);
FileWriter writer = new FileWriter(filename);
String[] args = {};
File file = new File("testfile.txt");

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
final File nonExistingFile = new File(this.testFolder.getRoot(), "non-existing-file");
final String testMessage = "Test message";
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
DwarvenGoldmineFacade facade = new DwarvenGoldmineFacade();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final DwarvenGoldmineFacade goldMine = new DwarvenGoldmineFacade();
WeaponFactory factory = WeaponFactory.factory(builder -> {
      builder.add(WeaponType.SWORD, Sword::new);
      builder.add(WeaponType.AXE, Axe::new);
      builder.add(WeaponType.SPEAR, Spear::new);
      builder.add(WeaponType.BOW, Bow::new);
    });
    Weapon axe = factory.create(WeaponType.AXE);
    System.out.println(axe);
  
HashMap<WeaponType, Supplier<Weapon>> map = new HashMap<>();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

weapon=factory.create(WeaponType.SPEAR)
Weapon weapon = factory.create(WeaponType.SPEAR);
weapon=factory.create(WeaponType.AXE)
Weapon weapon = factory.create(WeaponType.AXE);
weapon=factory.create(WeaponType.SWORD)
Weapon weapon = factory.create(WeaponType.SWORD);
App app = new App(new OrcBlacksmith());
Weapon weapon;
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.AXE)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.AXE);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties turnedOff = new Properties();
Service turnedOffService = new PropertiesFeatureToggleVersion(turnedOff);
welcomeMessageturnedOff=turnedOffService.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessageturnedOff = turnedOffService.getWelcomeMessage(new User("Jamie No Code"));
final User paidUser = new User("Jamie Coder");
final User freeUser = new User("Alan Defect");
welcomeMessagePaidUser=service.getWelcomeMessage(paidUser)
final String welcomeMessagePaidUser = service.getWelcomeMessage(paidUser);
welcomeMessageFreeUser=service.getWelcomeMessage(freeUser)
final String welcomeMessageFreeUser = service.getWelcomeMessage(freeUser);
final Properties properties = new Properties();
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
welcomeMessage=service.getWelcomeMessage(paidUser)
final String welcomeMessage = service.getWelcomeMessage(paidUser);
final String expected = "You're amazing Jamie Coder. Thanks for paying for this awesome software.";
welcomeMessage=service.getWelcomeMessage(freeUser)
final String welcomeMessage = service.getWelcomeMessage(freeUser);
final String expected = "I suppose you can use this software.";
User user = new User("Free User");
User user = new User("Paid User");
User user = new User("Paid User");
User user = new User("Free User");
List<Integer> integerList = new ArrayList<>();
firstFiveNegatives=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList()
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
lastTwoPositives=SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList()
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
transformedList=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString()).asList()
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
lastTwoOfFirstFourStringMapped=LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2).map(number-- > "String[" + valueOf(number) + "]").asList()
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
StringJoiner joiner = new StringJoiner(delimiter, prefix, ".");
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();

 Generics pattern new ArrayList<>() was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

ArrayList<E> copy = new ArrayList<>();
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
final E result = next;
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=last(1).iterator()
Iterator<E> resultIterator = last(1).iterator();
Iterator<E> resultIterator = last(1).iterator();
E candidate = null;
newIterator=iterable.iterator()
Iterator<E> newIterator = iterable.iterator();
candidate=oldTypeIterator.next()
E candidate = oldTypeIterator.next();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
nextElement=iterator.next()
E nextElement = iterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentCount = 0;
list=last(1).asList()
List<E> list = last(1).asList();
List<E> list = last(1).asList();
remainingElementsCount=getRemainingElementsCount()
int remainingElementsCount = getRemainingElementsCount();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentIndex = 0;
List<T> temporaryList = new ArrayList<>();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
copy=FluentIterable.copyToList(iterable)
List<E> copy = FluentIterable.copyToList(iterable);
List<E> copy = FluentIterable.copyToList(iterable);
int counter = 0;
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
List<E> copy = new ArrayList<>();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
evenItems=createFluentIterable(integers).filter(i-- > i % 2 == 0).asList()
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
longs=createFluentIterable(integers).map(Integer).asList()
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
consumer=mock(Consumer.class)
final Consumer<Integer> consumer = mock(Consumer.class);
final Consumer<Integer> consumer = mock(Consumer.class);
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
split=createFluentIterable(integers).spliterator()
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
MenuStore menuStore = new MenuStore();
ContentStore contentStore = new ContentStore();
MenuView menuView = new MenuView();
ContentView contentView = new ContentView();
ContentAction contentAction = (ContentAction) action;
MenuAction menuAction = (MenuAction) action;
ContentStore contentStore = (ContentStore) store;
MenuStore menuStore = (MenuStore) store;
toString=content.toString()
final String toString = content.toString();
toString=menuItem.toString()
final String toString = menuItem.toString();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final Constructor<Dispatcher> constructor;
final Constructor<Dispatcher> constructor;
field=Dispatcher.class.getDeclaredField("instance")
final Field field = Dispatcher.class.getDeclaredField("instance");
dispatcher=Dispatcher.getInstance()
final Dispatcher dispatcher = Dispatcher.getInstance();
store=mock(Store.class)
final Store store = mock(Store.class);
actionCaptor=ArgumentCaptor.forClass(Action.class)
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
actions=actionCaptor.getAllValues()
final List<Action> actions = actionCaptor.getAllValues();
final List<Action> actions = actionCaptor.getAllValues();
menuActions=actions.stream().filter(a-- > a.getType().equals(ActionType.MENU_ITEM_SELECTED)).map(a-- > (MenuAction)a).collect(Collectors.toList())
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
contentActions=actions.stream().filter(a-- > a.getType().equals(ActionType.CONTENT_CHANGED)).map(a-- > (ContentAction)a).collect(Collectors.toList())
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final ContentStore contentStore = new ContentStore();
view=mock(View.class)
final View view = mock(View.class);
final MenuStore menuStore = new MenuStore();
view=mock(View.class)
final View view = mock(View.class);
store=mock(ContentStore.class)
final ContentStore store = mock(ContentStore.class);
final ContentView view = new ContentView();
store=mock(MenuStore.class)
final MenuStore store = mock(MenuStore.class);
final MenuView view = new MenuView();
store=mock(Store.class)
final Store store = mock(Store.class);
final MenuView view = new MenuView();
PotionFactory factory = new PotionFactory();
AlchemistShop alchemistShop = new AlchemistShop();
potion=potions.get(type)
Potion potion = potions.get(type);
final AlchemistShop shop = new AlchemistShop();
bottomShelf=shop.getBottomShelf()
final List<Potion> bottomShelf = shop.getBottomShelf();
final List<Potion> bottomShelf = shop.getBottomShelf();
topShelf=shop.getTopShelf()
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> allPotions = new ArrayList<>();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

FrontController controller = new FrontController();
command=getCommand(request)
Command command = getCommand(request);
commandClass=getCommandClass(request)
Class commandClass = getCommandClass(request);
Class result;
final Exception cause = new Exception();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final List<Object[]> parameters = new ArrayList<>();
final FrontController frontController = new FrontController();
final List<Object[]> parameters = new ArrayList<>();
final List<Object[]> parameters = new ArrayList<>();
AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final Object result = new Object();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IOException exception = new IOException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IllegalStateException exception = new IllegalStateException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
Filter last = this;
String result = super.execute(order);
FilterManager filterManager = new FilterManager();
Client client = new Client();
JPanel panel = new JPanel();
Order order =
            new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),
                jtFields[2].getText(), jtAreas[1].getText());
rootPane=SwingUtilities.getRootPane(processButton)
JRootPane rootPane = SwingUtilities.getRootPane(processButton);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
JPanel bot = new JPanel();
rootPane=SwingUtilities.getRootPane(del)
JRootPane rootPane = SwingUtilities.getRootPane(del);
temp=jt.getSelectedRow()
int temp = jt.getSelectedRow();
temp2=jt.getSelectedRowCount()
int temp2 = jt.getSelectedRowCount();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
filter=mock(Filter.class)
final Filter filter = mock(Filter.class);
order=mock(Order.class)
final Order order = mock(Order.class);
final List<Object[]> testData = new ArrayList<>();
result=this.filter.execute(this.order)
final String result = this.filter.execute(this.order);
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
String tokenString = "4 3 2 - 1 + *";
Stack<Expression> stack = new Stack<>();
tokenList=tokenString.split(" ")
String[] tokenList = tokenString.split(" ");
rightExpression=stack.pop()
Expression rightExpression = stack.pop();
leftExpression=stack.pop()
Expression leftExpression = stack.pop();
operator=getOperatorInstance(s,leftExpression,rightExpression)
Expression operator = getOperatorInstance(s, leftExpression, rightExpression);
result=operator.interpret()
int result = operator.interpret();
NumberExpression resultExpression = new NumberExpression(result);
Expression i = new NumberExpression(s);
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final List<Object[]> testData = new ArrayList<>();
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expectedValue=getFirst().interpret()
final int expectedValue = getFirst().interpret();
testStingValue=String.valueOf(expectedValue)
final String testStingValue = String.valueOf(expectedValue);
final NumberExpression numberExpression = new NumberExpression(testStingValue);
TreasureChest chest = new TreasureChest();
ringIterator=chest.iterator(ItemType.RING)
ItemIterator ringIterator = chest.iterator(ItemType.RING);
potionIterator=chest.iterator(ItemType.POTION)
ItemIterator potionIterator = chest.iterator(ItemType.POTION);
weaponIterator=chest.iterator(ItemType.WEAPON)
ItemIterator weaponIterator = chest.iterator(ItemType.WEAPON);
it=chest.iterator(ItemType.ANY)
ItemIterator it = chest.iterator(ItemType.ANY);
ArrayList<Item> list = new ArrayList<>();
items=chest.getItems()
List<Item> items = chest.getItems();
List<Item> items = chest.getItems();
boolean found = false;
int tempIdx = idx;
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final List<Object[]> parameters = new ArrayList<>();
final TreasureChest chest = new TreasureChest();
iterator=chest.iterator(expectedItem.getType())
final ItemIterator iterator = chest.iterator(expectedItem.getType());
item=iterator.next()
final Item item = iterator.next();
name=item.toString()
final String name = item.toString();
final TreasureChest chest = new TreasureChest();
items=chest.getItems()
final List<Item> items = chest.getItems();
final List<Item> items = chest.getItems();
final boolean sameType = this.expectedItem.getType() == item.getType();
sameName=this.expectedItem.toString().equals(item.toString())
final boolean sameName = this.expectedItem.toString().equals(item.toString());
CakeViewImpl cakeView = new CakeViewImpl(cakeBakingService);
CakeInfo cake1 =
        new CakeInfo(new CakeToppingInfo("candies", 0), Arrays.asList(new CakeLayerInfo(
            "chocolate", 0), new CakeLayerInfo("banana", 0), new CakeLayerInfo("strawberry", 0)));
CakeInfo cake2 =
        new CakeInfo(new CakeToppingInfo("cherry", 0), Arrays.asList(
            new CakeLayerInfo("vanilla", 0), new CakeLayerInfo("lemon", 0), new CakeLayerInfo(
                "strawberry", 0)));
allToppings=getAvailableToppingEntities()
List<CakeTopping> allToppings = getAvailableToppingEntities();
List<CakeTopping> allToppings = getAvailableToppingEntities();
matchingToppings=allToppings.stream().filter((t)-- > t.getName().equals(cakeInfo.cakeToppingInfo.name)).collect(Collectors.toList())
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
allLayers=getAvailableLayerEntities()
List<CakeLayer> allLayers = getAvailableLayerEntities();
List<CakeLayer> allLayers = getAvailableLayerEntities();
Set<CakeLayer> foundLayers = new HashSet<>();
found=allLayers.stream().filter((layer)-- > layer.getName().equals(info.name)).findFirst()
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
toppingBean=context.getBean(CakeToppingDao.class)
CakeToppingDao toppingBean = context.getBean(CakeToppingDao.class);
topping=toppingBean.findOne(matchingToppings.iterator().next().getId())
CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().getId());
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
Cake cake = new Cake();
layerBean=context.getBean(CakeLayerDao.class)
CakeLayerDao layerBean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeTopping> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
topping=iterator.next()
CakeTopping topping = iterator.next();
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeToppingInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
next=iterator.next()
CakeTopping next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayer> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayerInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
List<CakeInfo> result = new ArrayList<>();
iterator=cakeBean.findAll().iterator()
Iterator<Cake> iterator = cakeBean.findAll().iterator();
Iterator<Cake> iterator = cakeBean.findAll().iterator();
cake=iterator.next()
Cake cake = iterator.next();
CakeToppingInfo cakeToppingInfo =
          new CakeToppingInfo(cake.getTopping().getId(), cake.getTopping().getName(), cake
              .getTopping().getCalories());
ArrayList<CakeLayerInfo> cakeLayerInfos = new ArrayList<>();
CakeInfo cakeInfo = new CakeInfo(cake.getId(), cakeToppingInfo, cakeLayerInfos);
int total = cakeToppingInfo != null ? cakeToppingInfo.calories : 0;
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final CakeBakingException exception = new CakeBakingException();
final String expectedMessage = "message";
final CakeBakingException exception = new CakeBakingException(expectedMessage);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialLayers=service.getAvailableLayers()
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
availableLayers=service.getAvailableLayers()
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialToppings=service.getAvailableToppings()
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
availableToppings=service.getAvailableToppings()
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeLayerInfo layer3 = new CakeLayerInfo("Layer3", 2000);
allCakes=service.getAllCakes()
final List<CakeInfo> allCakes = service.getAllCakes();
final List<CakeInfo> allCakes = service.getAllCakes();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeToppingInfo missingTopping = new CakeToppingInfo("Topping1", 1000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo missingLayer = new CakeLayerInfo("Layer2", 2000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final Cake cake = new Cake();
expectedId=Long.valueOf(1234L)
final Long expectedId = Long.valueOf(1234L);
final Cake cake = new Cake();
final CakeTopping expectedTopping = new CakeTopping("DummyTopping", 1000);
final Cake cake = new Cake();
final Set<CakeLayer> expectedLayers = new HashSet<>();
final Cake cake = new Cake();
final Set<CakeLayer> initialLayers = new HashSet<>();
final CakeLayer newLayer = new CakeLayer("layer3", 3000);
final Set<CakeLayer> expectedLayers = new HashSet<>();
final CakeTopping topping = new CakeTopping("topping", 20);
final CakeLayer layer = new CakeLayer("layer", 100);
final Cake cake = new Cake();
final String expected = "id=1234 topping=id=2345 name=topping calories=20 " 
            + "layers=[id=3456 name=layer calories=100]";
final List<CakeLayerInfo> layers = new ArrayList<>();
final List<CakeInfo> cakes = new ArrayList<>();
final CakeInfo cake = new CakeInfo(new CakeToppingInfo("topping", 1000), layers);
bakingService=mock(CakeBakingService.class)
final CakeBakingService bakingService = mock(CakeBakingService.class);
final CakeViewImpl cakeView = new CakeViewImpl(bakingService);
HolderNaive holderNaive = new HolderNaive();
heavy=holderNaive.getHeavy()
Heavy heavy = holderNaive.getHeavy();
HolderThreadSafe holderThreadSafe = new HolderThreadSafe();
another=holderThreadSafe.getHeavy()
Heavy another = holderThreadSafe.getHeavy();
Java8Holder java8Holder = new Java8Holder();
next=java8Holder.getHeavy()
Heavy next = java8Holder.getHeavy();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

holderField=HolderNaive.class.getDeclaredField("heavy")
final Field holderField = HolderNaive.class.getDeclaredField("heavy");
holderField=HolderThreadSafe.class.getDeclaredField("heavy")
final Field holderField = HolderThreadSafe.class.getDeclaredField("heavy");
holderField=Java8Holder.class.getDeclaredField("heavy")
final Field holderField = Java8Holder.class.getDeclaredField("heavy");
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
supplierClass=supplier.getClass()
final Class<? extends Supplier> supplierClass = supplier.getClass();
final Class<? extends Supplier> supplierClass = supplier.getClass();
instanceField=supplierClass.getDeclaredField("heavyInstance")
final Field instanceField = supplierClass.getDeclaredField("heavyInstance");
Party party = new PartyImpl();
Hobbit hobbit = new Hobbit();
Wizard wizard = new Wizard();
Rogue rogue = new Rogue();
Hunter hunter = new Hunter();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

partyMember1=mock(PartyMember.class)
final PartyMember partyMember1 = mock(PartyMember.class);
partyMember2=mock(PartyMember.class)
final PartyMember partyMember2 = mock(PartyMember.class);
final PartyImpl party = new PartyImpl();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
party=mock(Party.class)
final Party party = mock(Party.class);
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
memberClass=member.getClass()
final Class<? extends PartyMember> memberClass = member.getClass();
final Class<? extends PartyMember> memberClass = member.getClass();
Stack<StarMemento> states = new Stack<>();
Star star = new Star(StarType.SUN, 10000000, 500000);
StarMementoInternal state = new StarMementoInternal();
StarMementoInternal state = (StarMementoInternal) memento;
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final Star star = new Star(StarType.SUN, 1, 2);
final Star star = new Star(StarType.SUN, 1, 2);
firstMemento=star.getMemento()
final StarMemento firstMemento = star.getMemento();
secondMemento=star.getMemento()
final StarMemento secondMemento = star.getMemento();
thirdMemento=star.getMemento()
final StarMemento thirdMemento = star.getMemento();
CamelContext context = new DefaultCamelContext();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

GiantModel giant = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
GiantView view = new GiantView();
GiantController controller = new GiantController(giant, view);
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantView view = new GiantView();
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
FileLoader loader = new FileLoader();
FileSelectorJFrame jFrame = new FileSelectorJFrame();
FileSelectorPresenter presenter = new FileSelectorPresenter(jFrame);
BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)));
StringBuilder sb = new StringBuilder();
String line;
JScrollPane pane = new JScrollPane(area);
data=loader.loadData()
String data = loader.loadData();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final FileLoader fileLoader = new FileLoader();
String expectedFile = "Stamatis";
User user = new User("user", 24, Sex.FEMALE, "foobar.com");
IllegalStateException e = new IllegalStateException();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

User tom = new User(null, 21, Sex.MALE, "tom@foo.bar");
User john = new User("John", 17, Sex.MALE, "john@qwe.bar");
User sarah = new User("Sarah", 42, Sex.FEMALE, "sarah@det.org");
validated=Validator.of(sarah).validate(getName,Objects,"name cannot be null").validate(User,age-- > age > 21,"user is underaged").validate(User,sex-- > sex == Sex.FEMALE,"user is not female").validate(User,email-- > email.contains("@"),"email does not contain @ sign").get()
User validated = Validator.of(sarah).validate(User::getName, Objects::nonNull, "name cannot be null")
        .validate(User::getAge, age -> age > 21, "user is underaged")
        .validate(User::getSex, sex -> sex == Sex.FEMALE, "user is not female")
        .validate(User::getEmail, email -> email.contains("@"), "email does not contain @ sign")
        .get();
LoadBalancer loadBalancer1 = new LoadBalancer();
LoadBalancer loadBalancer2 = new LoadBalancer();
server=servers.get(lastServedId++)
Server server = servers.get(lastServedId++);

 Generics pattern public class LoadBalancer was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2


 Generics pattern public class Request was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2


 Generics pattern public class Server was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final LoadBalancer firstBalancer = new LoadBalancer();
final LoadBalancer secondBalancer = new LoadBalancer();
server=mock(Server.class)
final Server server = mock(Server.class);
final LoadBalancer loadBalancer = new LoadBalancer();
final Request request = new Request("test");
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

nazgul=Nazgul.getInstance(name)
final Nazgul nazgul = Nazgul.getInstance(name);
obj=container.newTransientInstance(SimpleObject.class)
final SimpleObject obj = container.newTransientInstance(SimpleObject.class);
final SimpleObject simpleObject = new SimpleObject();
seq=context.sequence("create")
final Sequence seq = context.sequence("create");
obj=simpleObjects.create("Foobar")
final SimpleObject obj = simpleObjects.create("Foobar");
all=Lists.newArrayList()
final List<SimpleObject> all = Lists.newArrayList();
list=simpleObjects.listAll()
final List<SimpleObject> list = simpleObjects.listAll();
final List<SimpleObject> list = simpleObjects.listAll();
String name = "Foobar";
paramName=checkParam("name",ec,String.class)
String paramName = checkParam("name", ec, String.class);
paramNumber=defaultParam("number",ec,3)
final int paramNumber = defaultParam("number", ec, 3);
fs=new SimpleObjectCreate().setName(names.get(i))
final SimpleObjectCreate fs = new SimpleObjectCreate().setName(names.get(i));
isft=IsisSystemForTest.getElseNull()
IsisSystemForTest isft = IsisSystemForTest.getElseNull();
final IsisConfigurationForJdoIntegTests testConfiguration =
          new IsisConfigurationForJdoIntegTests();
findAll=service(SimpleObjects.class).listAll()
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
title=container.titleOf(simpleObjectWrapped)
final String title = container.titleOf(simpleObjectWrapped);
RecreateSimpleObjects fs = new RecreateSimpleObjects();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
simpleObject=wrap(all.get(0))
SimpleObject simpleObject = wrap(all.get(0));
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
causalChain=Throwables.getCausalChain(item)
final List<Throwable> causalChain = Throwables.getCausalChain(item);
final List<Throwable> causalChain = Throwables.getCausalChain(item);
settings=Bootstrap.getSettings()
IBootstrapSettings settings = Bootstrap.getSettings();
final AuthenticatedWebSessionForIsis s =
        (AuthenticatedWebSessionForIsis) super.newSession(request, response);
requestParameters=request.getRequestParameters()
IRequestParameters requestParameters = request.getRequestParameters();
user=requestParameters.getParameterValue("user")
final org.apache.wicket.util.string.StringValue user =
        requestParameters.getParameterValue("user");
password=requestParameters.getParameterValue("pass")
final org.apache.wicket.util.string.StringValue password =
        requestParameters.getParameterValue("pass");
uname=servletRequest.getParameter("user")
String uname = servletRequest.getParameter("user");
final Module isisDefaults = super.newIsisWicketModule();
final Module overrides = new AbstractModule() {
      @Override
      protected void configure() {
        bind(String.class).annotatedWith(Names.named("applicationName")).toInstance("Simple App");
        bind(String.class).annotatedWith(Names.named("applicationCss")).toInstance(
            "css/application.css");
        bind(String.class).annotatedWith(Names.named("applicationJs")).toInstance(
            "scripts/application.js");
        bind(String.class).annotatedWith(Names.named("welcomeMessage")).toInstance(
            readLines(getClass(), "welcome.html"));
        bind(String.class).annotatedWith(Names.named("aboutMessage")).toInstance("Simple App");
        bind(InputStream.class).annotatedWith(Names.named("metaInfManifest")).toProvider(
            Providers.of(getServletContext().getResourceAsStream("/META-INF/MANIFEST.MF")));
      }
    };
readLines=Resources.readLines(Resources.getResource(contextClass,resourceName),Charset.defaultCharset())
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
Node root =
        new NodeImpl("1", new NodeImpl("11", new NodeImpl("111", NullNode.getInstance(),
            NullNode.getInstance()), NullNode.getInstance()), new NodeImpl("12",
            NullNode.getInstance(), new NodeImpl("122", NullNode.getInstance(),
                NullNode.getInstance())));
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

instance=NullNode.getInstance()
final NullNode instance = NullNode.getInstance();
node=NullNode.getInstance()
final NullNode node = NullNode.getInstance();
final NodeImpl level1B = new NodeImpl("level1_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2B = new NodeImpl("level2_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3A = new NodeImpl("level3_a", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3B = new NodeImpl("level3_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2A = new NodeImpl("level2_a", level3A, level3B);
final NodeImpl level1A = new NodeImpl("level1_a", level2A, level2B);
inOrder=Mockito.inOrder(getStdOutMock())
final InOrder inOrder = Mockito.inOrder(getStdOutMock());
level1=TREE_ROOT.getLeft()
final Node level1 = TREE_ROOT.getLeft();
level2=level1.getLeft()
final Node level2 = level1.getLeft();
level3=level2.getLeft()
final Node level3 = level2.getLeft();
level1=TREE_ROOT.getRight()
final Node level1 = TREE_ROOT.getRight();
OliphauntPool pool = new OliphauntPool();
oliphaunt1=pool.checkOut()
Oliphaunt oliphaunt1 = pool.checkOut();
oliphaunt2=pool.checkOut()
Oliphaunt oliphaunt2 = pool.checkOut();
oliphaunt3=pool.checkOut()
Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunt5=pool.checkOut()
Oliphaunt oliphaunt5 = pool.checkOut();
instance=available.iterator().next()
T instance = available.iterator().next();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final OliphauntPool pool = new OliphauntPool();
expectedOliphaunt=pool.checkOut()
final Oliphaunt expectedOliphaunt = pool.checkOut();
oliphaunt=pool.checkOut()
final Oliphaunt oliphaunt = pool.checkOut();
final OliphauntPool pool = new OliphauntPool();
firstOliphaunt=pool.checkOut()
final Oliphaunt firstOliphaunt = pool.checkOut();
secondOliphaunt=pool.checkOut()
final Oliphaunt secondOliphaunt = pool.checkOut();
oliphaunt3=pool.checkOut()
final Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
final Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunts=Arrays.asList(pool.checkOut(),pool.checkOut())
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
Weather weather = new Weather();
GWeather gWeather = new GWeather();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final ArrayList<Object[]> testData = new ArrayList<>();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
observer=this.factory.get()
final O observer = this.factory.get();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
observer=this.factory.get()
final O observer = this.factory.get();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
MessageQueue queue = new SimpleMessageQueue(10000);
final Producer producer = new Producer("PRODUCER_1", queue);
final Consumer consumer = new Consumer("CONSUMER_1", queue);
Message msg;
sender=msg.getHeader(Headers.SENDER)
String sender = msg.getHeader(Headers.SENDER);
body=msg.getBody()
String body = msg.getBody();
Message msg = new SimpleMessage();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final Message[] messages = new Message[]{
        createMessage("you", "Hello!"),
        createMessage("me", "Hi!"),
        Message.POISON_PILL,
        createMessage("late_for_the_party", "Hello? Anyone here?"),
    };
final MessageQueue queue = new SimpleMessageQueue(messages.length);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final SimpleMessage msg = new SimpleMessage();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
messageCaptor=ArgumentCaptor.forClass(Message.class)
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
message=messageCaptor.getValue()
final Message message = messageCaptor.getValue();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
final SimpleMessage message = new SimpleMessage();
final String senderName = "test";
final SimpleMessage message = new SimpleMessage();
headers=message.getHeaders()
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
Stew stew = new Stew(1, 2, 3, 4);
ImmutableStew immutableStew = new ImmutableStew(2, 4, 3, 6);
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final Stew stew = new Stew(1, 2, 3, 4);
final String message = "Mixing the stew we find: 1 potatoes, 2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Stew stew = new Stew(1, 2, 3, 4);
final ImmutableStew stew = new ImmutableStew(1, 2, 3, 4);
final String expectedMessage = "Mixing the immutable stew we find: 1 potatoes, "
        + "2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ItemQueue queue = new ItemQueue();
executorService=Executors.newFixedThreadPool(5)
ExecutorService executorService = Executors.newFixedThreadPool(5);
final Producer producer = new Producer("Producer_" + i, queue);
final Consumer consumer = new Consumer("Consumer_" + i, queue);
item=queue.take()
Item item = queue.take();
Item item = new Item(name, itemId++);
Random random = new Random();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

queue=spy(new ItemQueue())
final ItemQueue queue = spy(new ItemQueue());
final Consumer consumer = new Consumer("consumer", queue);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
queue=mock(ItemQueue.class)
final ItemQueue queue = mock(ItemQueue.class);
final Producer producer = new Producer("producer", queue);
Prototype charProto = new Character();
Character mageProto = new Character(Type.MAGE, charProto);
Character warProto = new Character(Type.WARRIOR, charProto);
Character rogueProto = new Character(Type.ROGUE, charProto);
Character mag = new Character("Player_1", mageProto);
Character warrior = new Character("Player_2", warProto);
Character rogue = new Character("Player_3", rogueProto);
Character rogueDouble = new Character("Player_4", rogue);
containsValue=properties.containsKey(stat)
boolean containsValue = properties.containsKey(stat);
StringBuilder builder = new StringBuilder();
value=this.get(stat)
Integer value = this.get(stat);
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final Character prototype = new Character();
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character mage = new Character(Type.MAGE, prototype);
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
HeroFactory factory;
Mage mage;
Warlord warlord;
Beast beast;
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

mage=mock(Mage.class)
final Mage mage = mock(Mage.class);
warlord=mock(Warlord.class)
final Warlord warlord = mock(Warlord.class);
beast=mock(Beast.class)
final Beast beast = mock(Beast.class);
final HeroFactoryImpl factory = new HeroFactoryImpl(mage, warlord, beast);
clone=this.testedPrototype.clone()
final Object clone = this.testedPrototype.clone();
WizardTowerProxy tower = new WizardTowerProxy();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final String[] wizardNames = {"Gandalf", "Dumbledore", "Oz", "Merlin"};
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTowerProxy tower = new WizardTowerProxy();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTower tower = new WizardTower();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
CamelContext context = new DefaultCamelContext();
template=context.createProducerTemplate()
ProducerTemplate template = context.createProducerTemplate();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

LoggingHandler loggingHandler = new LoggingHandler();
NioServerSocketChannel channel = new NioServerSocketChannel(port, handler);
NioDatagramChannel channel = new NioDatagramChannel(port, handler);
AppClient appClient = new AppClient();
outputStream=socket.getOutputStream()
OutputStream outputStream = socket.getOutputStream();
PrintWriter writer = new PrintWriter(outputStream);
byte[] data = new byte[1024];
read=inputStream.read(data,0,data.length)
int read = inputStream.read(data, 0, data.length);
String message = clientName + " - Log request: " + i;
DatagramPacket request =
              new DatagramPacket(message.getBytes(), message.getBytes().length, remoteAddress);
byte[] data = new byte[1024];
DatagramPacket reply = new DatagramPacket(data, data.length);
DatagramPacket datagram = (DatagramPacket) readObject;
DatagramPacket replyPacket = new DatagramPacket(ByteBuffer.wrap(ACK));
buffer=ByteBuffer.wrap(ACK)
ByteBuffer buffer = ByteBuffer.wrap(ACK);
pendingWrites=channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
pendingWrite=pendingWrites.poll()
Object pendingWrite = pendingWrites.poll();
pendingWrites=this.channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
sender=((DatagramChannel)key.channel()).receive(buffer)
SocketAddress sender = ((DatagramChannel) key.channel()).receive(buffer);
DatagramPacket packet = new DatagramPacket(buffer);
DatagramPacket pendingPacket = (DatagramPacket) pendingWrite;
key=channel.getJavaChannel().register(selector,channel.getInterestedOps())
SelectionKey key = channel.getJavaChannel().register(selector, channel.getInterestedOps());
keys=selector.selectedKeys()
Set<SelectionKey> keys = selector.selectedKeys();
Set<SelectionKey> keys = selector.selectedKeys();
iterator=keys.iterator()
Iterator<SelectionKey> iterator = keys.iterator();
Iterator<SelectionKey> iterator = keys.iterator();
key=iterator.next()
SelectionKey key = iterator.next();
iterator=pendingCommands.iterator()
Iterator<Runnable> iterator = pendingCommands.iterator();
Iterator<Runnable> iterator = pendingCommands.iterator();
command=iterator.next()
Runnable command = iterator.next();
AbstractNioChannel channel = (AbstractNioChannel) key.attachment();
readObject=((AbstractNioChannel)key.attachment()).read(key)
Object readObject = ((AbstractNioChannel) key.attachment()).read(key);
ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();
socketChannel=serverSocketChannel.accept()
SocketChannel socketChannel = serverSocketChannel.accept();
readKey=socketChannel.register(selector,SelectionKey.OP_READ)
SelectionKey readKey = socketChannel.register(selector, SelectionKey.OP_READ);
SocketChannel socketChannel = (SocketChannel) key.channel();
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
read=socketChannel.read(buffer)
int read = socketChannel.read(buffer);
ByteBuffer pendingBuffer = (ByteBuffer) pendingWrite;
App app = new App(new ThreadPoolDispatcher(2));
AppClient client = new AppClient();
App app = new App(new SameThreadDispatcher());
AppClient client = new AppClient();
executeService=Executors.newFixedThreadPool(10)
ExecutorService executeService = Executors.newFixedThreadPool(10);
ReaderWriterLock lock = new ReaderWriterLock();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
reader1=spy(new Reader("Reader 1",lock.readLock()))
Reader reader1 = spy(new Reader("Reader 1", lock.readLock()));
reader2=spy(new Reader("Reader 2",lock.readLock()))
Reader reader2 = spy(new Reader("Reader 2", lock.readLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
writer1=spy(new Writer("Writer 1",lock.writeLock()))
Writer writer1 = spy(new Writer("Writer 1", lock.writeLock()));
writer2=spy(new Writer("Writer 2",lock.writeLock()))
Writer writer2 = spy(new Writer("Writer 2", lock.writeLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
        "applicationContext.xml");
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
BasicDataSource basicDataSource = new BasicDataSource();
LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();
Properties properties = new Properties();
JpaTransactionManager transactionManager = new JpaTransactionManager();
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
        AppConfig.class);
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
final int prime = 31;
int result = 1;
Person other = (Person) obj;
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
resultSet=dataSource.getConnection().createStatement().executeQuery("SELECT 1")
ResultSet resultSet = dataSource.getConnection().createStatement().executeQuery("SELECT 1");
String result = null;
String expected = "1";
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
King k = new King();
Queen q = new Queen();
ArrayList<Royalty> guests = new ArrayList<>();

 Generics pattern new ArrayList<>() was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

boolean anotherDay = true;
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
goodMoodRoyalty=mock(Royalty.class)
final Royalty goodMoodRoyalty = mock(Royalty.class);
badMoodRoyalty=mock(Royalty.class)
final Royalty badMoodRoyalty = mock(Royalty.class);
final ArrayList<Royalty> goodCompany = new ArrayList<>();
final ArrayList<Royalty> badCompany = new ArrayList<>();
Spell spell1 = new Spell("Ice dart");
Spell spell2 = new Spell("Invisibility");
Spell spell3 = new Spell("Stun bolt");
Spell spell4 = new Spell("Confusion");
Spell spell5 = new Spell("Darkness");
Spell spell6 = new Spell("Fireball");
Spell spell7 = new Spell("Enchant weapon");
Spell spell8 = new Spell("Rock armour");
Spell spell9 = new Spell("Light");
Spell spell10 = new Spell("Bee swarm");
Spell spell11 = new Spell("Haste");
Spell spell12 = new Spell("Levitation");
Spell spell13 = new Spell("Magic lock");
Spell spell14 = new Spell("Summon hell bat");
Spell spell15 = new Spell("Water walking");
Spell spell16 = new Spell("Magic storm");
Spell spell17 = new Spell("Entangle");
SpellDao spellDao = new SpellDaoImpl();
SpellbookDao spellbookDao = new SpellbookDaoImpl();
Spellbook spellbook1 = new Spellbook("Book of Orgymon");
Spellbook spellbook2 = new Spellbook("Book of Aras");
Spellbook spellbook3 = new Spellbook("Book of Kritior");
Spellbook spellbook4 = new Spellbook("Book of Tamaex");
Spellbook spellbook5 = new Spellbook("Book of Idores");
Spellbook spellbook6 = new Spellbook("Book of Opaen");
Spellbook spellbook7 = new Spellbook("Book of Kihione");
WizardDao wizardDao = new WizardDaoImpl();
Wizard wizard1 = new Wizard("Aderlard Boud");
Wizard wizard2 = new Wizard("Anaxis Bajraktari");
Wizard wizard3 = new Wizard("Xuban Munoa");
Wizard wizard4 = new Wizard("Blasius Dehooge");
MagicService service =
        new MagicServiceImpl(new WizardDaoImpl(), new SpellbookDaoImpl(), new SpellDaoImpl());
wizardsWithSpellbook=service.findWizardsWithSpellbook("Book of Idores")
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
wizardsWithSpell=service.findWizardsWithSpell("Fireball")
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
List<E> result = null;
List<E> result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
spellbook=spellbookDao.findByName(name)
Spellbook spellbook = spellbookDao.findByName(name);
spell=spellDao.findByName(name)
Spell spell = spellDao.findByName(name);
spellbook=spell.getSpellbook()
Spellbook spellbook = spell.getSpellbook();
session=getSession()
Session session = getSession();
Transaction tx = null;
Spell result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Spellbook result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Wizard result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

className=dao.persistentClass.getSimpleName()
final String className = dao.persistentClass.getSimpleName();
entityName=String.format("%s%d",className,ID_GENERATOR.incrementAndGet())
final String entityName = String.format("%s%d", className, ID_GENERATOR.incrementAndGet());
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
byId=this.dao.find(entity.getId())
final E byId = this.dao.find(entity.getId());
originalEntities=this.dao.findAll()
final List<E> originalEntities = this.dao.findAll();
final List<E> originalEntities = this.dao.findAll();
entitiesLeft=this.dao.findAll()
final List<E> entitiesLeft = this.dao.findAll();
final List<E> entitiesLeft = this.dao.findAll();
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
expectedId=Long.valueOf(1)
final Long expectedId = Long.valueOf(1);
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
final String expectedName = "new name";
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
final String bookname = "bookname";
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
final Set<Wizard> wizards = new HashSet<>();
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpellbook(bookname)
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final Set<Wizard> wizards = new HashSet<>();
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spell=mock(Spell.class)
final Spell spell = mock(Spell.class);
final String spellName = "spellname";
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpell(spellName)
final List<Wizard> result = service.findWizardsWithSpell(spellName);
final List<Wizard> result = service.findWizardsWithSpell(spellName);
dao=getDao()
final SpellDaoImpl dao = getDao();
allSpells=dao.findAll()
final List<Spell> allSpells = dao.findAll();
final List<Spell> allSpells = dao.findAll();
spellByName=dao.findByName(spell.getName())
final Spell spellByName = dao.findByName(spell.getName());
dao=getDao()
final SpellbookDaoImpl dao = getDao();
allBooks=dao.findAll()
final List<Spellbook> allBooks = dao.findAll();
final List<Spellbook> allBooks = dao.findAll();
spellByName=dao.findByName(book.getName())
final Spellbook spellByName = dao.findByName(book.getName());
dao=getDao()
final WizardDaoImpl dao = getDao();
allWizards=dao.findAll()
final List<Wizard> allWizards = dao.findAll();
final List<Wizard> allWizards = dao.findAll();
byName=dao.findByName(spell.getName())
final Wizard byName = dao.findByName(spell.getName());
service=ServiceLocator.getService("jndi/serviceA")
Service service = ServiceLocator.getService("jndi/serviceA");
Service cachedService = null;
serviceObj=serviceCache.getService(serviceJndiName)
Service serviceObj = serviceCache.getService(serviceJndiName);
InitContext ctx = new InitContext();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final String[] serviceNames = new String[]{
        "jndi/serviceA", "jndi/serviceB"
    };
service=ServiceLocator.getService(serviceName)
final Service service = ServiceLocator.getService(serviceName);
ivoryTower1=IvoryTower.getInstance()
IvoryTower ivoryTower1 = IvoryTower.getInstance();
ivoryTower2=IvoryTower.getInstance()
IvoryTower ivoryTower2 = IvoryTower.getInstance();
threadSafeIvoryTower1=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower1 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
threadSafeIvoryTower2=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower2 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
EnumIvoryTower enumIvoryTower1 = EnumIvoryTower.INSTANCE;
EnumIvoryTower enumIvoryTower2 = EnumIvoryTower.INSTANCE;
dcl1=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();
dcl2=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();
demandHolderIdiom=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom =
        InitializingOnDemandHolderIdiom.getInstance();
demandHolderIdiom2=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom2 =
        InitializingOnDemandHolderIdiom.getInstance();
ThreadSafeDoubleCheckLocking result = instance;
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

instance1=this.singletonInstanceMethod.get()
S instance1 = this.singletonInstanceMethod.get();
instance2=this.singletonInstanceMethod.get()
S instance2 = this.singletonInstanceMethod.get();
instance3=this.singletonInstanceMethod.get()
S instance3 = this.singletonInstanceMethod.get();
final List<Callable<S>> tasks = new ArrayList<>();
int i = 0
creatures=Arrays.asList(new Goblin(),new Octopus(),new Dragon(),new Shark(),new Troll(),new KillerBee())
List<Creature> creatures =
        Arrays.asList(new Goblin(), new Octopus(), new Dragon(), new Shark(), new Troll(),
            new KillerBee());
walkingCreatures=creatures.stream().filter(new MovementSelector(Movement.WALKING)).collect(Collectors.toList())
List<Creature> walkingCreatures =
        creatures.stream().filter(new MovementSelector(Movement.WALKING))
            .collect(Collectors.toList());
darkCreatures=creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList())
List<Creature> darkCreatures =
        creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList());
redAndFlyingCreatures=creatures.stream().filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING))).collect(Collectors.toList())
List<Creature> redAndFlyingCreatures =
        creatures.stream()
            .filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING)))
            .collect(Collectors.toList());
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

toString=this.testedCreature.toString()
final String toString = this.testedCreature.toString();
greenCreature=mock(Creature.class)
final Creature greenCreature = mock(Creature.class);
redCreature=mock(Creature.class)
final Creature redCreature = mock(Creature.class);
final ColorSelector greenSelector = new ColorSelector(Color.GREEN);
swimmingCreature=mock(Creature.class)
final Creature swimmingCreature = mock(Creature.class);
flyingCreature=mock(Creature.class)
final Creature flyingCreature = mock(Creature.class);
final MovementSelector swimmingSelector = new MovementSelector(Movement.SWIMMING);
normalCreature=mock(Creature.class)
final Creature normalCreature = mock(Creature.class);
smallCreature=mock(Creature.class)
final Creature smallCreature = mock(Creature.class);
final SizeSelector normalSelector = new SizeSelector(Size.NORMAL);
Mammoth mammoth = new Mammoth();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

inOrder=Mockito.inOrder(this.stdOutMock)
final InOrder inOrder = Mockito.inOrder(this.stdOutMock);
final Mammoth mammoth = new Mammoth();
toString=new Mammoth().toString()
final String toString = new Mammoth().toString();
warrior=CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin").withWeapon("Sword").noAbilities().build()
Character warrior =
        CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin")
            .withWeapon("Sword").noAbilities().build();
mage=CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer").withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport").noMoreAbilities().build()
Character mage =
        CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer")
            .withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport")
            .noMoreAbilities().build();
thief=CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build()
Character thief =
        CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build();
StringBuilder sb = new StringBuilder();
Character character = new Character(name);
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").withAbility("invisibility").withAbility("wisdom").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .withAbility("invisibility")
        .withAbility("wisdom")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").noSpell().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .noSpell()
        .build();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .noAbilities()
        .build();
character=CharacterStepBuilder.newBuilder().name("Cuauhtemoc").fighterClass("aztec").withWeapon("spear").withAbility("speed").withAbility("strength").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Cuauhtemoc")
        .fighterClass("aztec")
        .withWeapon("spear")
        .withAbility("speed")
        .withAbility("strength")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Poor warrior").fighterClass("none").noWeapon().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Poor warrior")
        .fighterClass("none")
        .noWeapon()
        .build();
character=CharacterStepBuilder.newBuilder().name("Weak warrior").fighterClass("none").withWeapon("Slingshot").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Weak warrior")
        .fighterClass("none")
        .withWeapon("Slingshot")
        .noAbilities()
        .build();
DragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

strategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy strategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(strategy);
initialStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy initialStrategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(initialStrategy);
newStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy newStrategy = mock(DragonSlayingStrategy.class);
HalflingThief thief = new HalflingThief(new HitAndRunMethod());
target=pickTarget()
String target = pickTarget();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

method=mock(StealingMethod.class)
final StealingMethod method = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(method);
initialMethod=mock(StealingMethod.class)
final StealingMethod initialMethod = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(initialMethod);
newMethod=mock(StealingMethod.class)
final StealingMethod newMethod = mock(StealingMethod.class);
inOrder=inOrder(this.stdOutMock)
final InOrder inOrder = inOrder(this.stdOutMock);
List<Task> tasks = new ArrayList<>();
executor=Executors.newFixedThreadPool(3)
ExecutorService executor = Executors.newFixedThreadPool(3);
Runnable worker = new Worker(tasks.get(i));

 Generics pattern new ArrayList<>() was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

service=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService service = Executors.newFixedThreadPool(THREAD_COUNT);
final List<Callable<Integer>> tasks = new ArrayList<>();
int i = 0
task=mock(Task.class)
final Task task = mock(Task.class);
final Worker worker = new Worker(task);
RainbowFish fishV1 = new RainbowFish("Zed", 10, 11, 12);
deserializedFishV1=RainbowFishSerializer.readV1("fish1.out")
RainbowFish deserializedFishV1 = RainbowFishSerializer.readV1("fish1.out");
RainbowFishV2 fishV2 = new RainbowFishV2("Scar", 5, 12, 15, true, true, true);
deserializedFishV2=RainbowFishSerializer.readV1("fish2.out")
RainbowFish deserializedFishV2 = RainbowFishSerializer.readV1("fish2.out");
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
FileInputStream fileIn = new FileInputStream(filename);
ObjectInputStream objIn = new ObjectInputStream(fileIn);
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
String[] args = {};
File file1 = new File("fish1.out");
File file2 = new File("fish2.out");

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
final RainbowFish fish = new RainbowFish("name", 1, 2, 3);
final RainbowFishV2 fish = new RainbowFishV2("name", 1, 2, 3, false, true, false);
BallItem ballItem = new BallItem();
BallThread ballThread = new BallThread();
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
inOrder=inOrder(ballThread)
final InOrder inOrder = inOrder(ballThread);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
exceptionHandler=mock(UncaughtExceptionHandler.class)
final UncaughtExceptionHandler exceptionHandler = mock(UncaughtExceptionHandler.class);
statA=HeroStat.valueOf(10,5,0)
HeroStat statA = HeroStat.valueOf(10, 5, 0);
statB=HeroStat.valueOf(10,5,0)
HeroStat statB = HeroStat.valueOf(10, 5, 0);
statC=HeroStat.valueOf(5,1,8)
HeroStat statC = HeroStat.valueOf(5, 1, 8);
final int prime = 31;
int result = 1;
HeroStat other = (HeroStat) obj;
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatC=HeroStat.valueOf(3,9,8)
HeroStat heroStatC = HeroStat.valueOf(3, 9, 8);
Commander commander =
        new Commander(new Sergeant(new Soldier(), new Soldier(), new Soldier()), new Sergeant(
            new Soldier(), new Soldier(), new Soldier()));
String[] args = {};

 Generics pattern public class AppTest was added at revision e09dda60371d5c03e946b4f68759adef9926b4f2

final Unit[] children = new Unit[5];
unit=this.factory.apply(children)
final U unit = this.factory.apply(children);
visitor=mock(UnitVisitor.class)
final UnitVisitor visitor = mock(UnitVisitor.class);

Diff of e09dda60371d5c03e946b4f68759adef9926b4f2 and 7ab799c452a31584e52f1f33535aac80ed0c871e:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 212
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 6
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision e09dda60371d5c03e946b4f68759adef9926b4f2 to 7ab799c452a31584e52f1f33535aac80ed0c871e

************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null

****Parsing for addition at revision 2238369fc0d61cf45b23a1db3c4ed82163d54219****

Added App.java to .\/java-design-patterns\ repository source files.
Added Army.java to .\/java-design-patterns\ repository source files.
Added Castle.java to .\/java-design-patterns\ repository source files.
Added ElfArmy.java to .\/java-design-patterns\ repository source files.
Added ElfCastle.java to .\/java-design-patterns\ repository source files.
Added ElfKing.java to .\/java-design-patterns\ repository source files.
Added ElfKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added KingdomFactory.java to .\/java-design-patterns\ repository source files.
Added OrcArmy.java to .\/java-design-patterns\ repository source files.
Added OrcCastle.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added AbstractFactoryTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BattleFishingBoat.java to .\/java-design-patterns\ repository source files.
Added BattleShip.java to .\/java-design-patterns\ repository source files.
Added Captain.java to .\/java-design-patterns\ repository source files.
Added FishingBoat.java to .\/java-design-patterns\ repository source files.
Added AdapterPatternTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsyncCallback.java to .\/java-design-patterns\ repository source files.
Added AsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AsyncResult.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Excalibur.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added MagicWeapon.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Mjollnir.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Stormbringer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Armor.java to .\/java-design-patterns\ repository source files.
Added HairColor.java to .\/java-design-patterns\ repository source files.
Added HairType.java to .\/java-design-patterns\ repository source files.
Added Hero.java to .\/java-design-patterns\ repository source files.
Added Profession.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegate.java to .\/java-design-patterns\ repository source files.
Added BusinessLookup.java to .\/java-design-patterns\ repository source files.
Added BusinessService.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added EjbService.java to .\/java-design-patterns\ repository source files.
Added JmsService.java to .\/java-design-patterns\ repository source files.
Added ServiceType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegateTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppManager.java to .\/java-design-patterns\ repository source files.
Added CacheStore.java to .\/java-design-patterns\ repository source files.
Added CachingPolicy.java to .\/java-design-patterns\ repository source files.
Added DbManager.java to .\/java-design-patterns\ repository source files.
Added LruCache.java to .\/java-design-patterns\ repository source files.
Added UserAccount.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CachingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Callback.java to .\/java-design-patterns\ repository source files.
Added LambdasApp.java to .\/java-design-patterns\ repository source files.
Added SimpleTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CallbackTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added OrcCommander.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcOfficer.java to .\/java-design-patterns\ repository source files.
Added OrcSoldier.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added RequestHandler.java to .\/java-design-patterns\ repository source files.
Added RequestType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OrcKingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added InvisibilitySpell.java to .\/java-design-patterns\ repository source files.
Added ShrinkSpell.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added Visibility.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Letter.java to .\/java-design-patterns\ repository source files.
Added LetterComposite.java to .\/java-design-patterns\ repository source files.
Added Messenger.java to .\/java-design-patterns\ repository source files.
Added Sentence.java to .\/java-design-patterns\ repository source files.
Added Word.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MessengerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Customer.java to .\/java-design-patterns\ repository source files.
Added CustomerDao.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added CustomerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hostile.java to .\/java-design-patterns\ repository source files.
Added SmartHostile.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SmartHostileTest.java to .\/java-design-patterns\ repository source files.
Added TrollTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Printer.java to .\/java-design-patterns\ repository source files.
Added PrinterController.java to .\/java-design-patterns\ repository source files.
Added CanonPrinter.java to .\/java-design-patterns\ repository source files.
Added EpsonPrinter.java to .\/java-design-patterns\ repository source files.
Added HpPrinter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DelegateTest.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizard.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GuiceWizard.java to .\/java-design-patterns\ repository source files.
Added OldTobyTobacco.java to .\/java-design-patterns\ repository source files.
Added RivendellTobacco.java to .\/java-design-patterns\ repository source files.
Added SecondBreakfastTobacco.java to .\/java-design-patterns\ repository source files.
Added SimpleWizard.java to .\/java-design-patterns\ repository source files.
Added Tobacco.java to .\/java-design-patterns\ repository source files.
Added TobaccoModule.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizardTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GuiceWizardTest.java to .\/java-design-patterns\ repository source files.
Added SimpleWizardTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Inventory.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added InventoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroid.java to .\/java-design-patterns\ repository source files.
Added GameObject.java to .\/java-design-patterns\ repository source files.
Added Meteoroid.java to .\/java-design-patterns\ repository source files.
Added Rectangle.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIss.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMir.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CollisionTest.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroidTest.java to .\/java-design-patterns\ repository source files.
Added MeteoroidTest.java to .\/java-design-patterns\ repository source files.
Added RectangleTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIssTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMirTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added EventEmitter.java to .\/java-design-patterns\ repository source files.
Added EventObserver.java to .\/java-design-patterns\ repository source files.
Added KingJoffrey.java to .\/java-design-patterns\ repository source files.
Added KingsHand.java to .\/java-design-patterns\ repository source files.
Added LordBaelish.java to .\/java-design-patterns\ repository source files.
Added LordVarys.java to .\/java-design-patterns\ repository source files.
Added Scout.java to .\/java-design-patterns\ repository source files.
Added Weekday.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EventEmitterTest.java to .\/java-design-patterns\ repository source files.
Added EventTest.java to .\/java-design-patterns\ repository source files.
Added KingJoffreyTest.java to .\/java-design-patterns\ repository source files.
Added KingsHandTest.java to .\/java-design-patterns\ repository source files.
Added LordBaelishTest.java to .\/java-design-patterns\ repository source files.
Added LordVarysTest.java to .\/java-design-patterns\ repository source files.
Added ScoutTest.java to .\/java-design-patterns\ repository source files.
Added WeekdayTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEvent.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEvent.java to .\/java-design-patterns\ repository source files.
Added EventDispatcher.java to .\/java-design-patterns\ repository source files.
Added Handler.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventTest.java to .\/java-design-patterns\ repository source files.
Added EventDispatcherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileWriterAction.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DwarvenCartOperator.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldDigger.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacade.java to .\/java-design-patterns\ repository source files.
Added DwarvenMineWorker.java to .\/java-design-patterns\ repository source files.
Added DwarvenTunnelDigger.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacadeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Axe.java to .\/java-design-patterns\ repository source files.
Added Bow.java to .\/java-design-patterns\ repository source files.
Added Builder.java to .\/java-design-patterns\ repository source files.
Added Spear.java to .\/java-design-patterns\ repository source files.
Added Sword.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponFactory.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryKitTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Blacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfBlacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfWeapon.java to .\/java-design-patterns\ repository source files.
Added OrcBlacksmith.java to .\/java-design-patterns\ repository source files.
Added OrcWeapon.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added UserGroup.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added UserGroupTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FluentIterable.java to .\/java-design-patterns\ repository source files.
Added DecoratingIterator.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterable.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterable.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added ActionType.java to .\/java-design-patterns\ repository source files.
Added Content.java to .\/java-design-patterns\ repository source files.
Added ContentAction.java to .\/java-design-patterns\ repository source files.
Added MenuAction.java to .\/java-design-patterns\ repository source files.
Added MenuItem.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added ContentStore.java to .\/java-design-patterns\ repository source files.
Added MenuStore.java to .\/java-design-patterns\ repository source files.
Added Store.java to .\/java-design-patterns\ repository source files.
Added ContentView.java to .\/java-design-patterns\ repository source files.
Added MenuView.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ContentTest.java to .\/java-design-patterns\ repository source files.
Added MenuItemTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DispatcherTest.java to .\/java-design-patterns\ repository source files.
Added ContentStoreTest.java to .\/java-design-patterns\ repository source files.
Added MenuStoreTest.java to .\/java-design-patterns\ repository source files.
Added ContentViewTest.java to .\/java-design-patterns\ repository source files.
Added MenuViewTest.java to .\/java-design-patterns\ repository source files.
Added AlchemistShop.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HealingPotion.java to .\/java-design-patterns\ repository source files.
Added HolyWaterPotion.java to .\/java-design-patterns\ repository source files.
Added InvisibilityPotion.java to .\/java-design-patterns\ repository source files.
Added PoisonPotion.java to .\/java-design-patterns\ repository source files.
Added Potion.java to .\/java-design-patterns\ repository source files.
Added PotionFactory.java to .\/java-design-patterns\ repository source files.
Added PotionType.java to .\/java-design-patterns\ repository source files.
Added StrengthPotion.java to .\/java-design-patterns\ repository source files.
Added AlchemistShopTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ApplicationException.java to .\/java-design-patterns\ repository source files.
Added ArcherCommand.java to .\/java-design-patterns\ repository source files.
Added ArcherView.java to .\/java-design-patterns\ repository source files.
Added CatapultCommand.java to .\/java-design-patterns\ repository source files.
Added CatapultView.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added ErrorView.java to .\/java-design-patterns\ repository source files.
Added FrontController.java to .\/java-design-patterns\ repository source files.
Added UnknownCommand.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ApplicationExceptionTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added FrontControllerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added ViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsynchronousService.java to .\/java-design-patterns\ repository source files.
Added AsyncTask.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added AsynchronousServiceTest.java to .\/java-design-patterns\ repository source files.
Added AbstractFilter.java to .\/java-design-patterns\ repository source files.
Added AddressFilter.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added ContactFilter.java to .\/java-design-patterns\ repository source files.
Added DepositFilter.java to .\/java-design-patterns\ repository source files.
Added Filter.java to .\/java-design-patterns\ repository source files.
Added FilterChain.java to .\/java-design-patterns\ repository source files.
Added FilterManager.java to .\/java-design-patterns\ repository source files.
Added NameFilter.java to .\/java-design-patterns\ repository source files.
Added Order.java to .\/java-design-patterns\ repository source files.
Added OrderFilter.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FilterManagerTest.java to .\/java-design-patterns\ repository source files.
Added FilterTest.java to .\/java-design-patterns\ repository source files.
Added OrderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Expression.java to .\/java-design-patterns\ repository source files.
Added MinusExpression.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpression.java to .\/java-design-patterns\ repository source files.
Added NumberExpression.java to .\/java-design-patterns\ repository source files.
Added PlusExpression.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MinusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpressionTest.java to .\/java-design-patterns\ repository source files.
Added NumberExpressionTest.java to .\/java-design-patterns\ repository source files.
Added PlusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemIterator.java to .\/java-design-patterns\ repository source files.
Added ItemType.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestItemIterator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Cake.java to .\/java-design-patterns\ repository source files.
Added CakeBakingException.java to .\/java-design-patterns\ repository source files.
Added CakeBakingService.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImpl.java to .\/java-design-patterns\ repository source files.
Added CakeDao.java to .\/java-design-patterns\ repository source files.
Added CakeInfo.java to .\/java-design-patterns\ repository source files.
Added CakeLayer.java to .\/java-design-patterns\ repository source files.
Added CakeLayerDao.java to .\/java-design-patterns\ repository source files.
Added CakeLayerInfo.java to .\/java-design-patterns\ repository source files.
Added CakeTopping.java to .\/java-design-patterns\ repository source files.
Added CakeToppingDao.java to .\/java-design-patterns\ repository source files.
Added CakeToppingInfo.java to .\/java-design-patterns\ repository source files.
Added CakeViewImpl.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingExceptionTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added CakeTest.java to .\/java-design-patterns\ repository source files.
Added CakeViewImplTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Heavy.java to .\/java-design-patterns\ repository source files.
Added HolderNaive.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafe.java to .\/java-design-patterns\ repository source files.
Added Java8Holder.java to .\/java-design-patterns\ repository source files.
Added AbstractHolderTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HolderNaiveTest.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafeTest.java to .\/java-design-patterns\ repository source files.
Added Java8HolderTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hobbit.java to .\/java-design-patterns\ repository source files.
Added Hunter.java to .\/java-design-patterns\ repository source files.
Added Party.java to .\/java-design-patterns\ repository source files.
Added PartyImpl.java to .\/java-design-patterns\ repository source files.
Added PartyMember.java to .\/java-design-patterns\ repository source files.
Added PartyMemberBase.java to .\/java-design-patterns\ repository source files.
Added Rogue.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added PartyImplTest.java to .\/java-design-patterns\ repository source files.
Added PartyMemberTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Star.java to .\/java-design-patterns\ repository source files.
Added StarMemento.java to .\/java-design-patterns\ repository source files.
Added StarType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StarTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Fatigue.java to .\/java-design-patterns\ repository source files.
Added GiantController.java to .\/java-design-patterns\ repository source files.
Added GiantModel.java to .\/java-design-patterns\ repository source files.
Added GiantView.java to .\/java-design-patterns\ repository source files.
Added Health.java to .\/java-design-patterns\ repository source files.
Added Nourishment.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GiantControllerTest.java to .\/java-design-patterns\ repository source files.
Added GiantModelTest.java to .\/java-design-patterns\ repository source files.
Added GiantViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileLoader.java to .\/java-design-patterns\ repository source files.
Added FileSelectorJFrame.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenter.java to .\/java-design-patterns\ repository source files.
Added FileSelectorStub.java to .\/java-design-patterns\ repository source files.
Added FileSelectorView.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FileLoaderTest.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Sex.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added Validator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MonadTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added LoadBalancer.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added Server.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added LoadBalancerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Nazgul.java to .\/java-design-patterns\ repository source files.
Added NazgulName.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NazgulTest.java to .\/java-design-patterns\ repository source files.
Added HomePageService.java to .\/java-design-patterns\ repository source files.
Added HomePageViewModel.java to .\/java-design-patterns\ repository source files.
Added SimpleObject.java to .\/java-design-patterns\ repository source files.
Added SimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectTest.java to .\/java-design-patterns\ repository source files.
Added DomainAppFixturesProvider.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectCreate.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTearDown.java to .\/java-design-patterns\ repository source files.
Added RecreateSimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleAppSystemInitializer.java to .\/java-design-patterns\ repository source files.
Added BootstrappingGlue.java to .\/java-design-patterns\ repository source files.
Added CatalogOfFixturesGlue.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectGlue.java to .\/java-design-patterns\ repository source files.
Added RunSpecs.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleAppIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleApplication.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Node.java to .\/java-design-patterns\ repository source files.
Added NodeImpl.java to .\/java-design-patterns\ repository source files.
Added NullNode.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NullNodeTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added TreeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ObjectPool.java to .\/java-design-patterns\ repository source files.
Added Oliphaunt.java to .\/java-design-patterns\ repository source files.
Added OliphauntPool.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OliphauntPoolTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GHobbits.java to .\/java-design-patterns\ repository source files.
Added GOrcs.java to .\/java-design-patterns\ repository source files.
Added GWeather.java to .\/java-design-patterns\ repository source files.
Added Observable.java to .\/java-design-patterns\ repository source files.
Added Observer.java to .\/java-design-patterns\ repository source files.
Added Race.java to .\/java-design-patterns\ repository source files.
Added Hobbits.java to .\/java-design-patterns\ repository source files.
Added Orcs.java to .\/java-design-patterns\ repository source files.
Added Weather.java to .\/java-design-patterns\ repository source files.
Added WeatherObserver.java to .\/java-design-patterns\ repository source files.
Added WeatherType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GHobbitsTest.java to .\/java-design-patterns\ repository source files.
Added GWeatherTest.java to .\/java-design-patterns\ repository source files.
Added ObserverTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added HobbitsTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WeatherObserverTest.java to .\/java-design-patterns\ repository source files.
Added WeatherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added MessageQueue.java to .\/java-design-patterns\ repository source files.
Added MqPublishPoint.java to .\/java-design-patterns\ repository source files.
Added MqSubscribePoint.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added SimpleMessage.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageQueue.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added PoisonMessageTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ImmutableStew.java to .\/java-design-patterns\ repository source files.
Added Stew.java to .\/java-design-patterns\ repository source files.
Added StewData.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ImmutableStewTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added StewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemQueue.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Stats.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Beast.java to .\/java-design-patterns\ repository source files.
Added ElfBeast.java to .\/java-design-patterns\ repository source files.
Added ElfMage.java to .\/java-design-patterns\ repository source files.
Added ElfWarlord.java to .\/java-design-patterns\ repository source files.
Added HeroFactory.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImpl.java to .\/java-design-patterns\ repository source files.
Added Mage.java to .\/java-design-patterns\ repository source files.
Added OrcBeast.java to .\/java-design-patterns\ repository source files.
Added OrcMage.java to .\/java-design-patterns\ repository source files.
Added OrcWarlord.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Warlord.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImplTest.java to .\/java-design-patterns\ repository source files.
Added PrototypeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardTower.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WizardTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxyTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppClient.java to .\/java-design-patterns\ repository source files.
Added LoggingHandler.java to .\/java-design-patterns\ repository source files.
Added AbstractNioChannel.java to .\/java-design-patterns\ repository source files.
Added ChannelHandler.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added NioDatagramChannel.java to .\/java-design-patterns\ repository source files.
Added NioReactor.java to .\/java-design-patterns\ repository source files.
Added NioServerSocketChannel.java to .\/java-design-patterns\ repository source files.
Added SameThreadDispatcher.java to .\/java-design-patterns\ repository source files.
Added ThreadPoolDispatcher.java to .\/java-design-patterns\ repository source files.
Added ReactorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Reader.java to .\/java-design-patterns\ repository source files.
Added ReaderWriterLock.java to .\/java-design-patterns\ repository source files.
Added Writer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ReaderAndWriterTest.java to .\/java-design-patterns\ repository source files.
Added ReaderTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppConfig.java to .\/java-design-patterns\ repository source files.
Added Person.java to .\/java-design-patterns\ repository source files.
Added PersonRepository.java to .\/java-design-patterns\ repository source files.
Added PersonSpecifications.java to .\/java-design-patterns\ repository source files.
Added AnnotationBasedRepositoryTest.java to .\/java-design-patterns\ repository source files.
Added AppConfigTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RepositoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added SlidingDoor.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ClosableTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added Queen.java to .\/java-design-patterns\ repository source files.
Added Royalty.java to .\/java-design-patterns\ repository source files.
Added Servant.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added KingTest.java to .\/java-design-patterns\ repository source files.
Added QueenTest.java to .\/java-design-patterns\ repository source files.
Added ServantTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BaseEntity.java to .\/java-design-patterns\ repository source files.
Added Dao.java to .\/java-design-patterns\ repository source files.
Added DaoBaseImpl.java to .\/java-design-patterns\ repository source files.
Added HibernateUtil.java to .\/java-design-patterns\ repository source files.
Added MagicService.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImpl.java to .\/java-design-patterns\ repository source files.
Added Spell.java to .\/java-design-patterns\ repository source files.
Added SpellDao.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Spellbook.java to .\/java-design-patterns\ repository source files.
Added SpellbookDao.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardDao.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BaseDaoTest.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added InitContext.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added ServiceCache.java to .\/java-design-patterns\ repository source files.
Added ServiceImpl.java to .\/java-design-patterns\ repository source files.
Added ServiceLocator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ServiceLocatorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTower.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiom.java to .\/java-design-patterns\ repository source files.
Added IvoryTower.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLocking.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTower.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiomTest.java to .\/java-design-patterns\ repository source files.
Added IvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added SingletonTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLockingTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AbstractCreature.java to .\/java-design-patterns\ repository source files.
Added Creature.java to .\/java-design-patterns\ repository source files.
Added Dragon.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added KillerBee.java to .\/java-design-patterns\ repository source files.
Added Octopus.java to .\/java-design-patterns\ repository source files.
Added Shark.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added Color.java to .\/java-design-patterns\ repository source files.
Added Movement.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added ColorSelector.java to .\/java-design-patterns\ repository source files.
Added MovementSelector.java to .\/java-design-patterns\ repository source files.
Added SizeSelector.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CreatureTest.java to .\/java-design-patterns\ repository source files.
Added ColorSelectorTest.java to .\/java-design-patterns\ repository source files.
Added MovementSelectorTest.java to .\/java-design-patterns\ repository source files.
Added SizeSelectorTest.java to .\/java-design-patterns\ repository source files.
Added AngryState.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Mammoth.java to .\/java-design-patterns\ repository source files.
Added PeacefulState.java to .\/java-design-patterns\ repository source files.
Added State.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MammothTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilder.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DragonSlayer.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategy.java to .\/java-design-patterns\ repository source files.
Added MeleeStrategy.java to .\/java-design-patterns\ repository source files.
Added ProjectileStrategy.java to .\/java-design-patterns\ repository source files.
Added SpellStrategy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayerTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategyTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HalflingThief.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethod.java to .\/java-design-patterns\ repository source files.
Added StealingMethod.java to .\/java-design-patterns\ repository source files.
Added SubtleMethod.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HalflingThiefTest.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethodTest.java to .\/java-design-patterns\ repository source files.
Added StealingMethodTest.java to .\/java-design-patterns\ repository source files.
Added SubtleMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTask.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added Worker.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTaskTest.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTaskTest.java to .\/java-design-patterns\ repository source files.
Added TaskTest.java to .\/java-design-patterns\ repository source files.
Added WorkerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added RainbowFish.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializer.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializerTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2Test.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BallItem.java to .\/java-design-patterns\ repository source files.
Added BallThread.java to .\/java-design-patterns\ repository source files.
Added GameItem.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BallItemTest.java to .\/java-design-patterns\ repository source files.
Added BallThreadTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HeroStat.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroStatTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Commander.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitor.java to .\/java-design-patterns\ repository source files.
Added Sergeant.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitor.java to .\/java-design-patterns\ repository source files.
Added Soldier.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitor.java to .\/java-design-patterns\ repository source files.
Added Unit.java to .\/java-design-patterns\ repository source files.
Added UnitVisitor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommanderTest.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SergeantTest.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SoldierTest.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitorTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added UnitTest.java to .\/java-design-patterns\ repository source files.
Added VisitorTest.java to .\/java-design-patterns\ repository source files.
App app = new App();
elfKing=app.getKing(elfFactory)
final King elfKing = app.getKing(elfFactory);
orcKing=app.getKing(orcFactory)
final King orcKing = app.getKing(orcFactory);
elfCastle=app.getCastle(elfFactory)
final Castle elfCastle = app.getCastle(elfFactory);
orcCastle=app.getCastle(orcFactory)
final Castle orcCastle = app.getCastle(orcFactory);
elfArmy=app.getArmy(elfFactory)
final Army elfArmy = app.getArmy(elfFactory);
orcArmy=app.getArmy(orcFactory)
final Army orcArmy = app.getArmy(orcFactory);
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
String[] args = {};
Captain captain = new Captain(new BattleFishingBoat());
battleFishingBoat=spy(new BattleFishingBoat())
BattleFishingBoat battleFishingBoat = spy(new BattleFishingBoat());
Captain captain = new Captain();
BattleShip captain = (BattleShip) beans.get(CAPTAIN_BEAN);
BattleShip battleship = (BattleShip) beans.get(BATTLESHIP_BEAN);
String[] args = {};
AsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult1=executor.startProcess(lazyval(10,500))
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
asyncResult2=executor.startProcess(lazyval("test",300))
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
asyncResult3=executor.startProcess(lazyval(50L,700))
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
asyncResult4=executor.startProcess(lazyval(20,400),callback("Callback result 4"))
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
asyncResult5=executor.startProcess(lazyval("callback",600),callback("Callback result 5"))
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
result1=executor.endProcess(asyncResult1)
Integer result1 = executor.endProcess(asyncResult1);
result2=executor.endProcess(asyncResult2)
String result2 = executor.endProcess(asyncResult2);
result3=executor.endProcess(asyncResult3)
Long result3 = executor.endProcess(asyncResult3);
CompletableResult<T> result = new CompletableResult<>(callback);
String[] args = {};
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null)
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(null,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
exception=optionalException.get()
final Exception exception = optionalException.get();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null,null)
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());
FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());
SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());
String[] args = {};
excalibur=spy(new Excalibur())
final Excalibur excalibur = spy(new Excalibur());
final BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(excalibur);
mjollnir=spy(new Mjollnir())
final Mjollnir mjollnir = spy(new Mjollnir());
final FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(mjollnir);
stormbringer=spy(new Stormbringer())
final Stormbringer stormbringer = spy(new Stormbringer());
final SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(stormbringer);
mage=new HeroBuilder(Profession.MAGE,"Riobard").withHairColor(HairColor.BLACK).withWeapon(Weapon.DAGGER).build()
Hero mage =
        new HeroBuilder(Profession.MAGE, "Riobard").withHairColor(HairColor.BLACK)
            .withWeapon(Weapon.DAGGER).build();
warrior=new HeroBuilder(Profession.WARRIOR,"Amberjill").withHairColor(HairColor.BLOND).withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).build()
Hero warrior =
        new HeroBuilder(Profession.WARRIOR, "Amberjill").withHairColor(HairColor.BLOND)
            .withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD)
            .build();
thief=new HeroBuilder(Profession.THIEF,"Desmond").withHairType(HairType.BALD).withWeapon(Weapon.BOW).build()
Hero thief =
        new HeroBuilder(Profession.THIEF, "Desmond").withHairType(HairType.BALD)
            .withWeapon(Weapon.BOW).build();
StringBuilder sb = new StringBuilder();
String[] args = {};
final String heroName = "Sir Lancelot";
hero=new Hero.HeroBuilder(Profession.WARRIOR,heroName).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).withHairType(HairType.LONG_CURLY).withHairColor(HairColor.BLOND).build()
final Hero hero = new Hero.HeroBuilder(Profession.WARRIOR, heroName)
        .withArmor(Armor.CHAIN_MAIL)
        .withWeapon(Weapon.SWORD)
        .withHairType(HairType.LONG_CURLY)
        .withHairColor(HairColor.BLOND)
        .build();
BusinessDelegate businessDelegate = new BusinessDelegate();
BusinessLookup businessLookup = new BusinessLookup();
Client client = new Client(businessDelegate);
String[] args = {};
Client client = new Client(businessDelegate);
App app = new App();
UserAccount userAccount1 = new UserAccount("001", "John", "He is a boy.");
UserAccount userAccount2 = new UserAccount("002", "Jane", "She is a girl.");
UserAccount userAccount3 = new UserAccount("003", "Adam", "He likes food.");
UserAccount userAccount4 = new UserAccount("004", "Rita", "She hates cats.");
UserAccount userAccount5 = new UserAccount("005", "Isaac", "He is allergic to mustard.");
UserAccount userAccount6 = new UserAccount("006", "Yasha", "She is an only child.");
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
StringBuilder sb = new StringBuilder();
iterable=db.getCollection("user_accounts").find(new Document("userID",userId))
FindIterable<Document> iterable =
        db.getCollection("user_accounts").find(new Document("userID", userId));
doc=iterable.first()
Document doc = iterable.first();
node=cache.get(userId)
Node node = cache.get(userId);
old=cache.get(userId)
Node old = cache.get(userId);
Node newNode = new Node(userId, userAccount);
toBeRemoved=cache.get(userId)
Node toBeRemoved = cache.get(userId);
ArrayList<UserAccount> listOfCacheData = new ArrayList<>();
Node temp = head;
String[] args = {};
Task task = new SimpleTask();
Callback callback = new Callback() {
      @Override
      public void call() {
        System.out.println("I'm done now.");
      }
    };
Task task = new SimpleTask();
Callback c = () -> System.out.println("I'm done now.");
    task.executeWith(c);
  
String[] args = {};
Callback callback = new Callback() {
      @Override
      public void call() {
        callingCount++;
      }
    };
Task task = new SimpleTask();
Callback callback = () -> callingCount++;

    Task task = new SimpleTask();

    assertEquals("Initial calling count of 0", new Integer(0), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called once", new Integer(1), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called twice", new Integer(2), callingCount);

  
OrcKing king = new OrcKing();
String[] args = {};
final OrcKing king = new OrcKing();
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
temp=target.getSize()
Size temp = target.getSize();
previousSpell=undoStack.pollLast()
Command previousSpell = undoStack.pollLast();
previousSpell=redoStack.pollLast()
Command previousSpell = redoStack.pollLast();
String[] args = {};
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
orcMessage=new Messenger().messageFromOrcs()
LetterComposite orcMessage = new Messenger().messageFromOrcs();
elfMessage=new Messenger().messageFromElves()
LetterComposite elfMessage = new Messenger().messageFromElves();
List<Word> words = new ArrayList<>();
List<Word> words = new ArrayList<>();
String[] args = {};
final Messenger messenger = new Messenger();
final Messenger messenger = new Messenger();
words=message.split(" ")
final String[] words = message.split(" ");
final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());
final Customer customer = new Customer(4, "Dan", "Danson");
final Customer customer1 = new Customer(1, "Adam", "Adamson");
final Customer customer2 = new Customer(2, "Bob", "Bobson");
final Customer customer3 = new Customer(3, "Carl", "Carlson");
final List<Customer> customers = new ArrayList<>();
boolean isEqual = false;
final Customer customer = (Customer) o;
Customer customer = null;
index=getAllCustomers().indexOf(customer)
final int index = getAllCustomers().indexOf(customer);
String[] args = {};
final Customer nonExistingCustomer = new Customer(2, "Robert", "Englund");
final String newFirstname = "Bernard";
final String newLastname = "Montgomery";
final Customer customer = new Customer(CUSTOMER.getId(), newFirstname, newLastname);
cust=impl.getCustomerById(CUSTOMER.getId())
final Customer cust = impl.getCustomerById(CUSTOMER.getId());
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final String newFirstname = "Douglas";
final String newLastname = "MacArthur";
final Customer customer = new Customer(nonExistingId, newFirstname, newLastname);
existingCustomer=impl.getCustomerById(CUSTOMER.getId())
final Customer existingCustomer = impl.getCustomerById(CUSTOMER.getId());
final Customer newCustomer = new Customer(3, "George", "Patton");
final Customer newCustomer = new Customer(3, "George", "Patton");
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final int newId = 2;
final String newFirstname = "Bill";
final String newLastname = "Clinton";
final int newId = 2;
final Customer otherCustomer = new Customer(newId, FIRSTNAME, LASTNAME);
final Customer otherCustomer = new Customer(ID, FIRSTNAME, LASTNAME);
final StringBuffer buffer = new StringBuffer();
Hostile troll = new Troll();
Hostile smart = new SmartHostile(troll);
String[] args = {};
simpleTroll=spy(new Troll())
final Hostile simpleTroll = spy(new Troll());
final Hostile smartTroll = new SmartHostile(simpleTroll);
final Troll troll = new Troll();
PrinterController hpPrinterController = new PrinterController(new HpPrinter());
PrinterController canonPrinterController = new PrinterController(new CanonPrinter());
PrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());
String[] args = {};
PrinterController printerController = new PrinterController(new CanonPrinter());
PrinterController printerController = new PrinterController(new HpPrinter());
PrinterController printerController = new PrinterController(new EpsonPrinter());
SimpleWizard simpleWizard = new SimpleWizard();
AdvancedWizard advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());
injector=Guice.createInjector(new TobaccoModule())
Injector injector = Guice.createInjector(new TobaccoModule());
guiceWizard=injector.getInstance(GuiceWizard.class)
GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final AdvancedWizard advancedWizard = new AdvancedWizard(tobacco);
String[] args = {};
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final GuiceWizard guiceWizard = new GuiceWizard(tobacco);
@SuppressWarnings("unchecked")
    final Class<? extends Tobacco>[] tobaccos = new Class[]{
        OldTobyTobacco.class, RivendellTobacco.class, SecondBreakfastTobacco.class
    };
injector=Guice.createInjector(new AbstractModule(){
  @Override protected void configure(){
    bind(Tobacco.class).to(tobaccoClass);
  }
}
)
final Injector injector = Guice.createInjector(new AbstractModule() {
        @Override
        protected void configure() {
          bind(Tobacco.class).to(tobaccoClass);
        }
      });
guiceWizard=injector.getInstance(GuiceWizard.class)
final GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final SimpleWizard simpleWizard = new SimpleWizard();
final Inventory inventory = new Inventory(1000);
executorService=Executors.newFixedThreadPool(3)
ExecutorService executorService = Executors.newFixedThreadPool(3);
String[] args = {};
final Inventory inventory = new Inventory(INVENTORY_SIZE);
executorService=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);
items=inventory.getItems()
final List<Item> items = inventory.getItems();
final List<Item> items = inventory.getItems();
stdOutCaptor=ArgumentCaptor.forClass(String.class)
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
values=stdOutCaptor.getAllValues()
final List<String> values = stdOutCaptor.getAllValues();
final List<String> values = stdOutCaptor.getAllValues();
List<GameObject> objects = new ArrayList<>();
String[] args = {};
tested=getTestedObject()
final O tested = getTestedObject();
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectTargetOnFire 
        ? "Expected [" + targetName + "] to be on fire after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be on fire after colliding with [" + otherName + "] but it was!";
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectedDamage
        ? "Expected [" + targetName + "] to be damaged after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be damaged after colliding with [" + otherName + "] but it was!";
final FlamingAsteroid asteroid = new FlamingAsteroid(1, 2, 3, 4);
final Meteoroid meteoroid = new Meteoroid(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final SpaceStationIss iss = new SpaceStationIss(1, 2, 3, 4);
final SpaceStationMir mir = new SpaceStationMir(1, 2, 3, 4);
KingJoffrey kingJoffrey = new KingJoffrey();
KingsHand kingsHand = new KingsHand(kingJoffrey);
List<EventEmitter> emitters = new ArrayList<>();
String[] args = {};
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithoutDefaultObserver.get()
final E emitter = this.factoryWithoutDefaultObserver.get();
defaultObserver=mock(EventObserver.class)
final EventObserver defaultObserver = mock(EventObserver.class);
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithDefaultObserver.apply(defaultObserver)
final E emitter = this.factoryWithDefaultObserver.apply(defaultObserver);
toString=event.toString()
final String toString = event.toString();
final KingJoffrey kingJoffrey = new KingJoffrey();
final String expectedMessage = "Received event from the King's Hand: " + event.toString();
observer=mock(EventObserver.class)
final EventObserver observer = mock(EventObserver.class);
final KingsHand kingsHand = new KingsHand(observer);
toString=weekday.toString()
final String toString = weekday.toString();
EventDispatcher dispatcher = new EventDispatcher();
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = (UserCreatedEvent) message;
UserUpdatedEvent userUpdatedEvent = (UserUpdatedEvent) message;
String[] args = {};
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
dispatcher=spy(new EventDispatcher())
EventDispatcher dispatcher = spy(new EventDispatcher());
userCreatedEventHandler=spy(new UserCreatedEventHandler())
UserCreatedEventHandler userCreatedEventHandler = spy(new UserCreatedEventHandler());
userUpdatedEventHandler=spy(new UserUpdatedEventHandler())
UserUpdatedEventHandler userUpdatedEventHandler = spy(new UserUpdatedEventHandler());
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
UserUpdatedEvent userUpdatedEvent = new UserUpdatedEvent(user);
FileWriter writer = new FileWriter(filename);
String[] args = {};
File file = new File("testfile.txt");
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
final File nonExistingFile = new File(this.testFolder.getRoot(), "non-existing-file");
final String testMessage = "Test message";
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
DwarvenGoldmineFacade facade = new DwarvenGoldmineFacade();
String[] args = {};
final DwarvenGoldmineFacade goldMine = new DwarvenGoldmineFacade();
WeaponFactory factory = WeaponFactory.factory(builder -> {
      builder.add(WeaponType.SWORD, Sword::new);
      builder.add(WeaponType.AXE, Axe::new);
      builder.add(WeaponType.SPEAR, Spear::new);
      builder.add(WeaponType.BOW, Bow::new);
    });
    Weapon axe = factory.create(WeaponType.AXE);
    System.out.println(axe);
  
HashMap<WeaponType, Supplier<Weapon>> map = new HashMap<>();
String[] args = {};
weapon=factory.create(WeaponType.SPEAR)
Weapon weapon = factory.create(WeaponType.SPEAR);
weapon=factory.create(WeaponType.AXE)
Weapon weapon = factory.create(WeaponType.AXE);
weapon=factory.create(WeaponType.SWORD)
Weapon weapon = factory.create(WeaponType.SWORD);
App app = new App(new OrcBlacksmith());
Weapon weapon;
String[] args = {};
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.AXE)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.AXE);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties turnedOff = new Properties();
Service turnedOffService = new PropertiesFeatureToggleVersion(turnedOff);
welcomeMessageturnedOff=turnedOffService.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessageturnedOff = turnedOffService.getWelcomeMessage(new User("Jamie No Code"));
final User paidUser = new User("Jamie Coder");
final User freeUser = new User("Alan Defect");
welcomeMessagePaidUser=service.getWelcomeMessage(paidUser)
final String welcomeMessagePaidUser = service.getWelcomeMessage(paidUser);
welcomeMessageFreeUser=service.getWelcomeMessage(freeUser)
final String welcomeMessageFreeUser = service.getWelcomeMessage(freeUser);
final Properties properties = new Properties();
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
welcomeMessage=service.getWelcomeMessage(paidUser)
final String welcomeMessage = service.getWelcomeMessage(paidUser);
final String expected = "You're amazing Jamie Coder. Thanks for paying for this awesome software.";
welcomeMessage=service.getWelcomeMessage(freeUser)
final String welcomeMessage = service.getWelcomeMessage(freeUser);
final String expected = "I suppose you can use this software.";
User user = new User("Free User");
User user = new User("Paid User");
User user = new User("Paid User");
User user = new User("Free User");
List<Integer> integerList = new ArrayList<>();
firstFiveNegatives=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList()
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
lastTwoPositives=SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList()
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
transformedList=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString()).asList()
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
lastTwoOfFirstFourStringMapped=LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2).map(number-- > "String[" + valueOf(number) + "]").asList()
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
StringJoiner joiner = new StringJoiner(delimiter, prefix, ".");
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
ArrayList<E> copy = new ArrayList<>();
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
final E result = next;
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=last(1).iterator()
Iterator<E> resultIterator = last(1).iterator();
Iterator<E> resultIterator = last(1).iterator();
E candidate = null;
newIterator=iterable.iterator()
Iterator<E> newIterator = iterable.iterator();
candidate=oldTypeIterator.next()
E candidate = oldTypeIterator.next();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
nextElement=iterator.next()
E nextElement = iterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentCount = 0;
list=last(1).asList()
List<E> list = last(1).asList();
List<E> list = last(1).asList();
remainingElementsCount=getRemainingElementsCount()
int remainingElementsCount = getRemainingElementsCount();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentIndex = 0;
List<T> temporaryList = new ArrayList<>();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
copy=FluentIterable.copyToList(iterable)
List<E> copy = FluentIterable.copyToList(iterable);
List<E> copy = FluentIterable.copyToList(iterable);
int counter = 0;
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
List<E> copy = new ArrayList<>();
String[] args = {};
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
evenItems=createFluentIterable(integers).filter(i-- > i % 2 == 0).asList()
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
longs=createFluentIterable(integers).map(Integer).asList()
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
consumer=mock(Consumer.class)
final Consumer<Integer> consumer = mock(Consumer.class);
final Consumer<Integer> consumer = mock(Consumer.class);
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
split=createFluentIterable(integers).spliterator()
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
MenuStore menuStore = new MenuStore();
ContentStore contentStore = new ContentStore();
MenuView menuView = new MenuView();
ContentView contentView = new ContentView();
ContentAction contentAction = (ContentAction) action;
MenuAction menuAction = (MenuAction) action;
ContentStore contentStore = (ContentStore) store;
MenuStore menuStore = (MenuStore) store;
toString=content.toString()
final String toString = content.toString();
toString=menuItem.toString()
final String toString = menuItem.toString();
String[] args = {};
final Constructor<Dispatcher> constructor;
final Constructor<Dispatcher> constructor;
field=Dispatcher.class.getDeclaredField("instance")
final Field field = Dispatcher.class.getDeclaredField("instance");
dispatcher=Dispatcher.getInstance()
final Dispatcher dispatcher = Dispatcher.getInstance();
store=mock(Store.class)
final Store store = mock(Store.class);
actionCaptor=ArgumentCaptor.forClass(Action.class)
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
actions=actionCaptor.getAllValues()
final List<Action> actions = actionCaptor.getAllValues();
final List<Action> actions = actionCaptor.getAllValues();
menuActions=actions.stream().filter(a-- > a.getType().equals(ActionType.MENU_ITEM_SELECTED)).map(a-- > (MenuAction)a).collect(Collectors.toList())
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
contentActions=actions.stream().filter(a-- > a.getType().equals(ActionType.CONTENT_CHANGED)).map(a-- > (ContentAction)a).collect(Collectors.toList())
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final ContentStore contentStore = new ContentStore();
view=mock(View.class)
final View view = mock(View.class);
final MenuStore menuStore = new MenuStore();
view=mock(View.class)
final View view = mock(View.class);
store=mock(ContentStore.class)
final ContentStore store = mock(ContentStore.class);
final ContentView view = new ContentView();
store=mock(MenuStore.class)
final MenuStore store = mock(MenuStore.class);
final MenuView view = new MenuView();
store=mock(Store.class)
final Store store = mock(Store.class);
final MenuView view = new MenuView();
PotionFactory factory = new PotionFactory();
AlchemistShop alchemistShop = new AlchemistShop();
potion=potions.get(type)
Potion potion = potions.get(type);
final AlchemistShop shop = new AlchemistShop();
bottomShelf=shop.getBottomShelf()
final List<Potion> bottomShelf = shop.getBottomShelf();
final List<Potion> bottomShelf = shop.getBottomShelf();
topShelf=shop.getTopShelf()
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> allPotions = new ArrayList<>();
String[] args = {};
FrontController controller = new FrontController();
command=getCommand(request)
Command command = getCommand(request);
commandClass=getCommandClass(request)
Class commandClass = getCommandClass(request);
Class result;
final Exception cause = new Exception();
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final FrontController frontController = new FrontController();
final List<Object[]> parameters = new ArrayList<>();
final List<Object[]> parameters = new ArrayList<>();
AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final Object result = new Object();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IOException exception = new IOException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IllegalStateException exception = new IllegalStateException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
Filter last = this;
String result = super.execute(order);
FilterManager filterManager = new FilterManager();
Client client = new Client();
JPanel panel = new JPanel();
Order order =
            new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),
                jtFields[2].getText(), jtAreas[1].getText());
rootPane=SwingUtilities.getRootPane(processButton)
JRootPane rootPane = SwingUtilities.getRootPane(processButton);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
JPanel bot = new JPanel();
rootPane=SwingUtilities.getRootPane(del)
JRootPane rootPane = SwingUtilities.getRootPane(del);
temp=jt.getSelectedRow()
int temp = jt.getSelectedRow();
temp2=jt.getSelectedRowCount()
int temp2 = jt.getSelectedRowCount();
String[] args = {};
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
filter=mock(Filter.class)
final Filter filter = mock(Filter.class);
order=mock(Order.class)
final Order order = mock(Order.class);
final List<Object[]> testData = new ArrayList<>();
result=this.filter.execute(this.order)
final String result = this.filter.execute(this.order);
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
String tokenString = "4 3 2 - 1 + *";
Stack<Expression> stack = new Stack<>();
tokenList=tokenString.split(" ")
String[] tokenList = tokenString.split(" ");
rightExpression=stack.pop()
Expression rightExpression = stack.pop();
leftExpression=stack.pop()
Expression leftExpression = stack.pop();
operator=getOperatorInstance(s,leftExpression,rightExpression)
Expression operator = getOperatorInstance(s, leftExpression, rightExpression);
result=operator.interpret()
int result = operator.interpret();
NumberExpression resultExpression = new NumberExpression(result);
Expression i = new NumberExpression(s);
String[] args = {};
final List<Object[]> testData = new ArrayList<>();
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expectedValue=getFirst().interpret()
final int expectedValue = getFirst().interpret();
testStingValue=String.valueOf(expectedValue)
final String testStingValue = String.valueOf(expectedValue);
final NumberExpression numberExpression = new NumberExpression(testStingValue);
TreasureChest chest = new TreasureChest();
ringIterator=chest.iterator(ItemType.RING)
ItemIterator ringIterator = chest.iterator(ItemType.RING);
potionIterator=chest.iterator(ItemType.POTION)
ItemIterator potionIterator = chest.iterator(ItemType.POTION);
weaponIterator=chest.iterator(ItemType.WEAPON)
ItemIterator weaponIterator = chest.iterator(ItemType.WEAPON);
it=chest.iterator(ItemType.ANY)
ItemIterator it = chest.iterator(ItemType.ANY);
ArrayList<Item> list = new ArrayList<>();
items=chest.getItems()
List<Item> items = chest.getItems();
List<Item> items = chest.getItems();
boolean found = false;
int tempIdx = idx;
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final TreasureChest chest = new TreasureChest();
iterator=chest.iterator(expectedItem.getType())
final ItemIterator iterator = chest.iterator(expectedItem.getType());
item=iterator.next()
final Item item = iterator.next();
name=item.toString()
final String name = item.toString();
final TreasureChest chest = new TreasureChest();
items=chest.getItems()
final List<Item> items = chest.getItems();
final List<Item> items = chest.getItems();
final boolean sameType = this.expectedItem.getType() == item.getType();
sameName=this.expectedItem.toString().equals(item.toString())
final boolean sameName = this.expectedItem.toString().equals(item.toString());
CakeViewImpl cakeView = new CakeViewImpl(cakeBakingService);
CakeInfo cake1 =
        new CakeInfo(new CakeToppingInfo("candies", 0), Arrays.asList(new CakeLayerInfo(
            "chocolate", 0), new CakeLayerInfo("banana", 0), new CakeLayerInfo("strawberry", 0)));
CakeInfo cake2 =
        new CakeInfo(new CakeToppingInfo("cherry", 0), Arrays.asList(
            new CakeLayerInfo("vanilla", 0), new CakeLayerInfo("lemon", 0), new CakeLayerInfo(
                "strawberry", 0)));
allToppings=getAvailableToppingEntities()
List<CakeTopping> allToppings = getAvailableToppingEntities();
List<CakeTopping> allToppings = getAvailableToppingEntities();
matchingToppings=allToppings.stream().filter((t)-- > t.getName().equals(cakeInfo.cakeToppingInfo.name)).collect(Collectors.toList())
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
allLayers=getAvailableLayerEntities()
List<CakeLayer> allLayers = getAvailableLayerEntities();
List<CakeLayer> allLayers = getAvailableLayerEntities();
Set<CakeLayer> foundLayers = new HashSet<>();
found=allLayers.stream().filter((layer)-- > layer.getName().equals(info.name)).findFirst()
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
toppingBean=context.getBean(CakeToppingDao.class)
CakeToppingDao toppingBean = context.getBean(CakeToppingDao.class);
topping=toppingBean.findOne(matchingToppings.iterator().next().getId())
CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().getId());
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
Cake cake = new Cake();
layerBean=context.getBean(CakeLayerDao.class)
CakeLayerDao layerBean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeTopping> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
topping=iterator.next()
CakeTopping topping = iterator.next();
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeToppingInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
next=iterator.next()
CakeTopping next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayer> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayerInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
List<CakeInfo> result = new ArrayList<>();
iterator=cakeBean.findAll().iterator()
Iterator<Cake> iterator = cakeBean.findAll().iterator();
Iterator<Cake> iterator = cakeBean.findAll().iterator();
cake=iterator.next()
Cake cake = iterator.next();
CakeToppingInfo cakeToppingInfo =
          new CakeToppingInfo(cake.getTopping().getId(), cake.getTopping().getName(), cake
              .getTopping().getCalories());
ArrayList<CakeLayerInfo> cakeLayerInfos = new ArrayList<>();
CakeInfo cakeInfo = new CakeInfo(cake.getId(), cakeToppingInfo, cakeLayerInfos);
int total = cakeToppingInfo != null ? cakeToppingInfo.calories : 0;
String[] args = {};
final CakeBakingException exception = new CakeBakingException();
final String expectedMessage = "message";
final CakeBakingException exception = new CakeBakingException(expectedMessage);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialLayers=service.getAvailableLayers()
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
availableLayers=service.getAvailableLayers()
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialToppings=service.getAvailableToppings()
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
availableToppings=service.getAvailableToppings()
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeLayerInfo layer3 = new CakeLayerInfo("Layer3", 2000);
allCakes=service.getAllCakes()
final List<CakeInfo> allCakes = service.getAllCakes();
final List<CakeInfo> allCakes = service.getAllCakes();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeToppingInfo missingTopping = new CakeToppingInfo("Topping1", 1000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo missingLayer = new CakeLayerInfo("Layer2", 2000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final Cake cake = new Cake();
expectedId=Long.valueOf(1234L)
final Long expectedId = Long.valueOf(1234L);
final Cake cake = new Cake();
final CakeTopping expectedTopping = new CakeTopping("DummyTopping", 1000);
final Cake cake = new Cake();
final Set<CakeLayer> expectedLayers = new HashSet<>();
final Cake cake = new Cake();
final Set<CakeLayer> initialLayers = new HashSet<>();
final CakeLayer newLayer = new CakeLayer("layer3", 3000);
final Set<CakeLayer> expectedLayers = new HashSet<>();
final CakeTopping topping = new CakeTopping("topping", 20);
final CakeLayer layer = new CakeLayer("layer", 100);
final Cake cake = new Cake();
final String expected = "id=1234 topping=id=2345 name=topping calories=20 " 
            + "layers=[id=3456 name=layer calories=100]";
final List<CakeLayerInfo> layers = new ArrayList<>();
final List<CakeInfo> cakes = new ArrayList<>();
final CakeInfo cake = new CakeInfo(new CakeToppingInfo("topping", 1000), layers);
bakingService=mock(CakeBakingService.class)
final CakeBakingService bakingService = mock(CakeBakingService.class);
final CakeViewImpl cakeView = new CakeViewImpl(bakingService);
HolderNaive holderNaive = new HolderNaive();
heavy=holderNaive.getHeavy()
Heavy heavy = holderNaive.getHeavy();
HolderThreadSafe holderThreadSafe = new HolderThreadSafe();
another=holderThreadSafe.getHeavy()
Heavy another = holderThreadSafe.getHeavy();
Java8Holder java8Holder = new Java8Holder();
next=java8Holder.getHeavy()
Heavy next = java8Holder.getHeavy();
String[] args = {};
holderField=HolderNaive.class.getDeclaredField("heavy")
final Field holderField = HolderNaive.class.getDeclaredField("heavy");
holderField=HolderThreadSafe.class.getDeclaredField("heavy")
final Field holderField = HolderThreadSafe.class.getDeclaredField("heavy");
holderField=Java8Holder.class.getDeclaredField("heavy")
final Field holderField = Java8Holder.class.getDeclaredField("heavy");
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
supplierClass=supplier.getClass()
final Class<? extends Supplier> supplierClass = supplier.getClass();
final Class<? extends Supplier> supplierClass = supplier.getClass();
instanceField=supplierClass.getDeclaredField("heavyInstance")
final Field instanceField = supplierClass.getDeclaredField("heavyInstance");
Party party = new PartyImpl();
Hobbit hobbit = new Hobbit();
Wizard wizard = new Wizard();
Rogue rogue = new Rogue();
Hunter hunter = new Hunter();
String[] args = {};
partyMember1=mock(PartyMember.class)
final PartyMember partyMember1 = mock(PartyMember.class);
partyMember2=mock(PartyMember.class)
final PartyMember partyMember2 = mock(PartyMember.class);
final PartyImpl party = new PartyImpl();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
party=mock(Party.class)
final Party party = mock(Party.class);
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
memberClass=member.getClass()
final Class<? extends PartyMember> memberClass = member.getClass();
final Class<? extends PartyMember> memberClass = member.getClass();
Stack<StarMemento> states = new Stack<>();
Star star = new Star(StarType.SUN, 10000000, 500000);
StarMementoInternal state = new StarMementoInternal();
StarMementoInternal state = (StarMementoInternal) memento;
String[] args = {};
final Star star = new Star(StarType.SUN, 1, 2);
final Star star = new Star(StarType.SUN, 1, 2);
firstMemento=star.getMemento()
final StarMemento firstMemento = star.getMemento();
secondMemento=star.getMemento()
final StarMemento secondMemento = star.getMemento();
thirdMemento=star.getMemento()
final StarMemento thirdMemento = star.getMemento();
CamelContext context = new DefaultCamelContext();
String[] args = {};
GiantModel giant = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
GiantView view = new GiantView();
GiantController controller = new GiantController(giant, view);
String[] args = {};
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantView view = new GiantView();
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
FileLoader loader = new FileLoader();
FileSelectorJFrame jFrame = new FileSelectorJFrame();
FileSelectorPresenter presenter = new FileSelectorPresenter(jFrame);
BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)));
StringBuilder sb = new StringBuilder();
String line;
JScrollPane pane = new JScrollPane(area);
data=loader.loadData()
String data = loader.loadData();
String[] args = {};
final FileLoader fileLoader = new FileLoader();
String expectedFile = "Stamatis";
User user = new User("user", 24, Sex.FEMALE, "foobar.com");
IllegalStateException e = new IllegalStateException();
String[] args = {};
User tom = new User(null, 21, Sex.MALE, "tom@foo.bar");
User john = new User("John", 17, Sex.MALE, "john@qwe.bar");
User sarah = new User("Sarah", 42, Sex.FEMALE, "sarah@det.org");
validated=Validator.of(sarah).validate(getName,Objects,"name cannot be null").validate(User,age-- > age > 21,"user is underaged").validate(User,sex-- > sex == Sex.FEMALE,"user is not female").validate(User,email-- > email.contains("@"),"email does not contain @ sign").get()
User validated = Validator.of(sarah).validate(User::getName, Objects::nonNull, "name cannot be null")
        .validate(User::getAge, age -> age > 21, "user is underaged")
        .validate(User::getSex, sex -> sex == Sex.FEMALE, "user is not female")
        .validate(User::getEmail, email -> email.contains("@"), "email does not contain @ sign")
        .get();
LoadBalancer loadBalancer1 = new LoadBalancer();
LoadBalancer loadBalancer2 = new LoadBalancer();
server=servers.get(lastServedId++)
Server server = servers.get(lastServedId++);
String[] args = {};
final LoadBalancer firstBalancer = new LoadBalancer();
final LoadBalancer secondBalancer = new LoadBalancer();
server=mock(Server.class)
final Server server = mock(Server.class);
final LoadBalancer loadBalancer = new LoadBalancer();
final Request request = new Request("test");
String[] args = {};
nazgul=Nazgul.getInstance(name)
final Nazgul nazgul = Nazgul.getInstance(name);
obj=container.newTransientInstance(SimpleObject.class)
final SimpleObject obj = container.newTransientInstance(SimpleObject.class);
final SimpleObject simpleObject = new SimpleObject();
seq=context.sequence("create")
final Sequence seq = context.sequence("create");
obj=simpleObjects.create("Foobar")
final SimpleObject obj = simpleObjects.create("Foobar");
all=Lists.newArrayList()
final List<SimpleObject> all = Lists.newArrayList();
list=simpleObjects.listAll()
final List<SimpleObject> list = simpleObjects.listAll();
final List<SimpleObject> list = simpleObjects.listAll();
String name = "Foobar";
paramName=checkParam("name",ec,String.class)
String paramName = checkParam("name", ec, String.class);
paramNumber=defaultParam("number",ec,3)
final int paramNumber = defaultParam("number", ec, 3);
fs=new SimpleObjectCreate().setName(names.get(i))
final SimpleObjectCreate fs = new SimpleObjectCreate().setName(names.get(i));
isft=IsisSystemForTest.getElseNull()
IsisSystemForTest isft = IsisSystemForTest.getElseNull();
final IsisConfigurationForJdoIntegTests testConfiguration =
          new IsisConfigurationForJdoIntegTests();
findAll=service(SimpleObjects.class).listAll()
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
title=container.titleOf(simpleObjectWrapped)
final String title = container.titleOf(simpleObjectWrapped);
RecreateSimpleObjects fs = new RecreateSimpleObjects();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
simpleObject=wrap(all.get(0))
SimpleObject simpleObject = wrap(all.get(0));
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
causalChain=Throwables.getCausalChain(item)
final List<Throwable> causalChain = Throwables.getCausalChain(item);
final List<Throwable> causalChain = Throwables.getCausalChain(item);
settings=Bootstrap.getSettings()
IBootstrapSettings settings = Bootstrap.getSettings();
final AuthenticatedWebSessionForIsis s =
        (AuthenticatedWebSessionForIsis) super.newSession(request, response);
requestParameters=request.getRequestParameters()
IRequestParameters requestParameters = request.getRequestParameters();
user=requestParameters.getParameterValue("user")
final org.apache.wicket.util.string.StringValue user =
        requestParameters.getParameterValue("user");
password=requestParameters.getParameterValue("pass")
final org.apache.wicket.util.string.StringValue password =
        requestParameters.getParameterValue("pass");
uname=servletRequest.getParameter("user")
String uname = servletRequest.getParameter("user");
final Module isisDefaults = super.newIsisWicketModule();
final Module overrides = new AbstractModule() {
      @Override
      protected void configure() {
        bind(String.class).annotatedWith(Names.named("applicationName")).toInstance("Simple App");
        bind(String.class).annotatedWith(Names.named("applicationCss")).toInstance(
            "css/application.css");
        bind(String.class).annotatedWith(Names.named("applicationJs")).toInstance(
            "scripts/application.js");
        bind(String.class).annotatedWith(Names.named("welcomeMessage")).toInstance(
            readLines(getClass(), "welcome.html"));
        bind(String.class).annotatedWith(Names.named("aboutMessage")).toInstance("Simple App");
        bind(InputStream.class).annotatedWith(Names.named("metaInfManifest")).toProvider(
            Providers.of(getServletContext().getResourceAsStream("/META-INF/MANIFEST.MF")));
      }
    };
readLines=Resources.readLines(Resources.getResource(contextClass,resourceName),Charset.defaultCharset())
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
Node root =
        new NodeImpl("1", new NodeImpl("11", new NodeImpl("111", NullNode.getInstance(),
            NullNode.getInstance()), NullNode.getInstance()), new NodeImpl("12",
            NullNode.getInstance(), new NodeImpl("122", NullNode.getInstance(),
                NullNode.getInstance())));
String[] args = {};
instance=NullNode.getInstance()
final NullNode instance = NullNode.getInstance();
node=NullNode.getInstance()
final NullNode node = NullNode.getInstance();
final NodeImpl level1B = new NodeImpl("level1_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2B = new NodeImpl("level2_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3A = new NodeImpl("level3_a", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3B = new NodeImpl("level3_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2A = new NodeImpl("level2_a", level3A, level3B);
final NodeImpl level1A = new NodeImpl("level1_a", level2A, level2B);
inOrder=Mockito.inOrder(getStdOutMock())
final InOrder inOrder = Mockito.inOrder(getStdOutMock());
level1=TREE_ROOT.getLeft()
final Node level1 = TREE_ROOT.getLeft();
level2=level1.getLeft()
final Node level2 = level1.getLeft();
level3=level2.getLeft()
final Node level3 = level2.getLeft();
level1=TREE_ROOT.getRight()
final Node level1 = TREE_ROOT.getRight();
OliphauntPool pool = new OliphauntPool();
oliphaunt1=pool.checkOut()
Oliphaunt oliphaunt1 = pool.checkOut();
oliphaunt2=pool.checkOut()
Oliphaunt oliphaunt2 = pool.checkOut();
oliphaunt3=pool.checkOut()
Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunt5=pool.checkOut()
Oliphaunt oliphaunt5 = pool.checkOut();
instance=available.iterator().next()
T instance = available.iterator().next();
String[] args = {};
final OliphauntPool pool = new OliphauntPool();
expectedOliphaunt=pool.checkOut()
final Oliphaunt expectedOliphaunt = pool.checkOut();
oliphaunt=pool.checkOut()
final Oliphaunt oliphaunt = pool.checkOut();
final OliphauntPool pool = new OliphauntPool();
firstOliphaunt=pool.checkOut()
final Oliphaunt firstOliphaunt = pool.checkOut();
secondOliphaunt=pool.checkOut()
final Oliphaunt secondOliphaunt = pool.checkOut();
oliphaunt3=pool.checkOut()
final Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
final Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunts=Arrays.asList(pool.checkOut(),pool.checkOut())
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
Weather weather = new Weather();
GWeather gWeather = new GWeather();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
String[] args = {};
final ArrayList<Object[]> testData = new ArrayList<>();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
observer=this.factory.get()
final O observer = this.factory.get();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
observer=this.factory.get()
final O observer = this.factory.get();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
MessageQueue queue = new SimpleMessageQueue(10000);
final Producer producer = new Producer("PRODUCER_1", queue);
final Consumer consumer = new Consumer("CONSUMER_1", queue);
Message msg;
sender=msg.getHeader(Headers.SENDER)
String sender = msg.getHeader(Headers.SENDER);
body=msg.getBody()
String body = msg.getBody();
Message msg = new SimpleMessage();
String[] args = {};
final Message[] messages = new Message[]{
        createMessage("you", "Hello!"),
        createMessage("me", "Hi!"),
        Message.POISON_PILL,
        createMessage("late_for_the_party", "Hello? Anyone here?"),
    };
final MessageQueue queue = new SimpleMessageQueue(messages.length);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final SimpleMessage msg = new SimpleMessage();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
messageCaptor=ArgumentCaptor.forClass(Message.class)
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
message=messageCaptor.getValue()
final Message message = messageCaptor.getValue();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
final SimpleMessage message = new SimpleMessage();
final String senderName = "test";
final SimpleMessage message = new SimpleMessage();
headers=message.getHeaders()
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
Stew stew = new Stew(1, 2, 3, 4);
ImmutableStew immutableStew = new ImmutableStew(2, 4, 3, 6);
String[] args = {};
final Stew stew = new Stew(1, 2, 3, 4);
final String message = "Mixing the stew we find: 1 potatoes, 2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Stew stew = new Stew(1, 2, 3, 4);
final ImmutableStew stew = new ImmutableStew(1, 2, 3, 4);
final String expectedMessage = "Mixing the immutable stew we find: 1 potatoes, "
        + "2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ItemQueue queue = new ItemQueue();
executorService=Executors.newFixedThreadPool(5)
ExecutorService executorService = Executors.newFixedThreadPool(5);
final Producer producer = new Producer("Producer_" + i, queue);
final Consumer consumer = new Consumer("Consumer_" + i, queue);
item=queue.take()
Item item = queue.take();
Item item = new Item(name, itemId++);
Random random = new Random();
String[] args = {};
queue=spy(new ItemQueue())
final ItemQueue queue = spy(new ItemQueue());
final Consumer consumer = new Consumer("consumer", queue);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
queue=mock(ItemQueue.class)
final ItemQueue queue = mock(ItemQueue.class);
final Producer producer = new Producer("producer", queue);
Prototype charProto = new Character();
Character mageProto = new Character(Type.MAGE, charProto);
Character warProto = new Character(Type.WARRIOR, charProto);
Character rogueProto = new Character(Type.ROGUE, charProto);
Character mag = new Character("Player_1", mageProto);
Character warrior = new Character("Player_2", warProto);
Character rogue = new Character("Player_3", rogueProto);
Character rogueDouble = new Character("Player_4", rogue);
containsValue=properties.containsKey(stat)
boolean containsValue = properties.containsKey(stat);
StringBuilder builder = new StringBuilder();
value=this.get(stat)
Integer value = this.get(stat);
String[] args = {};
final Character prototype = new Character();
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character mage = new Character(Type.MAGE, prototype);
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
HeroFactory factory;
Mage mage;
Warlord warlord;
Beast beast;
String[] args = {};
mage=mock(Mage.class)
final Mage mage = mock(Mage.class);
warlord=mock(Warlord.class)
final Warlord warlord = mock(Warlord.class);
beast=mock(Beast.class)
final Beast beast = mock(Beast.class);
final HeroFactoryImpl factory = new HeroFactoryImpl(mage, warlord, beast);
clone=this.testedPrototype.clone()
final Object clone = this.testedPrototype.clone();
WizardTowerProxy tower = new WizardTowerProxy();
String[] args = {};
final String[] wizardNames = {"Gandalf", "Dumbledore", "Oz", "Merlin"};
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTowerProxy tower = new WizardTowerProxy();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTower tower = new WizardTower();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
CamelContext context = new DefaultCamelContext();
template=context.createProducerTemplate()
ProducerTemplate template = context.createProducerTemplate();
String[] args = {};
LoggingHandler loggingHandler = new LoggingHandler();
NioServerSocketChannel channel = new NioServerSocketChannel(port, handler);
NioDatagramChannel channel = new NioDatagramChannel(port, handler);
AppClient appClient = new AppClient();
outputStream=socket.getOutputStream()
OutputStream outputStream = socket.getOutputStream();
PrintWriter writer = new PrintWriter(outputStream);
byte[] data = new byte[1024];
read=inputStream.read(data,0,data.length)
int read = inputStream.read(data, 0, data.length);
String message = clientName + " - Log request: " + i;
DatagramPacket request =
              new DatagramPacket(message.getBytes(), message.getBytes().length, remoteAddress);
byte[] data = new byte[1024];
DatagramPacket reply = new DatagramPacket(data, data.length);
DatagramPacket datagram = (DatagramPacket) readObject;
DatagramPacket replyPacket = new DatagramPacket(ByteBuffer.wrap(ACK));
buffer=ByteBuffer.wrap(ACK)
ByteBuffer buffer = ByteBuffer.wrap(ACK);
pendingWrites=channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
pendingWrite=pendingWrites.poll()
Object pendingWrite = pendingWrites.poll();
pendingWrites=this.channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
sender=((DatagramChannel)key.channel()).receive(buffer)
SocketAddress sender = ((DatagramChannel) key.channel()).receive(buffer);
DatagramPacket packet = new DatagramPacket(buffer);
DatagramPacket pendingPacket = (DatagramPacket) pendingWrite;
key=channel.getJavaChannel().register(selector,channel.getInterestedOps())
SelectionKey key = channel.getJavaChannel().register(selector, channel.getInterestedOps());
keys=selector.selectedKeys()
Set<SelectionKey> keys = selector.selectedKeys();
Set<SelectionKey> keys = selector.selectedKeys();
iterator=keys.iterator()
Iterator<SelectionKey> iterator = keys.iterator();
Iterator<SelectionKey> iterator = keys.iterator();
key=iterator.next()
SelectionKey key = iterator.next();
iterator=pendingCommands.iterator()
Iterator<Runnable> iterator = pendingCommands.iterator();
Iterator<Runnable> iterator = pendingCommands.iterator();
command=iterator.next()
Runnable command = iterator.next();
AbstractNioChannel channel = (AbstractNioChannel) key.attachment();
readObject=((AbstractNioChannel)key.attachment()).read(key)
Object readObject = ((AbstractNioChannel) key.attachment()).read(key);
ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();
socketChannel=serverSocketChannel.accept()
SocketChannel socketChannel = serverSocketChannel.accept();
readKey=socketChannel.register(selector,SelectionKey.OP_READ)
SelectionKey readKey = socketChannel.register(selector, SelectionKey.OP_READ);
SocketChannel socketChannel = (SocketChannel) key.channel();
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
read=socketChannel.read(buffer)
int read = socketChannel.read(buffer);
ByteBuffer pendingBuffer = (ByteBuffer) pendingWrite;
App app = new App(new ThreadPoolDispatcher(2));
AppClient client = new AppClient();
App app = new App(new SameThreadDispatcher());
AppClient client = new AppClient();
executeService=Executors.newFixedThreadPool(10)
ExecutorService executeService = Executors.newFixedThreadPool(10);
ReaderWriterLock lock = new ReaderWriterLock();
String[] args = {};
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
reader1=spy(new Reader("Reader 1",lock.readLock()))
Reader reader1 = spy(new Reader("Reader 1", lock.readLock()));
reader2=spy(new Reader("Reader 2",lock.readLock()))
Reader reader2 = spy(new Reader("Reader 2", lock.readLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
writer1=spy(new Writer("Writer 1",lock.writeLock()))
Writer writer1 = spy(new Writer("Writer 1", lock.writeLock()));
writer2=spy(new Writer("Writer 2",lock.writeLock()))
Writer writer2 = spy(new Writer("Writer 2", lock.writeLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
        "applicationContext.xml");
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
BasicDataSource basicDataSource = new BasicDataSource();
LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();
Properties properties = new Properties();
JpaTransactionManager transactionManager = new JpaTransactionManager();
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
        AppConfig.class);
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
final int prime = 31;
int result = 1;
Person other = (Person) obj;
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
resultSet=dataSource.getConnection().createStatement().executeQuery("SELECT 1")
ResultSet resultSet = dataSource.getConnection().createStatement().executeQuery("SELECT 1");
String result = null;
String expected = "1";
String[] args = {};
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
String[] args = {};
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
King k = new King();
Queen q = new Queen();
ArrayList<Royalty> guests = new ArrayList<>();
boolean anotherDay = true;
String[] args = {};
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
goodMoodRoyalty=mock(Royalty.class)
final Royalty goodMoodRoyalty = mock(Royalty.class);
badMoodRoyalty=mock(Royalty.class)
final Royalty badMoodRoyalty = mock(Royalty.class);
final ArrayList<Royalty> goodCompany = new ArrayList<>();
final ArrayList<Royalty> badCompany = new ArrayList<>();
Spell spell1 = new Spell("Ice dart");
Spell spell2 = new Spell("Invisibility");
Spell spell3 = new Spell("Stun bolt");
Spell spell4 = new Spell("Confusion");
Spell spell5 = new Spell("Darkness");
Spell spell6 = new Spell("Fireball");
Spell spell7 = new Spell("Enchant weapon");
Spell spell8 = new Spell("Rock armour");
Spell spell9 = new Spell("Light");
Spell spell10 = new Spell("Bee swarm");
Spell spell11 = new Spell("Haste");
Spell spell12 = new Spell("Levitation");
Spell spell13 = new Spell("Magic lock");
Spell spell14 = new Spell("Summon hell bat");
Spell spell15 = new Spell("Water walking");
Spell spell16 = new Spell("Magic storm");
Spell spell17 = new Spell("Entangle");
SpellDao spellDao = new SpellDaoImpl();
SpellbookDao spellbookDao = new SpellbookDaoImpl();
Spellbook spellbook1 = new Spellbook("Book of Orgymon");
Spellbook spellbook2 = new Spellbook("Book of Aras");
Spellbook spellbook3 = new Spellbook("Book of Kritior");
Spellbook spellbook4 = new Spellbook("Book of Tamaex");
Spellbook spellbook5 = new Spellbook("Book of Idores");
Spellbook spellbook6 = new Spellbook("Book of Opaen");
Spellbook spellbook7 = new Spellbook("Book of Kihione");
WizardDao wizardDao = new WizardDaoImpl();
Wizard wizard1 = new Wizard("Aderlard Boud");
Wizard wizard2 = new Wizard("Anaxis Bajraktari");
Wizard wizard3 = new Wizard("Xuban Munoa");
Wizard wizard4 = new Wizard("Blasius Dehooge");
MagicService service =
        new MagicServiceImpl(new WizardDaoImpl(), new SpellbookDaoImpl(), new SpellDaoImpl());
wizardsWithSpellbook=service.findWizardsWithSpellbook("Book of Idores")
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
wizardsWithSpell=service.findWizardsWithSpell("Fireball")
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
List<E> result = null;
List<E> result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
spellbook=spellbookDao.findByName(name)
Spellbook spellbook = spellbookDao.findByName(name);
spell=spellDao.findByName(name)
Spell spell = spellDao.findByName(name);
spellbook=spell.getSpellbook()
Spellbook spellbook = spell.getSpellbook();
session=getSession()
Session session = getSession();
Transaction tx = null;
Spell result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Spellbook result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Wizard result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
String[] args = {};
className=dao.persistentClass.getSimpleName()
final String className = dao.persistentClass.getSimpleName();
entityName=String.format("%s%d",className,ID_GENERATOR.incrementAndGet())
final String entityName = String.format("%s%d", className, ID_GENERATOR.incrementAndGet());
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
byId=this.dao.find(entity.getId())
final E byId = this.dao.find(entity.getId());
originalEntities=this.dao.findAll()
final List<E> originalEntities = this.dao.findAll();
final List<E> originalEntities = this.dao.findAll();
entitiesLeft=this.dao.findAll()
final List<E> entitiesLeft = this.dao.findAll();
final List<E> entitiesLeft = this.dao.findAll();
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
expectedId=Long.valueOf(1)
final Long expectedId = Long.valueOf(1);
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
final String expectedName = "new name";
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
final String bookname = "bookname";
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
final Set<Wizard> wizards = new HashSet<>();
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpellbook(bookname)
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final Set<Wizard> wizards = new HashSet<>();
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spell=mock(Spell.class)
final Spell spell = mock(Spell.class);
final String spellName = "spellname";
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpell(spellName)
final List<Wizard> result = service.findWizardsWithSpell(spellName);
final List<Wizard> result = service.findWizardsWithSpell(spellName);
dao=getDao()
final SpellDaoImpl dao = getDao();
allSpells=dao.findAll()
final List<Spell> allSpells = dao.findAll();
final List<Spell> allSpells = dao.findAll();
spellByName=dao.findByName(spell.getName())
final Spell spellByName = dao.findByName(spell.getName());
dao=getDao()
final SpellbookDaoImpl dao = getDao();
allBooks=dao.findAll()
final List<Spellbook> allBooks = dao.findAll();
final List<Spellbook> allBooks = dao.findAll();
spellByName=dao.findByName(book.getName())
final Spellbook spellByName = dao.findByName(book.getName());
dao=getDao()
final WizardDaoImpl dao = getDao();
allWizards=dao.findAll()
final List<Wizard> allWizards = dao.findAll();
final List<Wizard> allWizards = dao.findAll();
byName=dao.findByName(spell.getName())
final Wizard byName = dao.findByName(spell.getName());
service=ServiceLocator.getService("jndi/serviceA")
Service service = ServiceLocator.getService("jndi/serviceA");
Service cachedService = null;
serviceObj=serviceCache.getService(serviceJndiName)
Service serviceObj = serviceCache.getService(serviceJndiName);
InitContext ctx = new InitContext();
String[] args = {};
final String[] serviceNames = new String[]{
        "jndi/serviceA", "jndi/serviceB"
    };
service=ServiceLocator.getService(serviceName)
final Service service = ServiceLocator.getService(serviceName);
ivoryTower1=IvoryTower.getInstance()
IvoryTower ivoryTower1 = IvoryTower.getInstance();
ivoryTower2=IvoryTower.getInstance()
IvoryTower ivoryTower2 = IvoryTower.getInstance();
threadSafeIvoryTower1=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower1 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
threadSafeIvoryTower2=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower2 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
EnumIvoryTower enumIvoryTower1 = EnumIvoryTower.INSTANCE;
EnumIvoryTower enumIvoryTower2 = EnumIvoryTower.INSTANCE;
dcl1=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();
dcl2=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();
demandHolderIdiom=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom =
        InitializingOnDemandHolderIdiom.getInstance();
demandHolderIdiom2=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom2 =
        InitializingOnDemandHolderIdiom.getInstance();
ThreadSafeDoubleCheckLocking result = instance;
String[] args = {};
instance1=this.singletonInstanceMethod.get()
S instance1 = this.singletonInstanceMethod.get();
instance2=this.singletonInstanceMethod.get()
S instance2 = this.singletonInstanceMethod.get();
instance3=this.singletonInstanceMethod.get()
S instance3 = this.singletonInstanceMethod.get();
final List<Callable<S>> tasks = new ArrayList<>();
int i = 0
creatures=Arrays.asList(new Goblin(),new Octopus(),new Dragon(),new Shark(),new Troll(),new KillerBee())
List<Creature> creatures =
        Arrays.asList(new Goblin(), new Octopus(), new Dragon(), new Shark(), new Troll(),
            new KillerBee());
walkingCreatures=creatures.stream().filter(new MovementSelector(Movement.WALKING)).collect(Collectors.toList())
List<Creature> walkingCreatures =
        creatures.stream().filter(new MovementSelector(Movement.WALKING))
            .collect(Collectors.toList());
darkCreatures=creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList())
List<Creature> darkCreatures =
        creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList());
redAndFlyingCreatures=creatures.stream().filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING))).collect(Collectors.toList())
List<Creature> redAndFlyingCreatures =
        creatures.stream()
            .filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING)))
            .collect(Collectors.toList());
String[] args = {};
toString=this.testedCreature.toString()
final String toString = this.testedCreature.toString();
greenCreature=mock(Creature.class)
final Creature greenCreature = mock(Creature.class);
redCreature=mock(Creature.class)
final Creature redCreature = mock(Creature.class);
final ColorSelector greenSelector = new ColorSelector(Color.GREEN);
swimmingCreature=mock(Creature.class)
final Creature swimmingCreature = mock(Creature.class);
flyingCreature=mock(Creature.class)
final Creature flyingCreature = mock(Creature.class);
final MovementSelector swimmingSelector = new MovementSelector(Movement.SWIMMING);
normalCreature=mock(Creature.class)
final Creature normalCreature = mock(Creature.class);
smallCreature=mock(Creature.class)
final Creature smallCreature = mock(Creature.class);
final SizeSelector normalSelector = new SizeSelector(Size.NORMAL);
Mammoth mammoth = new Mammoth();
String[] args = {};
inOrder=Mockito.inOrder(this.stdOutMock)
final InOrder inOrder = Mockito.inOrder(this.stdOutMock);
final Mammoth mammoth = new Mammoth();
toString=new Mammoth().toString()
final String toString = new Mammoth().toString();
warrior=CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin").withWeapon("Sword").noAbilities().build()
Character warrior =
        CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin")
            .withWeapon("Sword").noAbilities().build();
mage=CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer").withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport").noMoreAbilities().build()
Character mage =
        CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer")
            .withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport")
            .noMoreAbilities().build();
thief=CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build()
Character thief =
        CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build();
StringBuilder sb = new StringBuilder();
Character character = new Character(name);
String[] args = {};
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").withAbility("invisibility").withAbility("wisdom").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .withAbility("invisibility")
        .withAbility("wisdom")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").noSpell().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .noSpell()
        .build();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .noAbilities()
        .build();
character=CharacterStepBuilder.newBuilder().name("Cuauhtemoc").fighterClass("aztec").withWeapon("spear").withAbility("speed").withAbility("strength").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Cuauhtemoc")
        .fighterClass("aztec")
        .withWeapon("spear")
        .withAbility("speed")
        .withAbility("strength")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Poor warrior").fighterClass("none").noWeapon().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Poor warrior")
        .fighterClass("none")
        .noWeapon()
        .build();
character=CharacterStepBuilder.newBuilder().name("Weak warrior").fighterClass("none").withWeapon("Slingshot").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Weak warrior")
        .fighterClass("none")
        .withWeapon("Slingshot")
        .noAbilities()
        .build();
DragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());
String[] args = {};
strategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy strategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(strategy);
initialStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy initialStrategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(initialStrategy);
newStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy newStrategy = mock(DragonSlayingStrategy.class);
HalflingThief thief = new HalflingThief(new HitAndRunMethod());
target=pickTarget()
String target = pickTarget();
String[] args = {};
method=mock(StealingMethod.class)
final StealingMethod method = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(method);
initialMethod=mock(StealingMethod.class)
final StealingMethod initialMethod = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(initialMethod);
newMethod=mock(StealingMethod.class)
final StealingMethod newMethod = mock(StealingMethod.class);
inOrder=inOrder(this.stdOutMock)
final InOrder inOrder = inOrder(this.stdOutMock);
List<Task> tasks = new ArrayList<>();
executor=Executors.newFixedThreadPool(3)
ExecutorService executor = Executors.newFixedThreadPool(3);
Runnable worker = new Worker(tasks.get(i));
String[] args = {};
service=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService service = Executors.newFixedThreadPool(THREAD_COUNT);
final List<Callable<Integer>> tasks = new ArrayList<>();
int i = 0
task=mock(Task.class)
final Task task = mock(Task.class);
final Worker worker = new Worker(task);
RainbowFish fishV1 = new RainbowFish("Zed", 10, 11, 12);
deserializedFishV1=RainbowFishSerializer.readV1("fish1.out")
RainbowFish deserializedFishV1 = RainbowFishSerializer.readV1("fish1.out");
RainbowFishV2 fishV2 = new RainbowFishV2("Scar", 5, 12, 15, true, true, true);
deserializedFishV2=RainbowFishSerializer.readV1("fish2.out")
RainbowFish deserializedFishV2 = RainbowFishSerializer.readV1("fish2.out");
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
FileInputStream fileIn = new FileInputStream(filename);
ObjectInputStream objIn = new ObjectInputStream(fileIn);
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
String[] args = {};
File file1 = new File("fish1.out");
File file2 = new File("fish2.out");
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
final RainbowFish fish = new RainbowFish("name", 1, 2, 3);
final RainbowFishV2 fish = new RainbowFishV2("name", 1, 2, 3, false, true, false);
BallItem ballItem = new BallItem();
BallThread ballThread = new BallThread();
String[] args = {};
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
inOrder=inOrder(ballThread)
final InOrder inOrder = inOrder(ballThread);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
exceptionHandler=mock(UncaughtExceptionHandler.class)
final UncaughtExceptionHandler exceptionHandler = mock(UncaughtExceptionHandler.class);
statA=HeroStat.valueOf(10,5,0)
HeroStat statA = HeroStat.valueOf(10, 5, 0);
statB=HeroStat.valueOf(10,5,0)
HeroStat statB = HeroStat.valueOf(10, 5, 0);
statC=HeroStat.valueOf(5,1,8)
HeroStat statC = HeroStat.valueOf(5, 1, 8);
final int prime = 31;
int result = 1;
HeroStat other = (HeroStat) obj;
String[] args = {};
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatC=HeroStat.valueOf(3,9,8)
HeroStat heroStatC = HeroStat.valueOf(3, 9, 8);
Commander commander =
        new Commander(new Sergeant(new Soldier(), new Soldier(), new Soldier()), new Sergeant(
            new Soldier(), new Soldier(), new Soldier()));
String[] args = {};
final Unit[] children = new Unit[5];
unit=this.factory.apply(children)
final U unit = this.factory.apply(children);
visitor=mock(UnitVisitor.class)
final UnitVisitor visitor = mock(UnitVisitor.class);

Diff of 2238369fc0d61cf45b23a1db3c4ed82163d54219 and 3a0ee1fea5016b57732f58809caf680cd9c64d70:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 212
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 6
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 2238369fc0d61cf45b23a1db3c4ed82163d54219 to 3a0ee1fea5016b57732f58809caf680cd9c64d70

************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null

****Parsing for addition at revision e3f2da8544b23cc95579aa50da962c6ab15917eb****

Added App.java to .\/java-design-patterns\ repository source files.
Added Army.java to .\/java-design-patterns\ repository source files.
Added Castle.java to .\/java-design-patterns\ repository source files.
Added ElfArmy.java to .\/java-design-patterns\ repository source files.
Added ElfCastle.java to .\/java-design-patterns\ repository source files.
Added ElfKing.java to .\/java-design-patterns\ repository source files.
Added ElfKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added KingdomFactory.java to .\/java-design-patterns\ repository source files.
Added OrcArmy.java to .\/java-design-patterns\ repository source files.
Added OrcCastle.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added AbstractFactoryTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BattleFishingBoat.java to .\/java-design-patterns\ repository source files.
Added BattleShip.java to .\/java-design-patterns\ repository source files.
Added Captain.java to .\/java-design-patterns\ repository source files.
Added FishingBoat.java to .\/java-design-patterns\ repository source files.
Added AdapterPatternTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsyncCallback.java to .\/java-design-patterns\ repository source files.
Added AsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AsyncResult.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Excalibur.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added MagicWeapon.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Mjollnir.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Stormbringer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Armor.java to .\/java-design-patterns\ repository source files.
Added HairColor.java to .\/java-design-patterns\ repository source files.
Added HairType.java to .\/java-design-patterns\ repository source files.
Added Hero.java to .\/java-design-patterns\ repository source files.
Added Profession.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegate.java to .\/java-design-patterns\ repository source files.
Added BusinessLookup.java to .\/java-design-patterns\ repository source files.
Added BusinessService.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added EjbService.java to .\/java-design-patterns\ repository source files.
Added JmsService.java to .\/java-design-patterns\ repository source files.
Added ServiceType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegateTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppManager.java to .\/java-design-patterns\ repository source files.
Added CacheStore.java to .\/java-design-patterns\ repository source files.
Added CachingPolicy.java to .\/java-design-patterns\ repository source files.
Added DbManager.java to .\/java-design-patterns\ repository source files.
Added LruCache.java to .\/java-design-patterns\ repository source files.
Added UserAccount.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CachingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Callback.java to .\/java-design-patterns\ repository source files.
Added LambdasApp.java to .\/java-design-patterns\ repository source files.
Added SimpleTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CallbackTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added OrcCommander.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcOfficer.java to .\/java-design-patterns\ repository source files.
Added OrcSoldier.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added RequestHandler.java to .\/java-design-patterns\ repository source files.
Added RequestType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OrcKingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added InvisibilitySpell.java to .\/java-design-patterns\ repository source files.
Added ShrinkSpell.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added Visibility.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Letter.java to .\/java-design-patterns\ repository source files.
Added LetterComposite.java to .\/java-design-patterns\ repository source files.
Added Messenger.java to .\/java-design-patterns\ repository source files.
Added Sentence.java to .\/java-design-patterns\ repository source files.
Added Word.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MessengerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Customer.java to .\/java-design-patterns\ repository source files.
Added CustomerDao.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added CustomerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hostile.java to .\/java-design-patterns\ repository source files.
Added SmartHostile.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SmartHostileTest.java to .\/java-design-patterns\ repository source files.
Added TrollTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Printer.java to .\/java-design-patterns\ repository source files.
Added PrinterController.java to .\/java-design-patterns\ repository source files.
Added CanonPrinter.java to .\/java-design-patterns\ repository source files.
Added EpsonPrinter.java to .\/java-design-patterns\ repository source files.
Added HpPrinter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DelegateTest.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizard.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GuiceWizard.java to .\/java-design-patterns\ repository source files.
Added OldTobyTobacco.java to .\/java-design-patterns\ repository source files.
Added RivendellTobacco.java to .\/java-design-patterns\ repository source files.
Added SecondBreakfastTobacco.java to .\/java-design-patterns\ repository source files.
Added SimpleWizard.java to .\/java-design-patterns\ repository source files.
Added Tobacco.java to .\/java-design-patterns\ repository source files.
Added TobaccoModule.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizardTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GuiceWizardTest.java to .\/java-design-patterns\ repository source files.
Added SimpleWizardTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Inventory.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added InventoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroid.java to .\/java-design-patterns\ repository source files.
Added GameObject.java to .\/java-design-patterns\ repository source files.
Added Meteoroid.java to .\/java-design-patterns\ repository source files.
Added Rectangle.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIss.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMir.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CollisionTest.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroidTest.java to .\/java-design-patterns\ repository source files.
Added MeteoroidTest.java to .\/java-design-patterns\ repository source files.
Added RectangleTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIssTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMirTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added EventEmitter.java to .\/java-design-patterns\ repository source files.
Added EventObserver.java to .\/java-design-patterns\ repository source files.
Added KingJoffrey.java to .\/java-design-patterns\ repository source files.
Added KingsHand.java to .\/java-design-patterns\ repository source files.
Added LordBaelish.java to .\/java-design-patterns\ repository source files.
Added LordVarys.java to .\/java-design-patterns\ repository source files.
Added Scout.java to .\/java-design-patterns\ repository source files.
Added Weekday.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EventEmitterTest.java to .\/java-design-patterns\ repository source files.
Added EventTest.java to .\/java-design-patterns\ repository source files.
Added KingJoffreyTest.java to .\/java-design-patterns\ repository source files.
Added KingsHandTest.java to .\/java-design-patterns\ repository source files.
Added LordBaelishTest.java to .\/java-design-patterns\ repository source files.
Added LordVarysTest.java to .\/java-design-patterns\ repository source files.
Added ScoutTest.java to .\/java-design-patterns\ repository source files.
Added WeekdayTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEvent.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEvent.java to .\/java-design-patterns\ repository source files.
Added EventDispatcher.java to .\/java-design-patterns\ repository source files.
Added Handler.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventTest.java to .\/java-design-patterns\ repository source files.
Added EventDispatcherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileWriterAction.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DwarvenCartOperator.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldDigger.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacade.java to .\/java-design-patterns\ repository source files.
Added DwarvenMineWorker.java to .\/java-design-patterns\ repository source files.
Added DwarvenTunnelDigger.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacadeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Axe.java to .\/java-design-patterns\ repository source files.
Added Bow.java to .\/java-design-patterns\ repository source files.
Added Builder.java to .\/java-design-patterns\ repository source files.
Added Spear.java to .\/java-design-patterns\ repository source files.
Added Sword.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponFactory.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryKitTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Blacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfBlacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfWeapon.java to .\/java-design-patterns\ repository source files.
Added OrcBlacksmith.java to .\/java-design-patterns\ repository source files.
Added OrcWeapon.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added UserGroup.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added UserGroupTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FluentIterable.java to .\/java-design-patterns\ repository source files.
Added DecoratingIterator.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterable.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterable.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added ActionType.java to .\/java-design-patterns\ repository source files.
Added Content.java to .\/java-design-patterns\ repository source files.
Added ContentAction.java to .\/java-design-patterns\ repository source files.
Added MenuAction.java to .\/java-design-patterns\ repository source files.
Added MenuItem.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added ContentStore.java to .\/java-design-patterns\ repository source files.
Added MenuStore.java to .\/java-design-patterns\ repository source files.
Added Store.java to .\/java-design-patterns\ repository source files.
Added ContentView.java to .\/java-design-patterns\ repository source files.
Added MenuView.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ContentTest.java to .\/java-design-patterns\ repository source files.
Added MenuItemTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DispatcherTest.java to .\/java-design-patterns\ repository source files.
Added ContentStoreTest.java to .\/java-design-patterns\ repository source files.
Added MenuStoreTest.java to .\/java-design-patterns\ repository source files.
Added ContentViewTest.java to .\/java-design-patterns\ repository source files.
Added MenuViewTest.java to .\/java-design-patterns\ repository source files.
Added AlchemistShop.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HealingPotion.java to .\/java-design-patterns\ repository source files.
Added HolyWaterPotion.java to .\/java-design-patterns\ repository source files.
Added InvisibilityPotion.java to .\/java-design-patterns\ repository source files.
Added PoisonPotion.java to .\/java-design-patterns\ repository source files.
Added Potion.java to .\/java-design-patterns\ repository source files.
Added PotionFactory.java to .\/java-design-patterns\ repository source files.
Added PotionType.java to .\/java-design-patterns\ repository source files.
Added StrengthPotion.java to .\/java-design-patterns\ repository source files.
Added AlchemistShopTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ApplicationException.java to .\/java-design-patterns\ repository source files.
Added ArcherCommand.java to .\/java-design-patterns\ repository source files.
Added ArcherView.java to .\/java-design-patterns\ repository source files.
Added CatapultCommand.java to .\/java-design-patterns\ repository source files.
Added CatapultView.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added ErrorView.java to .\/java-design-patterns\ repository source files.
Added FrontController.java to .\/java-design-patterns\ repository source files.
Added UnknownCommand.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ApplicationExceptionTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added FrontControllerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added ViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsynchronousService.java to .\/java-design-patterns\ repository source files.
Added AsyncTask.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added AsynchronousServiceTest.java to .\/java-design-patterns\ repository source files.
Added AbstractFilter.java to .\/java-design-patterns\ repository source files.
Added AddressFilter.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added ContactFilter.java to .\/java-design-patterns\ repository source files.
Added DepositFilter.java to .\/java-design-patterns\ repository source files.
Added Filter.java to .\/java-design-patterns\ repository source files.
Added FilterChain.java to .\/java-design-patterns\ repository source files.
Added FilterManager.java to .\/java-design-patterns\ repository source files.
Added NameFilter.java to .\/java-design-patterns\ repository source files.
Added Order.java to .\/java-design-patterns\ repository source files.
Added OrderFilter.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FilterManagerTest.java to .\/java-design-patterns\ repository source files.
Added FilterTest.java to .\/java-design-patterns\ repository source files.
Added OrderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Expression.java to .\/java-design-patterns\ repository source files.
Added MinusExpression.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpression.java to .\/java-design-patterns\ repository source files.
Added NumberExpression.java to .\/java-design-patterns\ repository source files.
Added PlusExpression.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MinusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpressionTest.java to .\/java-design-patterns\ repository source files.
Added NumberExpressionTest.java to .\/java-design-patterns\ repository source files.
Added PlusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemIterator.java to .\/java-design-patterns\ repository source files.
Added ItemType.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestItemIterator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Cake.java to .\/java-design-patterns\ repository source files.
Added CakeBakingException.java to .\/java-design-patterns\ repository source files.
Added CakeBakingService.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImpl.java to .\/java-design-patterns\ repository source files.
Added CakeDao.java to .\/java-design-patterns\ repository source files.
Added CakeInfo.java to .\/java-design-patterns\ repository source files.
Added CakeLayer.java to .\/java-design-patterns\ repository source files.
Added CakeLayerDao.java to .\/java-design-patterns\ repository source files.
Added CakeLayerInfo.java to .\/java-design-patterns\ repository source files.
Added CakeTopping.java to .\/java-design-patterns\ repository source files.
Added CakeToppingDao.java to .\/java-design-patterns\ repository source files.
Added CakeToppingInfo.java to .\/java-design-patterns\ repository source files.
Added CakeViewImpl.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingExceptionTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added CakeTest.java to .\/java-design-patterns\ repository source files.
Added CakeViewImplTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Heavy.java to .\/java-design-patterns\ repository source files.
Added HolderNaive.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafe.java to .\/java-design-patterns\ repository source files.
Added Java8Holder.java to .\/java-design-patterns\ repository source files.
Added AbstractHolderTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HolderNaiveTest.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafeTest.java to .\/java-design-patterns\ repository source files.
Added Java8HolderTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hobbit.java to .\/java-design-patterns\ repository source files.
Added Hunter.java to .\/java-design-patterns\ repository source files.
Added Party.java to .\/java-design-patterns\ repository source files.
Added PartyImpl.java to .\/java-design-patterns\ repository source files.
Added PartyMember.java to .\/java-design-patterns\ repository source files.
Added PartyMemberBase.java to .\/java-design-patterns\ repository source files.
Added Rogue.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added PartyImplTest.java to .\/java-design-patterns\ repository source files.
Added PartyMemberTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Star.java to .\/java-design-patterns\ repository source files.
Added StarMemento.java to .\/java-design-patterns\ repository source files.
Added StarType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StarTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Fatigue.java to .\/java-design-patterns\ repository source files.
Added GiantController.java to .\/java-design-patterns\ repository source files.
Added GiantModel.java to .\/java-design-patterns\ repository source files.
Added GiantView.java to .\/java-design-patterns\ repository source files.
Added Health.java to .\/java-design-patterns\ repository source files.
Added Nourishment.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GiantControllerTest.java to .\/java-design-patterns\ repository source files.
Added GiantModelTest.java to .\/java-design-patterns\ repository source files.
Added GiantViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileLoader.java to .\/java-design-patterns\ repository source files.
Added FileSelectorJFrame.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenter.java to .\/java-design-patterns\ repository source files.
Added FileSelectorStub.java to .\/java-design-patterns\ repository source files.
Added FileSelectorView.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FileLoaderTest.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Sex.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added Validator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MonadTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added LoadBalancer.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added Server.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added LoadBalancerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Nazgul.java to .\/java-design-patterns\ repository source files.
Added NazgulName.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NazgulTest.java to .\/java-design-patterns\ repository source files.
Added HomePageService.java to .\/java-design-patterns\ repository source files.
Added HomePageViewModel.java to .\/java-design-patterns\ repository source files.
Added SimpleObject.java to .\/java-design-patterns\ repository source files.
Added SimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectTest.java to .\/java-design-patterns\ repository source files.
Added DomainAppFixturesProvider.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectCreate.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTearDown.java to .\/java-design-patterns\ repository source files.
Added RecreateSimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleAppSystemInitializer.java to .\/java-design-patterns\ repository source files.
Added BootstrappingGlue.java to .\/java-design-patterns\ repository source files.
Added CatalogOfFixturesGlue.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectGlue.java to .\/java-design-patterns\ repository source files.
Added RunSpecs.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleAppIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleApplication.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Node.java to .\/java-design-patterns\ repository source files.
Added NodeImpl.java to .\/java-design-patterns\ repository source files.
Added NullNode.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NullNodeTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added TreeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ObjectPool.java to .\/java-design-patterns\ repository source files.
Added Oliphaunt.java to .\/java-design-patterns\ repository source files.
Added OliphauntPool.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OliphauntPoolTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GHobbits.java to .\/java-design-patterns\ repository source files.
Added GOrcs.java to .\/java-design-patterns\ repository source files.
Added GWeather.java to .\/java-design-patterns\ repository source files.
Added Observable.java to .\/java-design-patterns\ repository source files.
Added Observer.java to .\/java-design-patterns\ repository source files.
Added Race.java to .\/java-design-patterns\ repository source files.
Added Hobbits.java to .\/java-design-patterns\ repository source files.
Added Orcs.java to .\/java-design-patterns\ repository source files.
Added Weather.java to .\/java-design-patterns\ repository source files.
Added WeatherObserver.java to .\/java-design-patterns\ repository source files.
Added WeatherType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GHobbitsTest.java to .\/java-design-patterns\ repository source files.
Added GWeatherTest.java to .\/java-design-patterns\ repository source files.
Added ObserverTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added HobbitsTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WeatherObserverTest.java to .\/java-design-patterns\ repository source files.
Added WeatherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added MessageQueue.java to .\/java-design-patterns\ repository source files.
Added MqPublishPoint.java to .\/java-design-patterns\ repository source files.
Added MqSubscribePoint.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added SimpleMessage.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageQueue.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added PoisonMessageTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ImmutableStew.java to .\/java-design-patterns\ repository source files.
Added Stew.java to .\/java-design-patterns\ repository source files.
Added StewData.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ImmutableStewTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added StewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemQueue.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Stats.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Beast.java to .\/java-design-patterns\ repository source files.
Added ElfBeast.java to .\/java-design-patterns\ repository source files.
Added ElfMage.java to .\/java-design-patterns\ repository source files.
Added ElfWarlord.java to .\/java-design-patterns\ repository source files.
Added HeroFactory.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImpl.java to .\/java-design-patterns\ repository source files.
Added Mage.java to .\/java-design-patterns\ repository source files.
Added OrcBeast.java to .\/java-design-patterns\ repository source files.
Added OrcMage.java to .\/java-design-patterns\ repository source files.
Added OrcWarlord.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Warlord.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImplTest.java to .\/java-design-patterns\ repository source files.
Added PrototypeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardTower.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WizardTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxyTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppClient.java to .\/java-design-patterns\ repository source files.
Added LoggingHandler.java to .\/java-design-patterns\ repository source files.
Added AbstractNioChannel.java to .\/java-design-patterns\ repository source files.
Added ChannelHandler.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added NioDatagramChannel.java to .\/java-design-patterns\ repository source files.
Added NioReactor.java to .\/java-design-patterns\ repository source files.
Added NioServerSocketChannel.java to .\/java-design-patterns\ repository source files.
Added SameThreadDispatcher.java to .\/java-design-patterns\ repository source files.
Added ThreadPoolDispatcher.java to .\/java-design-patterns\ repository source files.
Added ReactorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Reader.java to .\/java-design-patterns\ repository source files.
Added ReaderWriterLock.java to .\/java-design-patterns\ repository source files.
Added Writer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ReaderAndWriterTest.java to .\/java-design-patterns\ repository source files.
Added ReaderTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppConfig.java to .\/java-design-patterns\ repository source files.
Added Person.java to .\/java-design-patterns\ repository source files.
Added PersonRepository.java to .\/java-design-patterns\ repository source files.
Added PersonSpecifications.java to .\/java-design-patterns\ repository source files.
Added AnnotationBasedRepositoryTest.java to .\/java-design-patterns\ repository source files.
Added AppConfigTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RepositoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added SlidingDoor.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ClosableTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added Queen.java to .\/java-design-patterns\ repository source files.
Added Royalty.java to .\/java-design-patterns\ repository source files.
Added Servant.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added KingTest.java to .\/java-design-patterns\ repository source files.
Added QueenTest.java to .\/java-design-patterns\ repository source files.
Added ServantTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BaseEntity.java to .\/java-design-patterns\ repository source files.
Added Dao.java to .\/java-design-patterns\ repository source files.
Added DaoBaseImpl.java to .\/java-design-patterns\ repository source files.
Added HibernateUtil.java to .\/java-design-patterns\ repository source files.
Added MagicService.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImpl.java to .\/java-design-patterns\ repository source files.
Added Spell.java to .\/java-design-patterns\ repository source files.
Added SpellDao.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Spellbook.java to .\/java-design-patterns\ repository source files.
Added SpellbookDao.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardDao.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BaseDaoTest.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added InitContext.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added ServiceCache.java to .\/java-design-patterns\ repository source files.
Added ServiceImpl.java to .\/java-design-patterns\ repository source files.
Added ServiceLocator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ServiceLocatorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTower.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiom.java to .\/java-design-patterns\ repository source files.
Added IvoryTower.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLocking.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTower.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiomTest.java to .\/java-design-patterns\ repository source files.
Added IvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added SingletonTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLockingTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AbstractCreature.java to .\/java-design-patterns\ repository source files.
Added Creature.java to .\/java-design-patterns\ repository source files.
Added Dragon.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added KillerBee.java to .\/java-design-patterns\ repository source files.
Added Octopus.java to .\/java-design-patterns\ repository source files.
Added Shark.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added Color.java to .\/java-design-patterns\ repository source files.
Added Movement.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added ColorSelector.java to .\/java-design-patterns\ repository source files.
Added MovementSelector.java to .\/java-design-patterns\ repository source files.
Added SizeSelector.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CreatureTest.java to .\/java-design-patterns\ repository source files.
Added ColorSelectorTest.java to .\/java-design-patterns\ repository source files.
Added MovementSelectorTest.java to .\/java-design-patterns\ repository source files.
Added SizeSelectorTest.java to .\/java-design-patterns\ repository source files.
Added AngryState.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Mammoth.java to .\/java-design-patterns\ repository source files.
Added PeacefulState.java to .\/java-design-patterns\ repository source files.
Added State.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MammothTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilder.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DragonSlayer.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategy.java to .\/java-design-patterns\ repository source files.
Added MeleeStrategy.java to .\/java-design-patterns\ repository source files.
Added ProjectileStrategy.java to .\/java-design-patterns\ repository source files.
Added SpellStrategy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayerTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategyTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HalflingThief.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethod.java to .\/java-design-patterns\ repository source files.
Added StealingMethod.java to .\/java-design-patterns\ repository source files.
Added SubtleMethod.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HalflingThiefTest.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethodTest.java to .\/java-design-patterns\ repository source files.
Added StealingMethodTest.java to .\/java-design-patterns\ repository source files.
Added SubtleMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTask.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added Worker.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTaskTest.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTaskTest.java to .\/java-design-patterns\ repository source files.
Added TaskTest.java to .\/java-design-patterns\ repository source files.
Added WorkerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added RainbowFish.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializer.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializerTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2Test.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BallItem.java to .\/java-design-patterns\ repository source files.
Added BallThread.java to .\/java-design-patterns\ repository source files.
Added GameItem.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BallItemTest.java to .\/java-design-patterns\ repository source files.
Added BallThreadTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HeroStat.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroStatTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Commander.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitor.java to .\/java-design-patterns\ repository source files.
Added Sergeant.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitor.java to .\/java-design-patterns\ repository source files.
Added Soldier.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitor.java to .\/java-design-patterns\ repository source files.
Added Unit.java to .\/java-design-patterns\ repository source files.
Added UnitVisitor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommanderTest.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SergeantTest.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SoldierTest.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitorTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added UnitTest.java to .\/java-design-patterns\ repository source files.
Added VisitorTest.java to .\/java-design-patterns\ repository source files.
App app = new App();
elfKing=app.getKing(elfFactory)
final King elfKing = app.getKing(elfFactory);
orcKing=app.getKing(orcFactory)
final King orcKing = app.getKing(orcFactory);
elfCastle=app.getCastle(elfFactory)
final Castle elfCastle = app.getCastle(elfFactory);
orcCastle=app.getCastle(orcFactory)
final Castle orcCastle = app.getCastle(orcFactory);
elfArmy=app.getArmy(elfFactory)
final Army elfArmy = app.getArmy(elfFactory);
orcArmy=app.getArmy(orcFactory)
final Army orcArmy = app.getArmy(orcFactory);
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
String[] args = {};
Captain captain = new Captain(new BattleFishingBoat());
battleFishingBoat=spy(new BattleFishingBoat())
BattleFishingBoat battleFishingBoat = spy(new BattleFishingBoat());
Captain captain = new Captain();
BattleShip captain = (BattleShip) beans.get(CAPTAIN_BEAN);
BattleShip battleship = (BattleShip) beans.get(BATTLESHIP_BEAN);
String[] args = {};
AsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult1=executor.startProcess(lazyval(10,500))
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
asyncResult2=executor.startProcess(lazyval("test",300))
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
asyncResult3=executor.startProcess(lazyval(50L,700))
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
asyncResult4=executor.startProcess(lazyval(20,400),callback("Callback result 4"))
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
asyncResult5=executor.startProcess(lazyval("callback",600),callback("Callback result 5"))
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
result1=executor.endProcess(asyncResult1)
Integer result1 = executor.endProcess(asyncResult1);
result2=executor.endProcess(asyncResult2)
String result2 = executor.endProcess(asyncResult2);
result3=executor.endProcess(asyncResult3)
Long result3 = executor.endProcess(asyncResult3);
CompletableResult<T> result = new CompletableResult<>(callback);
String[] args = {};
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null)
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(null,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
exception=optionalException.get()
final Exception exception = optionalException.get();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null,null)
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());
FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());
SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());
String[] args = {};
excalibur=spy(new Excalibur())
final Excalibur excalibur = spy(new Excalibur());
final BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(excalibur);
mjollnir=spy(new Mjollnir())
final Mjollnir mjollnir = spy(new Mjollnir());
final FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(mjollnir);
stormbringer=spy(new Stormbringer())
final Stormbringer stormbringer = spy(new Stormbringer());
final SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(stormbringer);
mage=new HeroBuilder(Profession.MAGE,"Riobard").withHairColor(HairColor.BLACK).withWeapon(Weapon.DAGGER).build()
Hero mage =
        new HeroBuilder(Profession.MAGE, "Riobard").withHairColor(HairColor.BLACK)
            .withWeapon(Weapon.DAGGER).build();
warrior=new HeroBuilder(Profession.WARRIOR,"Amberjill").withHairColor(HairColor.BLOND).withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).build()
Hero warrior =
        new HeroBuilder(Profession.WARRIOR, "Amberjill").withHairColor(HairColor.BLOND)
            .withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD)
            .build();
thief=new HeroBuilder(Profession.THIEF,"Desmond").withHairType(HairType.BALD).withWeapon(Weapon.BOW).build()
Hero thief =
        new HeroBuilder(Profession.THIEF, "Desmond").withHairType(HairType.BALD)
            .withWeapon(Weapon.BOW).build();
StringBuilder sb = new StringBuilder();
String[] args = {};
final String heroName = "Sir Lancelot";
hero=new Hero.HeroBuilder(Profession.WARRIOR,heroName).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).withHairType(HairType.LONG_CURLY).withHairColor(HairColor.BLOND).build()
final Hero hero = new Hero.HeroBuilder(Profession.WARRIOR, heroName)
        .withArmor(Armor.CHAIN_MAIL)
        .withWeapon(Weapon.SWORD)
        .withHairType(HairType.LONG_CURLY)
        .withHairColor(HairColor.BLOND)
        .build();
BusinessDelegate businessDelegate = new BusinessDelegate();
BusinessLookup businessLookup = new BusinessLookup();
Client client = new Client(businessDelegate);
String[] args = {};
Client client = new Client(businessDelegate);
App app = new App();
UserAccount userAccount1 = new UserAccount("001", "John", "He is a boy.");
UserAccount userAccount2 = new UserAccount("002", "Jane", "She is a girl.");
UserAccount userAccount3 = new UserAccount("003", "Adam", "He likes food.");
UserAccount userAccount4 = new UserAccount("004", "Rita", "She hates cats.");
UserAccount userAccount5 = new UserAccount("005", "Isaac", "He is allergic to mustard.");
UserAccount userAccount6 = new UserAccount("006", "Yasha", "She is an only child.");
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
StringBuilder sb = new StringBuilder();
iterable=db.getCollection("user_accounts").find(new Document("userID",userId))
FindIterable<Document> iterable =
        db.getCollection("user_accounts").find(new Document("userID", userId));
doc=iterable.first()
Document doc = iterable.first();
node=cache.get(userId)
Node node = cache.get(userId);
old=cache.get(userId)
Node old = cache.get(userId);
Node newNode = new Node(userId, userAccount);
toBeRemoved=cache.get(userId)
Node toBeRemoved = cache.get(userId);
ArrayList<UserAccount> listOfCacheData = new ArrayList<>();
Node temp = head;
String[] args = {};
Task task = new SimpleTask();
Callback callback = new Callback() {
      @Override
      public void call() {
        System.out.println("I'm done now.");
      }
    };
Task task = new SimpleTask();
Callback c = () -> System.out.println("I'm done now.");
    task.executeWith(c);
  
String[] args = {};
Callback callback = new Callback() {
      @Override
      public void call() {
        callingCount++;
      }
    };
Task task = new SimpleTask();
Callback callback = () -> callingCount++;

    Task task = new SimpleTask();

    assertEquals("Initial calling count of 0", new Integer(0), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called once", new Integer(1), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called twice", new Integer(2), callingCount);

  
OrcKing king = new OrcKing();
String[] args = {};
final OrcKing king = new OrcKing();
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
temp=target.getSize()
Size temp = target.getSize();
previousSpell=undoStack.pollLast()
Command previousSpell = undoStack.pollLast();
previousSpell=redoStack.pollLast()
Command previousSpell = redoStack.pollLast();
String[] args = {};
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
orcMessage=new Messenger().messageFromOrcs()
LetterComposite orcMessage = new Messenger().messageFromOrcs();
elfMessage=new Messenger().messageFromElves()
LetterComposite elfMessage = new Messenger().messageFromElves();
List<Word> words = new ArrayList<>();
List<Word> words = new ArrayList<>();
String[] args = {};
final Messenger messenger = new Messenger();
final Messenger messenger = new Messenger();
words=message.split(" ")
final String[] words = message.split(" ");
final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());
final Customer customer = new Customer(4, "Dan", "Danson");
final Customer customer1 = new Customer(1, "Adam", "Adamson");
final Customer customer2 = new Customer(2, "Bob", "Bobson");
final Customer customer3 = new Customer(3, "Carl", "Carlson");
final List<Customer> customers = new ArrayList<>();
boolean isEqual = false;
final Customer customer = (Customer) o;
Customer customer = null;
index=getAllCustomers().indexOf(customer)
final int index = getAllCustomers().indexOf(customer);
String[] args = {};
final Customer nonExistingCustomer = new Customer(2, "Robert", "Englund");
final String newFirstname = "Bernard";
final String newLastname = "Montgomery";
final Customer customer = new Customer(CUSTOMER.getId(), newFirstname, newLastname);
cust=impl.getCustomerById(CUSTOMER.getId())
final Customer cust = impl.getCustomerById(CUSTOMER.getId());
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final String newFirstname = "Douglas";
final String newLastname = "MacArthur";
final Customer customer = new Customer(nonExistingId, newFirstname, newLastname);
existingCustomer=impl.getCustomerById(CUSTOMER.getId())
final Customer existingCustomer = impl.getCustomerById(CUSTOMER.getId());
final Customer newCustomer = new Customer(3, "George", "Patton");
final Customer newCustomer = new Customer(3, "George", "Patton");
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final int newId = 2;
final String newFirstname = "Bill";
final String newLastname = "Clinton";
final int newId = 2;
final Customer otherCustomer = new Customer(newId, FIRSTNAME, LASTNAME);
final Customer otherCustomer = new Customer(ID, FIRSTNAME, LASTNAME);
final StringBuffer buffer = new StringBuffer();
Hostile troll = new Troll();
Hostile smart = new SmartHostile(troll);
String[] args = {};
simpleTroll=spy(new Troll())
final Hostile simpleTroll = spy(new Troll());
final Hostile smartTroll = new SmartHostile(simpleTroll);
final Troll troll = new Troll();
PrinterController hpPrinterController = new PrinterController(new HpPrinter());
PrinterController canonPrinterController = new PrinterController(new CanonPrinter());
PrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());
String[] args = {};
PrinterController printerController = new PrinterController(new CanonPrinter());
PrinterController printerController = new PrinterController(new HpPrinter());
PrinterController printerController = new PrinterController(new EpsonPrinter());
SimpleWizard simpleWizard = new SimpleWizard();
AdvancedWizard advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());
injector=Guice.createInjector(new TobaccoModule())
Injector injector = Guice.createInjector(new TobaccoModule());
guiceWizard=injector.getInstance(GuiceWizard.class)
GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final AdvancedWizard advancedWizard = new AdvancedWizard(tobacco);
String[] args = {};
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final GuiceWizard guiceWizard = new GuiceWizard(tobacco);
@SuppressWarnings("unchecked")
    final Class<? extends Tobacco>[] tobaccos = new Class[]{
        OldTobyTobacco.class, RivendellTobacco.class, SecondBreakfastTobacco.class
    };
injector=Guice.createInjector(new AbstractModule(){
  @Override protected void configure(){
    bind(Tobacco.class).to(tobaccoClass);
  }
}
)
final Injector injector = Guice.createInjector(new AbstractModule() {
        @Override
        protected void configure() {
          bind(Tobacco.class).to(tobaccoClass);
        }
      });
guiceWizard=injector.getInstance(GuiceWizard.class)
final GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final SimpleWizard simpleWizard = new SimpleWizard();
final Inventory inventory = new Inventory(1000);
executorService=Executors.newFixedThreadPool(3)
ExecutorService executorService = Executors.newFixedThreadPool(3);
String[] args = {};
final Inventory inventory = new Inventory(INVENTORY_SIZE);
executorService=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);
items=inventory.getItems()
final List<Item> items = inventory.getItems();
final List<Item> items = inventory.getItems();
stdOutCaptor=ArgumentCaptor.forClass(String.class)
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
values=stdOutCaptor.getAllValues()
final List<String> values = stdOutCaptor.getAllValues();
final List<String> values = stdOutCaptor.getAllValues();
List<GameObject> objects = new ArrayList<>();
String[] args = {};
tested=getTestedObject()
final O tested = getTestedObject();
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectTargetOnFire 
        ? "Expected [" + targetName + "] to be on fire after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be on fire after colliding with [" + otherName + "] but it was!";
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectedDamage
        ? "Expected [" + targetName + "] to be damaged after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be damaged after colliding with [" + otherName + "] but it was!";
final FlamingAsteroid asteroid = new FlamingAsteroid(1, 2, 3, 4);
final Meteoroid meteoroid = new Meteoroid(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final SpaceStationIss iss = new SpaceStationIss(1, 2, 3, 4);
final SpaceStationMir mir = new SpaceStationMir(1, 2, 3, 4);
KingJoffrey kingJoffrey = new KingJoffrey();
KingsHand kingsHand = new KingsHand(kingJoffrey);
List<EventEmitter> emitters = new ArrayList<>();
String[] args = {};
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithoutDefaultObserver.get()
final E emitter = this.factoryWithoutDefaultObserver.get();
defaultObserver=mock(EventObserver.class)
final EventObserver defaultObserver = mock(EventObserver.class);
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithDefaultObserver.apply(defaultObserver)
final E emitter = this.factoryWithDefaultObserver.apply(defaultObserver);
toString=event.toString()
final String toString = event.toString();
final KingJoffrey kingJoffrey = new KingJoffrey();
final String expectedMessage = "Received event from the King's Hand: " + event.toString();
observer=mock(EventObserver.class)
final EventObserver observer = mock(EventObserver.class);
final KingsHand kingsHand = new KingsHand(observer);
toString=weekday.toString()
final String toString = weekday.toString();
EventDispatcher dispatcher = new EventDispatcher();
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = (UserCreatedEvent) message;
UserUpdatedEvent userUpdatedEvent = (UserUpdatedEvent) message;
String[] args = {};
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
dispatcher=spy(new EventDispatcher())
EventDispatcher dispatcher = spy(new EventDispatcher());
userCreatedEventHandler=spy(new UserCreatedEventHandler())
UserCreatedEventHandler userCreatedEventHandler = spy(new UserCreatedEventHandler());
userUpdatedEventHandler=spy(new UserUpdatedEventHandler())
UserUpdatedEventHandler userUpdatedEventHandler = spy(new UserUpdatedEventHandler());
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
UserUpdatedEvent userUpdatedEvent = new UserUpdatedEvent(user);
FileWriter writer = new FileWriter(filename);
String[] args = {};
File file = new File("testfile.txt");
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
final File nonExistingFile = new File(this.testFolder.getRoot(), "non-existing-file");
final String testMessage = "Test message";
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
DwarvenGoldmineFacade facade = new DwarvenGoldmineFacade();
String[] args = {};
final DwarvenGoldmineFacade goldMine = new DwarvenGoldmineFacade();
WeaponFactory factory = WeaponFactory.factory(builder -> {
      builder.add(WeaponType.SWORD, Sword::new);
      builder.add(WeaponType.AXE, Axe::new);
      builder.add(WeaponType.SPEAR, Spear::new);
      builder.add(WeaponType.BOW, Bow::new);
    });
    Weapon axe = factory.create(WeaponType.AXE);
    System.out.println(axe);
  
HashMap<WeaponType, Supplier<Weapon>> map = new HashMap<>();
String[] args = {};
weapon=factory.create(WeaponType.SPEAR)
Weapon weapon = factory.create(WeaponType.SPEAR);
weapon=factory.create(WeaponType.AXE)
Weapon weapon = factory.create(WeaponType.AXE);
weapon=factory.create(WeaponType.SWORD)
Weapon weapon = factory.create(WeaponType.SWORD);
App app = new App(new OrcBlacksmith());
Weapon weapon;
String[] args = {};
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.AXE)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.AXE);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties turnedOff = new Properties();
Service turnedOffService = new PropertiesFeatureToggleVersion(turnedOff);
welcomeMessageturnedOff=turnedOffService.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessageturnedOff = turnedOffService.getWelcomeMessage(new User("Jamie No Code"));
final User paidUser = new User("Jamie Coder");
final User freeUser = new User("Alan Defect");
welcomeMessagePaidUser=service.getWelcomeMessage(paidUser)
final String welcomeMessagePaidUser = service.getWelcomeMessage(paidUser);
welcomeMessageFreeUser=service.getWelcomeMessage(freeUser)
final String welcomeMessageFreeUser = service.getWelcomeMessage(freeUser);
final Properties properties = new Properties();
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
welcomeMessage=service.getWelcomeMessage(paidUser)
final String welcomeMessage = service.getWelcomeMessage(paidUser);
final String expected = "You're amazing Jamie Coder. Thanks for paying for this awesome software.";
welcomeMessage=service.getWelcomeMessage(freeUser)
final String welcomeMessage = service.getWelcomeMessage(freeUser);
final String expected = "I suppose you can use this software.";
User user = new User("Free User");
User user = new User("Paid User");
User user = new User("Paid User");
User user = new User("Free User");
List<Integer> integerList = new ArrayList<>();
firstFiveNegatives=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList()
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
lastTwoPositives=SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList()
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
transformedList=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString()).asList()
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
lastTwoOfFirstFourStringMapped=LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2).map(number-- > "String[" + valueOf(number) + "]").asList()
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
StringJoiner joiner = new StringJoiner(delimiter, prefix, ".");
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
ArrayList<E> copy = new ArrayList<>();
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
final E result = next;
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=last(1).iterator()
Iterator<E> resultIterator = last(1).iterator();
Iterator<E> resultIterator = last(1).iterator();
E candidate = null;
newIterator=iterable.iterator()
Iterator<E> newIterator = iterable.iterator();
candidate=oldTypeIterator.next()
E candidate = oldTypeIterator.next();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
nextElement=iterator.next()
E nextElement = iterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentCount = 0;
list=last(1).asList()
List<E> list = last(1).asList();
List<E> list = last(1).asList();
remainingElementsCount=getRemainingElementsCount()
int remainingElementsCount = getRemainingElementsCount();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentIndex = 0;
List<T> temporaryList = new ArrayList<>();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
copy=FluentIterable.copyToList(iterable)
List<E> copy = FluentIterable.copyToList(iterable);
List<E> copy = FluentIterable.copyToList(iterable);
int counter = 0;
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
List<E> copy = new ArrayList<>();
String[] args = {};
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
evenItems=createFluentIterable(integers).filter(i-- > i % 2 == 0).asList()
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
longs=createFluentIterable(integers).map(Integer).asList()
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
consumer=mock(Consumer.class)
final Consumer<Integer> consumer = mock(Consumer.class);
final Consumer<Integer> consumer = mock(Consumer.class);
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
split=createFluentIterable(integers).spliterator()
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
MenuStore menuStore = new MenuStore();
ContentStore contentStore = new ContentStore();
MenuView menuView = new MenuView();
ContentView contentView = new ContentView();
ContentAction contentAction = (ContentAction) action;
MenuAction menuAction = (MenuAction) action;
ContentStore contentStore = (ContentStore) store;
MenuStore menuStore = (MenuStore) store;
toString=content.toString()
final String toString = content.toString();
toString=menuItem.toString()
final String toString = menuItem.toString();
String[] args = {};
final Constructor<Dispatcher> constructor;
final Constructor<Dispatcher> constructor;
field=Dispatcher.class.getDeclaredField("instance")
final Field field = Dispatcher.class.getDeclaredField("instance");
dispatcher=Dispatcher.getInstance()
final Dispatcher dispatcher = Dispatcher.getInstance();
store=mock(Store.class)
final Store store = mock(Store.class);
actionCaptor=ArgumentCaptor.forClass(Action.class)
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
actions=actionCaptor.getAllValues()
final List<Action> actions = actionCaptor.getAllValues();
final List<Action> actions = actionCaptor.getAllValues();
menuActions=actions.stream().filter(a-- > a.getType().equals(ActionType.MENU_ITEM_SELECTED)).map(a-- > (MenuAction)a).collect(Collectors.toList())
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
contentActions=actions.stream().filter(a-- > a.getType().equals(ActionType.CONTENT_CHANGED)).map(a-- > (ContentAction)a).collect(Collectors.toList())
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final ContentStore contentStore = new ContentStore();
view=mock(View.class)
final View view = mock(View.class);
final MenuStore menuStore = new MenuStore();
view=mock(View.class)
final View view = mock(View.class);
store=mock(ContentStore.class)
final ContentStore store = mock(ContentStore.class);
final ContentView view = new ContentView();
store=mock(MenuStore.class)
final MenuStore store = mock(MenuStore.class);
final MenuView view = new MenuView();
store=mock(Store.class)
final Store store = mock(Store.class);
final MenuView view = new MenuView();
PotionFactory factory = new PotionFactory();
AlchemistShop alchemistShop = new AlchemistShop();
potion=potions.get(type)
Potion potion = potions.get(type);
final AlchemistShop shop = new AlchemistShop();
bottomShelf=shop.getBottomShelf()
final List<Potion> bottomShelf = shop.getBottomShelf();
final List<Potion> bottomShelf = shop.getBottomShelf();
topShelf=shop.getTopShelf()
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> allPotions = new ArrayList<>();
String[] args = {};
FrontController controller = new FrontController();
command=getCommand(request)
Command command = getCommand(request);
commandClass=getCommandClass(request)
Class commandClass = getCommandClass(request);
Class result;
final Exception cause = new Exception();
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final FrontController frontController = new FrontController();
final List<Object[]> parameters = new ArrayList<>();
final List<Object[]> parameters = new ArrayList<>();
AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final Object result = new Object();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IOException exception = new IOException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IllegalStateException exception = new IllegalStateException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
Filter last = this;
String result = super.execute(order);
FilterManager filterManager = new FilterManager();
Client client = new Client();
JPanel panel = new JPanel();
Order order =
            new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),
                jtFields[2].getText(), jtAreas[1].getText());
rootPane=SwingUtilities.getRootPane(processButton)
JRootPane rootPane = SwingUtilities.getRootPane(processButton);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
JPanel bot = new JPanel();
rootPane=SwingUtilities.getRootPane(del)
JRootPane rootPane = SwingUtilities.getRootPane(del);
temp=jt.getSelectedRow()
int temp = jt.getSelectedRow();
temp2=jt.getSelectedRowCount()
int temp2 = jt.getSelectedRowCount();
String[] args = {};
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
filter=mock(Filter.class)
final Filter filter = mock(Filter.class);
order=mock(Order.class)
final Order order = mock(Order.class);
final List<Object[]> testData = new ArrayList<>();
result=this.filter.execute(this.order)
final String result = this.filter.execute(this.order);
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
String tokenString = "4 3 2 - 1 + *";
Stack<Expression> stack = new Stack<>();
tokenList=tokenString.split(" ")
String[] tokenList = tokenString.split(" ");
rightExpression=stack.pop()
Expression rightExpression = stack.pop();
leftExpression=stack.pop()
Expression leftExpression = stack.pop();
operator=getOperatorInstance(s,leftExpression,rightExpression)
Expression operator = getOperatorInstance(s, leftExpression, rightExpression);
result=operator.interpret()
int result = operator.interpret();
NumberExpression resultExpression = new NumberExpression(result);
Expression i = new NumberExpression(s);
String[] args = {};
final List<Object[]> testData = new ArrayList<>();
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expectedValue=getFirst().interpret()
final int expectedValue = getFirst().interpret();
testStingValue=String.valueOf(expectedValue)
final String testStingValue = String.valueOf(expectedValue);
final NumberExpression numberExpression = new NumberExpression(testStingValue);
TreasureChest chest = new TreasureChest();
ringIterator=chest.iterator(ItemType.RING)
ItemIterator ringIterator = chest.iterator(ItemType.RING);
potionIterator=chest.iterator(ItemType.POTION)
ItemIterator potionIterator = chest.iterator(ItemType.POTION);
weaponIterator=chest.iterator(ItemType.WEAPON)
ItemIterator weaponIterator = chest.iterator(ItemType.WEAPON);
it=chest.iterator(ItemType.ANY)
ItemIterator it = chest.iterator(ItemType.ANY);
ArrayList<Item> list = new ArrayList<>();
items=chest.getItems()
List<Item> items = chest.getItems();
List<Item> items = chest.getItems();
boolean found = false;
int tempIdx = idx;
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final TreasureChest chest = new TreasureChest();
iterator=chest.iterator(expectedItem.getType())
final ItemIterator iterator = chest.iterator(expectedItem.getType());
item=iterator.next()
final Item item = iterator.next();
name=item.toString()
final String name = item.toString();
final TreasureChest chest = new TreasureChest();
items=chest.getItems()
final List<Item> items = chest.getItems();
final List<Item> items = chest.getItems();
final boolean sameType = this.expectedItem.getType() == item.getType();
sameName=this.expectedItem.toString().equals(item.toString())
final boolean sameName = this.expectedItem.toString().equals(item.toString());
CakeViewImpl cakeView = new CakeViewImpl(cakeBakingService);
CakeInfo cake1 =
        new CakeInfo(new CakeToppingInfo("candies", 0), Arrays.asList(new CakeLayerInfo(
            "chocolate", 0), new CakeLayerInfo("banana", 0), new CakeLayerInfo("strawberry", 0)));
CakeInfo cake2 =
        new CakeInfo(new CakeToppingInfo("cherry", 0), Arrays.asList(
            new CakeLayerInfo("vanilla", 0), new CakeLayerInfo("lemon", 0), new CakeLayerInfo(
                "strawberry", 0)));
allToppings=getAvailableToppingEntities()
List<CakeTopping> allToppings = getAvailableToppingEntities();
List<CakeTopping> allToppings = getAvailableToppingEntities();
matchingToppings=allToppings.stream().filter((t)-- > t.getName().equals(cakeInfo.cakeToppingInfo.name)).collect(Collectors.toList())
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
allLayers=getAvailableLayerEntities()
List<CakeLayer> allLayers = getAvailableLayerEntities();
List<CakeLayer> allLayers = getAvailableLayerEntities();
Set<CakeLayer> foundLayers = new HashSet<>();
found=allLayers.stream().filter((layer)-- > layer.getName().equals(info.name)).findFirst()
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
toppingBean=context.getBean(CakeToppingDao.class)
CakeToppingDao toppingBean = context.getBean(CakeToppingDao.class);
topping=toppingBean.findOne(matchingToppings.iterator().next().getId())
CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().getId());
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
Cake cake = new Cake();
layerBean=context.getBean(CakeLayerDao.class)
CakeLayerDao layerBean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeTopping> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
topping=iterator.next()
CakeTopping topping = iterator.next();
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeToppingInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
next=iterator.next()
CakeTopping next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayer> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayerInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
List<CakeInfo> result = new ArrayList<>();
iterator=cakeBean.findAll().iterator()
Iterator<Cake> iterator = cakeBean.findAll().iterator();
Iterator<Cake> iterator = cakeBean.findAll().iterator();
cake=iterator.next()
Cake cake = iterator.next();
CakeToppingInfo cakeToppingInfo =
          new CakeToppingInfo(cake.getTopping().getId(), cake.getTopping().getName(), cake
              .getTopping().getCalories());
ArrayList<CakeLayerInfo> cakeLayerInfos = new ArrayList<>();
CakeInfo cakeInfo = new CakeInfo(cake.getId(), cakeToppingInfo, cakeLayerInfos);
int total = cakeToppingInfo != null ? cakeToppingInfo.calories : 0;
String[] args = {};
final CakeBakingException exception = new CakeBakingException();
final String expectedMessage = "message";
final CakeBakingException exception = new CakeBakingException(expectedMessage);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialLayers=service.getAvailableLayers()
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
availableLayers=service.getAvailableLayers()
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialToppings=service.getAvailableToppings()
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
availableToppings=service.getAvailableToppings()
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeLayerInfo layer3 = new CakeLayerInfo("Layer3", 2000);
allCakes=service.getAllCakes()
final List<CakeInfo> allCakes = service.getAllCakes();
final List<CakeInfo> allCakes = service.getAllCakes();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeToppingInfo missingTopping = new CakeToppingInfo("Topping1", 1000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo missingLayer = new CakeLayerInfo("Layer2", 2000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final Cake cake = new Cake();
expectedId=Long.valueOf(1234L)
final Long expectedId = Long.valueOf(1234L);
final Cake cake = new Cake();
final CakeTopping expectedTopping = new CakeTopping("DummyTopping", 1000);
final Cake cake = new Cake();
final Set<CakeLayer> expectedLayers = new HashSet<>();
final Cake cake = new Cake();
final Set<CakeLayer> initialLayers = new HashSet<>();
final CakeLayer newLayer = new CakeLayer("layer3", 3000);
final Set<CakeLayer> expectedLayers = new HashSet<>();
final CakeTopping topping = new CakeTopping("topping", 20);
final CakeLayer layer = new CakeLayer("layer", 100);
final Cake cake = new Cake();
final String expected = "id=1234 topping=id=2345 name=topping calories=20 " 
            + "layers=[id=3456 name=layer calories=100]";
final List<CakeLayerInfo> layers = new ArrayList<>();
final List<CakeInfo> cakes = new ArrayList<>();
final CakeInfo cake = new CakeInfo(new CakeToppingInfo("topping", 1000), layers);
bakingService=mock(CakeBakingService.class)
final CakeBakingService bakingService = mock(CakeBakingService.class);
final CakeViewImpl cakeView = new CakeViewImpl(bakingService);
HolderNaive holderNaive = new HolderNaive();
heavy=holderNaive.getHeavy()
Heavy heavy = holderNaive.getHeavy();
HolderThreadSafe holderThreadSafe = new HolderThreadSafe();
another=holderThreadSafe.getHeavy()
Heavy another = holderThreadSafe.getHeavy();
Java8Holder java8Holder = new Java8Holder();
next=java8Holder.getHeavy()
Heavy next = java8Holder.getHeavy();
String[] args = {};
holderField=HolderNaive.class.getDeclaredField("heavy")
final Field holderField = HolderNaive.class.getDeclaredField("heavy");
holderField=HolderThreadSafe.class.getDeclaredField("heavy")
final Field holderField = HolderThreadSafe.class.getDeclaredField("heavy");
holderField=Java8Holder.class.getDeclaredField("heavy")
final Field holderField = Java8Holder.class.getDeclaredField("heavy");
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
supplierClass=supplier.getClass()
final Class<? extends Supplier> supplierClass = supplier.getClass();
final Class<? extends Supplier> supplierClass = supplier.getClass();
instanceField=supplierClass.getDeclaredField("heavyInstance")
final Field instanceField = supplierClass.getDeclaredField("heavyInstance");
Party party = new PartyImpl();
Hobbit hobbit = new Hobbit();
Wizard wizard = new Wizard();
Rogue rogue = new Rogue();
Hunter hunter = new Hunter();
String[] args = {};
partyMember1=mock(PartyMember.class)
final PartyMember partyMember1 = mock(PartyMember.class);
partyMember2=mock(PartyMember.class)
final PartyMember partyMember2 = mock(PartyMember.class);
final PartyImpl party = new PartyImpl();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
party=mock(Party.class)
final Party party = mock(Party.class);
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
memberClass=member.getClass()
final Class<? extends PartyMember> memberClass = member.getClass();
final Class<? extends PartyMember> memberClass = member.getClass();
Stack<StarMemento> states = new Stack<>();
Star star = new Star(StarType.SUN, 10000000, 500000);
StarMementoInternal state = new StarMementoInternal();
StarMementoInternal state = (StarMementoInternal) memento;
String[] args = {};
final Star star = new Star(StarType.SUN, 1, 2);
final Star star = new Star(StarType.SUN, 1, 2);
firstMemento=star.getMemento()
final StarMemento firstMemento = star.getMemento();
secondMemento=star.getMemento()
final StarMemento secondMemento = star.getMemento();
thirdMemento=star.getMemento()
final StarMemento thirdMemento = star.getMemento();
CamelContext context = new DefaultCamelContext();
String[] args = {};
GiantModel giant = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
GiantView view = new GiantView();
GiantController controller = new GiantController(giant, view);
String[] args = {};
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantView view = new GiantView();
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
FileLoader loader = new FileLoader();
FileSelectorJFrame jFrame = new FileSelectorJFrame();
FileSelectorPresenter presenter = new FileSelectorPresenter(jFrame);
BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)));
StringBuilder sb = new StringBuilder();
String line;
JScrollPane pane = new JScrollPane(area);
data=loader.loadData()
String data = loader.loadData();
String[] args = {};
final FileLoader fileLoader = new FileLoader();
String expectedFile = "Stamatis";
User user = new User("user", 24, Sex.FEMALE, "foobar.com");
IllegalStateException e = new IllegalStateException();
String[] args = {};
User tom = new User(null, 21, Sex.MALE, "tom@foo.bar");
User john = new User("John", 17, Sex.MALE, "john@qwe.bar");
User sarah = new User("Sarah", 42, Sex.FEMALE, "sarah@det.org");
validated=Validator.of(sarah).validate(getName,Objects,"name cannot be null").validate(User,age-- > age > 21,"user is underaged").validate(User,sex-- > sex == Sex.FEMALE,"user is not female").validate(User,email-- > email.contains("@"),"email does not contain @ sign").get()
User validated = Validator.of(sarah).validate(User::getName, Objects::nonNull, "name cannot be null")
        .validate(User::getAge, age -> age > 21, "user is underaged")
        .validate(User::getSex, sex -> sex == Sex.FEMALE, "user is not female")
        .validate(User::getEmail, email -> email.contains("@"), "email does not contain @ sign")
        .get();
LoadBalancer loadBalancer1 = new LoadBalancer();
LoadBalancer loadBalancer2 = new LoadBalancer();
server=servers.get(lastServedId++)
Server server = servers.get(lastServedId++);
String[] args = {};
final LoadBalancer firstBalancer = new LoadBalancer();
final LoadBalancer secondBalancer = new LoadBalancer();
server=mock(Server.class)
final Server server = mock(Server.class);
final LoadBalancer loadBalancer = new LoadBalancer();
final Request request = new Request("test");
String[] args = {};
nazgul=Nazgul.getInstance(name)
final Nazgul nazgul = Nazgul.getInstance(name);
obj=container.newTransientInstance(SimpleObject.class)
final SimpleObject obj = container.newTransientInstance(SimpleObject.class);
final SimpleObject simpleObject = new SimpleObject();
seq=context.sequence("create")
final Sequence seq = context.sequence("create");
obj=simpleObjects.create("Foobar")
final SimpleObject obj = simpleObjects.create("Foobar");
all=Lists.newArrayList()
final List<SimpleObject> all = Lists.newArrayList();
list=simpleObjects.listAll()
final List<SimpleObject> list = simpleObjects.listAll();
final List<SimpleObject> list = simpleObjects.listAll();
String name = "Foobar";
paramName=checkParam("name",ec,String.class)
String paramName = checkParam("name", ec, String.class);
paramNumber=defaultParam("number",ec,3)
final int paramNumber = defaultParam("number", ec, 3);
fs=new SimpleObjectCreate().setName(names.get(i))
final SimpleObjectCreate fs = new SimpleObjectCreate().setName(names.get(i));
isft=IsisSystemForTest.getElseNull()
IsisSystemForTest isft = IsisSystemForTest.getElseNull();
final IsisConfigurationForJdoIntegTests testConfiguration =
          new IsisConfigurationForJdoIntegTests();
findAll=service(SimpleObjects.class).listAll()
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
title=container.titleOf(simpleObjectWrapped)
final String title = container.titleOf(simpleObjectWrapped);
RecreateSimpleObjects fs = new RecreateSimpleObjects();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
simpleObject=wrap(all.get(0))
SimpleObject simpleObject = wrap(all.get(0));
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
causalChain=Throwables.getCausalChain(item)
final List<Throwable> causalChain = Throwables.getCausalChain(item);
final List<Throwable> causalChain = Throwables.getCausalChain(item);
settings=Bootstrap.getSettings()
IBootstrapSettings settings = Bootstrap.getSettings();
final AuthenticatedWebSessionForIsis s =
        (AuthenticatedWebSessionForIsis) super.newSession(request, response);
requestParameters=request.getRequestParameters()
IRequestParameters requestParameters = request.getRequestParameters();
user=requestParameters.getParameterValue("user")
final org.apache.wicket.util.string.StringValue user =
        requestParameters.getParameterValue("user");
password=requestParameters.getParameterValue("pass")
final org.apache.wicket.util.string.StringValue password =
        requestParameters.getParameterValue("pass");
uname=servletRequest.getParameter("user")
String uname = servletRequest.getParameter("user");
final Module isisDefaults = super.newIsisWicketModule();
final Module overrides = new AbstractModule() {
      @Override
      protected void configure() {
        bind(String.class).annotatedWith(Names.named("applicationName")).toInstance("Simple App");
        bind(String.class).annotatedWith(Names.named("applicationCss")).toInstance(
            "css/application.css");
        bind(String.class).annotatedWith(Names.named("applicationJs")).toInstance(
            "scripts/application.js");
        bind(String.class).annotatedWith(Names.named("welcomeMessage")).toInstance(
            readLines(getClass(), "welcome.html"));
        bind(String.class).annotatedWith(Names.named("aboutMessage")).toInstance("Simple App");
        bind(InputStream.class).annotatedWith(Names.named("metaInfManifest")).toProvider(
            Providers.of(getServletContext().getResourceAsStream("/META-INF/MANIFEST.MF")));
      }
    };
readLines=Resources.readLines(Resources.getResource(contextClass,resourceName),Charset.defaultCharset())
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
Node root =
        new NodeImpl("1", new NodeImpl("11", new NodeImpl("111", NullNode.getInstance(),
            NullNode.getInstance()), NullNode.getInstance()), new NodeImpl("12",
            NullNode.getInstance(), new NodeImpl("122", NullNode.getInstance(),
                NullNode.getInstance())));
String[] args = {};
instance=NullNode.getInstance()
final NullNode instance = NullNode.getInstance();
node=NullNode.getInstance()
final NullNode node = NullNode.getInstance();
final NodeImpl level1B = new NodeImpl("level1_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2B = new NodeImpl("level2_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3A = new NodeImpl("level3_a", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3B = new NodeImpl("level3_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2A = new NodeImpl("level2_a", level3A, level3B);
final NodeImpl level1A = new NodeImpl("level1_a", level2A, level2B);
inOrder=Mockito.inOrder(getStdOutMock())
final InOrder inOrder = Mockito.inOrder(getStdOutMock());
level1=TREE_ROOT.getLeft()
final Node level1 = TREE_ROOT.getLeft();
level2=level1.getLeft()
final Node level2 = level1.getLeft();
level3=level2.getLeft()
final Node level3 = level2.getLeft();
level1=TREE_ROOT.getRight()
final Node level1 = TREE_ROOT.getRight();
OliphauntPool pool = new OliphauntPool();
oliphaunt1=pool.checkOut()
Oliphaunt oliphaunt1 = pool.checkOut();
oliphaunt2=pool.checkOut()
Oliphaunt oliphaunt2 = pool.checkOut();
oliphaunt3=pool.checkOut()
Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunt5=pool.checkOut()
Oliphaunt oliphaunt5 = pool.checkOut();
instance=available.iterator().next()
T instance = available.iterator().next();
String[] args = {};
final OliphauntPool pool = new OliphauntPool();
expectedOliphaunt=pool.checkOut()
final Oliphaunt expectedOliphaunt = pool.checkOut();
oliphaunt=pool.checkOut()
final Oliphaunt oliphaunt = pool.checkOut();
final OliphauntPool pool = new OliphauntPool();
firstOliphaunt=pool.checkOut()
final Oliphaunt firstOliphaunt = pool.checkOut();
secondOliphaunt=pool.checkOut()
final Oliphaunt secondOliphaunt = pool.checkOut();
oliphaunt3=pool.checkOut()
final Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
final Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunts=Arrays.asList(pool.checkOut(),pool.checkOut())
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
Weather weather = new Weather();
GWeather gWeather = new GWeather();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
String[] args = {};
final ArrayList<Object[]> testData = new ArrayList<>();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
observer=this.factory.get()
final O observer = this.factory.get();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
observer=this.factory.get()
final O observer = this.factory.get();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
MessageQueue queue = new SimpleMessageQueue(10000);
final Producer producer = new Producer("PRODUCER_1", queue);
final Consumer consumer = new Consumer("CONSUMER_1", queue);
Message msg;
sender=msg.getHeader(Headers.SENDER)
String sender = msg.getHeader(Headers.SENDER);
body=msg.getBody()
String body = msg.getBody();
Message msg = new SimpleMessage();
String[] args = {};
final Message[] messages = new Message[]{
        createMessage("you", "Hello!"),
        createMessage("me", "Hi!"),
        Message.POISON_PILL,
        createMessage("late_for_the_party", "Hello? Anyone here?"),
    };
final MessageQueue queue = new SimpleMessageQueue(messages.length);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final SimpleMessage msg = new SimpleMessage();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
messageCaptor=ArgumentCaptor.forClass(Message.class)
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
message=messageCaptor.getValue()
final Message message = messageCaptor.getValue();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
final SimpleMessage message = new SimpleMessage();
final String senderName = "test";
final SimpleMessage message = new SimpleMessage();
headers=message.getHeaders()
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
Stew stew = new Stew(1, 2, 3, 4);
ImmutableStew immutableStew = new ImmutableStew(2, 4, 3, 6);
String[] args = {};
final Stew stew = new Stew(1, 2, 3, 4);
final String message = "Mixing the stew we find: 1 potatoes, 2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Stew stew = new Stew(1, 2, 3, 4);
final ImmutableStew stew = new ImmutableStew(1, 2, 3, 4);
final String expectedMessage = "Mixing the immutable stew we find: 1 potatoes, "
        + "2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ItemQueue queue = new ItemQueue();
executorService=Executors.newFixedThreadPool(5)
ExecutorService executorService = Executors.newFixedThreadPool(5);
final Producer producer = new Producer("Producer_" + i, queue);
final Consumer consumer = new Consumer("Consumer_" + i, queue);
item=queue.take()
Item item = queue.take();
Item item = new Item(name, itemId++);
Random random = new Random();
String[] args = {};
queue=spy(new ItemQueue())
final ItemQueue queue = spy(new ItemQueue());
final Consumer consumer = new Consumer("consumer", queue);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
queue=mock(ItemQueue.class)
final ItemQueue queue = mock(ItemQueue.class);
final Producer producer = new Producer("producer", queue);
Prototype charProto = new Character();
Character mageProto = new Character(Type.MAGE, charProto);
Character warProto = new Character(Type.WARRIOR, charProto);
Character rogueProto = new Character(Type.ROGUE, charProto);
Character mag = new Character("Player_1", mageProto);
Character warrior = new Character("Player_2", warProto);
Character rogue = new Character("Player_3", rogueProto);
Character rogueDouble = new Character("Player_4", rogue);
containsValue=properties.containsKey(stat)
boolean containsValue = properties.containsKey(stat);
StringBuilder builder = new StringBuilder();
value=this.get(stat)
Integer value = this.get(stat);
String[] args = {};
final Character prototype = new Character();
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character mage = new Character(Type.MAGE, prototype);
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
HeroFactory factory;
Mage mage;
Warlord warlord;
Beast beast;
String[] args = {};
mage=mock(Mage.class)
final Mage mage = mock(Mage.class);
warlord=mock(Warlord.class)
final Warlord warlord = mock(Warlord.class);
beast=mock(Beast.class)
final Beast beast = mock(Beast.class);
final HeroFactoryImpl factory = new HeroFactoryImpl(mage, warlord, beast);
clone=this.testedPrototype.clone()
final Object clone = this.testedPrototype.clone();
WizardTowerProxy tower = new WizardTowerProxy();
String[] args = {};
final String[] wizardNames = {"Gandalf", "Dumbledore", "Oz", "Merlin"};
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTowerProxy tower = new WizardTowerProxy();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTower tower = new WizardTower();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
CamelContext context = new DefaultCamelContext();
template=context.createProducerTemplate()
ProducerTemplate template = context.createProducerTemplate();
String[] args = {};
LoggingHandler loggingHandler = new LoggingHandler();
NioServerSocketChannel channel = new NioServerSocketChannel(port, handler);
NioDatagramChannel channel = new NioDatagramChannel(port, handler);
AppClient appClient = new AppClient();
outputStream=socket.getOutputStream()
OutputStream outputStream = socket.getOutputStream();
PrintWriter writer = new PrintWriter(outputStream);
byte[] data = new byte[1024];
read=inputStream.read(data,0,data.length)
int read = inputStream.read(data, 0, data.length);
String message = clientName + " - Log request: " + i;
DatagramPacket request =
              new DatagramPacket(message.getBytes(), message.getBytes().length, remoteAddress);
byte[] data = new byte[1024];
DatagramPacket reply = new DatagramPacket(data, data.length);
DatagramPacket datagram = (DatagramPacket) readObject;
DatagramPacket replyPacket = new DatagramPacket(ByteBuffer.wrap(ACK));
buffer=ByteBuffer.wrap(ACK)
ByteBuffer buffer = ByteBuffer.wrap(ACK);
pendingWrites=channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
pendingWrite=pendingWrites.poll()
Object pendingWrite = pendingWrites.poll();
pendingWrites=this.channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
sender=((DatagramChannel)key.channel()).receive(buffer)
SocketAddress sender = ((DatagramChannel) key.channel()).receive(buffer);
DatagramPacket packet = new DatagramPacket(buffer);
DatagramPacket pendingPacket = (DatagramPacket) pendingWrite;
key=channel.getJavaChannel().register(selector,channel.getInterestedOps())
SelectionKey key = channel.getJavaChannel().register(selector, channel.getInterestedOps());
keys=selector.selectedKeys()
Set<SelectionKey> keys = selector.selectedKeys();
Set<SelectionKey> keys = selector.selectedKeys();
iterator=keys.iterator()
Iterator<SelectionKey> iterator = keys.iterator();
Iterator<SelectionKey> iterator = keys.iterator();
key=iterator.next()
SelectionKey key = iterator.next();
iterator=pendingCommands.iterator()
Iterator<Runnable> iterator = pendingCommands.iterator();
Iterator<Runnable> iterator = pendingCommands.iterator();
command=iterator.next()
Runnable command = iterator.next();
AbstractNioChannel channel = (AbstractNioChannel) key.attachment();
readObject=((AbstractNioChannel)key.attachment()).read(key)
Object readObject = ((AbstractNioChannel) key.attachment()).read(key);
ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();
socketChannel=serverSocketChannel.accept()
SocketChannel socketChannel = serverSocketChannel.accept();
readKey=socketChannel.register(selector,SelectionKey.OP_READ)
SelectionKey readKey = socketChannel.register(selector, SelectionKey.OP_READ);
SocketChannel socketChannel = (SocketChannel) key.channel();
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
read=socketChannel.read(buffer)
int read = socketChannel.read(buffer);
ByteBuffer pendingBuffer = (ByteBuffer) pendingWrite;
App app = new App(new ThreadPoolDispatcher(2));
AppClient client = new AppClient();
App app = new App(new SameThreadDispatcher());
AppClient client = new AppClient();
executeService=Executors.newFixedThreadPool(10)
ExecutorService executeService = Executors.newFixedThreadPool(10);
ReaderWriterLock lock = new ReaderWriterLock();
String[] args = {};
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
reader1=spy(new Reader("Reader 1",lock.readLock()))
Reader reader1 = spy(new Reader("Reader 1", lock.readLock()));
reader2=spy(new Reader("Reader 2",lock.readLock()))
Reader reader2 = spy(new Reader("Reader 2", lock.readLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
writer1=spy(new Writer("Writer 1",lock.writeLock()))
Writer writer1 = spy(new Writer("Writer 1", lock.writeLock()));
writer2=spy(new Writer("Writer 2",lock.writeLock()))
Writer writer2 = spy(new Writer("Writer 2", lock.writeLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
        "applicationContext.xml");
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
BasicDataSource basicDataSource = new BasicDataSource();
LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();
Properties properties = new Properties();
JpaTransactionManager transactionManager = new JpaTransactionManager();
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
        AppConfig.class);
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
final int prime = 31;
int result = 1;
Person other = (Person) obj;
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
resultSet=dataSource.getConnection().createStatement().executeQuery("SELECT 1")
ResultSet resultSet = dataSource.getConnection().createStatement().executeQuery("SELECT 1");
String result = null;
String expected = "1";
String[] args = {};
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
String[] args = {};
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
King k = new King();
Queen q = new Queen();
ArrayList<Royalty> guests = new ArrayList<>();
boolean anotherDay = true;
String[] args = {};
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
goodMoodRoyalty=mock(Royalty.class)
final Royalty goodMoodRoyalty = mock(Royalty.class);
badMoodRoyalty=mock(Royalty.class)
final Royalty badMoodRoyalty = mock(Royalty.class);
final ArrayList<Royalty> goodCompany = new ArrayList<>();
final ArrayList<Royalty> badCompany = new ArrayList<>();
Spell spell1 = new Spell("Ice dart");
Spell spell2 = new Spell("Invisibility");
Spell spell3 = new Spell("Stun bolt");
Spell spell4 = new Spell("Confusion");
Spell spell5 = new Spell("Darkness");
Spell spell6 = new Spell("Fireball");
Spell spell7 = new Spell("Enchant weapon");
Spell spell8 = new Spell("Rock armour");
Spell spell9 = new Spell("Light");
Spell spell10 = new Spell("Bee swarm");
Spell spell11 = new Spell("Haste");
Spell spell12 = new Spell("Levitation");
Spell spell13 = new Spell("Magic lock");
Spell spell14 = new Spell("Summon hell bat");
Spell spell15 = new Spell("Water walking");
Spell spell16 = new Spell("Magic storm");
Spell spell17 = new Spell("Entangle");
SpellDao spellDao = new SpellDaoImpl();
SpellbookDao spellbookDao = new SpellbookDaoImpl();
Spellbook spellbook1 = new Spellbook("Book of Orgymon");
Spellbook spellbook2 = new Spellbook("Book of Aras");
Spellbook spellbook3 = new Spellbook("Book of Kritior");
Spellbook spellbook4 = new Spellbook("Book of Tamaex");
Spellbook spellbook5 = new Spellbook("Book of Idores");
Spellbook spellbook6 = new Spellbook("Book of Opaen");
Spellbook spellbook7 = new Spellbook("Book of Kihione");
WizardDao wizardDao = new WizardDaoImpl();
Wizard wizard1 = new Wizard("Aderlard Boud");
Wizard wizard2 = new Wizard("Anaxis Bajraktari");
Wizard wizard3 = new Wizard("Xuban Munoa");
Wizard wizard4 = new Wizard("Blasius Dehooge");
MagicService service =
        new MagicServiceImpl(new WizardDaoImpl(), new SpellbookDaoImpl(), new SpellDaoImpl());
wizardsWithSpellbook=service.findWizardsWithSpellbook("Book of Idores")
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
wizardsWithSpell=service.findWizardsWithSpell("Fireball")
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
List<E> result = null;
List<E> result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
spellbook=spellbookDao.findByName(name)
Spellbook spellbook = spellbookDao.findByName(name);
spell=spellDao.findByName(name)
Spell spell = spellDao.findByName(name);
spellbook=spell.getSpellbook()
Spellbook spellbook = spell.getSpellbook();
session=getSession()
Session session = getSession();
Transaction tx = null;
Spell result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Spellbook result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Wizard result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
String[] args = {};
className=dao.persistentClass.getSimpleName()
final String className = dao.persistentClass.getSimpleName();
entityName=String.format("%s%d",className,ID_GENERATOR.incrementAndGet())
final String entityName = String.format("%s%d", className, ID_GENERATOR.incrementAndGet());
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
byId=this.dao.find(entity.getId())
final E byId = this.dao.find(entity.getId());
originalEntities=this.dao.findAll()
final List<E> originalEntities = this.dao.findAll();
final List<E> originalEntities = this.dao.findAll();
entitiesLeft=this.dao.findAll()
final List<E> entitiesLeft = this.dao.findAll();
final List<E> entitiesLeft = this.dao.findAll();
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
expectedId=Long.valueOf(1)
final Long expectedId = Long.valueOf(1);
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
final String expectedName = "new name";
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
final String bookname = "bookname";
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
final Set<Wizard> wizards = new HashSet<>();
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpellbook(bookname)
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final Set<Wizard> wizards = new HashSet<>();
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spell=mock(Spell.class)
final Spell spell = mock(Spell.class);
final String spellName = "spellname";
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpell(spellName)
final List<Wizard> result = service.findWizardsWithSpell(spellName);
final List<Wizard> result = service.findWizardsWithSpell(spellName);
dao=getDao()
final SpellDaoImpl dao = getDao();
allSpells=dao.findAll()
final List<Spell> allSpells = dao.findAll();
final List<Spell> allSpells = dao.findAll();
spellByName=dao.findByName(spell.getName())
final Spell spellByName = dao.findByName(spell.getName());
dao=getDao()
final SpellbookDaoImpl dao = getDao();
allBooks=dao.findAll()
final List<Spellbook> allBooks = dao.findAll();
final List<Spellbook> allBooks = dao.findAll();
spellByName=dao.findByName(book.getName())
final Spellbook spellByName = dao.findByName(book.getName());
dao=getDao()
final WizardDaoImpl dao = getDao();
allWizards=dao.findAll()
final List<Wizard> allWizards = dao.findAll();
final List<Wizard> allWizards = dao.findAll();
byName=dao.findByName(spell.getName())
final Wizard byName = dao.findByName(spell.getName());
service=ServiceLocator.getService("jndi/serviceA")
Service service = ServiceLocator.getService("jndi/serviceA");
Service cachedService = null;
serviceObj=serviceCache.getService(serviceJndiName)
Service serviceObj = serviceCache.getService(serviceJndiName);
InitContext ctx = new InitContext();
String[] args = {};
final String[] serviceNames = new String[]{
        "jndi/serviceA", "jndi/serviceB"
    };
service=ServiceLocator.getService(serviceName)
final Service service = ServiceLocator.getService(serviceName);
ivoryTower1=IvoryTower.getInstance()
IvoryTower ivoryTower1 = IvoryTower.getInstance();
ivoryTower2=IvoryTower.getInstance()
IvoryTower ivoryTower2 = IvoryTower.getInstance();
threadSafeIvoryTower1=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower1 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
threadSafeIvoryTower2=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower2 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
EnumIvoryTower enumIvoryTower1 = EnumIvoryTower.INSTANCE;
EnumIvoryTower enumIvoryTower2 = EnumIvoryTower.INSTANCE;
dcl1=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();
dcl2=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();
demandHolderIdiom=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom =
        InitializingOnDemandHolderIdiom.getInstance();
demandHolderIdiom2=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom2 =
        InitializingOnDemandHolderIdiom.getInstance();
ThreadSafeDoubleCheckLocking result = instance;
String[] args = {};
instance1=this.singletonInstanceMethod.get()
S instance1 = this.singletonInstanceMethod.get();
instance2=this.singletonInstanceMethod.get()
S instance2 = this.singletonInstanceMethod.get();
instance3=this.singletonInstanceMethod.get()
S instance3 = this.singletonInstanceMethod.get();
final List<Callable<S>> tasks = new ArrayList<>();
int i = 0
creatures=Arrays.asList(new Goblin(),new Octopus(),new Dragon(),new Shark(),new Troll(),new KillerBee())
List<Creature> creatures =
        Arrays.asList(new Goblin(), new Octopus(), new Dragon(), new Shark(), new Troll(),
            new KillerBee());
walkingCreatures=creatures.stream().filter(new MovementSelector(Movement.WALKING)).collect(Collectors.toList())
List<Creature> walkingCreatures =
        creatures.stream().filter(new MovementSelector(Movement.WALKING))
            .collect(Collectors.toList());
darkCreatures=creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList())
List<Creature> darkCreatures =
        creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList());
redAndFlyingCreatures=creatures.stream().filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING))).collect(Collectors.toList())
List<Creature> redAndFlyingCreatures =
        creatures.stream()
            .filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING)))
            .collect(Collectors.toList());
String[] args = {};
toString=this.testedCreature.toString()
final String toString = this.testedCreature.toString();
greenCreature=mock(Creature.class)
final Creature greenCreature = mock(Creature.class);
redCreature=mock(Creature.class)
final Creature redCreature = mock(Creature.class);
final ColorSelector greenSelector = new ColorSelector(Color.GREEN);
swimmingCreature=mock(Creature.class)
final Creature swimmingCreature = mock(Creature.class);
flyingCreature=mock(Creature.class)
final Creature flyingCreature = mock(Creature.class);
final MovementSelector swimmingSelector = new MovementSelector(Movement.SWIMMING);
normalCreature=mock(Creature.class)
final Creature normalCreature = mock(Creature.class);
smallCreature=mock(Creature.class)
final Creature smallCreature = mock(Creature.class);
final SizeSelector normalSelector = new SizeSelector(Size.NORMAL);
Mammoth mammoth = new Mammoth();
String[] args = {};
inOrder=Mockito.inOrder(this.stdOutMock)
final InOrder inOrder = Mockito.inOrder(this.stdOutMock);
final Mammoth mammoth = new Mammoth();
toString=new Mammoth().toString()
final String toString = new Mammoth().toString();
warrior=CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin").withWeapon("Sword").noAbilities().build()
Character warrior =
        CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin")
            .withWeapon("Sword").noAbilities().build();
mage=CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer").withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport").noMoreAbilities().build()
Character mage =
        CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer")
            .withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport")
            .noMoreAbilities().build();
thief=CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build()
Character thief =
        CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build();
StringBuilder sb = new StringBuilder();
Character character = new Character(name);
String[] args = {};
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").withAbility("invisibility").withAbility("wisdom").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .withAbility("invisibility")
        .withAbility("wisdom")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").noSpell().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .noSpell()
        .build();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .noAbilities()
        .build();
character=CharacterStepBuilder.newBuilder().name("Cuauhtemoc").fighterClass("aztec").withWeapon("spear").withAbility("speed").withAbility("strength").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Cuauhtemoc")
        .fighterClass("aztec")
        .withWeapon("spear")
        .withAbility("speed")
        .withAbility("strength")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Poor warrior").fighterClass("none").noWeapon().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Poor warrior")
        .fighterClass("none")
        .noWeapon()
        .build();
character=CharacterStepBuilder.newBuilder().name("Weak warrior").fighterClass("none").withWeapon("Slingshot").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Weak warrior")
        .fighterClass("none")
        .withWeapon("Slingshot")
        .noAbilities()
        .build();
DragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());
String[] args = {};
strategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy strategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(strategy);
initialStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy initialStrategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(initialStrategy);
newStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy newStrategy = mock(DragonSlayingStrategy.class);
HalflingThief thief = new HalflingThief(new HitAndRunMethod());
target=pickTarget()
String target = pickTarget();
String[] args = {};
method=mock(StealingMethod.class)
final StealingMethod method = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(method);
initialMethod=mock(StealingMethod.class)
final StealingMethod initialMethod = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(initialMethod);
newMethod=mock(StealingMethod.class)
final StealingMethod newMethod = mock(StealingMethod.class);
inOrder=inOrder(this.stdOutMock)
final InOrder inOrder = inOrder(this.stdOutMock);
List<Task> tasks = new ArrayList<>();
executor=Executors.newFixedThreadPool(3)
ExecutorService executor = Executors.newFixedThreadPool(3);
Runnable worker = new Worker(tasks.get(i));
String[] args = {};
service=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService service = Executors.newFixedThreadPool(THREAD_COUNT);
final List<Callable<Integer>> tasks = new ArrayList<>();
int i = 0
task=mock(Task.class)
final Task task = mock(Task.class);
final Worker worker = new Worker(task);
RainbowFish fishV1 = new RainbowFish("Zed", 10, 11, 12);
deserializedFishV1=RainbowFishSerializer.readV1("fish1.out")
RainbowFish deserializedFishV1 = RainbowFishSerializer.readV1("fish1.out");
RainbowFishV2 fishV2 = new RainbowFishV2("Scar", 5, 12, 15, true, true, true);
deserializedFishV2=RainbowFishSerializer.readV1("fish2.out")
RainbowFish deserializedFishV2 = RainbowFishSerializer.readV1("fish2.out");
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
FileInputStream fileIn = new FileInputStream(filename);
ObjectInputStream objIn = new ObjectInputStream(fileIn);
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
String[] args = {};
File file1 = new File("fish1.out");
File file2 = new File("fish2.out");
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
final RainbowFish fish = new RainbowFish("name", 1, 2, 3);
final RainbowFishV2 fish = new RainbowFishV2("name", 1, 2, 3, false, true, false);
BallItem ballItem = new BallItem();
BallThread ballThread = new BallThread();
String[] args = {};
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
inOrder=inOrder(ballThread)
final InOrder inOrder = inOrder(ballThread);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
exceptionHandler=mock(UncaughtExceptionHandler.class)
final UncaughtExceptionHandler exceptionHandler = mock(UncaughtExceptionHandler.class);
statA=HeroStat.valueOf(10,5,0)
HeroStat statA = HeroStat.valueOf(10, 5, 0);
statB=HeroStat.valueOf(10,5,0)
HeroStat statB = HeroStat.valueOf(10, 5, 0);
statC=HeroStat.valueOf(5,1,8)
HeroStat statC = HeroStat.valueOf(5, 1, 8);
final int prime = 31;
int result = 1;
HeroStat other = (HeroStat) obj;
String[] args = {};
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatC=HeroStat.valueOf(3,9,8)
HeroStat heroStatC = HeroStat.valueOf(3, 9, 8);
Commander commander =
        new Commander(new Sergeant(new Soldier(), new Soldier(), new Soldier()), new Sergeant(
            new Soldier(), new Soldier(), new Soldier()));
String[] args = {};
final Unit[] children = new Unit[5];
unit=this.factory.apply(children)
final U unit = this.factory.apply(children);
visitor=mock(UnitVisitor.class)
final UnitVisitor visitor = mock(UnitVisitor.class);

Diff of e3f2da8544b23cc95579aa50da962c6ab15917eb and f52d7d3dbcd9d1b2839769d1096058fbca596007:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 212
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 6
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision e3f2da8544b23cc95579aa50da962c6ab15917eb to f52d7d3dbcd9d1b2839769d1096058fbca596007

************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null

****Parsing for addition at revision 8a4911a4eb335463b9f290ee7b22bd4056977acf****

Added App.java to .\/java-design-patterns\ repository source files.
Added Army.java to .\/java-design-patterns\ repository source files.
Added Castle.java to .\/java-design-patterns\ repository source files.
Added ElfArmy.java to .\/java-design-patterns\ repository source files.
Added ElfCastle.java to .\/java-design-patterns\ repository source files.
Added ElfKing.java to .\/java-design-patterns\ repository source files.
Added ElfKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added KingdomFactory.java to .\/java-design-patterns\ repository source files.
Added OrcArmy.java to .\/java-design-patterns\ repository source files.
Added OrcCastle.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added AbstractFactoryTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BattleFishingBoat.java to .\/java-design-patterns\ repository source files.
Added BattleShip.java to .\/java-design-patterns\ repository source files.
Added Captain.java to .\/java-design-patterns\ repository source files.
Added FishingBoat.java to .\/java-design-patterns\ repository source files.
Added AdapterPatternTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsyncCallback.java to .\/java-design-patterns\ repository source files.
Added AsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AsyncResult.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Excalibur.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added MagicWeapon.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Mjollnir.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Stormbringer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Armor.java to .\/java-design-patterns\ repository source files.
Added HairColor.java to .\/java-design-patterns\ repository source files.
Added HairType.java to .\/java-design-patterns\ repository source files.
Added Hero.java to .\/java-design-patterns\ repository source files.
Added Profession.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegate.java to .\/java-design-patterns\ repository source files.
Added BusinessLookup.java to .\/java-design-patterns\ repository source files.
Added BusinessService.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added EjbService.java to .\/java-design-patterns\ repository source files.
Added JmsService.java to .\/java-design-patterns\ repository source files.
Added ServiceType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegateTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppManager.java to .\/java-design-patterns\ repository source files.
Added CacheStore.java to .\/java-design-patterns\ repository source files.
Added CachingPolicy.java to .\/java-design-patterns\ repository source files.
Added DbManager.java to .\/java-design-patterns\ repository source files.
Added LruCache.java to .\/java-design-patterns\ repository source files.
Added UserAccount.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CachingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Callback.java to .\/java-design-patterns\ repository source files.
Added LambdasApp.java to .\/java-design-patterns\ repository source files.
Added SimpleTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CallbackTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added OrcCommander.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcOfficer.java to .\/java-design-patterns\ repository source files.
Added OrcSoldier.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added RequestHandler.java to .\/java-design-patterns\ repository source files.
Added RequestType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OrcKingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added InvisibilitySpell.java to .\/java-design-patterns\ repository source files.
Added ShrinkSpell.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added Visibility.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Letter.java to .\/java-design-patterns\ repository source files.
Added LetterComposite.java to .\/java-design-patterns\ repository source files.
Added Messenger.java to .\/java-design-patterns\ repository source files.
Added Sentence.java to .\/java-design-patterns\ repository source files.
Added Word.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MessengerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Customer.java to .\/java-design-patterns\ repository source files.
Added CustomerDao.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added CustomerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hostile.java to .\/java-design-patterns\ repository source files.
Added SmartHostile.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SmartHostileTest.java to .\/java-design-patterns\ repository source files.
Added TrollTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Printer.java to .\/java-design-patterns\ repository source files.
Added PrinterController.java to .\/java-design-patterns\ repository source files.
Added CanonPrinter.java to .\/java-design-patterns\ repository source files.
Added EpsonPrinter.java to .\/java-design-patterns\ repository source files.
Added HpPrinter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DelegateTest.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizard.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GuiceWizard.java to .\/java-design-patterns\ repository source files.
Added OldTobyTobacco.java to .\/java-design-patterns\ repository source files.
Added RivendellTobacco.java to .\/java-design-patterns\ repository source files.
Added SecondBreakfastTobacco.java to .\/java-design-patterns\ repository source files.
Added SimpleWizard.java to .\/java-design-patterns\ repository source files.
Added Tobacco.java to .\/java-design-patterns\ repository source files.
Added TobaccoModule.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizardTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GuiceWizardTest.java to .\/java-design-patterns\ repository source files.
Added SimpleWizardTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Inventory.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added InventoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroid.java to .\/java-design-patterns\ repository source files.
Added GameObject.java to .\/java-design-patterns\ repository source files.
Added Meteoroid.java to .\/java-design-patterns\ repository source files.
Added Rectangle.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIss.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMir.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CollisionTest.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroidTest.java to .\/java-design-patterns\ repository source files.
Added MeteoroidTest.java to .\/java-design-patterns\ repository source files.
Added RectangleTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIssTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMirTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added EventEmitter.java to .\/java-design-patterns\ repository source files.
Added EventObserver.java to .\/java-design-patterns\ repository source files.
Added KingJoffrey.java to .\/java-design-patterns\ repository source files.
Added KingsHand.java to .\/java-design-patterns\ repository source files.
Added LordBaelish.java to .\/java-design-patterns\ repository source files.
Added LordVarys.java to .\/java-design-patterns\ repository source files.
Added Scout.java to .\/java-design-patterns\ repository source files.
Added Weekday.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EventEmitterTest.java to .\/java-design-patterns\ repository source files.
Added EventTest.java to .\/java-design-patterns\ repository source files.
Added KingJoffreyTest.java to .\/java-design-patterns\ repository source files.
Added KingsHandTest.java to .\/java-design-patterns\ repository source files.
Added LordBaelishTest.java to .\/java-design-patterns\ repository source files.
Added LordVarysTest.java to .\/java-design-patterns\ repository source files.
Added ScoutTest.java to .\/java-design-patterns\ repository source files.
Added WeekdayTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEvent.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEvent.java to .\/java-design-patterns\ repository source files.
Added EventDispatcher.java to .\/java-design-patterns\ repository source files.
Added Handler.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventTest.java to .\/java-design-patterns\ repository source files.
Added EventDispatcherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileWriterAction.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DwarvenCartOperator.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldDigger.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacade.java to .\/java-design-patterns\ repository source files.
Added DwarvenMineWorker.java to .\/java-design-patterns\ repository source files.
Added DwarvenTunnelDigger.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacadeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Axe.java to .\/java-design-patterns\ repository source files.
Added Bow.java to .\/java-design-patterns\ repository source files.
Added Builder.java to .\/java-design-patterns\ repository source files.
Added Spear.java to .\/java-design-patterns\ repository source files.
Added Sword.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponFactory.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryKitTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Blacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfBlacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfWeapon.java to .\/java-design-patterns\ repository source files.
Added OrcBlacksmith.java to .\/java-design-patterns\ repository source files.
Added OrcWeapon.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added UserGroup.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added UserGroupTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FluentIterable.java to .\/java-design-patterns\ repository source files.
Added DecoratingIterator.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterable.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterable.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added ActionType.java to .\/java-design-patterns\ repository source files.
Added Content.java to .\/java-design-patterns\ repository source files.
Added ContentAction.java to .\/java-design-patterns\ repository source files.
Added MenuAction.java to .\/java-design-patterns\ repository source files.
Added MenuItem.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added ContentStore.java to .\/java-design-patterns\ repository source files.
Added MenuStore.java to .\/java-design-patterns\ repository source files.
Added Store.java to .\/java-design-patterns\ repository source files.
Added ContentView.java to .\/java-design-patterns\ repository source files.
Added MenuView.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ContentTest.java to .\/java-design-patterns\ repository source files.
Added MenuItemTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DispatcherTest.java to .\/java-design-patterns\ repository source files.
Added ContentStoreTest.java to .\/java-design-patterns\ repository source files.
Added MenuStoreTest.java to .\/java-design-patterns\ repository source files.
Added ContentViewTest.java to .\/java-design-patterns\ repository source files.
Added MenuViewTest.java to .\/java-design-patterns\ repository source files.
Added AlchemistShop.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HealingPotion.java to .\/java-design-patterns\ repository source files.
Added HolyWaterPotion.java to .\/java-design-patterns\ repository source files.
Added InvisibilityPotion.java to .\/java-design-patterns\ repository source files.
Added PoisonPotion.java to .\/java-design-patterns\ repository source files.
Added Potion.java to .\/java-design-patterns\ repository source files.
Added PotionFactory.java to .\/java-design-patterns\ repository source files.
Added PotionType.java to .\/java-design-patterns\ repository source files.
Added StrengthPotion.java to .\/java-design-patterns\ repository source files.
Added AlchemistShopTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ApplicationException.java to .\/java-design-patterns\ repository source files.
Added ArcherCommand.java to .\/java-design-patterns\ repository source files.
Added ArcherView.java to .\/java-design-patterns\ repository source files.
Added CatapultCommand.java to .\/java-design-patterns\ repository source files.
Added CatapultView.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added ErrorView.java to .\/java-design-patterns\ repository source files.
Added FrontController.java to .\/java-design-patterns\ repository source files.
Added UnknownCommand.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ApplicationExceptionTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added FrontControllerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added ViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsynchronousService.java to .\/java-design-patterns\ repository source files.
Added AsyncTask.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added AsynchronousServiceTest.java to .\/java-design-patterns\ repository source files.
Added AbstractFilter.java to .\/java-design-patterns\ repository source files.
Added AddressFilter.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added ContactFilter.java to .\/java-design-patterns\ repository source files.
Added DepositFilter.java to .\/java-design-patterns\ repository source files.
Added Filter.java to .\/java-design-patterns\ repository source files.
Added FilterChain.java to .\/java-design-patterns\ repository source files.
Added FilterManager.java to .\/java-design-patterns\ repository source files.
Added NameFilter.java to .\/java-design-patterns\ repository source files.
Added Order.java to .\/java-design-patterns\ repository source files.
Added OrderFilter.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FilterManagerTest.java to .\/java-design-patterns\ repository source files.
Added FilterTest.java to .\/java-design-patterns\ repository source files.
Added OrderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Expression.java to .\/java-design-patterns\ repository source files.
Added MinusExpression.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpression.java to .\/java-design-patterns\ repository source files.
Added NumberExpression.java to .\/java-design-patterns\ repository source files.
Added PlusExpression.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MinusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpressionTest.java to .\/java-design-patterns\ repository source files.
Added NumberExpressionTest.java to .\/java-design-patterns\ repository source files.
Added PlusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemIterator.java to .\/java-design-patterns\ repository source files.
Added ItemType.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestItemIterator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Cake.java to .\/java-design-patterns\ repository source files.
Added CakeBakingException.java to .\/java-design-patterns\ repository source files.
Added CakeBakingService.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImpl.java to .\/java-design-patterns\ repository source files.
Added CakeDao.java to .\/java-design-patterns\ repository source files.
Added CakeInfo.java to .\/java-design-patterns\ repository source files.
Added CakeLayer.java to .\/java-design-patterns\ repository source files.
Added CakeLayerDao.java to .\/java-design-patterns\ repository source files.
Added CakeLayerInfo.java to .\/java-design-patterns\ repository source files.
Added CakeTopping.java to .\/java-design-patterns\ repository source files.
Added CakeToppingDao.java to .\/java-design-patterns\ repository source files.
Added CakeToppingInfo.java to .\/java-design-patterns\ repository source files.
Added CakeViewImpl.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingExceptionTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added CakeTest.java to .\/java-design-patterns\ repository source files.
Added CakeViewImplTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Heavy.java to .\/java-design-patterns\ repository source files.
Added HolderNaive.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafe.java to .\/java-design-patterns\ repository source files.
Added Java8Holder.java to .\/java-design-patterns\ repository source files.
Added AbstractHolderTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HolderNaiveTest.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafeTest.java to .\/java-design-patterns\ repository source files.
Added Java8HolderTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hobbit.java to .\/java-design-patterns\ repository source files.
Added Hunter.java to .\/java-design-patterns\ repository source files.
Added Party.java to .\/java-design-patterns\ repository source files.
Added PartyImpl.java to .\/java-design-patterns\ repository source files.
Added PartyMember.java to .\/java-design-patterns\ repository source files.
Added PartyMemberBase.java to .\/java-design-patterns\ repository source files.
Added Rogue.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added PartyImplTest.java to .\/java-design-patterns\ repository source files.
Added PartyMemberTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Star.java to .\/java-design-patterns\ repository source files.
Added StarMemento.java to .\/java-design-patterns\ repository source files.
Added StarType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StarTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Fatigue.java to .\/java-design-patterns\ repository source files.
Added GiantController.java to .\/java-design-patterns\ repository source files.
Added GiantModel.java to .\/java-design-patterns\ repository source files.
Added GiantView.java to .\/java-design-patterns\ repository source files.
Added Health.java to .\/java-design-patterns\ repository source files.
Added Nourishment.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GiantControllerTest.java to .\/java-design-patterns\ repository source files.
Added GiantModelTest.java to .\/java-design-patterns\ repository source files.
Added GiantViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileLoader.java to .\/java-design-patterns\ repository source files.
Added FileSelectorJFrame.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenter.java to .\/java-design-patterns\ repository source files.
Added FileSelectorStub.java to .\/java-design-patterns\ repository source files.
Added FileSelectorView.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FileLoaderTest.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Sex.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added Validator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MonadTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added LoadBalancer.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added Server.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added LoadBalancerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Nazgul.java to .\/java-design-patterns\ repository source files.
Added NazgulName.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NazgulTest.java to .\/java-design-patterns\ repository source files.
Added HomePageService.java to .\/java-design-patterns\ repository source files.
Added HomePageViewModel.java to .\/java-design-patterns\ repository source files.
Added SimpleObject.java to .\/java-design-patterns\ repository source files.
Added SimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectTest.java to .\/java-design-patterns\ repository source files.
Added DomainAppFixturesProvider.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectCreate.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTearDown.java to .\/java-design-patterns\ repository source files.
Added RecreateSimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleAppSystemInitializer.java to .\/java-design-patterns\ repository source files.
Added BootstrappingGlue.java to .\/java-design-patterns\ repository source files.
Added CatalogOfFixturesGlue.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectGlue.java to .\/java-design-patterns\ repository source files.
Added RunSpecs.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleAppIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleApplication.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Node.java to .\/java-design-patterns\ repository source files.
Added NodeImpl.java to .\/java-design-patterns\ repository source files.
Added NullNode.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NullNodeTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added TreeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ObjectPool.java to .\/java-design-patterns\ repository source files.
Added Oliphaunt.java to .\/java-design-patterns\ repository source files.
Added OliphauntPool.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OliphauntPoolTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GHobbits.java to .\/java-design-patterns\ repository source files.
Added GOrcs.java to .\/java-design-patterns\ repository source files.
Added GWeather.java to .\/java-design-patterns\ repository source files.
Added Observable.java to .\/java-design-patterns\ repository source files.
Added Observer.java to .\/java-design-patterns\ repository source files.
Added Race.java to .\/java-design-patterns\ repository source files.
Added Hobbits.java to .\/java-design-patterns\ repository source files.
Added Orcs.java to .\/java-design-patterns\ repository source files.
Added Weather.java to .\/java-design-patterns\ repository source files.
Added WeatherObserver.java to .\/java-design-patterns\ repository source files.
Added WeatherType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GHobbitsTest.java to .\/java-design-patterns\ repository source files.
Added GWeatherTest.java to .\/java-design-patterns\ repository source files.
Added ObserverTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added HobbitsTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WeatherObserverTest.java to .\/java-design-patterns\ repository source files.
Added WeatherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added MessageQueue.java to .\/java-design-patterns\ repository source files.
Added MqPublishPoint.java to .\/java-design-patterns\ repository source files.
Added MqSubscribePoint.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added SimpleMessage.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageQueue.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added PoisonMessageTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ImmutableStew.java to .\/java-design-patterns\ repository source files.
Added Stew.java to .\/java-design-patterns\ repository source files.
Added StewData.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ImmutableStewTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added StewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemQueue.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Stats.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Beast.java to .\/java-design-patterns\ repository source files.
Added ElfBeast.java to .\/java-design-patterns\ repository source files.
Added ElfMage.java to .\/java-design-patterns\ repository source files.
Added ElfWarlord.java to .\/java-design-patterns\ repository source files.
Added HeroFactory.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImpl.java to .\/java-design-patterns\ repository source files.
Added Mage.java to .\/java-design-patterns\ repository source files.
Added OrcBeast.java to .\/java-design-patterns\ repository source files.
Added OrcMage.java to .\/java-design-patterns\ repository source files.
Added OrcWarlord.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Warlord.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImplTest.java to .\/java-design-patterns\ repository source files.
Added PrototypeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardTower.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WizardTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxyTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppClient.java to .\/java-design-patterns\ repository source files.
Added LoggingHandler.java to .\/java-design-patterns\ repository source files.
Added AbstractNioChannel.java to .\/java-design-patterns\ repository source files.
Added ChannelHandler.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added NioDatagramChannel.java to .\/java-design-patterns\ repository source files.
Added NioReactor.java to .\/java-design-patterns\ repository source files.
Added NioServerSocketChannel.java to .\/java-design-patterns\ repository source files.
Added SameThreadDispatcher.java to .\/java-design-patterns\ repository source files.
Added ThreadPoolDispatcher.java to .\/java-design-patterns\ repository source files.
Added ReactorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Reader.java to .\/java-design-patterns\ repository source files.
Added ReaderWriterLock.java to .\/java-design-patterns\ repository source files.
Added Writer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ReaderAndWriterTest.java to .\/java-design-patterns\ repository source files.
Added ReaderTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppConfig.java to .\/java-design-patterns\ repository source files.
Added Person.java to .\/java-design-patterns\ repository source files.
Added PersonRepository.java to .\/java-design-patterns\ repository source files.
Added PersonSpecifications.java to .\/java-design-patterns\ repository source files.
Added AnnotationBasedRepositoryTest.java to .\/java-design-patterns\ repository source files.
Added AppConfigTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RepositoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added SlidingDoor.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ClosableTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added Queen.java to .\/java-design-patterns\ repository source files.
Added Royalty.java to .\/java-design-patterns\ repository source files.
Added Servant.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added KingTest.java to .\/java-design-patterns\ repository source files.
Added QueenTest.java to .\/java-design-patterns\ repository source files.
Added ServantTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BaseEntity.java to .\/java-design-patterns\ repository source files.
Added Dao.java to .\/java-design-patterns\ repository source files.
Added DaoBaseImpl.java to .\/java-design-patterns\ repository source files.
Added HibernateUtil.java to .\/java-design-patterns\ repository source files.
Added MagicService.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImpl.java to .\/java-design-patterns\ repository source files.
Added Spell.java to .\/java-design-patterns\ repository source files.
Added SpellDao.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Spellbook.java to .\/java-design-patterns\ repository source files.
Added SpellbookDao.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardDao.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BaseDaoTest.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added InitContext.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added ServiceCache.java to .\/java-design-patterns\ repository source files.
Added ServiceImpl.java to .\/java-design-patterns\ repository source files.
Added ServiceLocator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ServiceLocatorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTower.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiom.java to .\/java-design-patterns\ repository source files.
Added IvoryTower.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLocking.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTower.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiomTest.java to .\/java-design-patterns\ repository source files.
Added IvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added SingletonTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLockingTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AbstractCreature.java to .\/java-design-patterns\ repository source files.
Added Creature.java to .\/java-design-patterns\ repository source files.
Added Dragon.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added KillerBee.java to .\/java-design-patterns\ repository source files.
Added Octopus.java to .\/java-design-patterns\ repository source files.
Added Shark.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added Color.java to .\/java-design-patterns\ repository source files.
Added Movement.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added ColorSelector.java to .\/java-design-patterns\ repository source files.
Added MovementSelector.java to .\/java-design-patterns\ repository source files.
Added SizeSelector.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CreatureTest.java to .\/java-design-patterns\ repository source files.
Added ColorSelectorTest.java to .\/java-design-patterns\ repository source files.
Added MovementSelectorTest.java to .\/java-design-patterns\ repository source files.
Added SizeSelectorTest.java to .\/java-design-patterns\ repository source files.
Added AngryState.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Mammoth.java to .\/java-design-patterns\ repository source files.
Added PeacefulState.java to .\/java-design-patterns\ repository source files.
Added State.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MammothTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilder.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DragonSlayer.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategy.java to .\/java-design-patterns\ repository source files.
Added MeleeStrategy.java to .\/java-design-patterns\ repository source files.
Added ProjectileStrategy.java to .\/java-design-patterns\ repository source files.
Added SpellStrategy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayerTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategyTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HalflingThief.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethod.java to .\/java-design-patterns\ repository source files.
Added StealingMethod.java to .\/java-design-patterns\ repository source files.
Added SubtleMethod.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HalflingThiefTest.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethodTest.java to .\/java-design-patterns\ repository source files.
Added StealingMethodTest.java to .\/java-design-patterns\ repository source files.
Added SubtleMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTask.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added Worker.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTaskTest.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTaskTest.java to .\/java-design-patterns\ repository source files.
Added TaskTest.java to .\/java-design-patterns\ repository source files.
Added WorkerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added RainbowFish.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializer.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializerTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2Test.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BallItem.java to .\/java-design-patterns\ repository source files.
Added BallThread.java to .\/java-design-patterns\ repository source files.
Added GameItem.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BallItemTest.java to .\/java-design-patterns\ repository source files.
Added BallThreadTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HeroStat.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroStatTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Commander.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitor.java to .\/java-design-patterns\ repository source files.
Added Sergeant.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitor.java to .\/java-design-patterns\ repository source files.
Added Soldier.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitor.java to .\/java-design-patterns\ repository source files.
Added Unit.java to .\/java-design-patterns\ repository source files.
Added UnitVisitor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommanderTest.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SergeantTest.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SoldierTest.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitorTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added UnitTest.java to .\/java-design-patterns\ repository source files.
Added VisitorTest.java to .\/java-design-patterns\ repository source files.
App app = new App();
elfKing=app.getKing(elfFactory)
final King elfKing = app.getKing(elfFactory);
orcKing=app.getKing(orcFactory)
final King orcKing = app.getKing(orcFactory);
elfCastle=app.getCastle(elfFactory)
final Castle elfCastle = app.getCastle(elfFactory);
orcCastle=app.getCastle(orcFactory)
final Castle orcCastle = app.getCastle(orcFactory);
elfArmy=app.getArmy(elfFactory)
final Army elfArmy = app.getArmy(elfFactory);
orcArmy=app.getArmy(orcFactory)
final Army orcArmy = app.getArmy(orcFactory);
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
String[] args = {};
Captain captain = new Captain(new BattleFishingBoat());
battleFishingBoat=spy(new BattleFishingBoat())
BattleFishingBoat battleFishingBoat = spy(new BattleFishingBoat());
Captain captain = new Captain();
BattleShip captain = (BattleShip) beans.get(CAPTAIN_BEAN);
BattleShip battleship = (BattleShip) beans.get(BATTLESHIP_BEAN);
String[] args = {};
AsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult1=executor.startProcess(lazyval(10,500))
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
asyncResult2=executor.startProcess(lazyval("test",300))
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
asyncResult3=executor.startProcess(lazyval(50L,700))
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
asyncResult4=executor.startProcess(lazyval(20,400),callback("Callback result 4"))
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
asyncResult5=executor.startProcess(lazyval("callback",600),callback("Callback result 5"))
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
result1=executor.endProcess(asyncResult1)
Integer result1 = executor.endProcess(asyncResult1);
result2=executor.endProcess(asyncResult2)
String result2 = executor.endProcess(asyncResult2);
result3=executor.endProcess(asyncResult3)
Long result3 = executor.endProcess(asyncResult3);
CompletableResult<T> result = new CompletableResult<>(callback);
String[] args = {};
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null)
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(null,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
exception=optionalException.get()
final Exception exception = optionalException.get();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null,null)
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());
FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());
SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());
String[] args = {};
excalibur=spy(new Excalibur())
final Excalibur excalibur = spy(new Excalibur());
final BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(excalibur);
mjollnir=spy(new Mjollnir())
final Mjollnir mjollnir = spy(new Mjollnir());
final FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(mjollnir);
stormbringer=spy(new Stormbringer())
final Stormbringer stormbringer = spy(new Stormbringer());
final SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(stormbringer);
mage=new HeroBuilder(Profession.MAGE,"Riobard").withHairColor(HairColor.BLACK).withWeapon(Weapon.DAGGER).build()
Hero mage =
        new HeroBuilder(Profession.MAGE, "Riobard").withHairColor(HairColor.BLACK)
            .withWeapon(Weapon.DAGGER).build();
warrior=new HeroBuilder(Profession.WARRIOR,"Amberjill").withHairColor(HairColor.BLOND).withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).build()
Hero warrior =
        new HeroBuilder(Profession.WARRIOR, "Amberjill").withHairColor(HairColor.BLOND)
            .withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD)
            .build();
thief=new HeroBuilder(Profession.THIEF,"Desmond").withHairType(HairType.BALD).withWeapon(Weapon.BOW).build()
Hero thief =
        new HeroBuilder(Profession.THIEF, "Desmond").withHairType(HairType.BALD)
            .withWeapon(Weapon.BOW).build();
StringBuilder sb = new StringBuilder();
String[] args = {};
final String heroName = "Sir Lancelot";
hero=new Hero.HeroBuilder(Profession.WARRIOR,heroName).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).withHairType(HairType.LONG_CURLY).withHairColor(HairColor.BLOND).build()
final Hero hero = new Hero.HeroBuilder(Profession.WARRIOR, heroName)
        .withArmor(Armor.CHAIN_MAIL)
        .withWeapon(Weapon.SWORD)
        .withHairType(HairType.LONG_CURLY)
        .withHairColor(HairColor.BLOND)
        .build();
BusinessDelegate businessDelegate = new BusinessDelegate();
BusinessLookup businessLookup = new BusinessLookup();
Client client = new Client(businessDelegate);
String[] args = {};
Client client = new Client(businessDelegate);
App app = new App();
UserAccount userAccount1 = new UserAccount("001", "John", "He is a boy.");
UserAccount userAccount2 = new UserAccount("002", "Jane", "She is a girl.");
UserAccount userAccount3 = new UserAccount("003", "Adam", "He likes food.");
UserAccount userAccount4 = new UserAccount("004", "Rita", "She hates cats.");
UserAccount userAccount5 = new UserAccount("005", "Isaac", "He is allergic to mustard.");
UserAccount userAccount6 = new UserAccount("006", "Yasha", "She is an only child.");
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
StringBuilder sb = new StringBuilder();
iterable=db.getCollection("user_accounts").find(new Document("userID",userId))
FindIterable<Document> iterable =
        db.getCollection("user_accounts").find(new Document("userID", userId));
doc=iterable.first()
Document doc = iterable.first();
node=cache.get(userId)
Node node = cache.get(userId);
old=cache.get(userId)
Node old = cache.get(userId);
Node newNode = new Node(userId, userAccount);
toBeRemoved=cache.get(userId)
Node toBeRemoved = cache.get(userId);
ArrayList<UserAccount> listOfCacheData = new ArrayList<>();
Node temp = head;
String[] args = {};
Task task = new SimpleTask();
Callback callback = new Callback() {
      @Override
      public void call() {
        System.out.println("I'm done now.");
      }
    };
Task task = new SimpleTask();
Callback c = () -> System.out.println("I'm done now.");
    task.executeWith(c);
  
String[] args = {};
Callback callback = new Callback() {
      @Override
      public void call() {
        callingCount++;
      }
    };
Task task = new SimpleTask();
Callback callback = () -> callingCount++;

    Task task = new SimpleTask();

    assertEquals("Initial calling count of 0", new Integer(0), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called once", new Integer(1), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called twice", new Integer(2), callingCount);

  
OrcKing king = new OrcKing();
String[] args = {};
final OrcKing king = new OrcKing();
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
temp=target.getSize()
Size temp = target.getSize();
previousSpell=undoStack.pollLast()
Command previousSpell = undoStack.pollLast();
previousSpell=redoStack.pollLast()
Command previousSpell = redoStack.pollLast();
String[] args = {};
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
orcMessage=new Messenger().messageFromOrcs()
LetterComposite orcMessage = new Messenger().messageFromOrcs();
elfMessage=new Messenger().messageFromElves()
LetterComposite elfMessage = new Messenger().messageFromElves();
List<Word> words = new ArrayList<>();
List<Word> words = new ArrayList<>();
String[] args = {};
final Messenger messenger = new Messenger();
final Messenger messenger = new Messenger();
words=message.split(" ")
final String[] words = message.split(" ");
final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());
final Customer customer = new Customer(4, "Dan", "Danson");
final Customer customer1 = new Customer(1, "Adam", "Adamson");
final Customer customer2 = new Customer(2, "Bob", "Bobson");
final Customer customer3 = new Customer(3, "Carl", "Carlson");
final List<Customer> customers = new ArrayList<>();
boolean isEqual = false;
final Customer customer = (Customer) o;
Customer customer = null;
index=getAllCustomers().indexOf(customer)
final int index = getAllCustomers().indexOf(customer);
String[] args = {};
final Customer nonExistingCustomer = new Customer(2, "Robert", "Englund");
final String newFirstname = "Bernard";
final String newLastname = "Montgomery";
final Customer customer = new Customer(CUSTOMER.getId(), newFirstname, newLastname);
cust=impl.getCustomerById(CUSTOMER.getId())
final Customer cust = impl.getCustomerById(CUSTOMER.getId());
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final String newFirstname = "Douglas";
final String newLastname = "MacArthur";
final Customer customer = new Customer(nonExistingId, newFirstname, newLastname);
existingCustomer=impl.getCustomerById(CUSTOMER.getId())
final Customer existingCustomer = impl.getCustomerById(CUSTOMER.getId());
final Customer newCustomer = new Customer(3, "George", "Patton");
final Customer newCustomer = new Customer(3, "George", "Patton");
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final int newId = 2;
final String newFirstname = "Bill";
final String newLastname = "Clinton";
final int newId = 2;
final Customer otherCustomer = new Customer(newId, FIRSTNAME, LASTNAME);
final Customer otherCustomer = new Customer(ID, FIRSTNAME, LASTNAME);
final StringBuffer buffer = new StringBuffer();
Hostile troll = new Troll();
Hostile smart = new SmartHostile(troll);
String[] args = {};
simpleTroll=spy(new Troll())
final Hostile simpleTroll = spy(new Troll());
final Hostile smartTroll = new SmartHostile(simpleTroll);
final Troll troll = new Troll();
PrinterController hpPrinterController = new PrinterController(new HpPrinter());
PrinterController canonPrinterController = new PrinterController(new CanonPrinter());
PrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());
String[] args = {};
PrinterController printerController = new PrinterController(new CanonPrinter());
PrinterController printerController = new PrinterController(new HpPrinter());
PrinterController printerController = new PrinterController(new EpsonPrinter());
SimpleWizard simpleWizard = new SimpleWizard();
AdvancedWizard advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());
injector=Guice.createInjector(new TobaccoModule())
Injector injector = Guice.createInjector(new TobaccoModule());
guiceWizard=injector.getInstance(GuiceWizard.class)
GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final AdvancedWizard advancedWizard = new AdvancedWizard(tobacco);
String[] args = {};
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final GuiceWizard guiceWizard = new GuiceWizard(tobacco);
@SuppressWarnings("unchecked")
    final Class<? extends Tobacco>[] tobaccos = new Class[]{
        OldTobyTobacco.class, RivendellTobacco.class, SecondBreakfastTobacco.class
    };
injector=Guice.createInjector(new AbstractModule(){
  @Override protected void configure(){
    bind(Tobacco.class).to(tobaccoClass);
  }
}
)
final Injector injector = Guice.createInjector(new AbstractModule() {
        @Override
        protected void configure() {
          bind(Tobacco.class).to(tobaccoClass);
        }
      });
guiceWizard=injector.getInstance(GuiceWizard.class)
final GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final SimpleWizard simpleWizard = new SimpleWizard();
final Inventory inventory = new Inventory(1000);
executorService=Executors.newFixedThreadPool(3)
ExecutorService executorService = Executors.newFixedThreadPool(3);
String[] args = {};
final Inventory inventory = new Inventory(INVENTORY_SIZE);
executorService=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);
items=inventory.getItems()
final List<Item> items = inventory.getItems();
final List<Item> items = inventory.getItems();
stdOutCaptor=ArgumentCaptor.forClass(String.class)
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
values=stdOutCaptor.getAllValues()
final List<String> values = stdOutCaptor.getAllValues();
final List<String> values = stdOutCaptor.getAllValues();
List<GameObject> objects = new ArrayList<>();
String[] args = {};
tested=getTestedObject()
final O tested = getTestedObject();
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectTargetOnFire 
        ? "Expected [" + targetName + "] to be on fire after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be on fire after colliding with [" + otherName + "] but it was!";
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectedDamage
        ? "Expected [" + targetName + "] to be damaged after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be damaged after colliding with [" + otherName + "] but it was!";
final FlamingAsteroid asteroid = new FlamingAsteroid(1, 2, 3, 4);
final Meteoroid meteoroid = new Meteoroid(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final SpaceStationIss iss = new SpaceStationIss(1, 2, 3, 4);
final SpaceStationMir mir = new SpaceStationMir(1, 2, 3, 4);
KingJoffrey kingJoffrey = new KingJoffrey();
KingsHand kingsHand = new KingsHand(kingJoffrey);
List<EventEmitter> emitters = new ArrayList<>();
String[] args = {};
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithoutDefaultObserver.get()
final E emitter = this.factoryWithoutDefaultObserver.get();
defaultObserver=mock(EventObserver.class)
final EventObserver defaultObserver = mock(EventObserver.class);
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithDefaultObserver.apply(defaultObserver)
final E emitter = this.factoryWithDefaultObserver.apply(defaultObserver);
toString=event.toString()
final String toString = event.toString();
final KingJoffrey kingJoffrey = new KingJoffrey();
final String expectedMessage = "Received event from the King's Hand: " + event.toString();
observer=mock(EventObserver.class)
final EventObserver observer = mock(EventObserver.class);
final KingsHand kingsHand = new KingsHand(observer);
toString=weekday.toString()
final String toString = weekday.toString();
EventDispatcher dispatcher = new EventDispatcher();
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = (UserCreatedEvent) message;
UserUpdatedEvent userUpdatedEvent = (UserUpdatedEvent) message;
String[] args = {};
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
dispatcher=spy(new EventDispatcher())
EventDispatcher dispatcher = spy(new EventDispatcher());
userCreatedEventHandler=spy(new UserCreatedEventHandler())
UserCreatedEventHandler userCreatedEventHandler = spy(new UserCreatedEventHandler());
userUpdatedEventHandler=spy(new UserUpdatedEventHandler())
UserUpdatedEventHandler userUpdatedEventHandler = spy(new UserUpdatedEventHandler());
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
UserUpdatedEvent userUpdatedEvent = new UserUpdatedEvent(user);
FileWriter writer = new FileWriter(filename);
String[] args = {};
File file = new File("testfile.txt");
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
final File nonExistingFile = new File(this.testFolder.getRoot(), "non-existing-file");
final String testMessage = "Test message";
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
DwarvenGoldmineFacade facade = new DwarvenGoldmineFacade();
String[] args = {};
final DwarvenGoldmineFacade goldMine = new DwarvenGoldmineFacade();
WeaponFactory factory = WeaponFactory.factory(builder -> {
      builder.add(WeaponType.SWORD, Sword::new);
      builder.add(WeaponType.AXE, Axe::new);
      builder.add(WeaponType.SPEAR, Spear::new);
      builder.add(WeaponType.BOW, Bow::new);
    });
    Weapon axe = factory.create(WeaponType.AXE);
    System.out.println(axe);
  
HashMap<WeaponType, Supplier<Weapon>> map = new HashMap<>();
String[] args = {};
weapon=factory.create(WeaponType.SPEAR)
Weapon weapon = factory.create(WeaponType.SPEAR);
weapon=factory.create(WeaponType.AXE)
Weapon weapon = factory.create(WeaponType.AXE);
weapon=factory.create(WeaponType.SWORD)
Weapon weapon = factory.create(WeaponType.SWORD);
App app = new App(new OrcBlacksmith());
Weapon weapon;
String[] args = {};
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.AXE)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.AXE);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties turnedOff = new Properties();
Service turnedOffService = new PropertiesFeatureToggleVersion(turnedOff);
welcomeMessageturnedOff=turnedOffService.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessageturnedOff = turnedOffService.getWelcomeMessage(new User("Jamie No Code"));
final User paidUser = new User("Jamie Coder");
final User freeUser = new User("Alan Defect");
welcomeMessagePaidUser=service.getWelcomeMessage(paidUser)
final String welcomeMessagePaidUser = service.getWelcomeMessage(paidUser);
welcomeMessageFreeUser=service.getWelcomeMessage(freeUser)
final String welcomeMessageFreeUser = service.getWelcomeMessage(freeUser);
final Properties properties = new Properties();
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
welcomeMessage=service.getWelcomeMessage(paidUser)
final String welcomeMessage = service.getWelcomeMessage(paidUser);
final String expected = "You're amazing Jamie Coder. Thanks for paying for this awesome software.";
welcomeMessage=service.getWelcomeMessage(freeUser)
final String welcomeMessage = service.getWelcomeMessage(freeUser);
final String expected = "I suppose you can use this software.";
User user = new User("Free User");
User user = new User("Paid User");
User user = new User("Paid User");
User user = new User("Free User");
List<Integer> integerList = new ArrayList<>();
firstFiveNegatives=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList()
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
lastTwoPositives=SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList()
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
transformedList=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString()).asList()
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
lastTwoOfFirstFourStringMapped=LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2).map(number-- > "String[" + valueOf(number) + "]").asList()
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
StringJoiner joiner = new StringJoiner(delimiter, prefix, ".");
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
ArrayList<E> copy = new ArrayList<>();
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
final E result = next;
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=last(1).iterator()
Iterator<E> resultIterator = last(1).iterator();
Iterator<E> resultIterator = last(1).iterator();
E candidate = null;
newIterator=iterable.iterator()
Iterator<E> newIterator = iterable.iterator();
candidate=oldTypeIterator.next()
E candidate = oldTypeIterator.next();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
nextElement=iterator.next()
E nextElement = iterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentCount = 0;
list=last(1).asList()
List<E> list = last(1).asList();
List<E> list = last(1).asList();
remainingElementsCount=getRemainingElementsCount()
int remainingElementsCount = getRemainingElementsCount();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentIndex = 0;
List<T> temporaryList = new ArrayList<>();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
copy=FluentIterable.copyToList(iterable)
List<E> copy = FluentIterable.copyToList(iterable);
List<E> copy = FluentIterable.copyToList(iterable);
int counter = 0;
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
List<E> copy = new ArrayList<>();
String[] args = {};
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
evenItems=createFluentIterable(integers).filter(i-- > i % 2 == 0).asList()
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
longs=createFluentIterable(integers).map(Integer).asList()
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
consumer=mock(Consumer.class)
final Consumer<Integer> consumer = mock(Consumer.class);
final Consumer<Integer> consumer = mock(Consumer.class);
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
split=createFluentIterable(integers).spliterator()
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
MenuStore menuStore = new MenuStore();
ContentStore contentStore = new ContentStore();
MenuView menuView = new MenuView();
ContentView contentView = new ContentView();
ContentAction contentAction = (ContentAction) action;
MenuAction menuAction = (MenuAction) action;
ContentStore contentStore = (ContentStore) store;
MenuStore menuStore = (MenuStore) store;
toString=content.toString()
final String toString = content.toString();
toString=menuItem.toString()
final String toString = menuItem.toString();
String[] args = {};
final Constructor<Dispatcher> constructor;
final Constructor<Dispatcher> constructor;
field=Dispatcher.class.getDeclaredField("instance")
final Field field = Dispatcher.class.getDeclaredField("instance");
dispatcher=Dispatcher.getInstance()
final Dispatcher dispatcher = Dispatcher.getInstance();
store=mock(Store.class)
final Store store = mock(Store.class);
actionCaptor=ArgumentCaptor.forClass(Action.class)
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
actions=actionCaptor.getAllValues()
final List<Action> actions = actionCaptor.getAllValues();
final List<Action> actions = actionCaptor.getAllValues();
menuActions=actions.stream().filter(a-- > a.getType().equals(ActionType.MENU_ITEM_SELECTED)).map(a-- > (MenuAction)a).collect(Collectors.toList())
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
contentActions=actions.stream().filter(a-- > a.getType().equals(ActionType.CONTENT_CHANGED)).map(a-- > (ContentAction)a).collect(Collectors.toList())
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final ContentStore contentStore = new ContentStore();
view=mock(View.class)
final View view = mock(View.class);
final MenuStore menuStore = new MenuStore();
view=mock(View.class)
final View view = mock(View.class);
store=mock(ContentStore.class)
final ContentStore store = mock(ContentStore.class);
final ContentView view = new ContentView();
store=mock(MenuStore.class)
final MenuStore store = mock(MenuStore.class);
final MenuView view = new MenuView();
store=mock(Store.class)
final Store store = mock(Store.class);
final MenuView view = new MenuView();
PotionFactory factory = new PotionFactory();
AlchemistShop alchemistShop = new AlchemistShop();
potion=potions.get(type)
Potion potion = potions.get(type);
final AlchemistShop shop = new AlchemistShop();
bottomShelf=shop.getBottomShelf()
final List<Potion> bottomShelf = shop.getBottomShelf();
final List<Potion> bottomShelf = shop.getBottomShelf();
topShelf=shop.getTopShelf()
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> allPotions = new ArrayList<>();
String[] args = {};
FrontController controller = new FrontController();
command=getCommand(request)
Command command = getCommand(request);
commandClass=getCommandClass(request)
Class commandClass = getCommandClass(request);
Class result;
final Exception cause = new Exception();
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final FrontController frontController = new FrontController();
final List<Object[]> parameters = new ArrayList<>();
final List<Object[]> parameters = new ArrayList<>();
AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final Object result = new Object();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IOException exception = new IOException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IllegalStateException exception = new IllegalStateException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
Filter last = this;
String result = super.execute(order);
FilterManager filterManager = new FilterManager();
Client client = new Client();
JPanel panel = new JPanel();
Order order =
            new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),
                jtFields[2].getText(), jtAreas[1].getText());
rootPane=SwingUtilities.getRootPane(processButton)
JRootPane rootPane = SwingUtilities.getRootPane(processButton);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
JPanel bot = new JPanel();
rootPane=SwingUtilities.getRootPane(del)
JRootPane rootPane = SwingUtilities.getRootPane(del);
temp=jt.getSelectedRow()
int temp = jt.getSelectedRow();
temp2=jt.getSelectedRowCount()
int temp2 = jt.getSelectedRowCount();
String[] args = {};
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
filter=mock(Filter.class)
final Filter filter = mock(Filter.class);
order=mock(Order.class)
final Order order = mock(Order.class);
final List<Object[]> testData = new ArrayList<>();
result=this.filter.execute(this.order)
final String result = this.filter.execute(this.order);
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
String tokenString = "4 3 2 - 1 + *";
Stack<Expression> stack = new Stack<>();
tokenList=tokenString.split(" ")
String[] tokenList = tokenString.split(" ");
rightExpression=stack.pop()
Expression rightExpression = stack.pop();
leftExpression=stack.pop()
Expression leftExpression = stack.pop();
operator=getOperatorInstance(s,leftExpression,rightExpression)
Expression operator = getOperatorInstance(s, leftExpression, rightExpression);
result=operator.interpret()
int result = operator.interpret();
NumberExpression resultExpression = new NumberExpression(result);
Expression i = new NumberExpression(s);
String[] args = {};
final List<Object[]> testData = new ArrayList<>();
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expectedValue=getFirst().interpret()
final int expectedValue = getFirst().interpret();
testStingValue=String.valueOf(expectedValue)
final String testStingValue = String.valueOf(expectedValue);
final NumberExpression numberExpression = new NumberExpression(testStingValue);
TreasureChest chest = new TreasureChest();
ringIterator=chest.iterator(ItemType.RING)
ItemIterator ringIterator = chest.iterator(ItemType.RING);
potionIterator=chest.iterator(ItemType.POTION)
ItemIterator potionIterator = chest.iterator(ItemType.POTION);
weaponIterator=chest.iterator(ItemType.WEAPON)
ItemIterator weaponIterator = chest.iterator(ItemType.WEAPON);
it=chest.iterator(ItemType.ANY)
ItemIterator it = chest.iterator(ItemType.ANY);
ArrayList<Item> list = new ArrayList<>();
items=chest.getItems()
List<Item> items = chest.getItems();
List<Item> items = chest.getItems();
boolean found = false;
int tempIdx = idx;
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final TreasureChest chest = new TreasureChest();
iterator=chest.iterator(expectedItem.getType())
final ItemIterator iterator = chest.iterator(expectedItem.getType());
item=iterator.next()
final Item item = iterator.next();
name=item.toString()
final String name = item.toString();
final TreasureChest chest = new TreasureChest();
items=chest.getItems()
final List<Item> items = chest.getItems();
final List<Item> items = chest.getItems();
final boolean sameType = this.expectedItem.getType() == item.getType();
sameName=this.expectedItem.toString().equals(item.toString())
final boolean sameName = this.expectedItem.toString().equals(item.toString());
CakeViewImpl cakeView = new CakeViewImpl(cakeBakingService);
CakeInfo cake1 =
        new CakeInfo(new CakeToppingInfo("candies", 0), Arrays.asList(new CakeLayerInfo(
            "chocolate", 0), new CakeLayerInfo("banana", 0), new CakeLayerInfo("strawberry", 0)));
CakeInfo cake2 =
        new CakeInfo(new CakeToppingInfo("cherry", 0), Arrays.asList(
            new CakeLayerInfo("vanilla", 0), new CakeLayerInfo("lemon", 0), new CakeLayerInfo(
                "strawberry", 0)));
allToppings=getAvailableToppingEntities()
List<CakeTopping> allToppings = getAvailableToppingEntities();
List<CakeTopping> allToppings = getAvailableToppingEntities();
matchingToppings=allToppings.stream().filter((t)-- > t.getName().equals(cakeInfo.cakeToppingInfo.name)).collect(Collectors.toList())
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
allLayers=getAvailableLayerEntities()
List<CakeLayer> allLayers = getAvailableLayerEntities();
List<CakeLayer> allLayers = getAvailableLayerEntities();
Set<CakeLayer> foundLayers = new HashSet<>();
found=allLayers.stream().filter((layer)-- > layer.getName().equals(info.name)).findFirst()
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
toppingBean=context.getBean(CakeToppingDao.class)
CakeToppingDao toppingBean = context.getBean(CakeToppingDao.class);
topping=toppingBean.findOne(matchingToppings.iterator().next().getId())
CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().getId());
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
Cake cake = new Cake();
layerBean=context.getBean(CakeLayerDao.class)
CakeLayerDao layerBean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeTopping> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
topping=iterator.next()
CakeTopping topping = iterator.next();
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeToppingInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
next=iterator.next()
CakeTopping next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayer> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayerInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
List<CakeInfo> result = new ArrayList<>();
iterator=cakeBean.findAll().iterator()
Iterator<Cake> iterator = cakeBean.findAll().iterator();
Iterator<Cake> iterator = cakeBean.findAll().iterator();
cake=iterator.next()
Cake cake = iterator.next();
CakeToppingInfo cakeToppingInfo =
          new CakeToppingInfo(cake.getTopping().getId(), cake.getTopping().getName(), cake
              .getTopping().getCalories());
ArrayList<CakeLayerInfo> cakeLayerInfos = new ArrayList<>();
CakeInfo cakeInfo = new CakeInfo(cake.getId(), cakeToppingInfo, cakeLayerInfos);
int total = cakeToppingInfo != null ? cakeToppingInfo.calories : 0;
String[] args = {};
final CakeBakingException exception = new CakeBakingException();
final String expectedMessage = "message";
final CakeBakingException exception = new CakeBakingException(expectedMessage);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialLayers=service.getAvailableLayers()
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
availableLayers=service.getAvailableLayers()
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialToppings=service.getAvailableToppings()
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
availableToppings=service.getAvailableToppings()
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeLayerInfo layer3 = new CakeLayerInfo("Layer3", 2000);
allCakes=service.getAllCakes()
final List<CakeInfo> allCakes = service.getAllCakes();
final List<CakeInfo> allCakes = service.getAllCakes();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeToppingInfo missingTopping = new CakeToppingInfo("Topping1", 1000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo missingLayer = new CakeLayerInfo("Layer2", 2000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final Cake cake = new Cake();
expectedId=Long.valueOf(1234L)
final Long expectedId = Long.valueOf(1234L);
final Cake cake = new Cake();
final CakeTopping expectedTopping = new CakeTopping("DummyTopping", 1000);
final Cake cake = new Cake();
final Set<CakeLayer> expectedLayers = new HashSet<>();
final Cake cake = new Cake();
final Set<CakeLayer> initialLayers = new HashSet<>();
final CakeLayer newLayer = new CakeLayer("layer3", 3000);
final Set<CakeLayer> expectedLayers = new HashSet<>();
final CakeTopping topping = new CakeTopping("topping", 20);
final CakeLayer layer = new CakeLayer("layer", 100);
final Cake cake = new Cake();
final String expected = "id=1234 topping=id=2345 name=topping calories=20 " 
            + "layers=[id=3456 name=layer calories=100]";
final List<CakeLayerInfo> layers = new ArrayList<>();
final List<CakeInfo> cakes = new ArrayList<>();
final CakeInfo cake = new CakeInfo(new CakeToppingInfo("topping", 1000), layers);
bakingService=mock(CakeBakingService.class)
final CakeBakingService bakingService = mock(CakeBakingService.class);
final CakeViewImpl cakeView = new CakeViewImpl(bakingService);
HolderNaive holderNaive = new HolderNaive();
heavy=holderNaive.getHeavy()
Heavy heavy = holderNaive.getHeavy();
HolderThreadSafe holderThreadSafe = new HolderThreadSafe();
another=holderThreadSafe.getHeavy()
Heavy another = holderThreadSafe.getHeavy();
Java8Holder java8Holder = new Java8Holder();
next=java8Holder.getHeavy()
Heavy next = java8Holder.getHeavy();
String[] args = {};
holderField=HolderNaive.class.getDeclaredField("heavy")
final Field holderField = HolderNaive.class.getDeclaredField("heavy");
holderField=HolderThreadSafe.class.getDeclaredField("heavy")
final Field holderField = HolderThreadSafe.class.getDeclaredField("heavy");
holderField=Java8Holder.class.getDeclaredField("heavy")
final Field holderField = Java8Holder.class.getDeclaredField("heavy");
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
supplierClass=supplier.getClass()
final Class<? extends Supplier> supplierClass = supplier.getClass();
final Class<? extends Supplier> supplierClass = supplier.getClass();
instanceField=supplierClass.getDeclaredField("heavyInstance")
final Field instanceField = supplierClass.getDeclaredField("heavyInstance");
Party party = new PartyImpl();
Hobbit hobbit = new Hobbit();
Wizard wizard = new Wizard();
Rogue rogue = new Rogue();
Hunter hunter = new Hunter();
String[] args = {};
partyMember1=mock(PartyMember.class)
final PartyMember partyMember1 = mock(PartyMember.class);
partyMember2=mock(PartyMember.class)
final PartyMember partyMember2 = mock(PartyMember.class);
final PartyImpl party = new PartyImpl();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
party=mock(Party.class)
final Party party = mock(Party.class);
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
memberClass=member.getClass()
final Class<? extends PartyMember> memberClass = member.getClass();
final Class<? extends PartyMember> memberClass = member.getClass();
Stack<StarMemento> states = new Stack<>();
Star star = new Star(StarType.SUN, 10000000, 500000);
StarMementoInternal state = new StarMementoInternal();
StarMementoInternal state = (StarMementoInternal) memento;
String[] args = {};
final Star star = new Star(StarType.SUN, 1, 2);
final Star star = new Star(StarType.SUN, 1, 2);
firstMemento=star.getMemento()
final StarMemento firstMemento = star.getMemento();
secondMemento=star.getMemento()
final StarMemento secondMemento = star.getMemento();
thirdMemento=star.getMemento()
final StarMemento thirdMemento = star.getMemento();
CamelContext context = new DefaultCamelContext();
String[] args = {};
GiantModel giant = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
GiantView view = new GiantView();
GiantController controller = new GiantController(giant, view);
String[] args = {};
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantView view = new GiantView();
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
FileLoader loader = new FileLoader();
FileSelectorJFrame jFrame = new FileSelectorJFrame();
FileSelectorPresenter presenter = new FileSelectorPresenter(jFrame);
BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)));
StringBuilder sb = new StringBuilder();
String line;
JScrollPane pane = new JScrollPane(area);
data=loader.loadData()
String data = loader.loadData();
String[] args = {};
final FileLoader fileLoader = new FileLoader();
String expectedFile = "Stamatis";
User user = new User("user", 24, Sex.FEMALE, "foobar.com");
IllegalStateException e = new IllegalStateException();
String[] args = {};
User tom = new User(null, 21, Sex.MALE, "tom@foo.bar");
User john = new User("John", 17, Sex.MALE, "john@qwe.bar");
User sarah = new User("Sarah", 42, Sex.FEMALE, "sarah@det.org");
validated=Validator.of(sarah).validate(getName,Objects,"name cannot be null").validate(User,age-- > age > 21,"user is underaged").validate(User,sex-- > sex == Sex.FEMALE,"user is not female").validate(User,email-- > email.contains("@"),"email does not contain @ sign").get()
User validated = Validator.of(sarah).validate(User::getName, Objects::nonNull, "name cannot be null")
        .validate(User::getAge, age -> age > 21, "user is underaged")
        .validate(User::getSex, sex -> sex == Sex.FEMALE, "user is not female")
        .validate(User::getEmail, email -> email.contains("@"), "email does not contain @ sign")
        .get();
LoadBalancer loadBalancer1 = new LoadBalancer();
LoadBalancer loadBalancer2 = new LoadBalancer();
server=servers.get(lastServedId++)
Server server = servers.get(lastServedId++);
String[] args = {};
final LoadBalancer firstBalancer = new LoadBalancer();
final LoadBalancer secondBalancer = new LoadBalancer();
server=mock(Server.class)
final Server server = mock(Server.class);
final LoadBalancer loadBalancer = new LoadBalancer();
final Request request = new Request("test");
String[] args = {};
nazgul=Nazgul.getInstance(name)
final Nazgul nazgul = Nazgul.getInstance(name);
obj=container.newTransientInstance(SimpleObject.class)
final SimpleObject obj = container.newTransientInstance(SimpleObject.class);
final SimpleObject simpleObject = new SimpleObject();
seq=context.sequence("create")
final Sequence seq = context.sequence("create");
obj=simpleObjects.create("Foobar")
final SimpleObject obj = simpleObjects.create("Foobar");
all=Lists.newArrayList()
final List<SimpleObject> all = Lists.newArrayList();
list=simpleObjects.listAll()
final List<SimpleObject> list = simpleObjects.listAll();
final List<SimpleObject> list = simpleObjects.listAll();
String name = "Foobar";
paramName=checkParam("name",ec,String.class)
String paramName = checkParam("name", ec, String.class);
paramNumber=defaultParam("number",ec,3)
final int paramNumber = defaultParam("number", ec, 3);
fs=new SimpleObjectCreate().setName(names.get(i))
final SimpleObjectCreate fs = new SimpleObjectCreate().setName(names.get(i));
isft=IsisSystemForTest.getElseNull()
IsisSystemForTest isft = IsisSystemForTest.getElseNull();
final IsisConfigurationForJdoIntegTests testConfiguration =
          new IsisConfigurationForJdoIntegTests();
findAll=service(SimpleObjects.class).listAll()
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
title=container.titleOf(simpleObjectWrapped)
final String title = container.titleOf(simpleObjectWrapped);
RecreateSimpleObjects fs = new RecreateSimpleObjects();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
simpleObject=wrap(all.get(0))
SimpleObject simpleObject = wrap(all.get(0));
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
causalChain=Throwables.getCausalChain(item)
final List<Throwable> causalChain = Throwables.getCausalChain(item);
final List<Throwable> causalChain = Throwables.getCausalChain(item);
settings=Bootstrap.getSettings()
IBootstrapSettings settings = Bootstrap.getSettings();
final AuthenticatedWebSessionForIsis s =
        (AuthenticatedWebSessionForIsis) super.newSession(request, response);
requestParameters=request.getRequestParameters()
IRequestParameters requestParameters = request.getRequestParameters();
user=requestParameters.getParameterValue("user")
final org.apache.wicket.util.string.StringValue user =
        requestParameters.getParameterValue("user");
password=requestParameters.getParameterValue("pass")
final org.apache.wicket.util.string.StringValue password =
        requestParameters.getParameterValue("pass");
uname=servletRequest.getParameter("user")
String uname = servletRequest.getParameter("user");
final Module isisDefaults = super.newIsisWicketModule();
final Module overrides = new AbstractModule() {
      @Override
      protected void configure() {
        bind(String.class).annotatedWith(Names.named("applicationName")).toInstance("Simple App");
        bind(String.class).annotatedWith(Names.named("applicationCss")).toInstance(
            "css/application.css");
        bind(String.class).annotatedWith(Names.named("applicationJs")).toInstance(
            "scripts/application.js");
        bind(String.class).annotatedWith(Names.named("welcomeMessage")).toInstance(
            readLines(getClass(), "welcome.html"));
        bind(String.class).annotatedWith(Names.named("aboutMessage")).toInstance("Simple App");
        bind(InputStream.class).annotatedWith(Names.named("metaInfManifest")).toProvider(
            Providers.of(getServletContext().getResourceAsStream("/META-INF/MANIFEST.MF")));
      }
    };
readLines=Resources.readLines(Resources.getResource(contextClass,resourceName),Charset.defaultCharset())
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
Node root =
        new NodeImpl("1", new NodeImpl("11", new NodeImpl("111", NullNode.getInstance(),
            NullNode.getInstance()), NullNode.getInstance()), new NodeImpl("12",
            NullNode.getInstance(), new NodeImpl("122", NullNode.getInstance(),
                NullNode.getInstance())));
String[] args = {};
instance=NullNode.getInstance()
final NullNode instance = NullNode.getInstance();
node=NullNode.getInstance()
final NullNode node = NullNode.getInstance();
final NodeImpl level1B = new NodeImpl("level1_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2B = new NodeImpl("level2_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3A = new NodeImpl("level3_a", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3B = new NodeImpl("level3_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2A = new NodeImpl("level2_a", level3A, level3B);
final NodeImpl level1A = new NodeImpl("level1_a", level2A, level2B);
inOrder=Mockito.inOrder(getStdOutMock())
final InOrder inOrder = Mockito.inOrder(getStdOutMock());
level1=TREE_ROOT.getLeft()
final Node level1 = TREE_ROOT.getLeft();
level2=level1.getLeft()
final Node level2 = level1.getLeft();
level3=level2.getLeft()
final Node level3 = level2.getLeft();
level1=TREE_ROOT.getRight()
final Node level1 = TREE_ROOT.getRight();
OliphauntPool pool = new OliphauntPool();
oliphaunt1=pool.checkOut()
Oliphaunt oliphaunt1 = pool.checkOut();
oliphaunt2=pool.checkOut()
Oliphaunt oliphaunt2 = pool.checkOut();
oliphaunt3=pool.checkOut()
Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunt5=pool.checkOut()
Oliphaunt oliphaunt5 = pool.checkOut();
instance=available.iterator().next()
T instance = available.iterator().next();
String[] args = {};
final OliphauntPool pool = new OliphauntPool();
expectedOliphaunt=pool.checkOut()
final Oliphaunt expectedOliphaunt = pool.checkOut();
oliphaunt=pool.checkOut()
final Oliphaunt oliphaunt = pool.checkOut();
final OliphauntPool pool = new OliphauntPool();
firstOliphaunt=pool.checkOut()
final Oliphaunt firstOliphaunt = pool.checkOut();
secondOliphaunt=pool.checkOut()
final Oliphaunt secondOliphaunt = pool.checkOut();
oliphaunt3=pool.checkOut()
final Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
final Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunts=Arrays.asList(pool.checkOut(),pool.checkOut())
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
Weather weather = new Weather();
GWeather gWeather = new GWeather();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
String[] args = {};
final ArrayList<Object[]> testData = new ArrayList<>();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
observer=this.factory.get()
final O observer = this.factory.get();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
observer=this.factory.get()
final O observer = this.factory.get();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
MessageQueue queue = new SimpleMessageQueue(10000);
final Producer producer = new Producer("PRODUCER_1", queue);
final Consumer consumer = new Consumer("CONSUMER_1", queue);
Message msg;
sender=msg.getHeader(Headers.SENDER)
String sender = msg.getHeader(Headers.SENDER);
body=msg.getBody()
String body = msg.getBody();
Message msg = new SimpleMessage();
String[] args = {};
final Message[] messages = new Message[]{
        createMessage("you", "Hello!"),
        createMessage("me", "Hi!"),
        Message.POISON_PILL,
        createMessage("late_for_the_party", "Hello? Anyone here?"),
    };
final MessageQueue queue = new SimpleMessageQueue(messages.length);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final SimpleMessage msg = new SimpleMessage();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
messageCaptor=ArgumentCaptor.forClass(Message.class)
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
message=messageCaptor.getValue()
final Message message = messageCaptor.getValue();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
final SimpleMessage message = new SimpleMessage();
final String senderName = "test";
final SimpleMessage message = new SimpleMessage();
headers=message.getHeaders()
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
Stew stew = new Stew(1, 2, 3, 4);
ImmutableStew immutableStew = new ImmutableStew(2, 4, 3, 6);
String[] args = {};
final Stew stew = new Stew(1, 2, 3, 4);
final String message = "Mixing the stew we find: 1 potatoes, 2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Stew stew = new Stew(1, 2, 3, 4);
final ImmutableStew stew = new ImmutableStew(1, 2, 3, 4);
final String expectedMessage = "Mixing the immutable stew we find: 1 potatoes, "
        + "2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ItemQueue queue = new ItemQueue();
executorService=Executors.newFixedThreadPool(5)
ExecutorService executorService = Executors.newFixedThreadPool(5);
final Producer producer = new Producer("Producer_" + i, queue);
final Consumer consumer = new Consumer("Consumer_" + i, queue);
item=queue.take()
Item item = queue.take();
Item item = new Item(name, itemId++);
Random random = new Random();
String[] args = {};
queue=spy(new ItemQueue())
final ItemQueue queue = spy(new ItemQueue());
final Consumer consumer = new Consumer("consumer", queue);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
queue=mock(ItemQueue.class)
final ItemQueue queue = mock(ItemQueue.class);
final Producer producer = new Producer("producer", queue);
Prototype charProto = new Character();
Character mageProto = new Character(Type.MAGE, charProto);
Character warProto = new Character(Type.WARRIOR, charProto);
Character rogueProto = new Character(Type.ROGUE, charProto);
Character mag = new Character("Player_1", mageProto);
Character warrior = new Character("Player_2", warProto);
Character rogue = new Character("Player_3", rogueProto);
Character rogueDouble = new Character("Player_4", rogue);
containsValue=properties.containsKey(stat)
boolean containsValue = properties.containsKey(stat);
StringBuilder builder = new StringBuilder();
value=this.get(stat)
Integer value = this.get(stat);
String[] args = {};
final Character prototype = new Character();
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character mage = new Character(Type.MAGE, prototype);
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
HeroFactory factory;
Mage mage;
Warlord warlord;
Beast beast;
String[] args = {};
mage=mock(Mage.class)
final Mage mage = mock(Mage.class);
warlord=mock(Warlord.class)
final Warlord warlord = mock(Warlord.class);
beast=mock(Beast.class)
final Beast beast = mock(Beast.class);
final HeroFactoryImpl factory = new HeroFactoryImpl(mage, warlord, beast);
clone=this.testedPrototype.clone()
final Object clone = this.testedPrototype.clone();
WizardTowerProxy tower = new WizardTowerProxy();
String[] args = {};
final String[] wizardNames = {"Gandalf", "Dumbledore", "Oz", "Merlin"};
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTowerProxy tower = new WizardTowerProxy();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTower tower = new WizardTower();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
CamelContext context = new DefaultCamelContext();
template=context.createProducerTemplate()
ProducerTemplate template = context.createProducerTemplate();
String[] args = {};
LoggingHandler loggingHandler = new LoggingHandler();
NioServerSocketChannel channel = new NioServerSocketChannel(port, handler);
NioDatagramChannel channel = new NioDatagramChannel(port, handler);
AppClient appClient = new AppClient();
outputStream=socket.getOutputStream()
OutputStream outputStream = socket.getOutputStream();
PrintWriter writer = new PrintWriter(outputStream);
byte[] data = new byte[1024];
read=inputStream.read(data,0,data.length)
int read = inputStream.read(data, 0, data.length);
String message = clientName + " - Log request: " + i;
DatagramPacket request =
              new DatagramPacket(message.getBytes(), message.getBytes().length, remoteAddress);
byte[] data = new byte[1024];
DatagramPacket reply = new DatagramPacket(data, data.length);
DatagramPacket datagram = (DatagramPacket) readObject;
DatagramPacket replyPacket = new DatagramPacket(ByteBuffer.wrap(ACK));
buffer=ByteBuffer.wrap(ACK)
ByteBuffer buffer = ByteBuffer.wrap(ACK);
pendingWrites=channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
pendingWrite=pendingWrites.poll()
Object pendingWrite = pendingWrites.poll();
pendingWrites=this.channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
sender=((DatagramChannel)key.channel()).receive(buffer)
SocketAddress sender = ((DatagramChannel) key.channel()).receive(buffer);
DatagramPacket packet = new DatagramPacket(buffer);
DatagramPacket pendingPacket = (DatagramPacket) pendingWrite;
key=channel.getJavaChannel().register(selector,channel.getInterestedOps())
SelectionKey key = channel.getJavaChannel().register(selector, channel.getInterestedOps());
keys=selector.selectedKeys()
Set<SelectionKey> keys = selector.selectedKeys();
Set<SelectionKey> keys = selector.selectedKeys();
iterator=keys.iterator()
Iterator<SelectionKey> iterator = keys.iterator();
Iterator<SelectionKey> iterator = keys.iterator();
key=iterator.next()
SelectionKey key = iterator.next();
iterator=pendingCommands.iterator()
Iterator<Runnable> iterator = pendingCommands.iterator();
Iterator<Runnable> iterator = pendingCommands.iterator();
command=iterator.next()
Runnable command = iterator.next();
AbstractNioChannel channel = (AbstractNioChannel) key.attachment();
readObject=((AbstractNioChannel)key.attachment()).read(key)
Object readObject = ((AbstractNioChannel) key.attachment()).read(key);
ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();
socketChannel=serverSocketChannel.accept()
SocketChannel socketChannel = serverSocketChannel.accept();
readKey=socketChannel.register(selector,SelectionKey.OP_READ)
SelectionKey readKey = socketChannel.register(selector, SelectionKey.OP_READ);
SocketChannel socketChannel = (SocketChannel) key.channel();
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
read=socketChannel.read(buffer)
int read = socketChannel.read(buffer);
ByteBuffer pendingBuffer = (ByteBuffer) pendingWrite;
App app = new App(new ThreadPoolDispatcher(2));
AppClient client = new AppClient();
App app = new App(new SameThreadDispatcher());
AppClient client = new AppClient();
executeService=Executors.newFixedThreadPool(10)
ExecutorService executeService = Executors.newFixedThreadPool(10);
ReaderWriterLock lock = new ReaderWriterLock();
String[] args = {};
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
reader1=spy(new Reader("Reader 1",lock.readLock()))
Reader reader1 = spy(new Reader("Reader 1", lock.readLock()));
reader2=spy(new Reader("Reader 2",lock.readLock()))
Reader reader2 = spy(new Reader("Reader 2", lock.readLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
writer1=spy(new Writer("Writer 1",lock.writeLock()))
Writer writer1 = spy(new Writer("Writer 1", lock.writeLock()));
writer2=spy(new Writer("Writer 2",lock.writeLock()))
Writer writer2 = spy(new Writer("Writer 2", lock.writeLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
        "applicationContext.xml");
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
BasicDataSource basicDataSource = new BasicDataSource();
LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();
Properties properties = new Properties();
JpaTransactionManager transactionManager = new JpaTransactionManager();
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
        AppConfig.class);
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
final int prime = 31;
int result = 1;
Person other = (Person) obj;
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
resultSet=dataSource.getConnection().createStatement().executeQuery("SELECT 1")
ResultSet resultSet = dataSource.getConnection().createStatement().executeQuery("SELECT 1");
String result = null;
String expected = "1";
String[] args = {};
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
String[] args = {};
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
King k = new King();
Queen q = new Queen();
ArrayList<Royalty> guests = new ArrayList<>();
boolean anotherDay = true;
String[] args = {};
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
goodMoodRoyalty=mock(Royalty.class)
final Royalty goodMoodRoyalty = mock(Royalty.class);
badMoodRoyalty=mock(Royalty.class)
final Royalty badMoodRoyalty = mock(Royalty.class);
final ArrayList<Royalty> goodCompany = new ArrayList<>();
final ArrayList<Royalty> badCompany = new ArrayList<>();
Spell spell1 = new Spell("Ice dart");
Spell spell2 = new Spell("Invisibility");
Spell spell3 = new Spell("Stun bolt");
Spell spell4 = new Spell("Confusion");
Spell spell5 = new Spell("Darkness");
Spell spell6 = new Spell("Fireball");
Spell spell7 = new Spell("Enchant weapon");
Spell spell8 = new Spell("Rock armour");
Spell spell9 = new Spell("Light");
Spell spell10 = new Spell("Bee swarm");
Spell spell11 = new Spell("Haste");
Spell spell12 = new Spell("Levitation");
Spell spell13 = new Spell("Magic lock");
Spell spell14 = new Spell("Summon hell bat");
Spell spell15 = new Spell("Water walking");
Spell spell16 = new Spell("Magic storm");
Spell spell17 = new Spell("Entangle");
SpellDao spellDao = new SpellDaoImpl();
SpellbookDao spellbookDao = new SpellbookDaoImpl();
Spellbook spellbook1 = new Spellbook("Book of Orgymon");
Spellbook spellbook2 = new Spellbook("Book of Aras");
Spellbook spellbook3 = new Spellbook("Book of Kritior");
Spellbook spellbook4 = new Spellbook("Book of Tamaex");
Spellbook spellbook5 = new Spellbook("Book of Idores");
Spellbook spellbook6 = new Spellbook("Book of Opaen");
Spellbook spellbook7 = new Spellbook("Book of Kihione");
WizardDao wizardDao = new WizardDaoImpl();
Wizard wizard1 = new Wizard("Aderlard Boud");
Wizard wizard2 = new Wizard("Anaxis Bajraktari");
Wizard wizard3 = new Wizard("Xuban Munoa");
Wizard wizard4 = new Wizard("Blasius Dehooge");
MagicService service =
        new MagicServiceImpl(new WizardDaoImpl(), new SpellbookDaoImpl(), new SpellDaoImpl());
wizardsWithSpellbook=service.findWizardsWithSpellbook("Book of Idores")
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
wizardsWithSpell=service.findWizardsWithSpell("Fireball")
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
List<E> result = null;
List<E> result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
spellbook=spellbookDao.findByName(name)
Spellbook spellbook = spellbookDao.findByName(name);
spell=spellDao.findByName(name)
Spell spell = spellDao.findByName(name);
spellbook=spell.getSpellbook()
Spellbook spellbook = spell.getSpellbook();
session=getSession()
Session session = getSession();
Transaction tx = null;
Spell result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Spellbook result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Wizard result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
String[] args = {};
className=dao.persistentClass.getSimpleName()
final String className = dao.persistentClass.getSimpleName();
entityName=String.format("%s%d",className,ID_GENERATOR.incrementAndGet())
final String entityName = String.format("%s%d", className, ID_GENERATOR.incrementAndGet());
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
byId=this.dao.find(entity.getId())
final E byId = this.dao.find(entity.getId());
originalEntities=this.dao.findAll()
final List<E> originalEntities = this.dao.findAll();
final List<E> originalEntities = this.dao.findAll();
entitiesLeft=this.dao.findAll()
final List<E> entitiesLeft = this.dao.findAll();
final List<E> entitiesLeft = this.dao.findAll();
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
expectedId=Long.valueOf(1)
final Long expectedId = Long.valueOf(1);
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
final String expectedName = "new name";
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
final String bookname = "bookname";
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
final Set<Wizard> wizards = new HashSet<>();
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpellbook(bookname)
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final Set<Wizard> wizards = new HashSet<>();
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spell=mock(Spell.class)
final Spell spell = mock(Spell.class);
final String spellName = "spellname";
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpell(spellName)
final List<Wizard> result = service.findWizardsWithSpell(spellName);
final List<Wizard> result = service.findWizardsWithSpell(spellName);
dao=getDao()
final SpellDaoImpl dao = getDao();
allSpells=dao.findAll()
final List<Spell> allSpells = dao.findAll();
final List<Spell> allSpells = dao.findAll();
spellByName=dao.findByName(spell.getName())
final Spell spellByName = dao.findByName(spell.getName());
dao=getDao()
final SpellbookDaoImpl dao = getDao();
allBooks=dao.findAll()
final List<Spellbook> allBooks = dao.findAll();
final List<Spellbook> allBooks = dao.findAll();
spellByName=dao.findByName(book.getName())
final Spellbook spellByName = dao.findByName(book.getName());
dao=getDao()
final WizardDaoImpl dao = getDao();
allWizards=dao.findAll()
final List<Wizard> allWizards = dao.findAll();
final List<Wizard> allWizards = dao.findAll();
byName=dao.findByName(spell.getName())
final Wizard byName = dao.findByName(spell.getName());
service=ServiceLocator.getService("jndi/serviceA")
Service service = ServiceLocator.getService("jndi/serviceA");
Service cachedService = null;
serviceObj=serviceCache.getService(serviceJndiName)
Service serviceObj = serviceCache.getService(serviceJndiName);
InitContext ctx = new InitContext();
String[] args = {};
final String[] serviceNames = new String[]{
        "jndi/serviceA", "jndi/serviceB"
    };
service=ServiceLocator.getService(serviceName)
final Service service = ServiceLocator.getService(serviceName);
ivoryTower1=IvoryTower.getInstance()
IvoryTower ivoryTower1 = IvoryTower.getInstance();
ivoryTower2=IvoryTower.getInstance()
IvoryTower ivoryTower2 = IvoryTower.getInstance();
threadSafeIvoryTower1=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower1 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
threadSafeIvoryTower2=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower2 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
EnumIvoryTower enumIvoryTower1 = EnumIvoryTower.INSTANCE;
EnumIvoryTower enumIvoryTower2 = EnumIvoryTower.INSTANCE;
dcl1=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();
dcl2=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();
demandHolderIdiom=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom =
        InitializingOnDemandHolderIdiom.getInstance();
demandHolderIdiom2=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom2 =
        InitializingOnDemandHolderIdiom.getInstance();
ThreadSafeDoubleCheckLocking result = instance;
String[] args = {};
instance1=this.singletonInstanceMethod.get()
S instance1 = this.singletonInstanceMethod.get();
instance2=this.singletonInstanceMethod.get()
S instance2 = this.singletonInstanceMethod.get();
instance3=this.singletonInstanceMethod.get()
S instance3 = this.singletonInstanceMethod.get();
final List<Callable<S>> tasks = new ArrayList<>();
int i = 0
creatures=Arrays.asList(new Goblin(),new Octopus(),new Dragon(),new Shark(),new Troll(),new KillerBee())
List<Creature> creatures =
        Arrays.asList(new Goblin(), new Octopus(), new Dragon(), new Shark(), new Troll(),
            new KillerBee());
walkingCreatures=creatures.stream().filter(new MovementSelector(Movement.WALKING)).collect(Collectors.toList())
List<Creature> walkingCreatures =
        creatures.stream().filter(new MovementSelector(Movement.WALKING))
            .collect(Collectors.toList());
darkCreatures=creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList())
List<Creature> darkCreatures =
        creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList());
redAndFlyingCreatures=creatures.stream().filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING))).collect(Collectors.toList())
List<Creature> redAndFlyingCreatures =
        creatures.stream()
            .filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING)))
            .collect(Collectors.toList());
String[] args = {};
toString=this.testedCreature.toString()
final String toString = this.testedCreature.toString();
greenCreature=mock(Creature.class)
final Creature greenCreature = mock(Creature.class);
redCreature=mock(Creature.class)
final Creature redCreature = mock(Creature.class);
final ColorSelector greenSelector = new ColorSelector(Color.GREEN);
swimmingCreature=mock(Creature.class)
final Creature swimmingCreature = mock(Creature.class);
flyingCreature=mock(Creature.class)
final Creature flyingCreature = mock(Creature.class);
final MovementSelector swimmingSelector = new MovementSelector(Movement.SWIMMING);
normalCreature=mock(Creature.class)
final Creature normalCreature = mock(Creature.class);
smallCreature=mock(Creature.class)
final Creature smallCreature = mock(Creature.class);
final SizeSelector normalSelector = new SizeSelector(Size.NORMAL);
Mammoth mammoth = new Mammoth();
String[] args = {};
inOrder=Mockito.inOrder(this.stdOutMock)
final InOrder inOrder = Mockito.inOrder(this.stdOutMock);
final Mammoth mammoth = new Mammoth();
toString=new Mammoth().toString()
final String toString = new Mammoth().toString();
warrior=CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin").withWeapon("Sword").noAbilities().build()
Character warrior =
        CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin")
            .withWeapon("Sword").noAbilities().build();
mage=CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer").withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport").noMoreAbilities().build()
Character mage =
        CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer")
            .withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport")
            .noMoreAbilities().build();
thief=CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build()
Character thief =
        CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build();
StringBuilder sb = new StringBuilder();
Character character = new Character(name);
String[] args = {};
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").withAbility("invisibility").withAbility("wisdom").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .withAbility("invisibility")
        .withAbility("wisdom")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").noSpell().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .noSpell()
        .build();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .noAbilities()
        .build();
character=CharacterStepBuilder.newBuilder().name("Cuauhtemoc").fighterClass("aztec").withWeapon("spear").withAbility("speed").withAbility("strength").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Cuauhtemoc")
        .fighterClass("aztec")
        .withWeapon("spear")
        .withAbility("speed")
        .withAbility("strength")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Poor warrior").fighterClass("none").noWeapon().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Poor warrior")
        .fighterClass("none")
        .noWeapon()
        .build();
character=CharacterStepBuilder.newBuilder().name("Weak warrior").fighterClass("none").withWeapon("Slingshot").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Weak warrior")
        .fighterClass("none")
        .withWeapon("Slingshot")
        .noAbilities()
        .build();
DragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());
String[] args = {};
strategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy strategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(strategy);
initialStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy initialStrategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(initialStrategy);
newStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy newStrategy = mock(DragonSlayingStrategy.class);
HalflingThief thief = new HalflingThief(new HitAndRunMethod());
target=pickTarget()
String target = pickTarget();
String[] args = {};
method=mock(StealingMethod.class)
final StealingMethod method = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(method);
initialMethod=mock(StealingMethod.class)
final StealingMethod initialMethod = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(initialMethod);
newMethod=mock(StealingMethod.class)
final StealingMethod newMethod = mock(StealingMethod.class);
inOrder=inOrder(this.stdOutMock)
final InOrder inOrder = inOrder(this.stdOutMock);
List<Task> tasks = new ArrayList<>();
executor=Executors.newFixedThreadPool(3)
ExecutorService executor = Executors.newFixedThreadPool(3);
Runnable worker = new Worker(tasks.get(i));
String[] args = {};
service=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService service = Executors.newFixedThreadPool(THREAD_COUNT);
final List<Callable<Integer>> tasks = new ArrayList<>();
int i = 0
task=mock(Task.class)
final Task task = mock(Task.class);
final Worker worker = new Worker(task);
RainbowFish fishV1 = new RainbowFish("Zed", 10, 11, 12);
deserializedFishV1=RainbowFishSerializer.readV1("fish1.out")
RainbowFish deserializedFishV1 = RainbowFishSerializer.readV1("fish1.out");
RainbowFishV2 fishV2 = new RainbowFishV2("Scar", 5, 12, 15, true, true, true);
deserializedFishV2=RainbowFishSerializer.readV1("fish2.out")
RainbowFish deserializedFishV2 = RainbowFishSerializer.readV1("fish2.out");
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
FileInputStream fileIn = new FileInputStream(filename);
ObjectInputStream objIn = new ObjectInputStream(fileIn);
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
String[] args = {};
File file1 = new File("fish1.out");
File file2 = new File("fish2.out");
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
final RainbowFish fish = new RainbowFish("name", 1, 2, 3);
final RainbowFishV2 fish = new RainbowFishV2("name", 1, 2, 3, false, true, false);
BallItem ballItem = new BallItem();
BallThread ballThread = new BallThread();
String[] args = {};
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
inOrder=inOrder(ballThread)
final InOrder inOrder = inOrder(ballThread);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
exceptionHandler=mock(UncaughtExceptionHandler.class)
final UncaughtExceptionHandler exceptionHandler = mock(UncaughtExceptionHandler.class);
statA=HeroStat.valueOf(10,5,0)
HeroStat statA = HeroStat.valueOf(10, 5, 0);
statB=HeroStat.valueOf(10,5,0)
HeroStat statB = HeroStat.valueOf(10, 5, 0);
statC=HeroStat.valueOf(5,1,8)
HeroStat statC = HeroStat.valueOf(5, 1, 8);
final int prime = 31;
int result = 1;
HeroStat other = (HeroStat) obj;
String[] args = {};
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatC=HeroStat.valueOf(3,9,8)
HeroStat heroStatC = HeroStat.valueOf(3, 9, 8);
Commander commander =
        new Commander(new Sergeant(new Soldier(), new Soldier(), new Soldier()), new Sergeant(
            new Soldier(), new Soldier(), new Soldier()));
String[] args = {};
final Unit[] children = new Unit[5];
unit=this.factory.apply(children)
final U unit = this.factory.apply(children);
visitor=mock(UnitVisitor.class)
final UnitVisitor visitor = mock(UnitVisitor.class);

Diff of 8a4911a4eb335463b9f290ee7b22bd4056977acf and 185f296a5b03f16edb62d0023441e89ad4365501:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 212
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 6
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 8a4911a4eb335463b9f290ee7b22bd4056977acf to 185f296a5b03f16edb62d0023441e89ad4365501

************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null

****Parsing for addition at revision 5e28382021a579d27717962ed8d7a45acbbff40e****

Added App.java to .\/java-design-patterns\ repository source files.
Added Army.java to .\/java-design-patterns\ repository source files.
Added Castle.java to .\/java-design-patterns\ repository source files.
Added ElfArmy.java to .\/java-design-patterns\ repository source files.
Added ElfCastle.java to .\/java-design-patterns\ repository source files.
Added ElfKing.java to .\/java-design-patterns\ repository source files.
Added ElfKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added KingdomFactory.java to .\/java-design-patterns\ repository source files.
Added OrcArmy.java to .\/java-design-patterns\ repository source files.
Added OrcCastle.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added AbstractFactoryTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BattleFishingBoat.java to .\/java-design-patterns\ repository source files.
Added BattleShip.java to .\/java-design-patterns\ repository source files.
Added Captain.java to .\/java-design-patterns\ repository source files.
Added FishingBoat.java to .\/java-design-patterns\ repository source files.
Added AdapterPatternTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsyncCallback.java to .\/java-design-patterns\ repository source files.
Added AsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AsyncResult.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Excalibur.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added MagicWeapon.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Mjollnir.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Stormbringer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Armor.java to .\/java-design-patterns\ repository source files.
Added HairColor.java to .\/java-design-patterns\ repository source files.
Added HairType.java to .\/java-design-patterns\ repository source files.
Added Hero.java to .\/java-design-patterns\ repository source files.
Added Profession.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegate.java to .\/java-design-patterns\ repository source files.
Added BusinessLookup.java to .\/java-design-patterns\ repository source files.
Added BusinessService.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added EjbService.java to .\/java-design-patterns\ repository source files.
Added JmsService.java to .\/java-design-patterns\ repository source files.
Added ServiceType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegateTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppManager.java to .\/java-design-patterns\ repository source files.
Added CacheStore.java to .\/java-design-patterns\ repository source files.
Added CachingPolicy.java to .\/java-design-patterns\ repository source files.
Added DbManager.java to .\/java-design-patterns\ repository source files.
Added LruCache.java to .\/java-design-patterns\ repository source files.
Added UserAccount.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CachingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Callback.java to .\/java-design-patterns\ repository source files.
Added LambdasApp.java to .\/java-design-patterns\ repository source files.
Added SimpleTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CallbackTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added OrcCommander.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcOfficer.java to .\/java-design-patterns\ repository source files.
Added OrcSoldier.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added RequestHandler.java to .\/java-design-patterns\ repository source files.
Added RequestType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OrcKingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added InvisibilitySpell.java to .\/java-design-patterns\ repository source files.
Added ShrinkSpell.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added Visibility.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Letter.java to .\/java-design-patterns\ repository source files.
Added LetterComposite.java to .\/java-design-patterns\ repository source files.
Added Messenger.java to .\/java-design-patterns\ repository source files.
Added Sentence.java to .\/java-design-patterns\ repository source files.
Added Word.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MessengerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Customer.java to .\/java-design-patterns\ repository source files.
Added CustomerDao.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added CustomerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hostile.java to .\/java-design-patterns\ repository source files.
Added SmartHostile.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SmartHostileTest.java to .\/java-design-patterns\ repository source files.
Added TrollTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Printer.java to .\/java-design-patterns\ repository source files.
Added PrinterController.java to .\/java-design-patterns\ repository source files.
Added CanonPrinter.java to .\/java-design-patterns\ repository source files.
Added EpsonPrinter.java to .\/java-design-patterns\ repository source files.
Added HpPrinter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DelegateTest.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizard.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GuiceWizard.java to .\/java-design-patterns\ repository source files.
Added OldTobyTobacco.java to .\/java-design-patterns\ repository source files.
Added RivendellTobacco.java to .\/java-design-patterns\ repository source files.
Added SecondBreakfastTobacco.java to .\/java-design-patterns\ repository source files.
Added SimpleWizard.java to .\/java-design-patterns\ repository source files.
Added Tobacco.java to .\/java-design-patterns\ repository source files.
Added TobaccoModule.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizardTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GuiceWizardTest.java to .\/java-design-patterns\ repository source files.
Added SimpleWizardTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Inventory.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added InventoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroid.java to .\/java-design-patterns\ repository source files.
Added GameObject.java to .\/java-design-patterns\ repository source files.
Added Meteoroid.java to .\/java-design-patterns\ repository source files.
Added Rectangle.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIss.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMir.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CollisionTest.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroidTest.java to .\/java-design-patterns\ repository source files.
Added MeteoroidTest.java to .\/java-design-patterns\ repository source files.
Added RectangleTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIssTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMirTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added EventEmitter.java to .\/java-design-patterns\ repository source files.
Added EventObserver.java to .\/java-design-patterns\ repository source files.
Added KingJoffrey.java to .\/java-design-patterns\ repository source files.
Added KingsHand.java to .\/java-design-patterns\ repository source files.
Added LordBaelish.java to .\/java-design-patterns\ repository source files.
Added LordVarys.java to .\/java-design-patterns\ repository source files.
Added Scout.java to .\/java-design-patterns\ repository source files.
Added Weekday.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EventEmitterTest.java to .\/java-design-patterns\ repository source files.
Added EventTest.java to .\/java-design-patterns\ repository source files.
Added KingJoffreyTest.java to .\/java-design-patterns\ repository source files.
Added KingsHandTest.java to .\/java-design-patterns\ repository source files.
Added LordBaelishTest.java to .\/java-design-patterns\ repository source files.
Added LordVarysTest.java to .\/java-design-patterns\ repository source files.
Added ScoutTest.java to .\/java-design-patterns\ repository source files.
Added WeekdayTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEvent.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEvent.java to .\/java-design-patterns\ repository source files.
Added EventDispatcher.java to .\/java-design-patterns\ repository source files.
Added Handler.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventTest.java to .\/java-design-patterns\ repository source files.
Added EventDispatcherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileWriterAction.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DwarvenCartOperator.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldDigger.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacade.java to .\/java-design-patterns\ repository source files.
Added DwarvenMineWorker.java to .\/java-design-patterns\ repository source files.
Added DwarvenTunnelDigger.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacadeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Axe.java to .\/java-design-patterns\ repository source files.
Added Bow.java to .\/java-design-patterns\ repository source files.
Added Builder.java to .\/java-design-patterns\ repository source files.
Added Spear.java to .\/java-design-patterns\ repository source files.
Added Sword.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponFactory.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryKitTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Blacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfBlacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfWeapon.java to .\/java-design-patterns\ repository source files.
Added OrcBlacksmith.java to .\/java-design-patterns\ repository source files.
Added OrcWeapon.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added UserGroup.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added UserGroupTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FluentIterable.java to .\/java-design-patterns\ repository source files.
Added DecoratingIterator.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterable.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterable.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added ActionType.java to .\/java-design-patterns\ repository source files.
Added Content.java to .\/java-design-patterns\ repository source files.
Added ContentAction.java to .\/java-design-patterns\ repository source files.
Added MenuAction.java to .\/java-design-patterns\ repository source files.
Added MenuItem.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added ContentStore.java to .\/java-design-patterns\ repository source files.
Added MenuStore.java to .\/java-design-patterns\ repository source files.
Added Store.java to .\/java-design-patterns\ repository source files.
Added ContentView.java to .\/java-design-patterns\ repository source files.
Added MenuView.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ContentTest.java to .\/java-design-patterns\ repository source files.
Added MenuItemTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DispatcherTest.java to .\/java-design-patterns\ repository source files.
Added ContentStoreTest.java to .\/java-design-patterns\ repository source files.
Added MenuStoreTest.java to .\/java-design-patterns\ repository source files.
Added ContentViewTest.java to .\/java-design-patterns\ repository source files.
Added MenuViewTest.java to .\/java-design-patterns\ repository source files.
Added AlchemistShop.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HealingPotion.java to .\/java-design-patterns\ repository source files.
Added HolyWaterPotion.java to .\/java-design-patterns\ repository source files.
Added InvisibilityPotion.java to .\/java-design-patterns\ repository source files.
Added PoisonPotion.java to .\/java-design-patterns\ repository source files.
Added Potion.java to .\/java-design-patterns\ repository source files.
Added PotionFactory.java to .\/java-design-patterns\ repository source files.
Added PotionType.java to .\/java-design-patterns\ repository source files.
Added StrengthPotion.java to .\/java-design-patterns\ repository source files.
Added AlchemistShopTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ApplicationException.java to .\/java-design-patterns\ repository source files.
Added ArcherCommand.java to .\/java-design-patterns\ repository source files.
Added ArcherView.java to .\/java-design-patterns\ repository source files.
Added CatapultCommand.java to .\/java-design-patterns\ repository source files.
Added CatapultView.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added ErrorView.java to .\/java-design-patterns\ repository source files.
Added FrontController.java to .\/java-design-patterns\ repository source files.
Added UnknownCommand.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ApplicationExceptionTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added FrontControllerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added ViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsynchronousService.java to .\/java-design-patterns\ repository source files.
Added AsyncTask.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added AsynchronousServiceTest.java to .\/java-design-patterns\ repository source files.
Added AbstractFilter.java to .\/java-design-patterns\ repository source files.
Added AddressFilter.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added ContactFilter.java to .\/java-design-patterns\ repository source files.
Added DepositFilter.java to .\/java-design-patterns\ repository source files.
Added Filter.java to .\/java-design-patterns\ repository source files.
Added FilterChain.java to .\/java-design-patterns\ repository source files.
Added FilterManager.java to .\/java-design-patterns\ repository source files.
Added NameFilter.java to .\/java-design-patterns\ repository source files.
Added Order.java to .\/java-design-patterns\ repository source files.
Added OrderFilter.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FilterManagerTest.java to .\/java-design-patterns\ repository source files.
Added FilterTest.java to .\/java-design-patterns\ repository source files.
Added OrderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Expression.java to .\/java-design-patterns\ repository source files.
Added MinusExpression.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpression.java to .\/java-design-patterns\ repository source files.
Added NumberExpression.java to .\/java-design-patterns\ repository source files.
Added PlusExpression.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MinusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpressionTest.java to .\/java-design-patterns\ repository source files.
Added NumberExpressionTest.java to .\/java-design-patterns\ repository source files.
Added PlusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemIterator.java to .\/java-design-patterns\ repository source files.
Added ItemType.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestItemIterator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Cake.java to .\/java-design-patterns\ repository source files.
Added CakeBakingException.java to .\/java-design-patterns\ repository source files.
Added CakeBakingService.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImpl.java to .\/java-design-patterns\ repository source files.
Added CakeDao.java to .\/java-design-patterns\ repository source files.
Added CakeInfo.java to .\/java-design-patterns\ repository source files.
Added CakeLayer.java to .\/java-design-patterns\ repository source files.
Added CakeLayerDao.java to .\/java-design-patterns\ repository source files.
Added CakeLayerInfo.java to .\/java-design-patterns\ repository source files.
Added CakeTopping.java to .\/java-design-patterns\ repository source files.
Added CakeToppingDao.java to .\/java-design-patterns\ repository source files.
Added CakeToppingInfo.java to .\/java-design-patterns\ repository source files.
Added CakeViewImpl.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingExceptionTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added CakeTest.java to .\/java-design-patterns\ repository source files.
Added CakeViewImplTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Heavy.java to .\/java-design-patterns\ repository source files.
Added HolderNaive.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafe.java to .\/java-design-patterns\ repository source files.
Added Java8Holder.java to .\/java-design-patterns\ repository source files.
Added AbstractHolderTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HolderNaiveTest.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafeTest.java to .\/java-design-patterns\ repository source files.
Added Java8HolderTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hobbit.java to .\/java-design-patterns\ repository source files.
Added Hunter.java to .\/java-design-patterns\ repository source files.
Added Party.java to .\/java-design-patterns\ repository source files.
Added PartyImpl.java to .\/java-design-patterns\ repository source files.
Added PartyMember.java to .\/java-design-patterns\ repository source files.
Added PartyMemberBase.java to .\/java-design-patterns\ repository source files.
Added Rogue.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added PartyImplTest.java to .\/java-design-patterns\ repository source files.
Added PartyMemberTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Star.java to .\/java-design-patterns\ repository source files.
Added StarMemento.java to .\/java-design-patterns\ repository source files.
Added StarType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StarTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Fatigue.java to .\/java-design-patterns\ repository source files.
Added GiantController.java to .\/java-design-patterns\ repository source files.
Added GiantModel.java to .\/java-design-patterns\ repository source files.
Added GiantView.java to .\/java-design-patterns\ repository source files.
Added Health.java to .\/java-design-patterns\ repository source files.
Added Nourishment.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GiantControllerTest.java to .\/java-design-patterns\ repository source files.
Added GiantModelTest.java to .\/java-design-patterns\ repository source files.
Added GiantViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileLoader.java to .\/java-design-patterns\ repository source files.
Added FileSelectorJFrame.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenter.java to .\/java-design-patterns\ repository source files.
Added FileSelectorStub.java to .\/java-design-patterns\ repository source files.
Added FileSelectorView.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FileLoaderTest.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Sex.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added Validator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MonadTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added LoadBalancer.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added Server.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added LoadBalancerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Nazgul.java to .\/java-design-patterns\ repository source files.
Added NazgulName.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NazgulTest.java to .\/java-design-patterns\ repository source files.
Added HomePageService.java to .\/java-design-patterns\ repository source files.
Added HomePageViewModel.java to .\/java-design-patterns\ repository source files.
Added SimpleObject.java to .\/java-design-patterns\ repository source files.
Added SimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectTest.java to .\/java-design-patterns\ repository source files.
Added DomainAppFixturesProvider.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectCreate.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTearDown.java to .\/java-design-patterns\ repository source files.
Added RecreateSimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleAppSystemInitializer.java to .\/java-design-patterns\ repository source files.
Added BootstrappingGlue.java to .\/java-design-patterns\ repository source files.
Added CatalogOfFixturesGlue.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectGlue.java to .\/java-design-patterns\ repository source files.
Added RunSpecs.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleAppIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleApplication.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Node.java to .\/java-design-patterns\ repository source files.
Added NodeImpl.java to .\/java-design-patterns\ repository source files.
Added NullNode.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NullNodeTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added TreeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ObjectPool.java to .\/java-design-patterns\ repository source files.
Added Oliphaunt.java to .\/java-design-patterns\ repository source files.
Added OliphauntPool.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OliphauntPoolTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GHobbits.java to .\/java-design-patterns\ repository source files.
Added GOrcs.java to .\/java-design-patterns\ repository source files.
Added GWeather.java to .\/java-design-patterns\ repository source files.
Added Observable.java to .\/java-design-patterns\ repository source files.
Added Observer.java to .\/java-design-patterns\ repository source files.
Added Race.java to .\/java-design-patterns\ repository source files.
Added Hobbits.java to .\/java-design-patterns\ repository source files.
Added Orcs.java to .\/java-design-patterns\ repository source files.
Added Weather.java to .\/java-design-patterns\ repository source files.
Added WeatherObserver.java to .\/java-design-patterns\ repository source files.
Added WeatherType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GHobbitsTest.java to .\/java-design-patterns\ repository source files.
Added GWeatherTest.java to .\/java-design-patterns\ repository source files.
Added ObserverTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added HobbitsTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WeatherObserverTest.java to .\/java-design-patterns\ repository source files.
Added WeatherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added MessageQueue.java to .\/java-design-patterns\ repository source files.
Added MqPublishPoint.java to .\/java-design-patterns\ repository source files.
Added MqSubscribePoint.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added SimpleMessage.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageQueue.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added PoisonMessageTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ImmutableStew.java to .\/java-design-patterns\ repository source files.
Added Stew.java to .\/java-design-patterns\ repository source files.
Added StewData.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ImmutableStewTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added StewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemQueue.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Stats.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Beast.java to .\/java-design-patterns\ repository source files.
Added ElfBeast.java to .\/java-design-patterns\ repository source files.
Added ElfMage.java to .\/java-design-patterns\ repository source files.
Added ElfWarlord.java to .\/java-design-patterns\ repository source files.
Added HeroFactory.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImpl.java to .\/java-design-patterns\ repository source files.
Added Mage.java to .\/java-design-patterns\ repository source files.
Added OrcBeast.java to .\/java-design-patterns\ repository source files.
Added OrcMage.java to .\/java-design-patterns\ repository source files.
Added OrcWarlord.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Warlord.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImplTest.java to .\/java-design-patterns\ repository source files.
Added PrototypeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardTower.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WizardTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxyTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppClient.java to .\/java-design-patterns\ repository source files.
Added LoggingHandler.java to .\/java-design-patterns\ repository source files.
Added AbstractNioChannel.java to .\/java-design-patterns\ repository source files.
Added ChannelHandler.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added NioDatagramChannel.java to .\/java-design-patterns\ repository source files.
Added NioReactor.java to .\/java-design-patterns\ repository source files.
Added NioServerSocketChannel.java to .\/java-design-patterns\ repository source files.
Added SameThreadDispatcher.java to .\/java-design-patterns\ repository source files.
Added ThreadPoolDispatcher.java to .\/java-design-patterns\ repository source files.
Added ReactorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Reader.java to .\/java-design-patterns\ repository source files.
Added ReaderWriterLock.java to .\/java-design-patterns\ repository source files.
Added Writer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ReaderAndWriterTest.java to .\/java-design-patterns\ repository source files.
Added ReaderTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppConfig.java to .\/java-design-patterns\ repository source files.
Added Person.java to .\/java-design-patterns\ repository source files.
Added PersonRepository.java to .\/java-design-patterns\ repository source files.
Added PersonSpecifications.java to .\/java-design-patterns\ repository source files.
Added AnnotationBasedRepositoryTest.java to .\/java-design-patterns\ repository source files.
Added AppConfigTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RepositoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added SlidingDoor.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ClosableTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added Queen.java to .\/java-design-patterns\ repository source files.
Added Royalty.java to .\/java-design-patterns\ repository source files.
Added Servant.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added KingTest.java to .\/java-design-patterns\ repository source files.
Added QueenTest.java to .\/java-design-patterns\ repository source files.
Added ServantTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BaseEntity.java to .\/java-design-patterns\ repository source files.
Added Dao.java to .\/java-design-patterns\ repository source files.
Added DaoBaseImpl.java to .\/java-design-patterns\ repository source files.
Added HibernateUtil.java to .\/java-design-patterns\ repository source files.
Added MagicService.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImpl.java to .\/java-design-patterns\ repository source files.
Added Spell.java to .\/java-design-patterns\ repository source files.
Added SpellDao.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Spellbook.java to .\/java-design-patterns\ repository source files.
Added SpellbookDao.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardDao.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BaseDaoTest.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added InitContext.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added ServiceCache.java to .\/java-design-patterns\ repository source files.
Added ServiceImpl.java to .\/java-design-patterns\ repository source files.
Added ServiceLocator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ServiceLocatorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTower.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiom.java to .\/java-design-patterns\ repository source files.
Added IvoryTower.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLocking.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTower.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiomTest.java to .\/java-design-patterns\ repository source files.
Added IvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added SingletonTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLockingTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AbstractCreature.java to .\/java-design-patterns\ repository source files.
Added Creature.java to .\/java-design-patterns\ repository source files.
Added Dragon.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added KillerBee.java to .\/java-design-patterns\ repository source files.
Added Octopus.java to .\/java-design-patterns\ repository source files.
Added Shark.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added Color.java to .\/java-design-patterns\ repository source files.
Added Movement.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added ColorSelector.java to .\/java-design-patterns\ repository source files.
Added MovementSelector.java to .\/java-design-patterns\ repository source files.
Added SizeSelector.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CreatureTest.java to .\/java-design-patterns\ repository source files.
Added ColorSelectorTest.java to .\/java-design-patterns\ repository source files.
Added MovementSelectorTest.java to .\/java-design-patterns\ repository source files.
Added SizeSelectorTest.java to .\/java-design-patterns\ repository source files.
Added AngryState.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Mammoth.java to .\/java-design-patterns\ repository source files.
Added PeacefulState.java to .\/java-design-patterns\ repository source files.
Added State.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MammothTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilder.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DragonSlayer.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategy.java to .\/java-design-patterns\ repository source files.
Added MeleeStrategy.java to .\/java-design-patterns\ repository source files.
Added ProjectileStrategy.java to .\/java-design-patterns\ repository source files.
Added SpellStrategy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayerTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategyTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HalflingThief.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethod.java to .\/java-design-patterns\ repository source files.
Added StealingMethod.java to .\/java-design-patterns\ repository source files.
Added SubtleMethod.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HalflingThiefTest.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethodTest.java to .\/java-design-patterns\ repository source files.
Added StealingMethodTest.java to .\/java-design-patterns\ repository source files.
Added SubtleMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTask.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added Worker.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTaskTest.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTaskTest.java to .\/java-design-patterns\ repository source files.
Added TaskTest.java to .\/java-design-patterns\ repository source files.
Added WorkerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added RainbowFish.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializer.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializerTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2Test.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BallItem.java to .\/java-design-patterns\ repository source files.
Added BallThread.java to .\/java-design-patterns\ repository source files.
Added GameItem.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BallItemTest.java to .\/java-design-patterns\ repository source files.
Added BallThreadTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HeroStat.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroStatTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Commander.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitor.java to .\/java-design-patterns\ repository source files.
Added Sergeant.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitor.java to .\/java-design-patterns\ repository source files.
Added Soldier.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitor.java to .\/java-design-patterns\ repository source files.
Added Unit.java to .\/java-design-patterns\ repository source files.
Added UnitVisitor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommanderTest.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SergeantTest.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SoldierTest.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitorTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added UnitTest.java to .\/java-design-patterns\ repository source files.
Added VisitorTest.java to .\/java-design-patterns\ repository source files.
App app = new App();
elfKing=app.getKing(elfFactory)
final King elfKing = app.getKing(elfFactory);
orcKing=app.getKing(orcFactory)
final King orcKing = app.getKing(orcFactory);
elfCastle=app.getCastle(elfFactory)
final Castle elfCastle = app.getCastle(elfFactory);
orcCastle=app.getCastle(orcFactory)
final Castle orcCastle = app.getCastle(orcFactory);
elfArmy=app.getArmy(elfFactory)
final Army elfArmy = app.getArmy(elfFactory);
orcArmy=app.getArmy(orcFactory)
final Army orcArmy = app.getArmy(orcFactory);
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
String[] args = {};
Captain captain = new Captain(new BattleFishingBoat());
battleFishingBoat=spy(new BattleFishingBoat())
BattleFishingBoat battleFishingBoat = spy(new BattleFishingBoat());
Captain captain = new Captain();
BattleShip captain = (BattleShip) beans.get(CAPTAIN_BEAN);
BattleShip battleship = (BattleShip) beans.get(BATTLESHIP_BEAN);
String[] args = {};
AsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult1=executor.startProcess(lazyval(10,500))
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
asyncResult2=executor.startProcess(lazyval("test",300))
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
asyncResult3=executor.startProcess(lazyval(50L,700))
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
asyncResult4=executor.startProcess(lazyval(20,400),callback("Callback result 4"))
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
asyncResult5=executor.startProcess(lazyval("callback",600),callback("Callback result 5"))
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
result1=executor.endProcess(asyncResult1)
Integer result1 = executor.endProcess(asyncResult1);
result2=executor.endProcess(asyncResult2)
String result2 = executor.endProcess(asyncResult2);
result3=executor.endProcess(asyncResult3)
Long result3 = executor.endProcess(asyncResult3);
CompletableResult<T> result = new CompletableResult<>(callback);
String[] args = {};
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null)
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(null,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
exception=optionalException.get()
final Exception exception = optionalException.get();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null,null)
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());
FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());
SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());
String[] args = {};
excalibur=spy(new Excalibur())
final Excalibur excalibur = spy(new Excalibur());
final BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(excalibur);
mjollnir=spy(new Mjollnir())
final Mjollnir mjollnir = spy(new Mjollnir());
final FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(mjollnir);
stormbringer=spy(new Stormbringer())
final Stormbringer stormbringer = spy(new Stormbringer());
final SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(stormbringer);
mage=new HeroBuilder(Profession.MAGE,"Riobard").withHairColor(HairColor.BLACK).withWeapon(Weapon.DAGGER).build()
Hero mage =
        new HeroBuilder(Profession.MAGE, "Riobard").withHairColor(HairColor.BLACK)
            .withWeapon(Weapon.DAGGER).build();
warrior=new HeroBuilder(Profession.WARRIOR,"Amberjill").withHairColor(HairColor.BLOND).withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).build()
Hero warrior =
        new HeroBuilder(Profession.WARRIOR, "Amberjill").withHairColor(HairColor.BLOND)
            .withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD)
            .build();
thief=new HeroBuilder(Profession.THIEF,"Desmond").withHairType(HairType.BALD).withWeapon(Weapon.BOW).build()
Hero thief =
        new HeroBuilder(Profession.THIEF, "Desmond").withHairType(HairType.BALD)
            .withWeapon(Weapon.BOW).build();
StringBuilder sb = new StringBuilder();
String[] args = {};
final String heroName = "Sir Lancelot";
hero=new Hero.HeroBuilder(Profession.WARRIOR,heroName).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).withHairType(HairType.LONG_CURLY).withHairColor(HairColor.BLOND).build()
final Hero hero = new Hero.HeroBuilder(Profession.WARRIOR, heroName)
        .withArmor(Armor.CHAIN_MAIL)
        .withWeapon(Weapon.SWORD)
        .withHairType(HairType.LONG_CURLY)
        .withHairColor(HairColor.BLOND)
        .build();
BusinessDelegate businessDelegate = new BusinessDelegate();
BusinessLookup businessLookup = new BusinessLookup();
Client client = new Client(businessDelegate);
String[] args = {};
Client client = new Client(businessDelegate);
App app = new App();
UserAccount userAccount1 = new UserAccount("001", "John", "He is a boy.");
UserAccount userAccount2 = new UserAccount("002", "Jane", "She is a girl.");
UserAccount userAccount3 = new UserAccount("003", "Adam", "He likes food.");
UserAccount userAccount4 = new UserAccount("004", "Rita", "She hates cats.");
UserAccount userAccount5 = new UserAccount("005", "Isaac", "He is allergic to mustard.");
UserAccount userAccount6 = new UserAccount("006", "Yasha", "She is an only child.");
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
StringBuilder sb = new StringBuilder();
iterable=db.getCollection("user_accounts").find(new Document("userID",userId))
FindIterable<Document> iterable =
        db.getCollection("user_accounts").find(new Document("userID", userId));
doc=iterable.first()
Document doc = iterable.first();
node=cache.get(userId)
Node node = cache.get(userId);
old=cache.get(userId)
Node old = cache.get(userId);
Node newNode = new Node(userId, userAccount);
toBeRemoved=cache.get(userId)
Node toBeRemoved = cache.get(userId);
ArrayList<UserAccount> listOfCacheData = new ArrayList<>();
Node temp = head;
String[] args = {};
Task task = new SimpleTask();
Callback callback = new Callback() {
      @Override
      public void call() {
        System.out.println("I'm done now.");
      }
    };
Task task = new SimpleTask();
Callback c = () -> System.out.println("I'm done now.");
    task.executeWith(c);
  
String[] args = {};
Callback callback = new Callback() {
      @Override
      public void call() {
        callingCount++;
      }
    };
Task task = new SimpleTask();
Callback callback = () -> callingCount++;

    Task task = new SimpleTask();

    assertEquals("Initial calling count of 0", new Integer(0), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called once", new Integer(1), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called twice", new Integer(2), callingCount);

  
OrcKing king = new OrcKing();
String[] args = {};
final OrcKing king = new OrcKing();
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
temp=target.getSize()
Size temp = target.getSize();
previousSpell=undoStack.pollLast()
Command previousSpell = undoStack.pollLast();
previousSpell=redoStack.pollLast()
Command previousSpell = redoStack.pollLast();
String[] args = {};
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
orcMessage=new Messenger().messageFromOrcs()
LetterComposite orcMessage = new Messenger().messageFromOrcs();
elfMessage=new Messenger().messageFromElves()
LetterComposite elfMessage = new Messenger().messageFromElves();
List<Word> words = new ArrayList<>();
List<Word> words = new ArrayList<>();
String[] args = {};
final Messenger messenger = new Messenger();
final Messenger messenger = new Messenger();
words=message.split(" ")
final String[] words = message.split(" ");
final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());
final Customer customer = new Customer(4, "Dan", "Danson");
final Customer customer1 = new Customer(1, "Adam", "Adamson");
final Customer customer2 = new Customer(2, "Bob", "Bobson");
final Customer customer3 = new Customer(3, "Carl", "Carlson");
final List<Customer> customers = new ArrayList<>();
boolean isEqual = false;
final Customer customer = (Customer) o;
Customer customer = null;
index=getAllCustomers().indexOf(customer)
final int index = getAllCustomers().indexOf(customer);
String[] args = {};
final Customer nonExistingCustomer = new Customer(2, "Robert", "Englund");
final String newFirstname = "Bernard";
final String newLastname = "Montgomery";
final Customer customer = new Customer(CUSTOMER.getId(), newFirstname, newLastname);
cust=impl.getCustomerById(CUSTOMER.getId())
final Customer cust = impl.getCustomerById(CUSTOMER.getId());
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final String newFirstname = "Douglas";
final String newLastname = "MacArthur";
final Customer customer = new Customer(nonExistingId, newFirstname, newLastname);
existingCustomer=impl.getCustomerById(CUSTOMER.getId())
final Customer existingCustomer = impl.getCustomerById(CUSTOMER.getId());
final Customer newCustomer = new Customer(3, "George", "Patton");
final Customer newCustomer = new Customer(3, "George", "Patton");
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final int newId = 2;
final String newFirstname = "Bill";
final String newLastname = "Clinton";
final int newId = 2;
final Customer otherCustomer = new Customer(newId, FIRSTNAME, LASTNAME);
final Customer otherCustomer = new Customer(ID, FIRSTNAME, LASTNAME);
final StringBuffer buffer = new StringBuffer();
Hostile troll = new Troll();
Hostile smart = new SmartHostile(troll);
String[] args = {};
simpleTroll=spy(new Troll())
final Hostile simpleTroll = spy(new Troll());
final Hostile smartTroll = new SmartHostile(simpleTroll);
final Troll troll = new Troll();
PrinterController hpPrinterController = new PrinterController(new HpPrinter());
PrinterController canonPrinterController = new PrinterController(new CanonPrinter());
PrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());
String[] args = {};
PrinterController printerController = new PrinterController(new CanonPrinter());
PrinterController printerController = new PrinterController(new HpPrinter());
PrinterController printerController = new PrinterController(new EpsonPrinter());
SimpleWizard simpleWizard = new SimpleWizard();
AdvancedWizard advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());
injector=Guice.createInjector(new TobaccoModule())
Injector injector = Guice.createInjector(new TobaccoModule());
guiceWizard=injector.getInstance(GuiceWizard.class)
GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final AdvancedWizard advancedWizard = new AdvancedWizard(tobacco);
String[] args = {};
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final GuiceWizard guiceWizard = new GuiceWizard(tobacco);
@SuppressWarnings("unchecked")
    final Class<? extends Tobacco>[] tobaccos = new Class[]{
        OldTobyTobacco.class, RivendellTobacco.class, SecondBreakfastTobacco.class
    };
injector=Guice.createInjector(new AbstractModule(){
  @Override protected void configure(){
    bind(Tobacco.class).to(tobaccoClass);
  }
}
)
final Injector injector = Guice.createInjector(new AbstractModule() {
        @Override
        protected void configure() {
          bind(Tobacco.class).to(tobaccoClass);
        }
      });
guiceWizard=injector.getInstance(GuiceWizard.class)
final GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final SimpleWizard simpleWizard = new SimpleWizard();
final Inventory inventory = new Inventory(1000);
executorService=Executors.newFixedThreadPool(3)
ExecutorService executorService = Executors.newFixedThreadPool(3);
String[] args = {};
final Inventory inventory = new Inventory(INVENTORY_SIZE);
executorService=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);
items=inventory.getItems()
final List<Item> items = inventory.getItems();
final List<Item> items = inventory.getItems();
stdOutCaptor=ArgumentCaptor.forClass(String.class)
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
values=stdOutCaptor.getAllValues()
final List<String> values = stdOutCaptor.getAllValues();
final List<String> values = stdOutCaptor.getAllValues();
List<GameObject> objects = new ArrayList<>();
String[] args = {};
tested=getTestedObject()
final O tested = getTestedObject();
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectTargetOnFire 
        ? "Expected [" + targetName + "] to be on fire after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be on fire after colliding with [" + otherName + "] but it was!";
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectedDamage
        ? "Expected [" + targetName + "] to be damaged after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be damaged after colliding with [" + otherName + "] but it was!";
final FlamingAsteroid asteroid = new FlamingAsteroid(1, 2, 3, 4);
final Meteoroid meteoroid = new Meteoroid(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final SpaceStationIss iss = new SpaceStationIss(1, 2, 3, 4);
final SpaceStationMir mir = new SpaceStationMir(1, 2, 3, 4);
KingJoffrey kingJoffrey = new KingJoffrey();
KingsHand kingsHand = new KingsHand(kingJoffrey);
List<EventEmitter> emitters = new ArrayList<>();
String[] args = {};
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithoutDefaultObserver.get()
final E emitter = this.factoryWithoutDefaultObserver.get();
defaultObserver=mock(EventObserver.class)
final EventObserver defaultObserver = mock(EventObserver.class);
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithDefaultObserver.apply(defaultObserver)
final E emitter = this.factoryWithDefaultObserver.apply(defaultObserver);
toString=event.toString()
final String toString = event.toString();
final KingJoffrey kingJoffrey = new KingJoffrey();
final String expectedMessage = "Received event from the King's Hand: " + event.toString();
observer=mock(EventObserver.class)
final EventObserver observer = mock(EventObserver.class);
final KingsHand kingsHand = new KingsHand(observer);
toString=weekday.toString()
final String toString = weekday.toString();
EventDispatcher dispatcher = new EventDispatcher();
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = (UserCreatedEvent) message;
UserUpdatedEvent userUpdatedEvent = (UserUpdatedEvent) message;
String[] args = {};
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
dispatcher=spy(new EventDispatcher())
EventDispatcher dispatcher = spy(new EventDispatcher());
userCreatedEventHandler=spy(new UserCreatedEventHandler())
UserCreatedEventHandler userCreatedEventHandler = spy(new UserCreatedEventHandler());
userUpdatedEventHandler=spy(new UserUpdatedEventHandler())
UserUpdatedEventHandler userUpdatedEventHandler = spy(new UserUpdatedEventHandler());
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
UserUpdatedEvent userUpdatedEvent = new UserUpdatedEvent(user);
FileWriter writer = new FileWriter(filename);
String[] args = {};
File file = new File("testfile.txt");
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
final File nonExistingFile = new File(this.testFolder.getRoot(), "non-existing-file");
final String testMessage = "Test message";
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
DwarvenGoldmineFacade facade = new DwarvenGoldmineFacade();
String[] args = {};
final DwarvenGoldmineFacade goldMine = new DwarvenGoldmineFacade();
WeaponFactory factory = WeaponFactory.factory(builder -> {
      builder.add(WeaponType.SWORD, Sword::new);
      builder.add(WeaponType.AXE, Axe::new);
      builder.add(WeaponType.SPEAR, Spear::new);
      builder.add(WeaponType.BOW, Bow::new);
    });
    Weapon axe = factory.create(WeaponType.AXE);
    System.out.println(axe);
  
HashMap<WeaponType, Supplier<Weapon>> map = new HashMap<>();
String[] args = {};
weapon=factory.create(WeaponType.SPEAR)
Weapon weapon = factory.create(WeaponType.SPEAR);
weapon=factory.create(WeaponType.AXE)
Weapon weapon = factory.create(WeaponType.AXE);
weapon=factory.create(WeaponType.SWORD)
Weapon weapon = factory.create(WeaponType.SWORD);
App app = new App(new OrcBlacksmith());
Weapon weapon;
String[] args = {};
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.AXE)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.AXE);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties turnedOff = new Properties();
Service turnedOffService = new PropertiesFeatureToggleVersion(turnedOff);
welcomeMessageturnedOff=turnedOffService.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessageturnedOff = turnedOffService.getWelcomeMessage(new User("Jamie No Code"));
final User paidUser = new User("Jamie Coder");
final User freeUser = new User("Alan Defect");
welcomeMessagePaidUser=service.getWelcomeMessage(paidUser)
final String welcomeMessagePaidUser = service.getWelcomeMessage(paidUser);
welcomeMessageFreeUser=service.getWelcomeMessage(freeUser)
final String welcomeMessageFreeUser = service.getWelcomeMessage(freeUser);
final Properties properties = new Properties();
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
welcomeMessage=service.getWelcomeMessage(paidUser)
final String welcomeMessage = service.getWelcomeMessage(paidUser);
final String expected = "You're amazing Jamie Coder. Thanks for paying for this awesome software.";
welcomeMessage=service.getWelcomeMessage(freeUser)
final String welcomeMessage = service.getWelcomeMessage(freeUser);
final String expected = "I suppose you can use this software.";
User user = new User("Free User");
User user = new User("Paid User");
User user = new User("Paid User");
User user = new User("Free User");
List<Integer> integerList = new ArrayList<>();
firstFiveNegatives=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList()
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
lastTwoPositives=SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList()
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
transformedList=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString()).asList()
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
lastTwoOfFirstFourStringMapped=LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2).map(number-- > "String[" + valueOf(number) + "]").asList()
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
StringJoiner joiner = new StringJoiner(delimiter, prefix, ".");
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
ArrayList<E> copy = new ArrayList<>();
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
final E result = next;
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=last(1).iterator()
Iterator<E> resultIterator = last(1).iterator();
Iterator<E> resultIterator = last(1).iterator();
E candidate = null;
newIterator=iterable.iterator()
Iterator<E> newIterator = iterable.iterator();
candidate=oldTypeIterator.next()
E candidate = oldTypeIterator.next();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
nextElement=iterator.next()
E nextElement = iterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentCount = 0;
list=last(1).asList()
List<E> list = last(1).asList();
List<E> list = last(1).asList();
remainingElementsCount=getRemainingElementsCount()
int remainingElementsCount = getRemainingElementsCount();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentIndex = 0;
List<T> temporaryList = new ArrayList<>();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
copy=FluentIterable.copyToList(iterable)
List<E> copy = FluentIterable.copyToList(iterable);
List<E> copy = FluentIterable.copyToList(iterable);
int counter = 0;
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
List<E> copy = new ArrayList<>();
String[] args = {};
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
evenItems=createFluentIterable(integers).filter(i-- > i % 2 == 0).asList()
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
longs=createFluentIterable(integers).map(Integer).asList()
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
consumer=mock(Consumer.class)
final Consumer<Integer> consumer = mock(Consumer.class);
final Consumer<Integer> consumer = mock(Consumer.class);
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
split=createFluentIterable(integers).spliterator()
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
MenuStore menuStore = new MenuStore();
ContentStore contentStore = new ContentStore();
MenuView menuView = new MenuView();
ContentView contentView = new ContentView();
ContentAction contentAction = (ContentAction) action;
MenuAction menuAction = (MenuAction) action;
ContentStore contentStore = (ContentStore) store;
MenuStore menuStore = (MenuStore) store;
toString=content.toString()
final String toString = content.toString();
toString=menuItem.toString()
final String toString = menuItem.toString();
String[] args = {};
final Constructor<Dispatcher> constructor;
final Constructor<Dispatcher> constructor;
field=Dispatcher.class.getDeclaredField("instance")
final Field field = Dispatcher.class.getDeclaredField("instance");
dispatcher=Dispatcher.getInstance()
final Dispatcher dispatcher = Dispatcher.getInstance();
store=mock(Store.class)
final Store store = mock(Store.class);
actionCaptor=ArgumentCaptor.forClass(Action.class)
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
actions=actionCaptor.getAllValues()
final List<Action> actions = actionCaptor.getAllValues();
final List<Action> actions = actionCaptor.getAllValues();
menuActions=actions.stream().filter(a-- > a.getType().equals(ActionType.MENU_ITEM_SELECTED)).map(a-- > (MenuAction)a).collect(Collectors.toList())
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
contentActions=actions.stream().filter(a-- > a.getType().equals(ActionType.CONTENT_CHANGED)).map(a-- > (ContentAction)a).collect(Collectors.toList())
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final ContentStore contentStore = new ContentStore();
view=mock(View.class)
final View view = mock(View.class);
final MenuStore menuStore = new MenuStore();
view=mock(View.class)
final View view = mock(View.class);
store=mock(ContentStore.class)
final ContentStore store = mock(ContentStore.class);
final ContentView view = new ContentView();
store=mock(MenuStore.class)
final MenuStore store = mock(MenuStore.class);
final MenuView view = new MenuView();
store=mock(Store.class)
final Store store = mock(Store.class);
final MenuView view = new MenuView();
PotionFactory factory = new PotionFactory();
AlchemistShop alchemistShop = new AlchemistShop();
potion=potions.get(type)
Potion potion = potions.get(type);
final AlchemistShop shop = new AlchemistShop();
bottomShelf=shop.getBottomShelf()
final List<Potion> bottomShelf = shop.getBottomShelf();
final List<Potion> bottomShelf = shop.getBottomShelf();
topShelf=shop.getTopShelf()
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> allPotions = new ArrayList<>();
String[] args = {};
FrontController controller = new FrontController();
command=getCommand(request)
Command command = getCommand(request);
commandClass=getCommandClass(request)
Class commandClass = getCommandClass(request);
Class result;
final Exception cause = new Exception();
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final FrontController frontController = new FrontController();
final List<Object[]> parameters = new ArrayList<>();
final List<Object[]> parameters = new ArrayList<>();
AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final Object result = new Object();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IOException exception = new IOException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IllegalStateException exception = new IllegalStateException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
Filter last = this;
String result = super.execute(order);
FilterManager filterManager = new FilterManager();
Client client = new Client();
JPanel panel = new JPanel();
Order order =
            new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),
                jtFields[2].getText(), jtAreas[1].getText());
rootPane=SwingUtilities.getRootPane(processButton)
JRootPane rootPane = SwingUtilities.getRootPane(processButton);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
JPanel bot = new JPanel();
rootPane=SwingUtilities.getRootPane(del)
JRootPane rootPane = SwingUtilities.getRootPane(del);
temp=jt.getSelectedRow()
int temp = jt.getSelectedRow();
temp2=jt.getSelectedRowCount()
int temp2 = jt.getSelectedRowCount();
String[] args = {};
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
filter=mock(Filter.class)
final Filter filter = mock(Filter.class);
order=mock(Order.class)
final Order order = mock(Order.class);
final List<Object[]> testData = new ArrayList<>();
result=this.filter.execute(this.order)
final String result = this.filter.execute(this.order);
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
String tokenString = "4 3 2 - 1 + *";
Stack<Expression> stack = new Stack<>();
tokenList=tokenString.split(" ")
String[] tokenList = tokenString.split(" ");
rightExpression=stack.pop()
Expression rightExpression = stack.pop();
leftExpression=stack.pop()
Expression leftExpression = stack.pop();
operator=getOperatorInstance(s,leftExpression,rightExpression)
Expression operator = getOperatorInstance(s, leftExpression, rightExpression);
result=operator.interpret()
int result = operator.interpret();
NumberExpression resultExpression = new NumberExpression(result);
Expression i = new NumberExpression(s);
String[] args = {};
final List<Object[]> testData = new ArrayList<>();
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expectedValue=getFirst().interpret()
final int expectedValue = getFirst().interpret();
testStingValue=String.valueOf(expectedValue)
final String testStingValue = String.valueOf(expectedValue);
final NumberExpression numberExpression = new NumberExpression(testStingValue);
TreasureChest chest = new TreasureChest();
ringIterator=chest.iterator(ItemType.RING)
ItemIterator ringIterator = chest.iterator(ItemType.RING);
potionIterator=chest.iterator(ItemType.POTION)
ItemIterator potionIterator = chest.iterator(ItemType.POTION);
weaponIterator=chest.iterator(ItemType.WEAPON)
ItemIterator weaponIterator = chest.iterator(ItemType.WEAPON);
it=chest.iterator(ItemType.ANY)
ItemIterator it = chest.iterator(ItemType.ANY);
ArrayList<Item> list = new ArrayList<>();
items=chest.getItems()
List<Item> items = chest.getItems();
List<Item> items = chest.getItems();
boolean found = false;
int tempIdx = idx;
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final TreasureChest chest = new TreasureChest();
iterator=chest.iterator(expectedItem.getType())
final ItemIterator iterator = chest.iterator(expectedItem.getType());
item=iterator.next()
final Item item = iterator.next();
name=item.toString()
final String name = item.toString();
final TreasureChest chest = new TreasureChest();
items=chest.getItems()
final List<Item> items = chest.getItems();
final List<Item> items = chest.getItems();
final boolean sameType = this.expectedItem.getType() == item.getType();
sameName=this.expectedItem.toString().equals(item.toString())
final boolean sameName = this.expectedItem.toString().equals(item.toString());
CakeViewImpl cakeView = new CakeViewImpl(cakeBakingService);
CakeInfo cake1 =
        new CakeInfo(new CakeToppingInfo("candies", 0), Arrays.asList(new CakeLayerInfo(
            "chocolate", 0), new CakeLayerInfo("banana", 0), new CakeLayerInfo("strawberry", 0)));
CakeInfo cake2 =
        new CakeInfo(new CakeToppingInfo("cherry", 0), Arrays.asList(
            new CakeLayerInfo("vanilla", 0), new CakeLayerInfo("lemon", 0), new CakeLayerInfo(
                "strawberry", 0)));
allToppings=getAvailableToppingEntities()
List<CakeTopping> allToppings = getAvailableToppingEntities();
List<CakeTopping> allToppings = getAvailableToppingEntities();
matchingToppings=allToppings.stream().filter((t)-- > t.getName().equals(cakeInfo.cakeToppingInfo.name)).collect(Collectors.toList())
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
allLayers=getAvailableLayerEntities()
List<CakeLayer> allLayers = getAvailableLayerEntities();
List<CakeLayer> allLayers = getAvailableLayerEntities();
Set<CakeLayer> foundLayers = new HashSet<>();
found=allLayers.stream().filter((layer)-- > layer.getName().equals(info.name)).findFirst()
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
toppingBean=context.getBean(CakeToppingDao.class)
CakeToppingDao toppingBean = context.getBean(CakeToppingDao.class);
topping=toppingBean.findOne(matchingToppings.iterator().next().getId())
CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().getId());
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
Cake cake = new Cake();
layerBean=context.getBean(CakeLayerDao.class)
CakeLayerDao layerBean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeTopping> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
topping=iterator.next()
CakeTopping topping = iterator.next();
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeToppingInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
next=iterator.next()
CakeTopping next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayer> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayerInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
List<CakeInfo> result = new ArrayList<>();
iterator=cakeBean.findAll().iterator()
Iterator<Cake> iterator = cakeBean.findAll().iterator();
Iterator<Cake> iterator = cakeBean.findAll().iterator();
cake=iterator.next()
Cake cake = iterator.next();
CakeToppingInfo cakeToppingInfo =
          new CakeToppingInfo(cake.getTopping().getId(), cake.getTopping().getName(), cake
              .getTopping().getCalories());
ArrayList<CakeLayerInfo> cakeLayerInfos = new ArrayList<>();
CakeInfo cakeInfo = new CakeInfo(cake.getId(), cakeToppingInfo, cakeLayerInfos);
int total = cakeToppingInfo != null ? cakeToppingInfo.calories : 0;
String[] args = {};
final CakeBakingException exception = new CakeBakingException();
final String expectedMessage = "message";
final CakeBakingException exception = new CakeBakingException(expectedMessage);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialLayers=service.getAvailableLayers()
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
availableLayers=service.getAvailableLayers()
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialToppings=service.getAvailableToppings()
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
availableToppings=service.getAvailableToppings()
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeLayerInfo layer3 = new CakeLayerInfo("Layer3", 2000);
allCakes=service.getAllCakes()
final List<CakeInfo> allCakes = service.getAllCakes();
final List<CakeInfo> allCakes = service.getAllCakes();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeToppingInfo missingTopping = new CakeToppingInfo("Topping1", 1000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo missingLayer = new CakeLayerInfo("Layer2", 2000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final Cake cake = new Cake();
expectedId=Long.valueOf(1234L)
final Long expectedId = Long.valueOf(1234L);
final Cake cake = new Cake();
final CakeTopping expectedTopping = new CakeTopping("DummyTopping", 1000);
final Cake cake = new Cake();
final Set<CakeLayer> expectedLayers = new HashSet<>();
final Cake cake = new Cake();
final Set<CakeLayer> initialLayers = new HashSet<>();
final CakeLayer newLayer = new CakeLayer("layer3", 3000);
final Set<CakeLayer> expectedLayers = new HashSet<>();
final CakeTopping topping = new CakeTopping("topping", 20);
final CakeLayer layer = new CakeLayer("layer", 100);
final Cake cake = new Cake();
final String expected = "id=1234 topping=id=2345 name=topping calories=20 " 
            + "layers=[id=3456 name=layer calories=100]";
final List<CakeLayerInfo> layers = new ArrayList<>();
final List<CakeInfo> cakes = new ArrayList<>();
final CakeInfo cake = new CakeInfo(new CakeToppingInfo("topping", 1000), layers);
bakingService=mock(CakeBakingService.class)
final CakeBakingService bakingService = mock(CakeBakingService.class);
final CakeViewImpl cakeView = new CakeViewImpl(bakingService);
HolderNaive holderNaive = new HolderNaive();
heavy=holderNaive.getHeavy()
Heavy heavy = holderNaive.getHeavy();
HolderThreadSafe holderThreadSafe = new HolderThreadSafe();
another=holderThreadSafe.getHeavy()
Heavy another = holderThreadSafe.getHeavy();
Java8Holder java8Holder = new Java8Holder();
next=java8Holder.getHeavy()
Heavy next = java8Holder.getHeavy();
String[] args = {};
holderField=HolderNaive.class.getDeclaredField("heavy")
final Field holderField = HolderNaive.class.getDeclaredField("heavy");
holderField=HolderThreadSafe.class.getDeclaredField("heavy")
final Field holderField = HolderThreadSafe.class.getDeclaredField("heavy");
holderField=Java8Holder.class.getDeclaredField("heavy")
final Field holderField = Java8Holder.class.getDeclaredField("heavy");
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
supplierClass=supplier.getClass()
final Class<? extends Supplier> supplierClass = supplier.getClass();
final Class<? extends Supplier> supplierClass = supplier.getClass();
instanceField=supplierClass.getDeclaredField("heavyInstance")
final Field instanceField = supplierClass.getDeclaredField("heavyInstance");
Party party = new PartyImpl();
Hobbit hobbit = new Hobbit();
Wizard wizard = new Wizard();
Rogue rogue = new Rogue();
Hunter hunter = new Hunter();
String[] args = {};
partyMember1=mock(PartyMember.class)
final PartyMember partyMember1 = mock(PartyMember.class);
partyMember2=mock(PartyMember.class)
final PartyMember partyMember2 = mock(PartyMember.class);
final PartyImpl party = new PartyImpl();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
party=mock(Party.class)
final Party party = mock(Party.class);
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
memberClass=member.getClass()
final Class<? extends PartyMember> memberClass = member.getClass();
final Class<? extends PartyMember> memberClass = member.getClass();
Stack<StarMemento> states = new Stack<>();
Star star = new Star(StarType.SUN, 10000000, 500000);
StarMementoInternal state = new StarMementoInternal();
StarMementoInternal state = (StarMementoInternal) memento;
String[] args = {};
final Star star = new Star(StarType.SUN, 1, 2);
final Star star = new Star(StarType.SUN, 1, 2);
firstMemento=star.getMemento()
final StarMemento firstMemento = star.getMemento();
secondMemento=star.getMemento()
final StarMemento secondMemento = star.getMemento();
thirdMemento=star.getMemento()
final StarMemento thirdMemento = star.getMemento();
CamelContext context = new DefaultCamelContext();
String[] args = {};
GiantModel giant = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
GiantView view = new GiantView();
GiantController controller = new GiantController(giant, view);
String[] args = {};
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantView view = new GiantView();
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
FileLoader loader = new FileLoader();
FileSelectorJFrame jFrame = new FileSelectorJFrame();
FileSelectorPresenter presenter = new FileSelectorPresenter(jFrame);
BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)));
StringBuilder sb = new StringBuilder();
String line;
JScrollPane pane = new JScrollPane(area);
data=loader.loadData()
String data = loader.loadData();
String[] args = {};
final FileLoader fileLoader = new FileLoader();
String expectedFile = "Stamatis";
User user = new User("user", 24, Sex.FEMALE, "foobar.com");
IllegalStateException e = new IllegalStateException();
String[] args = {};
User tom = new User(null, 21, Sex.MALE, "tom@foo.bar");
User john = new User("John", 17, Sex.MALE, "john@qwe.bar");
User sarah = new User("Sarah", 42, Sex.FEMALE, "sarah@det.org");
validated=Validator.of(sarah).validate(getName,Objects,"name cannot be null").validate(User,age-- > age > 21,"user is underaged").validate(User,sex-- > sex == Sex.FEMALE,"user is not female").validate(User,email-- > email.contains("@"),"email does not contain @ sign").get()
User validated = Validator.of(sarah).validate(User::getName, Objects::nonNull, "name cannot be null")
        .validate(User::getAge, age -> age > 21, "user is underaged")
        .validate(User::getSex, sex -> sex == Sex.FEMALE, "user is not female")
        .validate(User::getEmail, email -> email.contains("@"), "email does not contain @ sign")
        .get();
LoadBalancer loadBalancer1 = new LoadBalancer();
LoadBalancer loadBalancer2 = new LoadBalancer();
server=servers.get(lastServedId++)
Server server = servers.get(lastServedId++);
String[] args = {};
final LoadBalancer firstBalancer = new LoadBalancer();
final LoadBalancer secondBalancer = new LoadBalancer();
server=mock(Server.class)
final Server server = mock(Server.class);
final LoadBalancer loadBalancer = new LoadBalancer();
final Request request = new Request("test");
String[] args = {};
nazgul=Nazgul.getInstance(name)
final Nazgul nazgul = Nazgul.getInstance(name);
obj=container.newTransientInstance(SimpleObject.class)
final SimpleObject obj = container.newTransientInstance(SimpleObject.class);
final SimpleObject simpleObject = new SimpleObject();
seq=context.sequence("create")
final Sequence seq = context.sequence("create");
obj=simpleObjects.create("Foobar")
final SimpleObject obj = simpleObjects.create("Foobar");
all=Lists.newArrayList()
final List<SimpleObject> all = Lists.newArrayList();
list=simpleObjects.listAll()
final List<SimpleObject> list = simpleObjects.listAll();
final List<SimpleObject> list = simpleObjects.listAll();
String name = "Foobar";
paramName=checkParam("name",ec,String.class)
String paramName = checkParam("name", ec, String.class);
paramNumber=defaultParam("number",ec,3)
final int paramNumber = defaultParam("number", ec, 3);
fs=new SimpleObjectCreate().setName(names.get(i))
final SimpleObjectCreate fs = new SimpleObjectCreate().setName(names.get(i));
isft=IsisSystemForTest.getElseNull()
IsisSystemForTest isft = IsisSystemForTest.getElseNull();
final IsisConfigurationForJdoIntegTests testConfiguration =
          new IsisConfigurationForJdoIntegTests();
findAll=service(SimpleObjects.class).listAll()
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
title=container.titleOf(simpleObjectWrapped)
final String title = container.titleOf(simpleObjectWrapped);
RecreateSimpleObjects fs = new RecreateSimpleObjects();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
simpleObject=wrap(all.get(0))
SimpleObject simpleObject = wrap(all.get(0));
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
causalChain=Throwables.getCausalChain(item)
final List<Throwable> causalChain = Throwables.getCausalChain(item);
final List<Throwable> causalChain = Throwables.getCausalChain(item);
settings=Bootstrap.getSettings()
IBootstrapSettings settings = Bootstrap.getSettings();
final AuthenticatedWebSessionForIsis s =
        (AuthenticatedWebSessionForIsis) super.newSession(request, response);
requestParameters=request.getRequestParameters()
IRequestParameters requestParameters = request.getRequestParameters();
user=requestParameters.getParameterValue("user")
final org.apache.wicket.util.string.StringValue user =
        requestParameters.getParameterValue("user");
password=requestParameters.getParameterValue("pass")
final org.apache.wicket.util.string.StringValue password =
        requestParameters.getParameterValue("pass");
uname=servletRequest.getParameter("user")
String uname = servletRequest.getParameter("user");
final Module isisDefaults = super.newIsisWicketModule();
final Module overrides = new AbstractModule() {
      @Override
      protected void configure() {
        bind(String.class).annotatedWith(Names.named("applicationName")).toInstance("Simple App");
        bind(String.class).annotatedWith(Names.named("applicationCss")).toInstance(
            "css/application.css");
        bind(String.class).annotatedWith(Names.named("applicationJs")).toInstance(
            "scripts/application.js");
        bind(String.class).annotatedWith(Names.named("welcomeMessage")).toInstance(
            readLines(getClass(), "welcome.html"));
        bind(String.class).annotatedWith(Names.named("aboutMessage")).toInstance("Simple App");
        bind(InputStream.class).annotatedWith(Names.named("metaInfManifest")).toProvider(
            Providers.of(getServletContext().getResourceAsStream("/META-INF/MANIFEST.MF")));
      }
    };
readLines=Resources.readLines(Resources.getResource(contextClass,resourceName),Charset.defaultCharset())
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
Node root =
        new NodeImpl("1", new NodeImpl("11", new NodeImpl("111", NullNode.getInstance(),
            NullNode.getInstance()), NullNode.getInstance()), new NodeImpl("12",
            NullNode.getInstance(), new NodeImpl("122", NullNode.getInstance(),
                NullNode.getInstance())));
String[] args = {};
instance=NullNode.getInstance()
final NullNode instance = NullNode.getInstance();
node=NullNode.getInstance()
final NullNode node = NullNode.getInstance();
final NodeImpl level1B = new NodeImpl("level1_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2B = new NodeImpl("level2_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3A = new NodeImpl("level3_a", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3B = new NodeImpl("level3_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2A = new NodeImpl("level2_a", level3A, level3B);
final NodeImpl level1A = new NodeImpl("level1_a", level2A, level2B);
inOrder=Mockito.inOrder(getStdOutMock())
final InOrder inOrder = Mockito.inOrder(getStdOutMock());
level1=TREE_ROOT.getLeft()
final Node level1 = TREE_ROOT.getLeft();
level2=level1.getLeft()
final Node level2 = level1.getLeft();
level3=level2.getLeft()
final Node level3 = level2.getLeft();
level1=TREE_ROOT.getRight()
final Node level1 = TREE_ROOT.getRight();
OliphauntPool pool = new OliphauntPool();
oliphaunt1=pool.checkOut()
Oliphaunt oliphaunt1 = pool.checkOut();
oliphaunt2=pool.checkOut()
Oliphaunt oliphaunt2 = pool.checkOut();
oliphaunt3=pool.checkOut()
Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunt5=pool.checkOut()
Oliphaunt oliphaunt5 = pool.checkOut();
instance=available.iterator().next()
T instance = available.iterator().next();
String[] args = {};
final OliphauntPool pool = new OliphauntPool();
expectedOliphaunt=pool.checkOut()
final Oliphaunt expectedOliphaunt = pool.checkOut();
oliphaunt=pool.checkOut()
final Oliphaunt oliphaunt = pool.checkOut();
final OliphauntPool pool = new OliphauntPool();
firstOliphaunt=pool.checkOut()
final Oliphaunt firstOliphaunt = pool.checkOut();
secondOliphaunt=pool.checkOut()
final Oliphaunt secondOliphaunt = pool.checkOut();
oliphaunt3=pool.checkOut()
final Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
final Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunts=Arrays.asList(pool.checkOut(),pool.checkOut())
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
Weather weather = new Weather();
GWeather gWeather = new GWeather();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
String[] args = {};
final ArrayList<Object[]> testData = new ArrayList<>();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
observer=this.factory.get()
final O observer = this.factory.get();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
observer=this.factory.get()
final O observer = this.factory.get();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
MessageQueue queue = new SimpleMessageQueue(10000);
final Producer producer = new Producer("PRODUCER_1", queue);
final Consumer consumer = new Consumer("CONSUMER_1", queue);
Message msg;
sender=msg.getHeader(Headers.SENDER)
String sender = msg.getHeader(Headers.SENDER);
body=msg.getBody()
String body = msg.getBody();
Message msg = new SimpleMessage();
String[] args = {};
final Message[] messages = new Message[]{
        createMessage("you", "Hello!"),
        createMessage("me", "Hi!"),
        Message.POISON_PILL,
        createMessage("late_for_the_party", "Hello? Anyone here?"),
    };
final MessageQueue queue = new SimpleMessageQueue(messages.length);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final SimpleMessage msg = new SimpleMessage();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
messageCaptor=ArgumentCaptor.forClass(Message.class)
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
message=messageCaptor.getValue()
final Message message = messageCaptor.getValue();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
final SimpleMessage message = new SimpleMessage();
final String senderName = "test";
final SimpleMessage message = new SimpleMessage();
headers=message.getHeaders()
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
Stew stew = new Stew(1, 2, 3, 4);
ImmutableStew immutableStew = new ImmutableStew(2, 4, 3, 6);
String[] args = {};
final Stew stew = new Stew(1, 2, 3, 4);
final String message = "Mixing the stew we find: 1 potatoes, 2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Stew stew = new Stew(1, 2, 3, 4);
final ImmutableStew stew = new ImmutableStew(1, 2, 3, 4);
final String expectedMessage = "Mixing the immutable stew we find: 1 potatoes, "
        + "2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ItemQueue queue = new ItemQueue();
executorService=Executors.newFixedThreadPool(5)
ExecutorService executorService = Executors.newFixedThreadPool(5);
final Producer producer = new Producer("Producer_" + i, queue);
final Consumer consumer = new Consumer("Consumer_" + i, queue);
item=queue.take()
Item item = queue.take();
Item item = new Item(name, itemId++);
Random random = new Random();
String[] args = {};
queue=spy(new ItemQueue())
final ItemQueue queue = spy(new ItemQueue());
final Consumer consumer = new Consumer("consumer", queue);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
queue=mock(ItemQueue.class)
final ItemQueue queue = mock(ItemQueue.class);
final Producer producer = new Producer("producer", queue);
Prototype charProto = new Character();
Character mageProto = new Character(Type.MAGE, charProto);
Character warProto = new Character(Type.WARRIOR, charProto);
Character rogueProto = new Character(Type.ROGUE, charProto);
Character mag = new Character("Player_1", mageProto);
Character warrior = new Character("Player_2", warProto);
Character rogue = new Character("Player_3", rogueProto);
Character rogueDouble = new Character("Player_4", rogue);
containsValue=properties.containsKey(stat)
boolean containsValue = properties.containsKey(stat);
StringBuilder builder = new StringBuilder();
value=this.get(stat)
Integer value = this.get(stat);
String[] args = {};
final Character prototype = new Character();
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character mage = new Character(Type.MAGE, prototype);
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
HeroFactory factory;
Mage mage;
Warlord warlord;
Beast beast;
String[] args = {};
mage=mock(Mage.class)
final Mage mage = mock(Mage.class);
warlord=mock(Warlord.class)
final Warlord warlord = mock(Warlord.class);
beast=mock(Beast.class)
final Beast beast = mock(Beast.class);
final HeroFactoryImpl factory = new HeroFactoryImpl(mage, warlord, beast);
clone=this.testedPrototype.clone()
final Object clone = this.testedPrototype.clone();
WizardTowerProxy tower = new WizardTowerProxy();
String[] args = {};
final String[] wizardNames = {"Gandalf", "Dumbledore", "Oz", "Merlin"};
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTowerProxy tower = new WizardTowerProxy();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTower tower = new WizardTower();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
CamelContext context = new DefaultCamelContext();
template=context.createProducerTemplate()
ProducerTemplate template = context.createProducerTemplate();
String[] args = {};
LoggingHandler loggingHandler = new LoggingHandler();
NioServerSocketChannel channel = new NioServerSocketChannel(port, handler);
NioDatagramChannel channel = new NioDatagramChannel(port, handler);
AppClient appClient = new AppClient();
outputStream=socket.getOutputStream()
OutputStream outputStream = socket.getOutputStream();
PrintWriter writer = new PrintWriter(outputStream);
byte[] data = new byte[1024];
read=inputStream.read(data,0,data.length)
int read = inputStream.read(data, 0, data.length);
String message = clientName + " - Log request: " + i;
DatagramPacket request =
              new DatagramPacket(message.getBytes(), message.getBytes().length, remoteAddress);
byte[] data = new byte[1024];
DatagramPacket reply = new DatagramPacket(data, data.length);
DatagramPacket datagram = (DatagramPacket) readObject;
DatagramPacket replyPacket = new DatagramPacket(ByteBuffer.wrap(ACK));
buffer=ByteBuffer.wrap(ACK)
ByteBuffer buffer = ByteBuffer.wrap(ACK);
pendingWrites=channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
pendingWrite=pendingWrites.poll()
Object pendingWrite = pendingWrites.poll();
pendingWrites=this.channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
sender=((DatagramChannel)key.channel()).receive(buffer)
SocketAddress sender = ((DatagramChannel) key.channel()).receive(buffer);
DatagramPacket packet = new DatagramPacket(buffer);
DatagramPacket pendingPacket = (DatagramPacket) pendingWrite;
key=channel.getJavaChannel().register(selector,channel.getInterestedOps())
SelectionKey key = channel.getJavaChannel().register(selector, channel.getInterestedOps());
keys=selector.selectedKeys()
Set<SelectionKey> keys = selector.selectedKeys();
Set<SelectionKey> keys = selector.selectedKeys();
iterator=keys.iterator()
Iterator<SelectionKey> iterator = keys.iterator();
Iterator<SelectionKey> iterator = keys.iterator();
key=iterator.next()
SelectionKey key = iterator.next();
iterator=pendingCommands.iterator()
Iterator<Runnable> iterator = pendingCommands.iterator();
Iterator<Runnable> iterator = pendingCommands.iterator();
command=iterator.next()
Runnable command = iterator.next();
AbstractNioChannel channel = (AbstractNioChannel) key.attachment();
readObject=((AbstractNioChannel)key.attachment()).read(key)
Object readObject = ((AbstractNioChannel) key.attachment()).read(key);
ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();
socketChannel=serverSocketChannel.accept()
SocketChannel socketChannel = serverSocketChannel.accept();
readKey=socketChannel.register(selector,SelectionKey.OP_READ)
SelectionKey readKey = socketChannel.register(selector, SelectionKey.OP_READ);
SocketChannel socketChannel = (SocketChannel) key.channel();
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
read=socketChannel.read(buffer)
int read = socketChannel.read(buffer);
ByteBuffer pendingBuffer = (ByteBuffer) pendingWrite;
App app = new App(new ThreadPoolDispatcher(2));
AppClient client = new AppClient();
App app = new App(new SameThreadDispatcher());
AppClient client = new AppClient();
executeService=Executors.newFixedThreadPool(10)
ExecutorService executeService = Executors.newFixedThreadPool(10);
ReaderWriterLock lock = new ReaderWriterLock();
String[] args = {};
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
reader1=spy(new Reader("Reader 1",lock.readLock()))
Reader reader1 = spy(new Reader("Reader 1", lock.readLock()));
reader2=spy(new Reader("Reader 2",lock.readLock()))
Reader reader2 = spy(new Reader("Reader 2", lock.readLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
writer1=spy(new Writer("Writer 1",lock.writeLock()))
Writer writer1 = spy(new Writer("Writer 1", lock.writeLock()));
writer2=spy(new Writer("Writer 2",lock.writeLock()))
Writer writer2 = spy(new Writer("Writer 2", lock.writeLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
        "applicationContext.xml");
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
BasicDataSource basicDataSource = new BasicDataSource();
LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();
Properties properties = new Properties();
JpaTransactionManager transactionManager = new JpaTransactionManager();
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
        AppConfig.class);
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
final int prime = 31;
int result = 1;
Person other = (Person) obj;
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
resultSet=dataSource.getConnection().createStatement().executeQuery("SELECT 1")
ResultSet resultSet = dataSource.getConnection().createStatement().executeQuery("SELECT 1");
String result = null;
String expected = "1";
String[] args = {};
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
String[] args = {};
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
King k = new King();
Queen q = new Queen();
ArrayList<Royalty> guests = new ArrayList<>();
boolean anotherDay = true;
String[] args = {};
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
goodMoodRoyalty=mock(Royalty.class)
final Royalty goodMoodRoyalty = mock(Royalty.class);
badMoodRoyalty=mock(Royalty.class)
final Royalty badMoodRoyalty = mock(Royalty.class);
final ArrayList<Royalty> goodCompany = new ArrayList<>();
final ArrayList<Royalty> badCompany = new ArrayList<>();
Spell spell1 = new Spell("Ice dart");
Spell spell2 = new Spell("Invisibility");
Spell spell3 = new Spell("Stun bolt");
Spell spell4 = new Spell("Confusion");
Spell spell5 = new Spell("Darkness");
Spell spell6 = new Spell("Fireball");
Spell spell7 = new Spell("Enchant weapon");
Spell spell8 = new Spell("Rock armour");
Spell spell9 = new Spell("Light");
Spell spell10 = new Spell("Bee swarm");
Spell spell11 = new Spell("Haste");
Spell spell12 = new Spell("Levitation");
Spell spell13 = new Spell("Magic lock");
Spell spell14 = new Spell("Summon hell bat");
Spell spell15 = new Spell("Water walking");
Spell spell16 = new Spell("Magic storm");
Spell spell17 = new Spell("Entangle");
SpellDao spellDao = new SpellDaoImpl();
SpellbookDao spellbookDao = new SpellbookDaoImpl();
Spellbook spellbook1 = new Spellbook("Book of Orgymon");
Spellbook spellbook2 = new Spellbook("Book of Aras");
Spellbook spellbook3 = new Spellbook("Book of Kritior");
Spellbook spellbook4 = new Spellbook("Book of Tamaex");
Spellbook spellbook5 = new Spellbook("Book of Idores");
Spellbook spellbook6 = new Spellbook("Book of Opaen");
Spellbook spellbook7 = new Spellbook("Book of Kihione");
WizardDao wizardDao = new WizardDaoImpl();
Wizard wizard1 = new Wizard("Aderlard Boud");
Wizard wizard2 = new Wizard("Anaxis Bajraktari");
Wizard wizard3 = new Wizard("Xuban Munoa");
Wizard wizard4 = new Wizard("Blasius Dehooge");
MagicService service =
        new MagicServiceImpl(new WizardDaoImpl(), new SpellbookDaoImpl(), new SpellDaoImpl());
wizardsWithSpellbook=service.findWizardsWithSpellbook("Book of Idores")
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
wizardsWithSpell=service.findWizardsWithSpell("Fireball")
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
List<E> result = null;
List<E> result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
spellbook=spellbookDao.findByName(name)
Spellbook spellbook = spellbookDao.findByName(name);
spell=spellDao.findByName(name)
Spell spell = spellDao.findByName(name);
spellbook=spell.getSpellbook()
Spellbook spellbook = spell.getSpellbook();
session=getSession()
Session session = getSession();
Transaction tx = null;
Spell result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Spellbook result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Wizard result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
String[] args = {};
className=dao.persistentClass.getSimpleName()
final String className = dao.persistentClass.getSimpleName();
entityName=String.format("%s%d",className,ID_GENERATOR.incrementAndGet())
final String entityName = String.format("%s%d", className, ID_GENERATOR.incrementAndGet());
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
byId=this.dao.find(entity.getId())
final E byId = this.dao.find(entity.getId());
originalEntities=this.dao.findAll()
final List<E> originalEntities = this.dao.findAll();
final List<E> originalEntities = this.dao.findAll();
entitiesLeft=this.dao.findAll()
final List<E> entitiesLeft = this.dao.findAll();
final List<E> entitiesLeft = this.dao.findAll();
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
expectedId=Long.valueOf(1)
final Long expectedId = Long.valueOf(1);
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
final String expectedName = "new name";
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
final String bookname = "bookname";
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
final Set<Wizard> wizards = new HashSet<>();
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpellbook(bookname)
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final Set<Wizard> wizards = new HashSet<>();
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spell=mock(Spell.class)
final Spell spell = mock(Spell.class);
final String spellName = "spellname";
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpell(spellName)
final List<Wizard> result = service.findWizardsWithSpell(spellName);
final List<Wizard> result = service.findWizardsWithSpell(spellName);
dao=getDao()
final SpellDaoImpl dao = getDao();
allSpells=dao.findAll()
final List<Spell> allSpells = dao.findAll();
final List<Spell> allSpells = dao.findAll();
spellByName=dao.findByName(spell.getName())
final Spell spellByName = dao.findByName(spell.getName());
dao=getDao()
final SpellbookDaoImpl dao = getDao();
allBooks=dao.findAll()
final List<Spellbook> allBooks = dao.findAll();
final List<Spellbook> allBooks = dao.findAll();
spellByName=dao.findByName(book.getName())
final Spellbook spellByName = dao.findByName(book.getName());
dao=getDao()
final WizardDaoImpl dao = getDao();
allWizards=dao.findAll()
final List<Wizard> allWizards = dao.findAll();
final List<Wizard> allWizards = dao.findAll();
byName=dao.findByName(spell.getName())
final Wizard byName = dao.findByName(spell.getName());
service=ServiceLocator.getService("jndi/serviceA")
Service service = ServiceLocator.getService("jndi/serviceA");
Service cachedService = null;
serviceObj=serviceCache.getService(serviceJndiName)
Service serviceObj = serviceCache.getService(serviceJndiName);
InitContext ctx = new InitContext();
String[] args = {};
final String[] serviceNames = new String[]{
        "jndi/serviceA", "jndi/serviceB"
    };
service=ServiceLocator.getService(serviceName)
final Service service = ServiceLocator.getService(serviceName);
ivoryTower1=IvoryTower.getInstance()
IvoryTower ivoryTower1 = IvoryTower.getInstance();
ivoryTower2=IvoryTower.getInstance()
IvoryTower ivoryTower2 = IvoryTower.getInstance();
threadSafeIvoryTower1=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower1 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
threadSafeIvoryTower2=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower2 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
EnumIvoryTower enumIvoryTower1 = EnumIvoryTower.INSTANCE;
EnumIvoryTower enumIvoryTower2 = EnumIvoryTower.INSTANCE;
dcl1=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();
dcl2=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();
demandHolderIdiom=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom =
        InitializingOnDemandHolderIdiom.getInstance();
demandHolderIdiom2=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom2 =
        InitializingOnDemandHolderIdiom.getInstance();
ThreadSafeDoubleCheckLocking result = instance;
String[] args = {};
instance1=this.singletonInstanceMethod.get()
S instance1 = this.singletonInstanceMethod.get();
instance2=this.singletonInstanceMethod.get()
S instance2 = this.singletonInstanceMethod.get();
instance3=this.singletonInstanceMethod.get()
S instance3 = this.singletonInstanceMethod.get();
final List<Callable<S>> tasks = new ArrayList<>();
int i = 0
creatures=Arrays.asList(new Goblin(),new Octopus(),new Dragon(),new Shark(),new Troll(),new KillerBee())
List<Creature> creatures =
        Arrays.asList(new Goblin(), new Octopus(), new Dragon(), new Shark(), new Troll(),
            new KillerBee());
walkingCreatures=creatures.stream().filter(new MovementSelector(Movement.WALKING)).collect(Collectors.toList())
List<Creature> walkingCreatures =
        creatures.stream().filter(new MovementSelector(Movement.WALKING))
            .collect(Collectors.toList());
darkCreatures=creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList())
List<Creature> darkCreatures =
        creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList());
redAndFlyingCreatures=creatures.stream().filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING))).collect(Collectors.toList())
List<Creature> redAndFlyingCreatures =
        creatures.stream()
            .filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING)))
            .collect(Collectors.toList());
String[] args = {};
toString=this.testedCreature.toString()
final String toString = this.testedCreature.toString();
greenCreature=mock(Creature.class)
final Creature greenCreature = mock(Creature.class);
redCreature=mock(Creature.class)
final Creature redCreature = mock(Creature.class);
final ColorSelector greenSelector = new ColorSelector(Color.GREEN);
swimmingCreature=mock(Creature.class)
final Creature swimmingCreature = mock(Creature.class);
flyingCreature=mock(Creature.class)
final Creature flyingCreature = mock(Creature.class);
final MovementSelector swimmingSelector = new MovementSelector(Movement.SWIMMING);
normalCreature=mock(Creature.class)
final Creature normalCreature = mock(Creature.class);
smallCreature=mock(Creature.class)
final Creature smallCreature = mock(Creature.class);
final SizeSelector normalSelector = new SizeSelector(Size.NORMAL);
Mammoth mammoth = new Mammoth();
String[] args = {};
inOrder=Mockito.inOrder(this.stdOutMock)
final InOrder inOrder = Mockito.inOrder(this.stdOutMock);
final Mammoth mammoth = new Mammoth();
toString=new Mammoth().toString()
final String toString = new Mammoth().toString();
warrior=CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin").withWeapon("Sword").noAbilities().build()
Character warrior =
        CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin")
            .withWeapon("Sword").noAbilities().build();
mage=CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer").withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport").noMoreAbilities().build()
Character mage =
        CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer")
            .withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport")
            .noMoreAbilities().build();
thief=CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build()
Character thief =
        CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build();
StringBuilder sb = new StringBuilder();
Character character = new Character(name);
String[] args = {};
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").withAbility("invisibility").withAbility("wisdom").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .withAbility("invisibility")
        .withAbility("wisdom")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").noSpell().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .noSpell()
        .build();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .noAbilities()
        .build();
character=CharacterStepBuilder.newBuilder().name("Cuauhtemoc").fighterClass("aztec").withWeapon("spear").withAbility("speed").withAbility("strength").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Cuauhtemoc")
        .fighterClass("aztec")
        .withWeapon("spear")
        .withAbility("speed")
        .withAbility("strength")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Poor warrior").fighterClass("none").noWeapon().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Poor warrior")
        .fighterClass("none")
        .noWeapon()
        .build();
character=CharacterStepBuilder.newBuilder().name("Weak warrior").fighterClass("none").withWeapon("Slingshot").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Weak warrior")
        .fighterClass("none")
        .withWeapon("Slingshot")
        .noAbilities()
        .build();
DragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());
String[] args = {};
strategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy strategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(strategy);
initialStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy initialStrategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(initialStrategy);
newStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy newStrategy = mock(DragonSlayingStrategy.class);
HalflingThief thief = new HalflingThief(new HitAndRunMethod());
target=pickTarget()
String target = pickTarget();
String[] args = {};
method=mock(StealingMethod.class)
final StealingMethod method = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(method);
initialMethod=mock(StealingMethod.class)
final StealingMethod initialMethod = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(initialMethod);
newMethod=mock(StealingMethod.class)
final StealingMethod newMethod = mock(StealingMethod.class);
inOrder=inOrder(this.stdOutMock)
final InOrder inOrder = inOrder(this.stdOutMock);
List<Task> tasks = new ArrayList<>();
executor=Executors.newFixedThreadPool(3)
ExecutorService executor = Executors.newFixedThreadPool(3);
Runnable worker = new Worker(tasks.get(i));
String[] args = {};
service=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService service = Executors.newFixedThreadPool(THREAD_COUNT);
final List<Callable<Integer>> tasks = new ArrayList<>();
int i = 0
task=mock(Task.class)
final Task task = mock(Task.class);
final Worker worker = new Worker(task);
RainbowFish fishV1 = new RainbowFish("Zed", 10, 11, 12);
deserializedFishV1=RainbowFishSerializer.readV1("fish1.out")
RainbowFish deserializedFishV1 = RainbowFishSerializer.readV1("fish1.out");
RainbowFishV2 fishV2 = new RainbowFishV2("Scar", 5, 12, 15, true, true, true);
deserializedFishV2=RainbowFishSerializer.readV1("fish2.out")
RainbowFish deserializedFishV2 = RainbowFishSerializer.readV1("fish2.out");
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
FileInputStream fileIn = new FileInputStream(filename);
ObjectInputStream objIn = new ObjectInputStream(fileIn);
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
String[] args = {};
File file1 = new File("fish1.out");
File file2 = new File("fish2.out");
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
final RainbowFish fish = new RainbowFish("name", 1, 2, 3);
final RainbowFishV2 fish = new RainbowFishV2("name", 1, 2, 3, false, true, false);
BallItem ballItem = new BallItem();
BallThread ballThread = new BallThread();
String[] args = {};
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
inOrder=inOrder(ballThread)
final InOrder inOrder = inOrder(ballThread);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
exceptionHandler=mock(UncaughtExceptionHandler.class)
final UncaughtExceptionHandler exceptionHandler = mock(UncaughtExceptionHandler.class);
statA=HeroStat.valueOf(10,5,0)
HeroStat statA = HeroStat.valueOf(10, 5, 0);
statB=HeroStat.valueOf(10,5,0)
HeroStat statB = HeroStat.valueOf(10, 5, 0);
statC=HeroStat.valueOf(5,1,8)
HeroStat statC = HeroStat.valueOf(5, 1, 8);
final int prime = 31;
int result = 1;
HeroStat other = (HeroStat) obj;
String[] args = {};
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatC=HeroStat.valueOf(3,9,8)
HeroStat heroStatC = HeroStat.valueOf(3, 9, 8);
Commander commander =
        new Commander(new Sergeant(new Soldier(), new Soldier(), new Soldier()), new Sergeant(
            new Soldier(), new Soldier(), new Soldier()));
String[] args = {};
final Unit[] children = new Unit[5];
unit=this.factory.apply(children)
final U unit = this.factory.apply(children);
visitor=mock(UnitVisitor.class)
final UnitVisitor visitor = mock(UnitVisitor.class);

Diff of 5e28382021a579d27717962ed8d7a45acbbff40e and bc060309e3164e1dbe6775235ba14d5a2bd87d99:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 212
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 6
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5e28382021a579d27717962ed8d7a45acbbff40e to bc060309e3164e1dbe6775235ba14d5a2bd87d99


****Parsing for addition at revision bc060309e3164e1dbe6775235ba14d5a2bd87d99****

Added App.java to .\/java-design-patterns\ repository source files.
Added Army.java to .\/java-design-patterns\ repository source files.
Added Castle.java to .\/java-design-patterns\ repository source files.
Added ElfArmy.java to .\/java-design-patterns\ repository source files.
Added ElfCastle.java to .\/java-design-patterns\ repository source files.
Added ElfKing.java to .\/java-design-patterns\ repository source files.
Added ElfKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added KingdomFactory.java to .\/java-design-patterns\ repository source files.
Added OrcArmy.java to .\/java-design-patterns\ repository source files.
Added OrcCastle.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added AbstractFactoryTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BattleFishingBoat.java to .\/java-design-patterns\ repository source files.
Added BattleShip.java to .\/java-design-patterns\ repository source files.
Added Captain.java to .\/java-design-patterns\ repository source files.
Added FishingBoat.java to .\/java-design-patterns\ repository source files.
Added AdapterPatternTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsyncCallback.java to .\/java-design-patterns\ repository source files.
Added AsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AsyncResult.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Excalibur.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added MagicWeapon.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Mjollnir.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Stormbringer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Armor.java to .\/java-design-patterns\ repository source files.
Added HairColor.java to .\/java-design-patterns\ repository source files.
Added HairType.java to .\/java-design-patterns\ repository source files.
Added Hero.java to .\/java-design-patterns\ repository source files.
Added Profession.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegate.java to .\/java-design-patterns\ repository source files.
Added BusinessLookup.java to .\/java-design-patterns\ repository source files.
Added BusinessService.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added EjbService.java to .\/java-design-patterns\ repository source files.
Added JmsService.java to .\/java-design-patterns\ repository source files.
Added ServiceType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegateTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppManager.java to .\/java-design-patterns\ repository source files.
Added CacheStore.java to .\/java-design-patterns\ repository source files.
Added CachingPolicy.java to .\/java-design-patterns\ repository source files.
Added DbManager.java to .\/java-design-patterns\ repository source files.
Added LruCache.java to .\/java-design-patterns\ repository source files.
Added UserAccount.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CachingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Callback.java to .\/java-design-patterns\ repository source files.
Added LambdasApp.java to .\/java-design-patterns\ repository source files.
Added SimpleTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CallbackTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added OrcCommander.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcOfficer.java to .\/java-design-patterns\ repository source files.
Added OrcSoldier.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added RequestHandler.java to .\/java-design-patterns\ repository source files.
Added RequestType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OrcKingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added InvisibilitySpell.java to .\/java-design-patterns\ repository source files.
Added ShrinkSpell.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added Visibility.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Letter.java to .\/java-design-patterns\ repository source files.
Added LetterComposite.java to .\/java-design-patterns\ repository source files.
Added Messenger.java to .\/java-design-patterns\ repository source files.
Added Sentence.java to .\/java-design-patterns\ repository source files.
Added Word.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MessengerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Customer.java to .\/java-design-patterns\ repository source files.
Added CustomerDao.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added CustomerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hostile.java to .\/java-design-patterns\ repository source files.
Added SmartHostile.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SmartHostileTest.java to .\/java-design-patterns\ repository source files.
Added TrollTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Printer.java to .\/java-design-patterns\ repository source files.
Added PrinterController.java to .\/java-design-patterns\ repository source files.
Added CanonPrinter.java to .\/java-design-patterns\ repository source files.
Added EpsonPrinter.java to .\/java-design-patterns\ repository source files.
Added HpPrinter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DelegateTest.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizard.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GuiceWizard.java to .\/java-design-patterns\ repository source files.
Added OldTobyTobacco.java to .\/java-design-patterns\ repository source files.
Added RivendellTobacco.java to .\/java-design-patterns\ repository source files.
Added SecondBreakfastTobacco.java to .\/java-design-patterns\ repository source files.
Added SimpleWizard.java to .\/java-design-patterns\ repository source files.
Added Tobacco.java to .\/java-design-patterns\ repository source files.
Added TobaccoModule.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizardTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GuiceWizardTest.java to .\/java-design-patterns\ repository source files.
Added SimpleWizardTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Inventory.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added InventoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroid.java to .\/java-design-patterns\ repository source files.
Added GameObject.java to .\/java-design-patterns\ repository source files.
Added Meteoroid.java to .\/java-design-patterns\ repository source files.
Added Rectangle.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIss.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMir.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CollisionTest.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroidTest.java to .\/java-design-patterns\ repository source files.
Added MeteoroidTest.java to .\/java-design-patterns\ repository source files.
Added RectangleTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIssTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMirTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added EventEmitter.java to .\/java-design-patterns\ repository source files.
Added EventObserver.java to .\/java-design-patterns\ repository source files.
Added KingJoffrey.java to .\/java-design-patterns\ repository source files.
Added KingsHand.java to .\/java-design-patterns\ repository source files.
Added LordBaelish.java to .\/java-design-patterns\ repository source files.
Added LordVarys.java to .\/java-design-patterns\ repository source files.
Added Scout.java to .\/java-design-patterns\ repository source files.
Added Weekday.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EventEmitterTest.java to .\/java-design-patterns\ repository source files.
Added EventTest.java to .\/java-design-patterns\ repository source files.
Added KingJoffreyTest.java to .\/java-design-patterns\ repository source files.
Added KingsHandTest.java to .\/java-design-patterns\ repository source files.
Added LordBaelishTest.java to .\/java-design-patterns\ repository source files.
Added LordVarysTest.java to .\/java-design-patterns\ repository source files.
Added ScoutTest.java to .\/java-design-patterns\ repository source files.
Added WeekdayTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEvent.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEvent.java to .\/java-design-patterns\ repository source files.
Added EventDispatcher.java to .\/java-design-patterns\ repository source files.
Added Handler.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventTest.java to .\/java-design-patterns\ repository source files.
Added EventDispatcherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileWriterAction.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DwarvenCartOperator.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldDigger.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacade.java to .\/java-design-patterns\ repository source files.
Added DwarvenMineWorker.java to .\/java-design-patterns\ repository source files.
Added DwarvenTunnelDigger.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacadeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Axe.java to .\/java-design-patterns\ repository source files.
Added Bow.java to .\/java-design-patterns\ repository source files.
Added Builder.java to .\/java-design-patterns\ repository source files.
Added Spear.java to .\/java-design-patterns\ repository source files.
Added Sword.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponFactory.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryKitTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Blacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfBlacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfWeapon.java to .\/java-design-patterns\ repository source files.
Added OrcBlacksmith.java to .\/java-design-patterns\ repository source files.
Added OrcWeapon.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added UserGroup.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added UserGroupTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FluentIterable.java to .\/java-design-patterns\ repository source files.
Added DecoratingIterator.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterable.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterable.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added ActionType.java to .\/java-design-patterns\ repository source files.
Added Content.java to .\/java-design-patterns\ repository source files.
Added ContentAction.java to .\/java-design-patterns\ repository source files.
Added MenuAction.java to .\/java-design-patterns\ repository source files.
Added MenuItem.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added ContentStore.java to .\/java-design-patterns\ repository source files.
Added MenuStore.java to .\/java-design-patterns\ repository source files.
Added Store.java to .\/java-design-patterns\ repository source files.
Added ContentView.java to .\/java-design-patterns\ repository source files.
Added MenuView.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ContentTest.java to .\/java-design-patterns\ repository source files.
Added MenuItemTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DispatcherTest.java to .\/java-design-patterns\ repository source files.
Added ContentStoreTest.java to .\/java-design-patterns\ repository source files.
Added MenuStoreTest.java to .\/java-design-patterns\ repository source files.
Added ContentViewTest.java to .\/java-design-patterns\ repository source files.
Added MenuViewTest.java to .\/java-design-patterns\ repository source files.
Added AlchemistShop.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HealingPotion.java to .\/java-design-patterns\ repository source files.
Added HolyWaterPotion.java to .\/java-design-patterns\ repository source files.
Added InvisibilityPotion.java to .\/java-design-patterns\ repository source files.
Added PoisonPotion.java to .\/java-design-patterns\ repository source files.
Added Potion.java to .\/java-design-patterns\ repository source files.
Added PotionFactory.java to .\/java-design-patterns\ repository source files.
Added PotionType.java to .\/java-design-patterns\ repository source files.
Added StrengthPotion.java to .\/java-design-patterns\ repository source files.
Added AlchemistShopTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ApplicationException.java to .\/java-design-patterns\ repository source files.
Added ArcherCommand.java to .\/java-design-patterns\ repository source files.
Added ArcherView.java to .\/java-design-patterns\ repository source files.
Added CatapultCommand.java to .\/java-design-patterns\ repository source files.
Added CatapultView.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added ErrorView.java to .\/java-design-patterns\ repository source files.
Added FrontController.java to .\/java-design-patterns\ repository source files.
Added UnknownCommand.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ApplicationExceptionTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added FrontControllerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added ViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsynchronousService.java to .\/java-design-patterns\ repository source files.
Added AsyncTask.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added AsynchronousServiceTest.java to .\/java-design-patterns\ repository source files.
Added AbstractFilter.java to .\/java-design-patterns\ repository source files.
Added AddressFilter.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added ContactFilter.java to .\/java-design-patterns\ repository source files.
Added DepositFilter.java to .\/java-design-patterns\ repository source files.
Added Filter.java to .\/java-design-patterns\ repository source files.
Added FilterChain.java to .\/java-design-patterns\ repository source files.
Added FilterManager.java to .\/java-design-patterns\ repository source files.
Added NameFilter.java to .\/java-design-patterns\ repository source files.
Added Order.java to .\/java-design-patterns\ repository source files.
Added OrderFilter.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FilterManagerTest.java to .\/java-design-patterns\ repository source files.
Added FilterTest.java to .\/java-design-patterns\ repository source files.
Added OrderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Expression.java to .\/java-design-patterns\ repository source files.
Added MinusExpression.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpression.java to .\/java-design-patterns\ repository source files.
Added NumberExpression.java to .\/java-design-patterns\ repository source files.
Added PlusExpression.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MinusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpressionTest.java to .\/java-design-patterns\ repository source files.
Added NumberExpressionTest.java to .\/java-design-patterns\ repository source files.
Added PlusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemIterator.java to .\/java-design-patterns\ repository source files.
Added ItemType.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestItemIterator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Cake.java to .\/java-design-patterns\ repository source files.
Added CakeBakingException.java to .\/java-design-patterns\ repository source files.
Added CakeBakingService.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImpl.java to .\/java-design-patterns\ repository source files.
Added CakeDao.java to .\/java-design-patterns\ repository source files.
Added CakeInfo.java to .\/java-design-patterns\ repository source files.
Added CakeLayer.java to .\/java-design-patterns\ repository source files.
Added CakeLayerDao.java to .\/java-design-patterns\ repository source files.
Added CakeLayerInfo.java to .\/java-design-patterns\ repository source files.
Added CakeTopping.java to .\/java-design-patterns\ repository source files.
Added CakeToppingDao.java to .\/java-design-patterns\ repository source files.
Added CakeToppingInfo.java to .\/java-design-patterns\ repository source files.
Added CakeViewImpl.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingExceptionTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added CakeTest.java to .\/java-design-patterns\ repository source files.
Added CakeViewImplTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Heavy.java to .\/java-design-patterns\ repository source files.
Added HolderNaive.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafe.java to .\/java-design-patterns\ repository source files.
Added Java8Holder.java to .\/java-design-patterns\ repository source files.
Added AbstractHolderTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HolderNaiveTest.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafeTest.java to .\/java-design-patterns\ repository source files.
Added Java8HolderTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hobbit.java to .\/java-design-patterns\ repository source files.
Added Hunter.java to .\/java-design-patterns\ repository source files.
Added Party.java to .\/java-design-patterns\ repository source files.
Added PartyImpl.java to .\/java-design-patterns\ repository source files.
Added PartyMember.java to .\/java-design-patterns\ repository source files.
Added PartyMemberBase.java to .\/java-design-patterns\ repository source files.
Added Rogue.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added PartyImplTest.java to .\/java-design-patterns\ repository source files.
Added PartyMemberTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Star.java to .\/java-design-patterns\ repository source files.
Added StarMemento.java to .\/java-design-patterns\ repository source files.
Added StarType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StarTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Fatigue.java to .\/java-design-patterns\ repository source files.
Added GiantController.java to .\/java-design-patterns\ repository source files.
Added GiantModel.java to .\/java-design-patterns\ repository source files.
Added GiantView.java to .\/java-design-patterns\ repository source files.
Added Health.java to .\/java-design-patterns\ repository source files.
Added Nourishment.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GiantControllerTest.java to .\/java-design-patterns\ repository source files.
Added GiantModelTest.java to .\/java-design-patterns\ repository source files.
Added GiantViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileLoader.java to .\/java-design-patterns\ repository source files.
Added FileSelectorJFrame.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenter.java to .\/java-design-patterns\ repository source files.
Added FileSelectorStub.java to .\/java-design-patterns\ repository source files.
Added FileSelectorView.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FileLoaderTest.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Sex.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added Validator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MonadTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added LoadBalancer.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added Server.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added LoadBalancerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Nazgul.java to .\/java-design-patterns\ repository source files.
Added NazgulName.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NazgulTest.java to .\/java-design-patterns\ repository source files.
Added HomePageService.java to .\/java-design-patterns\ repository source files.
Added HomePageViewModel.java to .\/java-design-patterns\ repository source files.
Added SimpleObject.java to .\/java-design-patterns\ repository source files.
Added SimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectTest.java to .\/java-design-patterns\ repository source files.
Added DomainAppFixturesProvider.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectCreate.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTearDown.java to .\/java-design-patterns\ repository source files.
Added RecreateSimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleAppSystemInitializer.java to .\/java-design-patterns\ repository source files.
Added BootstrappingGlue.java to .\/java-design-patterns\ repository source files.
Added CatalogOfFixturesGlue.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectGlue.java to .\/java-design-patterns\ repository source files.
Added RunSpecs.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleAppIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleApplication.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Node.java to .\/java-design-patterns\ repository source files.
Added NodeImpl.java to .\/java-design-patterns\ repository source files.
Added NullNode.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NullNodeTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added TreeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ObjectPool.java to .\/java-design-patterns\ repository source files.
Added Oliphaunt.java to .\/java-design-patterns\ repository source files.
Added OliphauntPool.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OliphauntPoolTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GHobbits.java to .\/java-design-patterns\ repository source files.
Added GOrcs.java to .\/java-design-patterns\ repository source files.
Added GWeather.java to .\/java-design-patterns\ repository source files.
Added Observable.java to .\/java-design-patterns\ repository source files.
Added Observer.java to .\/java-design-patterns\ repository source files.
Added Race.java to .\/java-design-patterns\ repository source files.
Added Hobbits.java to .\/java-design-patterns\ repository source files.
Added Orcs.java to .\/java-design-patterns\ repository source files.
Added Weather.java to .\/java-design-patterns\ repository source files.
Added WeatherObserver.java to .\/java-design-patterns\ repository source files.
Added WeatherType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GHobbitsTest.java to .\/java-design-patterns\ repository source files.
Added GWeatherTest.java to .\/java-design-patterns\ repository source files.
Added ObserverTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added HobbitsTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WeatherObserverTest.java to .\/java-design-patterns\ repository source files.
Added WeatherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added MessageQueue.java to .\/java-design-patterns\ repository source files.
Added MqPublishPoint.java to .\/java-design-patterns\ repository source files.
Added MqSubscribePoint.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added SimpleMessage.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageQueue.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added PoisonMessageTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ImmutableStew.java to .\/java-design-patterns\ repository source files.
Added Stew.java to .\/java-design-patterns\ repository source files.
Added StewData.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ImmutableStewTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added StewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemQueue.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Stats.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Beast.java to .\/java-design-patterns\ repository source files.
Added ElfBeast.java to .\/java-design-patterns\ repository source files.
Added ElfMage.java to .\/java-design-patterns\ repository source files.
Added ElfWarlord.java to .\/java-design-patterns\ repository source files.
Added HeroFactory.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImpl.java to .\/java-design-patterns\ repository source files.
Added Mage.java to .\/java-design-patterns\ repository source files.
Added OrcBeast.java to .\/java-design-patterns\ repository source files.
Added OrcMage.java to .\/java-design-patterns\ repository source files.
Added OrcWarlord.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Warlord.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImplTest.java to .\/java-design-patterns\ repository source files.
Added PrototypeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardTower.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WizardTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxyTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppClient.java to .\/java-design-patterns\ repository source files.
Added LoggingHandler.java to .\/java-design-patterns\ repository source files.
Added AbstractNioChannel.java to .\/java-design-patterns\ repository source files.
Added ChannelHandler.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added NioDatagramChannel.java to .\/java-design-patterns\ repository source files.
Added NioReactor.java to .\/java-design-patterns\ repository source files.
Added NioServerSocketChannel.java to .\/java-design-patterns\ repository source files.
Added SameThreadDispatcher.java to .\/java-design-patterns\ repository source files.
Added ThreadPoolDispatcher.java to .\/java-design-patterns\ repository source files.
Added ReactorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Reader.java to .\/java-design-patterns\ repository source files.
Added ReaderWriterLock.java to .\/java-design-patterns\ repository source files.
Added Writer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ReaderAndWriterTest.java to .\/java-design-patterns\ repository source files.
Added ReaderTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppConfig.java to .\/java-design-patterns\ repository source files.
Added Person.java to .\/java-design-patterns\ repository source files.
Added PersonRepository.java to .\/java-design-patterns\ repository source files.
Added PersonSpecifications.java to .\/java-design-patterns\ repository source files.
Added AnnotationBasedRepositoryTest.java to .\/java-design-patterns\ repository source files.
Added AppConfigTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RepositoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added SlidingDoor.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ClosableTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added Queen.java to .\/java-design-patterns\ repository source files.
Added Royalty.java to .\/java-design-patterns\ repository source files.
Added Servant.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added KingTest.java to .\/java-design-patterns\ repository source files.
Added QueenTest.java to .\/java-design-patterns\ repository source files.
Added ServantTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BaseEntity.java to .\/java-design-patterns\ repository source files.
Added Dao.java to .\/java-design-patterns\ repository source files.
Added DaoBaseImpl.java to .\/java-design-patterns\ repository source files.
Added HibernateUtil.java to .\/java-design-patterns\ repository source files.
Added MagicService.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImpl.java to .\/java-design-patterns\ repository source files.
Added Spell.java to .\/java-design-patterns\ repository source files.
Added SpellDao.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Spellbook.java to .\/java-design-patterns\ repository source files.
Added SpellbookDao.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardDao.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BaseDaoTest.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added InitContext.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added ServiceCache.java to .\/java-design-patterns\ repository source files.
Added ServiceImpl.java to .\/java-design-patterns\ repository source files.
Added ServiceLocator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ServiceLocatorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTower.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiom.java to .\/java-design-patterns\ repository source files.
Added IvoryTower.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLocking.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTower.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiomTest.java to .\/java-design-patterns\ repository source files.
Added IvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added SingletonTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLockingTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AbstractCreature.java to .\/java-design-patterns\ repository source files.
Added Creature.java to .\/java-design-patterns\ repository source files.
Added Dragon.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added KillerBee.java to .\/java-design-patterns\ repository source files.
Added Octopus.java to .\/java-design-patterns\ repository source files.
Added Shark.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added Color.java to .\/java-design-patterns\ repository source files.
Added Movement.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added ColorSelector.java to .\/java-design-patterns\ repository source files.
Added MovementSelector.java to .\/java-design-patterns\ repository source files.
Added SizeSelector.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CreatureTest.java to .\/java-design-patterns\ repository source files.
Added ColorSelectorTest.java to .\/java-design-patterns\ repository source files.
Added MovementSelectorTest.java to .\/java-design-patterns\ repository source files.
Added SizeSelectorTest.java to .\/java-design-patterns\ repository source files.
Added AngryState.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Mammoth.java to .\/java-design-patterns\ repository source files.
Added PeacefulState.java to .\/java-design-patterns\ repository source files.
Added State.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MammothTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilder.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DragonSlayer.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategy.java to .\/java-design-patterns\ repository source files.
Added MeleeStrategy.java to .\/java-design-patterns\ repository source files.
Added ProjectileStrategy.java to .\/java-design-patterns\ repository source files.
Added SpellStrategy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayerTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategyTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HalflingThief.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethod.java to .\/java-design-patterns\ repository source files.
Added StealingMethod.java to .\/java-design-patterns\ repository source files.
Added SubtleMethod.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HalflingThiefTest.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethodTest.java to .\/java-design-patterns\ repository source files.
Added StealingMethodTest.java to .\/java-design-patterns\ repository source files.
Added SubtleMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTask.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added Worker.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTaskTest.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTaskTest.java to .\/java-design-patterns\ repository source files.
Added TaskTest.java to .\/java-design-patterns\ repository source files.
Added WorkerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added RainbowFish.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializer.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializerTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2Test.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BallItem.java to .\/java-design-patterns\ repository source files.
Added BallThread.java to .\/java-design-patterns\ repository source files.
Added GameItem.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BallItemTest.java to .\/java-design-patterns\ repository source files.
Added BallThreadTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HeroStat.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroStatTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Commander.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitor.java to .\/java-design-patterns\ repository source files.
Added Sergeant.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitor.java to .\/java-design-patterns\ repository source files.
Added Soldier.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitor.java to .\/java-design-patterns\ repository source files.
Added Unit.java to .\/java-design-patterns\ repository source files.
Added UnitVisitor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommanderTest.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SergeantTest.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SoldierTest.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitorTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added UnitTest.java to .\/java-design-patterns\ repository source files.
Added VisitorTest.java to .\/java-design-patterns\ repository source files.
App app = new App();
elfKing=app.getKing(elfFactory)
final King elfKing = app.getKing(elfFactory);
orcKing=app.getKing(orcFactory)
final King orcKing = app.getKing(orcFactory);
elfCastle=app.getCastle(elfFactory)
final Castle elfCastle = app.getCastle(elfFactory);
orcCastle=app.getCastle(orcFactory)
final Castle orcCastle = app.getCastle(orcFactory);
elfArmy=app.getArmy(elfFactory)
final Army elfArmy = app.getArmy(elfFactory);
orcArmy=app.getArmy(orcFactory)
final Army orcArmy = app.getArmy(orcFactory);
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
String[] args = {};
Captain captain = new Captain(new BattleFishingBoat());
battleFishingBoat=spy(new BattleFishingBoat())
BattleFishingBoat battleFishingBoat = spy(new BattleFishingBoat());
Captain captain = new Captain();
BattleShip captain = (BattleShip) beans.get(CAPTAIN_BEAN);
BattleShip battleship = (BattleShip) beans.get(BATTLESHIP_BEAN);
String[] args = {};
AsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult1=executor.startProcess(lazyval(10,500))
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
asyncResult2=executor.startProcess(lazyval("test",300))
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
asyncResult3=executor.startProcess(lazyval(50L,700))
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
asyncResult4=executor.startProcess(lazyval(20,400),callback("Callback result 4"))
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
asyncResult5=executor.startProcess(lazyval("callback",600),callback("Callback result 5"))
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
result1=executor.endProcess(asyncResult1)
Integer result1 = executor.endProcess(asyncResult1);
result2=executor.endProcess(asyncResult2)
String result2 = executor.endProcess(asyncResult2);
result3=executor.endProcess(asyncResult3)
Long result3 = executor.endProcess(asyncResult3);
CompletableResult<T> result = new CompletableResult<>(callback);
String[] args = {};
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null)
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(null,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
exception=optionalException.get()
final Exception exception = optionalException.get();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null,null)
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());
FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());
SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());
String[] args = {};
excalibur=spy(new Excalibur())
final Excalibur excalibur = spy(new Excalibur());
final BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(excalibur);
mjollnir=spy(new Mjollnir())
final Mjollnir mjollnir = spy(new Mjollnir());
final FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(mjollnir);
stormbringer=spy(new Stormbringer())
final Stormbringer stormbringer = spy(new Stormbringer());
final SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(stormbringer);
mage=new HeroBuilder(Profession.MAGE,"Riobard").withHairColor(HairColor.BLACK).withWeapon(Weapon.DAGGER).build()
Hero mage =
        new HeroBuilder(Profession.MAGE, "Riobard").withHairColor(HairColor.BLACK)
            .withWeapon(Weapon.DAGGER).build();
warrior=new HeroBuilder(Profession.WARRIOR,"Amberjill").withHairColor(HairColor.BLOND).withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).build()
Hero warrior =
        new HeroBuilder(Profession.WARRIOR, "Amberjill").withHairColor(HairColor.BLOND)
            .withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD)
            .build();
thief=new HeroBuilder(Profession.THIEF,"Desmond").withHairType(HairType.BALD).withWeapon(Weapon.BOW).build()
Hero thief =
        new HeroBuilder(Profession.THIEF, "Desmond").withHairType(HairType.BALD)
            .withWeapon(Weapon.BOW).build();
StringBuilder sb = new StringBuilder();
String[] args = {};
final String heroName = "Sir Lancelot";
hero=new Hero.HeroBuilder(Profession.WARRIOR,heroName).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).withHairType(HairType.LONG_CURLY).withHairColor(HairColor.BLOND).build()
final Hero hero = new Hero.HeroBuilder(Profession.WARRIOR, heroName)
        .withArmor(Armor.CHAIN_MAIL)
        .withWeapon(Weapon.SWORD)
        .withHairType(HairType.LONG_CURLY)
        .withHairColor(HairColor.BLOND)
        .build();
BusinessDelegate businessDelegate = new BusinessDelegate();
BusinessLookup businessLookup = new BusinessLookup();
Client client = new Client(businessDelegate);
String[] args = {};
Client client = new Client(businessDelegate);
App app = new App();
UserAccount userAccount1 = new UserAccount("001", "John", "He is a boy.");
UserAccount userAccount2 = new UserAccount("002", "Jane", "She is a girl.");
UserAccount userAccount3 = new UserAccount("003", "Adam", "He likes food.");
UserAccount userAccount4 = new UserAccount("004", "Rita", "She hates cats.");
UserAccount userAccount5 = new UserAccount("005", "Isaac", "He is allergic to mustard.");
UserAccount userAccount6 = new UserAccount("006", "Yasha", "She is an only child.");
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
StringBuilder sb = new StringBuilder();
iterable=db.getCollection("user_accounts").find(new Document("userID",userId))
FindIterable<Document> iterable =
        db.getCollection("user_accounts").find(new Document("userID", userId));
doc=iterable.first()
Document doc = iterable.first();
node=cache.get(userId)
Node node = cache.get(userId);
old=cache.get(userId)
Node old = cache.get(userId);
Node newNode = new Node(userId, userAccount);
toBeRemoved=cache.get(userId)
Node toBeRemoved = cache.get(userId);
ArrayList<UserAccount> listOfCacheData = new ArrayList<>();
Node temp = head;
String[] args = {};
Task task = new SimpleTask();
Callback callback = new Callback() {
      @Override
      public void call() {
        System.out.println("I'm done now.");
      }
    };
Task task = new SimpleTask();
Callback c = () -> System.out.println("I'm done now.");
    task.executeWith(c);
  
String[] args = {};
Callback callback = new Callback() {
      @Override
      public void call() {
        callingCount++;
      }
    };
Task task = new SimpleTask();
Callback callback = () -> callingCount++;

    Task task = new SimpleTask();

    assertEquals("Initial calling count of 0", new Integer(0), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called once", new Integer(1), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called twice", new Integer(2), callingCount);

  
OrcKing king = new OrcKing();
String[] args = {};
final OrcKing king = new OrcKing();
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
temp=target.getSize()
Size temp = target.getSize();
previousSpell=undoStack.pollLast()
Command previousSpell = undoStack.pollLast();
previousSpell=redoStack.pollLast()
Command previousSpell = redoStack.pollLast();
String[] args = {};
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
orcMessage=new Messenger().messageFromOrcs()
LetterComposite orcMessage = new Messenger().messageFromOrcs();
elfMessage=new Messenger().messageFromElves()
LetterComposite elfMessage = new Messenger().messageFromElves();
List<Word> words = new ArrayList<>();
List<Word> words = new ArrayList<>();
String[] args = {};
final Messenger messenger = new Messenger();
final Messenger messenger = new Messenger();
words=message.split(" ")
final String[] words = message.split(" ");
final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());
final Customer customer = new Customer(4, "Dan", "Danson");
final Customer customer1 = new Customer(1, "Adam", "Adamson");
final Customer customer2 = new Customer(2, "Bob", "Bobson");
final Customer customer3 = new Customer(3, "Carl", "Carlson");
final List<Customer> customers = new ArrayList<>();
boolean isEqual = false;
final Customer customer = (Customer) o;
Customer customer = null;
index=getAllCustomers().indexOf(customer)
final int index = getAllCustomers().indexOf(customer);
String[] args = {};
final Customer nonExistingCustomer = new Customer(2, "Robert", "Englund");
final String newFirstname = "Bernard";
final String newLastname = "Montgomery";
final Customer customer = new Customer(CUSTOMER.getId(), newFirstname, newLastname);
cust=impl.getCustomerById(CUSTOMER.getId())
final Customer cust = impl.getCustomerById(CUSTOMER.getId());
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final String newFirstname = "Douglas";
final String newLastname = "MacArthur";
final Customer customer = new Customer(nonExistingId, newFirstname, newLastname);
existingCustomer=impl.getCustomerById(CUSTOMER.getId())
final Customer existingCustomer = impl.getCustomerById(CUSTOMER.getId());
final Customer newCustomer = new Customer(3, "George", "Patton");
final Customer newCustomer = new Customer(3, "George", "Patton");
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final int newId = 2;
final String newFirstname = "Bill";
final String newLastname = "Clinton";
final int newId = 2;
final Customer otherCustomer = new Customer(newId, FIRSTNAME, LASTNAME);
final Customer otherCustomer = new Customer(ID, FIRSTNAME, LASTNAME);
final StringBuffer buffer = new StringBuffer();
Hostile troll = new Troll();
Hostile smart = new SmartHostile(troll);
String[] args = {};
simpleTroll=spy(new Troll())
final Hostile simpleTroll = spy(new Troll());
final Hostile smartTroll = new SmartHostile(simpleTroll);
final Troll troll = new Troll();
PrinterController hpPrinterController = new PrinterController(new HpPrinter());
PrinterController canonPrinterController = new PrinterController(new CanonPrinter());
PrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());
String[] args = {};
PrinterController printerController = new PrinterController(new CanonPrinter());
PrinterController printerController = new PrinterController(new HpPrinter());
PrinterController printerController = new PrinterController(new EpsonPrinter());
SimpleWizard simpleWizard = new SimpleWizard();
AdvancedWizard advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());
injector=Guice.createInjector(new TobaccoModule())
Injector injector = Guice.createInjector(new TobaccoModule());
guiceWizard=injector.getInstance(GuiceWizard.class)
GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final AdvancedWizard advancedWizard = new AdvancedWizard(tobacco);
String[] args = {};
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final GuiceWizard guiceWizard = new GuiceWizard(tobacco);
@SuppressWarnings("unchecked")
    final Class<? extends Tobacco>[] tobaccos = new Class[]{
        OldTobyTobacco.class, RivendellTobacco.class, SecondBreakfastTobacco.class
    };
injector=Guice.createInjector(new AbstractModule(){
  @Override protected void configure(){
    bind(Tobacco.class).to(tobaccoClass);
  }
}
)
final Injector injector = Guice.createInjector(new AbstractModule() {
        @Override
        protected void configure() {
          bind(Tobacco.class).to(tobaccoClass);
        }
      });
guiceWizard=injector.getInstance(GuiceWizard.class)
final GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final SimpleWizard simpleWizard = new SimpleWizard();
final Inventory inventory = new Inventory(1000);
executorService=Executors.newFixedThreadPool(3)
ExecutorService executorService = Executors.newFixedThreadPool(3);
String[] args = {};
final Inventory inventory = new Inventory(INVENTORY_SIZE);
executorService=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);
items=inventory.getItems()
final List<Item> items = inventory.getItems();
final List<Item> items = inventory.getItems();
stdOutCaptor=ArgumentCaptor.forClass(String.class)
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
values=stdOutCaptor.getAllValues()
final List<String> values = stdOutCaptor.getAllValues();
final List<String> values = stdOutCaptor.getAllValues();
List<GameObject> objects = new ArrayList<>();
String[] args = {};
tested=getTestedObject()
final O tested = getTestedObject();
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectTargetOnFire 
        ? "Expected [" + targetName + "] to be on fire after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be on fire after colliding with [" + otherName + "] but it was!";
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectedDamage
        ? "Expected [" + targetName + "] to be damaged after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be damaged after colliding with [" + otherName + "] but it was!";
final FlamingAsteroid asteroid = new FlamingAsteroid(1, 2, 3, 4);
final Meteoroid meteoroid = new Meteoroid(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final SpaceStationIss iss = new SpaceStationIss(1, 2, 3, 4);
final SpaceStationMir mir = new SpaceStationMir(1, 2, 3, 4);
KingJoffrey kingJoffrey = new KingJoffrey();
KingsHand kingsHand = new KingsHand(kingJoffrey);
List<EventEmitter> emitters = new ArrayList<>();
String[] args = {};
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithoutDefaultObserver.get()
final E emitter = this.factoryWithoutDefaultObserver.get();
defaultObserver=mock(EventObserver.class)
final EventObserver defaultObserver = mock(EventObserver.class);
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithDefaultObserver.apply(defaultObserver)
final E emitter = this.factoryWithDefaultObserver.apply(defaultObserver);
toString=event.toString()
final String toString = event.toString();
final KingJoffrey kingJoffrey = new KingJoffrey();
final String expectedMessage = "Received event from the King's Hand: " + event.toString();
observer=mock(EventObserver.class)
final EventObserver observer = mock(EventObserver.class);
final KingsHand kingsHand = new KingsHand(observer);
toString=weekday.toString()
final String toString = weekday.toString();
EventDispatcher dispatcher = new EventDispatcher();
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = (UserCreatedEvent) message;
UserUpdatedEvent userUpdatedEvent = (UserUpdatedEvent) message;
String[] args = {};
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
dispatcher=spy(new EventDispatcher())
EventDispatcher dispatcher = spy(new EventDispatcher());
userCreatedEventHandler=spy(new UserCreatedEventHandler())
UserCreatedEventHandler userCreatedEventHandler = spy(new UserCreatedEventHandler());
userUpdatedEventHandler=spy(new UserUpdatedEventHandler())
UserUpdatedEventHandler userUpdatedEventHandler = spy(new UserUpdatedEventHandler());
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
UserUpdatedEvent userUpdatedEvent = new UserUpdatedEvent(user);
FileWriter writer = new FileWriter(filename);
String[] args = {};
File file = new File("testfile.txt");
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
final File nonExistingFile = new File(this.testFolder.getRoot(), "non-existing-file");
final String testMessage = "Test message";
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
DwarvenGoldmineFacade facade = new DwarvenGoldmineFacade();
String[] args = {};
final DwarvenGoldmineFacade goldMine = new DwarvenGoldmineFacade();
WeaponFactory factory = WeaponFactory.factory(builder -> {
      builder.add(WeaponType.SWORD, Sword::new);
      builder.add(WeaponType.AXE, Axe::new);
      builder.add(WeaponType.SPEAR, Spear::new);
      builder.add(WeaponType.BOW, Bow::new);
    });
    Weapon axe = factory.create(WeaponType.AXE);
    System.out.println(axe);
  
HashMap<WeaponType, Supplier<Weapon>> map = new HashMap<>();
String[] args = {};
weapon=factory.create(WeaponType.SPEAR)
Weapon weapon = factory.create(WeaponType.SPEAR);
weapon=factory.create(WeaponType.AXE)
Weapon weapon = factory.create(WeaponType.AXE);
weapon=factory.create(WeaponType.SWORD)
Weapon weapon = factory.create(WeaponType.SWORD);
App app = new App(new OrcBlacksmith());
Weapon weapon;
String[] args = {};
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.AXE)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.AXE);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties turnedOff = new Properties();
Service turnedOffService = new PropertiesFeatureToggleVersion(turnedOff);
welcomeMessageturnedOff=turnedOffService.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessageturnedOff = turnedOffService.getWelcomeMessage(new User("Jamie No Code"));
final User paidUser = new User("Jamie Coder");
final User freeUser = new User("Alan Defect");
welcomeMessagePaidUser=service.getWelcomeMessage(paidUser)
final String welcomeMessagePaidUser = service.getWelcomeMessage(paidUser);
welcomeMessageFreeUser=service.getWelcomeMessage(freeUser)
final String welcomeMessageFreeUser = service.getWelcomeMessage(freeUser);
final Properties properties = new Properties();
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
welcomeMessage=service.getWelcomeMessage(paidUser)
final String welcomeMessage = service.getWelcomeMessage(paidUser);
final String expected = "You're amazing Jamie Coder. Thanks for paying for this awesome software.";
welcomeMessage=service.getWelcomeMessage(freeUser)
final String welcomeMessage = service.getWelcomeMessage(freeUser);
final String expected = "I suppose you can use this software.";
User user = new User("Free User");
User user = new User("Paid User");
User user = new User("Paid User");
User user = new User("Free User");
List<Integer> integerList = new ArrayList<>();
firstFiveNegatives=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList()
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
lastTwoPositives=SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList()
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
transformedList=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString()).asList()
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
lastTwoOfFirstFourStringMapped=LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2).map(number-- > "String[" + valueOf(number) + "]").asList()
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
StringJoiner joiner = new StringJoiner(delimiter, prefix, ".");
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
ArrayList<E> copy = new ArrayList<>();
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
final E result = next;
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=last(1).iterator()
Iterator<E> resultIterator = last(1).iterator();
Iterator<E> resultIterator = last(1).iterator();
E candidate = null;
newIterator=iterable.iterator()
Iterator<E> newIterator = iterable.iterator();
candidate=oldTypeIterator.next()
E candidate = oldTypeIterator.next();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
nextElement=iterator.next()
E nextElement = iterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentCount = 0;
list=last(1).asList()
List<E> list = last(1).asList();
List<E> list = last(1).asList();
remainingElementsCount=getRemainingElementsCount()
int remainingElementsCount = getRemainingElementsCount();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentIndex = 0;
List<T> temporaryList = new ArrayList<>();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
copy=FluentIterable.copyToList(iterable)
List<E> copy = FluentIterable.copyToList(iterable);
List<E> copy = FluentIterable.copyToList(iterable);
int counter = 0;
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
List<E> copy = new ArrayList<>();
String[] args = {};
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
evenItems=createFluentIterable(integers).filter(i-- > i % 2 == 0).asList()
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
longs=createFluentIterable(integers).map(Integer).asList()
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
consumer=mock(Consumer.class)
final Consumer<Integer> consumer = mock(Consumer.class);
final Consumer<Integer> consumer = mock(Consumer.class);
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
split=createFluentIterable(integers).spliterator()
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
MenuStore menuStore = new MenuStore();
ContentStore contentStore = new ContentStore();
MenuView menuView = new MenuView();
ContentView contentView = new ContentView();
ContentAction contentAction = (ContentAction) action;
MenuAction menuAction = (MenuAction) action;
ContentStore contentStore = (ContentStore) store;
MenuStore menuStore = (MenuStore) store;
toString=content.toString()
final String toString = content.toString();
toString=menuItem.toString()
final String toString = menuItem.toString();
String[] args = {};
final Constructor<Dispatcher> constructor;
final Constructor<Dispatcher> constructor;
field=Dispatcher.class.getDeclaredField("instance")
final Field field = Dispatcher.class.getDeclaredField("instance");
dispatcher=Dispatcher.getInstance()
final Dispatcher dispatcher = Dispatcher.getInstance();
store=mock(Store.class)
final Store store = mock(Store.class);
actionCaptor=ArgumentCaptor.forClass(Action.class)
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
actions=actionCaptor.getAllValues()
final List<Action> actions = actionCaptor.getAllValues();
final List<Action> actions = actionCaptor.getAllValues();
menuActions=actions.stream().filter(a-- > a.getType().equals(ActionType.MENU_ITEM_SELECTED)).map(a-- > (MenuAction)a).collect(Collectors.toList())
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
contentActions=actions.stream().filter(a-- > a.getType().equals(ActionType.CONTENT_CHANGED)).map(a-- > (ContentAction)a).collect(Collectors.toList())
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final ContentStore contentStore = new ContentStore();
view=mock(View.class)
final View view = mock(View.class);
final MenuStore menuStore = new MenuStore();
view=mock(View.class)
final View view = mock(View.class);
store=mock(ContentStore.class)
final ContentStore store = mock(ContentStore.class);
final ContentView view = new ContentView();
store=mock(MenuStore.class)
final MenuStore store = mock(MenuStore.class);
final MenuView view = new MenuView();
store=mock(Store.class)
final Store store = mock(Store.class);
final MenuView view = new MenuView();
PotionFactory factory = new PotionFactory();
AlchemistShop alchemistShop = new AlchemistShop();
potion=potions.get(type)
Potion potion = potions.get(type);
final AlchemistShop shop = new AlchemistShop();
bottomShelf=shop.getBottomShelf()
final List<Potion> bottomShelf = shop.getBottomShelf();
final List<Potion> bottomShelf = shop.getBottomShelf();
topShelf=shop.getTopShelf()
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> allPotions = new ArrayList<>();
String[] args = {};
FrontController controller = new FrontController();
command=getCommand(request)
Command command = getCommand(request);
commandClass=getCommandClass(request)
Class commandClass = getCommandClass(request);
Class result;
final Exception cause = new Exception();
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final FrontController frontController = new FrontController();
final List<Object[]> parameters = new ArrayList<>();
final List<Object[]> parameters = new ArrayList<>();
AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final Object result = new Object();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IOException exception = new IOException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IllegalStateException exception = new IllegalStateException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
Filter last = this;
String result = super.execute(order);
FilterManager filterManager = new FilterManager();
Client client = new Client();
JPanel panel = new JPanel();
Order order =
            new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),
                jtFields[2].getText(), jtAreas[1].getText());
rootPane=SwingUtilities.getRootPane(processButton)
JRootPane rootPane = SwingUtilities.getRootPane(processButton);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
JPanel bot = new JPanel();
rootPane=SwingUtilities.getRootPane(del)
JRootPane rootPane = SwingUtilities.getRootPane(del);
temp=jt.getSelectedRow()
int temp = jt.getSelectedRow();
temp2=jt.getSelectedRowCount()
int temp2 = jt.getSelectedRowCount();
String[] args = {};
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
filter=mock(Filter.class)
final Filter filter = mock(Filter.class);
order=mock(Order.class)
final Order order = mock(Order.class);
final List<Object[]> testData = new ArrayList<>();
result=this.filter.execute(this.order)
final String result = this.filter.execute(this.order);
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
String tokenString = "4 3 2 - 1 + *";
Stack<Expression> stack = new Stack<>();
tokenList=tokenString.split(" ")
String[] tokenList = tokenString.split(" ");
rightExpression=stack.pop()
Expression rightExpression = stack.pop();
leftExpression=stack.pop()
Expression leftExpression = stack.pop();
operator=getOperatorInstance(s,leftExpression,rightExpression)
Expression operator = getOperatorInstance(s, leftExpression, rightExpression);
result=operator.interpret()
int result = operator.interpret();
NumberExpression resultExpression = new NumberExpression(result);
Expression i = new NumberExpression(s);
String[] args = {};
final List<Object[]> testData = new ArrayList<>();
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expectedValue=getFirst().interpret()
final int expectedValue = getFirst().interpret();
testStingValue=String.valueOf(expectedValue)
final String testStingValue = String.valueOf(expectedValue);
final NumberExpression numberExpression = new NumberExpression(testStingValue);
TreasureChest chest = new TreasureChest();
ringIterator=chest.iterator(ItemType.RING)
ItemIterator ringIterator = chest.iterator(ItemType.RING);
potionIterator=chest.iterator(ItemType.POTION)
ItemIterator potionIterator = chest.iterator(ItemType.POTION);
weaponIterator=chest.iterator(ItemType.WEAPON)
ItemIterator weaponIterator = chest.iterator(ItemType.WEAPON);
it=chest.iterator(ItemType.ANY)
ItemIterator it = chest.iterator(ItemType.ANY);
ArrayList<Item> list = new ArrayList<>();
items=chest.getItems()
List<Item> items = chest.getItems();
List<Item> items = chest.getItems();
boolean found = false;
int tempIdx = idx;
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final TreasureChest chest = new TreasureChest();
iterator=chest.iterator(expectedItem.getType())
final ItemIterator iterator = chest.iterator(expectedItem.getType());
item=iterator.next()
final Item item = iterator.next();
name=item.toString()
final String name = item.toString();
final TreasureChest chest = new TreasureChest();
items=chest.getItems()
final List<Item> items = chest.getItems();
final List<Item> items = chest.getItems();
final boolean sameType = this.expectedItem.getType() == item.getType();
sameName=this.expectedItem.toString().equals(item.toString())
final boolean sameName = this.expectedItem.toString().equals(item.toString());
CakeViewImpl cakeView = new CakeViewImpl(cakeBakingService);
CakeInfo cake1 =
        new CakeInfo(new CakeToppingInfo("candies", 0), Arrays.asList(new CakeLayerInfo(
            "chocolate", 0), new CakeLayerInfo("banana", 0), new CakeLayerInfo("strawberry", 0)));
CakeInfo cake2 =
        new CakeInfo(new CakeToppingInfo("cherry", 0), Arrays.asList(
            new CakeLayerInfo("vanilla", 0), new CakeLayerInfo("lemon", 0), new CakeLayerInfo(
                "strawberry", 0)));
allToppings=getAvailableToppingEntities()
List<CakeTopping> allToppings = getAvailableToppingEntities();
List<CakeTopping> allToppings = getAvailableToppingEntities();
matchingToppings=allToppings.stream().filter((t)-- > t.getName().equals(cakeInfo.cakeToppingInfo.name)).collect(Collectors.toList())
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
allLayers=getAvailableLayerEntities()
List<CakeLayer> allLayers = getAvailableLayerEntities();
List<CakeLayer> allLayers = getAvailableLayerEntities();
Set<CakeLayer> foundLayers = new HashSet<>();
found=allLayers.stream().filter((layer)-- > layer.getName().equals(info.name)).findFirst()
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
toppingBean=context.getBean(CakeToppingDao.class)
CakeToppingDao toppingBean = context.getBean(CakeToppingDao.class);
topping=toppingBean.findOne(matchingToppings.iterator().next().getId())
CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().getId());
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
Cake cake = new Cake();
layerBean=context.getBean(CakeLayerDao.class)
CakeLayerDao layerBean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeTopping> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
topping=iterator.next()
CakeTopping topping = iterator.next();
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeToppingInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
next=iterator.next()
CakeTopping next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayer> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayerInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
List<CakeInfo> result = new ArrayList<>();
iterator=cakeBean.findAll().iterator()
Iterator<Cake> iterator = cakeBean.findAll().iterator();
Iterator<Cake> iterator = cakeBean.findAll().iterator();
cake=iterator.next()
Cake cake = iterator.next();
CakeToppingInfo cakeToppingInfo =
          new CakeToppingInfo(cake.getTopping().getId(), cake.getTopping().getName(), cake
              .getTopping().getCalories());
ArrayList<CakeLayerInfo> cakeLayerInfos = new ArrayList<>();
CakeInfo cakeInfo = new CakeInfo(cake.getId(), cakeToppingInfo, cakeLayerInfos);
int total = cakeToppingInfo != null ? cakeToppingInfo.calories : 0;
String[] args = {};
final CakeBakingException exception = new CakeBakingException();
final String expectedMessage = "message";
final CakeBakingException exception = new CakeBakingException(expectedMessage);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialLayers=service.getAvailableLayers()
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
availableLayers=service.getAvailableLayers()
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialToppings=service.getAvailableToppings()
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
availableToppings=service.getAvailableToppings()
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeLayerInfo layer3 = new CakeLayerInfo("Layer3", 2000);
allCakes=service.getAllCakes()
final List<CakeInfo> allCakes = service.getAllCakes();
final List<CakeInfo> allCakes = service.getAllCakes();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeToppingInfo missingTopping = new CakeToppingInfo("Topping1", 1000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo missingLayer = new CakeLayerInfo("Layer2", 2000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final Cake cake = new Cake();
expectedId=Long.valueOf(1234L)
final Long expectedId = Long.valueOf(1234L);
final Cake cake = new Cake();
final CakeTopping expectedTopping = new CakeTopping("DummyTopping", 1000);
final Cake cake = new Cake();
final Set<CakeLayer> expectedLayers = new HashSet<>();
final Cake cake = new Cake();
final Set<CakeLayer> initialLayers = new HashSet<>();
final CakeLayer newLayer = new CakeLayer("layer3", 3000);
final Set<CakeLayer> expectedLayers = new HashSet<>();
final CakeTopping topping = new CakeTopping("topping", 20);
final CakeLayer layer = new CakeLayer("layer", 100);
final Cake cake = new Cake();
final String expected = "id=1234 topping=id=2345 name=topping calories=20 " 
            + "layers=[id=3456 name=layer calories=100]";
final List<CakeLayerInfo> layers = new ArrayList<>();
final List<CakeInfo> cakes = new ArrayList<>();
final CakeInfo cake = new CakeInfo(new CakeToppingInfo("topping", 1000), layers);
bakingService=mock(CakeBakingService.class)
final CakeBakingService bakingService = mock(CakeBakingService.class);
final CakeViewImpl cakeView = new CakeViewImpl(bakingService);
HolderNaive holderNaive = new HolderNaive();
heavy=holderNaive.getHeavy()
Heavy heavy = holderNaive.getHeavy();
HolderThreadSafe holderThreadSafe = new HolderThreadSafe();
another=holderThreadSafe.getHeavy()
Heavy another = holderThreadSafe.getHeavy();
Java8Holder java8Holder = new Java8Holder();
next=java8Holder.getHeavy()
Heavy next = java8Holder.getHeavy();
String[] args = {};
holderField=HolderNaive.class.getDeclaredField("heavy")
final Field holderField = HolderNaive.class.getDeclaredField("heavy");
holderField=HolderThreadSafe.class.getDeclaredField("heavy")
final Field holderField = HolderThreadSafe.class.getDeclaredField("heavy");
holderField=Java8Holder.class.getDeclaredField("heavy")
final Field holderField = Java8Holder.class.getDeclaredField("heavy");
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
supplierClass=supplier.getClass()
final Class<? extends Supplier> supplierClass = supplier.getClass();
final Class<? extends Supplier> supplierClass = supplier.getClass();
instanceField=supplierClass.getDeclaredField("heavyInstance")
final Field instanceField = supplierClass.getDeclaredField("heavyInstance");
Party party = new PartyImpl();
Hobbit hobbit = new Hobbit();
Wizard wizard = new Wizard();
Rogue rogue = new Rogue();
Hunter hunter = new Hunter();
String[] args = {};
partyMember1=mock(PartyMember.class)
final PartyMember partyMember1 = mock(PartyMember.class);
partyMember2=mock(PartyMember.class)
final PartyMember partyMember2 = mock(PartyMember.class);
final PartyImpl party = new PartyImpl();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
party=mock(Party.class)
final Party party = mock(Party.class);
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
memberClass=member.getClass()
final Class<? extends PartyMember> memberClass = member.getClass();
final Class<? extends PartyMember> memberClass = member.getClass();
Stack<StarMemento> states = new Stack<>();
Star star = new Star(StarType.SUN, 10000000, 500000);
StarMementoInternal state = new StarMementoInternal();
StarMementoInternal state = (StarMementoInternal) memento;
String[] args = {};
final Star star = new Star(StarType.SUN, 1, 2);
final Star star = new Star(StarType.SUN, 1, 2);
firstMemento=star.getMemento()
final StarMemento firstMemento = star.getMemento();
secondMemento=star.getMemento()
final StarMemento secondMemento = star.getMemento();
thirdMemento=star.getMemento()
final StarMemento thirdMemento = star.getMemento();
CamelContext context = new DefaultCamelContext();
String[] args = {};
GiantModel giant = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
GiantView view = new GiantView();
GiantController controller = new GiantController(giant, view);
String[] args = {};
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantView view = new GiantView();
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
FileLoader loader = new FileLoader();
FileSelectorJFrame jFrame = new FileSelectorJFrame();
FileSelectorPresenter presenter = new FileSelectorPresenter(jFrame);
BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)));
StringBuilder sb = new StringBuilder();
String line;
JScrollPane pane = new JScrollPane(area);
data=loader.loadData()
String data = loader.loadData();
String[] args = {};
final FileLoader fileLoader = new FileLoader();
String expectedFile = "Stamatis";
User user = new User("user", 24, Sex.FEMALE, "foobar.com");
IllegalStateException e = new IllegalStateException();
String[] args = {};
User tom = new User(null, 21, Sex.MALE, "tom@foo.bar");
User john = new User("John", 17, Sex.MALE, "john@qwe.bar");
User sarah = new User("Sarah", 42, Sex.FEMALE, "sarah@det.org");
validated=Validator.of(sarah).validate(getName,Objects,"name cannot be null").validate(User,age-- > age > 21,"user is underaged").validate(User,sex-- > sex == Sex.FEMALE,"user is not female").validate(User,email-- > email.contains("@"),"email does not contain @ sign").get()
User validated = Validator.of(sarah).validate(User::getName, Objects::nonNull, "name cannot be null")
        .validate(User::getAge, age -> age > 21, "user is underaged")
        .validate(User::getSex, sex -> sex == Sex.FEMALE, "user is not female")
        .validate(User::getEmail, email -> email.contains("@"), "email does not contain @ sign")
        .get();
LoadBalancer loadBalancer1 = new LoadBalancer();
LoadBalancer loadBalancer2 = new LoadBalancer();
server=servers.get(lastServedId++)
Server server = servers.get(lastServedId++);
String[] args = {};
final LoadBalancer firstBalancer = new LoadBalancer();
final LoadBalancer secondBalancer = new LoadBalancer();
server=mock(Server.class)
final Server server = mock(Server.class);
final LoadBalancer loadBalancer = new LoadBalancer();
final Request request = new Request("test");
String[] args = {};
nazgul=Nazgul.getInstance(name)
final Nazgul nazgul = Nazgul.getInstance(name);
obj=container.newTransientInstance(SimpleObject.class)
final SimpleObject obj = container.newTransientInstance(SimpleObject.class);
final SimpleObject simpleObject = new SimpleObject();
seq=context.sequence("create")
final Sequence seq = context.sequence("create");
obj=simpleObjects.create("Foobar")
final SimpleObject obj = simpleObjects.create("Foobar");
all=Lists.newArrayList()
final List<SimpleObject> all = Lists.newArrayList();
list=simpleObjects.listAll()
final List<SimpleObject> list = simpleObjects.listAll();
final List<SimpleObject> list = simpleObjects.listAll();
String name = "Foobar";
paramName=checkParam("name",ec,String.class)
String paramName = checkParam("name", ec, String.class);
paramNumber=defaultParam("number",ec,3)
final int paramNumber = defaultParam("number", ec, 3);
fs=new SimpleObjectCreate().setName(names.get(i))
final SimpleObjectCreate fs = new SimpleObjectCreate().setName(names.get(i));
isft=IsisSystemForTest.getElseNull()
IsisSystemForTest isft = IsisSystemForTest.getElseNull();
final IsisConfigurationForJdoIntegTests testConfiguration =
          new IsisConfigurationForJdoIntegTests();
findAll=service(SimpleObjects.class).listAll()
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
title=container.titleOf(simpleObjectWrapped)
final String title = container.titleOf(simpleObjectWrapped);
RecreateSimpleObjects fs = new RecreateSimpleObjects();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
simpleObject=wrap(all.get(0))
SimpleObject simpleObject = wrap(all.get(0));
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
causalChain=Throwables.getCausalChain(item)
final List<Throwable> causalChain = Throwables.getCausalChain(item);
final List<Throwable> causalChain = Throwables.getCausalChain(item);
settings=Bootstrap.getSettings()
IBootstrapSettings settings = Bootstrap.getSettings();
final AuthenticatedWebSessionForIsis s =
        (AuthenticatedWebSessionForIsis) super.newSession(request, response);
requestParameters=request.getRequestParameters()
IRequestParameters requestParameters = request.getRequestParameters();
user=requestParameters.getParameterValue("user")
final org.apache.wicket.util.string.StringValue user =
        requestParameters.getParameterValue("user");
password=requestParameters.getParameterValue("pass")
final org.apache.wicket.util.string.StringValue password =
        requestParameters.getParameterValue("pass");
uname=servletRequest.getParameter("user")
String uname = servletRequest.getParameter("user");
final Module isisDefaults = super.newIsisWicketModule();
final Module overrides = new AbstractModule() {
      @Override
      protected void configure() {
        bind(String.class).annotatedWith(Names.named("applicationName")).toInstance("Simple App");
        bind(String.class).annotatedWith(Names.named("applicationCss")).toInstance(
            "css/application.css");
        bind(String.class).annotatedWith(Names.named("applicationJs")).toInstance(
            "scripts/application.js");
        bind(String.class).annotatedWith(Names.named("welcomeMessage")).toInstance(
            readLines(getClass(), "welcome.html"));
        bind(String.class).annotatedWith(Names.named("aboutMessage")).toInstance("Simple App");
        bind(InputStream.class).annotatedWith(Names.named("metaInfManifest")).toProvider(
            Providers.of(getServletContext().getResourceAsStream("/META-INF/MANIFEST.MF")));
      }
    };
readLines=Resources.readLines(Resources.getResource(contextClass,resourceName),Charset.defaultCharset())
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
Node root =
        new NodeImpl("1", new NodeImpl("11", new NodeImpl("111", NullNode.getInstance(),
            NullNode.getInstance()), NullNode.getInstance()), new NodeImpl("12",
            NullNode.getInstance(), new NodeImpl("122", NullNode.getInstance(),
                NullNode.getInstance())));
String[] args = {};
instance=NullNode.getInstance()
final NullNode instance = NullNode.getInstance();
node=NullNode.getInstance()
final NullNode node = NullNode.getInstance();
final NodeImpl level1B = new NodeImpl("level1_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2B = new NodeImpl("level2_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3A = new NodeImpl("level3_a", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3B = new NodeImpl("level3_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2A = new NodeImpl("level2_a", level3A, level3B);
final NodeImpl level1A = new NodeImpl("level1_a", level2A, level2B);
inOrder=Mockito.inOrder(getStdOutMock())
final InOrder inOrder = Mockito.inOrder(getStdOutMock());
level1=TREE_ROOT.getLeft()
final Node level1 = TREE_ROOT.getLeft();
level2=level1.getLeft()
final Node level2 = level1.getLeft();
level3=level2.getLeft()
final Node level3 = level2.getLeft();
level1=TREE_ROOT.getRight()
final Node level1 = TREE_ROOT.getRight();
OliphauntPool pool = new OliphauntPool();
oliphaunt1=pool.checkOut()
Oliphaunt oliphaunt1 = pool.checkOut();
oliphaunt2=pool.checkOut()
Oliphaunt oliphaunt2 = pool.checkOut();
oliphaunt3=pool.checkOut()
Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunt5=pool.checkOut()
Oliphaunt oliphaunt5 = pool.checkOut();
instance=available.iterator().next()
T instance = available.iterator().next();
String[] args = {};
final OliphauntPool pool = new OliphauntPool();
expectedOliphaunt=pool.checkOut()
final Oliphaunt expectedOliphaunt = pool.checkOut();
oliphaunt=pool.checkOut()
final Oliphaunt oliphaunt = pool.checkOut();
final OliphauntPool pool = new OliphauntPool();
firstOliphaunt=pool.checkOut()
final Oliphaunt firstOliphaunt = pool.checkOut();
secondOliphaunt=pool.checkOut()
final Oliphaunt secondOliphaunt = pool.checkOut();
oliphaunt3=pool.checkOut()
final Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
final Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunts=Arrays.asList(pool.checkOut(),pool.checkOut())
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
Weather weather = new Weather();
GWeather gWeather = new GWeather();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
String[] args = {};
final ArrayList<Object[]> testData = new ArrayList<>();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
observer=this.factory.get()
final O observer = this.factory.get();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
observer=this.factory.get()
final O observer = this.factory.get();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
MessageQueue queue = new SimpleMessageQueue(10000);
final Producer producer = new Producer("PRODUCER_1", queue);
final Consumer consumer = new Consumer("CONSUMER_1", queue);
Message msg;
sender=msg.getHeader(Headers.SENDER)
String sender = msg.getHeader(Headers.SENDER);
body=msg.getBody()
String body = msg.getBody();
Message msg = new SimpleMessage();
String[] args = {};
final Message[] messages = new Message[]{
        createMessage("you", "Hello!"),
        createMessage("me", "Hi!"),
        Message.POISON_PILL,
        createMessage("late_for_the_party", "Hello? Anyone here?"),
    };
final MessageQueue queue = new SimpleMessageQueue(messages.length);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final SimpleMessage msg = new SimpleMessage();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
messageCaptor=ArgumentCaptor.forClass(Message.class)
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
message=messageCaptor.getValue()
final Message message = messageCaptor.getValue();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
final SimpleMessage message = new SimpleMessage();
final String senderName = "test";
final SimpleMessage message = new SimpleMessage();
headers=message.getHeaders()
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
Stew stew = new Stew(1, 2, 3, 4);
ImmutableStew immutableStew = new ImmutableStew(2, 4, 3, 6);
String[] args = {};
final Stew stew = new Stew(1, 2, 3, 4);
final String message = "Mixing the stew we find: 1 potatoes, 2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Stew stew = new Stew(1, 2, 3, 4);
final ImmutableStew stew = new ImmutableStew(1, 2, 3, 4);
final String expectedMessage = "Mixing the immutable stew we find: 1 potatoes, "
        + "2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ItemQueue queue = new ItemQueue();
executorService=Executors.newFixedThreadPool(5)
ExecutorService executorService = Executors.newFixedThreadPool(5);
final Producer producer = new Producer("Producer_" + i, queue);
final Consumer consumer = new Consumer("Consumer_" + i, queue);
item=queue.take()
Item item = queue.take();
Item item = new Item(name, itemId++);
Random random = new Random();
String[] args = {};
queue=spy(new ItemQueue())
final ItemQueue queue = spy(new ItemQueue());
final Consumer consumer = new Consumer("consumer", queue);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
queue=mock(ItemQueue.class)
final ItemQueue queue = mock(ItemQueue.class);
final Producer producer = new Producer("producer", queue);
Prototype charProto = new Character();
Character mageProto = new Character(Type.MAGE, charProto);
Character warProto = new Character(Type.WARRIOR, charProto);
Character rogueProto = new Character(Type.ROGUE, charProto);
Character mag = new Character("Player_1", mageProto);
Character warrior = new Character("Player_2", warProto);
Character rogue = new Character("Player_3", rogueProto);
Character rogueDouble = new Character("Player_4", rogue);
containsValue=properties.containsKey(stat)
boolean containsValue = properties.containsKey(stat);
StringBuilder builder = new StringBuilder();
value=this.get(stat)
Integer value = this.get(stat);
String[] args = {};
final Character prototype = new Character();
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character mage = new Character(Type.MAGE, prototype);
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
HeroFactory factory;
Mage mage;
Warlord warlord;
Beast beast;
String[] args = {};
mage=mock(Mage.class)
final Mage mage = mock(Mage.class);
warlord=mock(Warlord.class)
final Warlord warlord = mock(Warlord.class);
beast=mock(Beast.class)
final Beast beast = mock(Beast.class);
final HeroFactoryImpl factory = new HeroFactoryImpl(mage, warlord, beast);
clone=this.testedPrototype.clone()
final Object clone = this.testedPrototype.clone();
WizardTowerProxy tower = new WizardTowerProxy();
String[] args = {};
final String[] wizardNames = {"Gandalf", "Dumbledore", "Oz", "Merlin"};
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTowerProxy tower = new WizardTowerProxy();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTower tower = new WizardTower();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
CamelContext context = new DefaultCamelContext();
template=context.createProducerTemplate()
ProducerTemplate template = context.createProducerTemplate();
String[] args = {};
LoggingHandler loggingHandler = new LoggingHandler();
NioServerSocketChannel channel = new NioServerSocketChannel(port, handler);
NioDatagramChannel channel = new NioDatagramChannel(port, handler);
AppClient appClient = new AppClient();
outputStream=socket.getOutputStream()
OutputStream outputStream = socket.getOutputStream();
PrintWriter writer = new PrintWriter(outputStream);
byte[] data = new byte[1024];
read=inputStream.read(data,0,data.length)
int read = inputStream.read(data, 0, data.length);
String message = clientName + " - Log request: " + i;
DatagramPacket request =
              new DatagramPacket(message.getBytes(), message.getBytes().length, remoteAddress);
byte[] data = new byte[1024];
DatagramPacket reply = new DatagramPacket(data, data.length);
DatagramPacket datagram = (DatagramPacket) readObject;
DatagramPacket replyPacket = new DatagramPacket(ByteBuffer.wrap(ACK));
buffer=ByteBuffer.wrap(ACK)
ByteBuffer buffer = ByteBuffer.wrap(ACK);
pendingWrites=channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
pendingWrite=pendingWrites.poll()
Object pendingWrite = pendingWrites.poll();
pendingWrites=this.channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
sender=((DatagramChannel)key.channel()).receive(buffer)
SocketAddress sender = ((DatagramChannel) key.channel()).receive(buffer);
DatagramPacket packet = new DatagramPacket(buffer);
DatagramPacket pendingPacket = (DatagramPacket) pendingWrite;
key=channel.getJavaChannel().register(selector,channel.getInterestedOps())
SelectionKey key = channel.getJavaChannel().register(selector, channel.getInterestedOps());
keys=selector.selectedKeys()
Set<SelectionKey> keys = selector.selectedKeys();
Set<SelectionKey> keys = selector.selectedKeys();
iterator=keys.iterator()
Iterator<SelectionKey> iterator = keys.iterator();
Iterator<SelectionKey> iterator = keys.iterator();
key=iterator.next()
SelectionKey key = iterator.next();
iterator=pendingCommands.iterator()
Iterator<Runnable> iterator = pendingCommands.iterator();
Iterator<Runnable> iterator = pendingCommands.iterator();
command=iterator.next()
Runnable command = iterator.next();
AbstractNioChannel channel = (AbstractNioChannel) key.attachment();
readObject=((AbstractNioChannel)key.attachment()).read(key)
Object readObject = ((AbstractNioChannel) key.attachment()).read(key);
ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();
socketChannel=serverSocketChannel.accept()
SocketChannel socketChannel = serverSocketChannel.accept();
readKey=socketChannel.register(selector,SelectionKey.OP_READ)
SelectionKey readKey = socketChannel.register(selector, SelectionKey.OP_READ);
SocketChannel socketChannel = (SocketChannel) key.channel();
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
read=socketChannel.read(buffer)
int read = socketChannel.read(buffer);
ByteBuffer pendingBuffer = (ByteBuffer) pendingWrite;
App app = new App(new ThreadPoolDispatcher(2));
AppClient client = new AppClient();
App app = new App(new SameThreadDispatcher());
AppClient client = new AppClient();
executeService=Executors.newFixedThreadPool(10)
ExecutorService executeService = Executors.newFixedThreadPool(10);
ReaderWriterLock lock = new ReaderWriterLock();
String[] args = {};
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
reader1=spy(new Reader("Reader 1",lock.readLock()))
Reader reader1 = spy(new Reader("Reader 1", lock.readLock()));
reader2=spy(new Reader("Reader 2",lock.readLock()))
Reader reader2 = spy(new Reader("Reader 2", lock.readLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
writer1=spy(new Writer("Writer 1",lock.writeLock()))
Writer writer1 = spy(new Writer("Writer 1", lock.writeLock()));
writer2=spy(new Writer("Writer 2",lock.writeLock()))
Writer writer2 = spy(new Writer("Writer 2", lock.writeLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
        "applicationContext.xml");
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
BasicDataSource basicDataSource = new BasicDataSource();
LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();
Properties properties = new Properties();
JpaTransactionManager transactionManager = new JpaTransactionManager();
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
        AppConfig.class);
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
final int prime = 31;
int result = 1;
Person other = (Person) obj;
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
resultSet=dataSource.getConnection().createStatement().executeQuery("SELECT 1")
ResultSet resultSet = dataSource.getConnection().createStatement().executeQuery("SELECT 1");
String result = null;
String expected = "1";
String[] args = {};
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
String[] args = {};
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
King k = new King();
Queen q = new Queen();
ArrayList<Royalty> guests = new ArrayList<>();
boolean anotherDay = true;
String[] args = {};
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
goodMoodRoyalty=mock(Royalty.class)
final Royalty goodMoodRoyalty = mock(Royalty.class);
badMoodRoyalty=mock(Royalty.class)
final Royalty badMoodRoyalty = mock(Royalty.class);
final ArrayList<Royalty> goodCompany = new ArrayList<>();
final ArrayList<Royalty> badCompany = new ArrayList<>();
Spell spell1 = new Spell("Ice dart");
Spell spell2 = new Spell("Invisibility");
Spell spell3 = new Spell("Stun bolt");
Spell spell4 = new Spell("Confusion");
Spell spell5 = new Spell("Darkness");
Spell spell6 = new Spell("Fireball");
Spell spell7 = new Spell("Enchant weapon");
Spell spell8 = new Spell("Rock armour");
Spell spell9 = new Spell("Light");
Spell spell10 = new Spell("Bee swarm");
Spell spell11 = new Spell("Haste");
Spell spell12 = new Spell("Levitation");
Spell spell13 = new Spell("Magic lock");
Spell spell14 = new Spell("Summon hell bat");
Spell spell15 = new Spell("Water walking");
Spell spell16 = new Spell("Magic storm");
Spell spell17 = new Spell("Entangle");
SpellDao spellDao = new SpellDaoImpl();
SpellbookDao spellbookDao = new SpellbookDaoImpl();
Spellbook spellbook1 = new Spellbook("Book of Orgymon");
Spellbook spellbook2 = new Spellbook("Book of Aras");
Spellbook spellbook3 = new Spellbook("Book of Kritior");
Spellbook spellbook4 = new Spellbook("Book of Tamaex");
Spellbook spellbook5 = new Spellbook("Book of Idores");
Spellbook spellbook6 = new Spellbook("Book of Opaen");
Spellbook spellbook7 = new Spellbook("Book of Kihione");
WizardDao wizardDao = new WizardDaoImpl();
Wizard wizard1 = new Wizard("Aderlard Boud");
Wizard wizard2 = new Wizard("Anaxis Bajraktari");
Wizard wizard3 = new Wizard("Xuban Munoa");
Wizard wizard4 = new Wizard("Blasius Dehooge");
MagicService service =
        new MagicServiceImpl(new WizardDaoImpl(), new SpellbookDaoImpl(), new SpellDaoImpl());
wizardsWithSpellbook=service.findWizardsWithSpellbook("Book of Idores")
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
wizardsWithSpell=service.findWizardsWithSpell("Fireball")
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
List<E> result = null;
List<E> result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
spellbook=spellbookDao.findByName(name)
Spellbook spellbook = spellbookDao.findByName(name);
spell=spellDao.findByName(name)
Spell spell = spellDao.findByName(name);
spellbook=spell.getSpellbook()
Spellbook spellbook = spell.getSpellbook();
session=getSession()
Session session = getSession();
Transaction tx = null;
Spell result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Spellbook result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Wizard result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
String[] args = {};
className=dao.persistentClass.getSimpleName()
final String className = dao.persistentClass.getSimpleName();
entityName=String.format("%s%d",className,ID_GENERATOR.incrementAndGet())
final String entityName = String.format("%s%d", className, ID_GENERATOR.incrementAndGet());
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
byId=this.dao.find(entity.getId())
final E byId = this.dao.find(entity.getId());
originalEntities=this.dao.findAll()
final List<E> originalEntities = this.dao.findAll();
final List<E> originalEntities = this.dao.findAll();
entitiesLeft=this.dao.findAll()
final List<E> entitiesLeft = this.dao.findAll();
final List<E> entitiesLeft = this.dao.findAll();
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
expectedId=Long.valueOf(1)
final Long expectedId = Long.valueOf(1);
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
final String expectedName = "new name";
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
final String bookname = "bookname";
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
final Set<Wizard> wizards = new HashSet<>();
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpellbook(bookname)
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final Set<Wizard> wizards = new HashSet<>();
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spell=mock(Spell.class)
final Spell spell = mock(Spell.class);
final String spellName = "spellname";
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpell(spellName)
final List<Wizard> result = service.findWizardsWithSpell(spellName);
final List<Wizard> result = service.findWizardsWithSpell(spellName);
dao=getDao()
final SpellDaoImpl dao = getDao();
allSpells=dao.findAll()
final List<Spell> allSpells = dao.findAll();
final List<Spell> allSpells = dao.findAll();
spellByName=dao.findByName(spell.getName())
final Spell spellByName = dao.findByName(spell.getName());
dao=getDao()
final SpellbookDaoImpl dao = getDao();
allBooks=dao.findAll()
final List<Spellbook> allBooks = dao.findAll();
final List<Spellbook> allBooks = dao.findAll();
spellByName=dao.findByName(book.getName())
final Spellbook spellByName = dao.findByName(book.getName());
dao=getDao()
final WizardDaoImpl dao = getDao();
allWizards=dao.findAll()
final List<Wizard> allWizards = dao.findAll();
final List<Wizard> allWizards = dao.findAll();
byName=dao.findByName(spell.getName())
final Wizard byName = dao.findByName(spell.getName());
service=ServiceLocator.getService("jndi/serviceA")
Service service = ServiceLocator.getService("jndi/serviceA");
Service cachedService = null;
serviceObj=serviceCache.getService(serviceJndiName)
Service serviceObj = serviceCache.getService(serviceJndiName);
InitContext ctx = new InitContext();
String[] args = {};
final String[] serviceNames = new String[]{
        "jndi/serviceA", "jndi/serviceB"
    };
service=ServiceLocator.getService(serviceName)
final Service service = ServiceLocator.getService(serviceName);
ivoryTower1=IvoryTower.getInstance()
IvoryTower ivoryTower1 = IvoryTower.getInstance();
ivoryTower2=IvoryTower.getInstance()
IvoryTower ivoryTower2 = IvoryTower.getInstance();
threadSafeIvoryTower1=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower1 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
threadSafeIvoryTower2=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower2 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
EnumIvoryTower enumIvoryTower1 = EnumIvoryTower.INSTANCE;
EnumIvoryTower enumIvoryTower2 = EnumIvoryTower.INSTANCE;
dcl1=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();
dcl2=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();
demandHolderIdiom=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom =
        InitializingOnDemandHolderIdiom.getInstance();
demandHolderIdiom2=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom2 =
        InitializingOnDemandHolderIdiom.getInstance();
ThreadSafeDoubleCheckLocking result = instance;
String[] args = {};
instance1=this.singletonInstanceMethod.get()
S instance1 = this.singletonInstanceMethod.get();
instance2=this.singletonInstanceMethod.get()
S instance2 = this.singletonInstanceMethod.get();
instance3=this.singletonInstanceMethod.get()
S instance3 = this.singletonInstanceMethod.get();
final List<Callable<S>> tasks = new ArrayList<>();
int i = 0
creatures=Arrays.asList(new Goblin(),new Octopus(),new Dragon(),new Shark(),new Troll(),new KillerBee())
List<Creature> creatures =
        Arrays.asList(new Goblin(), new Octopus(), new Dragon(), new Shark(), new Troll(),
            new KillerBee());
walkingCreatures=creatures.stream().filter(new MovementSelector(Movement.WALKING)).collect(Collectors.toList())
List<Creature> walkingCreatures =
        creatures.stream().filter(new MovementSelector(Movement.WALKING))
            .collect(Collectors.toList());
darkCreatures=creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList())
List<Creature> darkCreatures =
        creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList());
redAndFlyingCreatures=creatures.stream().filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING))).collect(Collectors.toList())
List<Creature> redAndFlyingCreatures =
        creatures.stream()
            .filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING)))
            .collect(Collectors.toList());
String[] args = {};
toString=this.testedCreature.toString()
final String toString = this.testedCreature.toString();
greenCreature=mock(Creature.class)
final Creature greenCreature = mock(Creature.class);
redCreature=mock(Creature.class)
final Creature redCreature = mock(Creature.class);
final ColorSelector greenSelector = new ColorSelector(Color.GREEN);
swimmingCreature=mock(Creature.class)
final Creature swimmingCreature = mock(Creature.class);
flyingCreature=mock(Creature.class)
final Creature flyingCreature = mock(Creature.class);
final MovementSelector swimmingSelector = new MovementSelector(Movement.SWIMMING);
normalCreature=mock(Creature.class)
final Creature normalCreature = mock(Creature.class);
smallCreature=mock(Creature.class)
final Creature smallCreature = mock(Creature.class);
final SizeSelector normalSelector = new SizeSelector(Size.NORMAL);
Mammoth mammoth = new Mammoth();
String[] args = {};
inOrder=Mockito.inOrder(this.stdOutMock)
final InOrder inOrder = Mockito.inOrder(this.stdOutMock);
final Mammoth mammoth = new Mammoth();
toString=new Mammoth().toString()
final String toString = new Mammoth().toString();
warrior=CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin").withWeapon("Sword").noAbilities().build()
Character warrior =
        CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin")
            .withWeapon("Sword").noAbilities().build();
mage=CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer").withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport").noMoreAbilities().build()
Character mage =
        CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer")
            .withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport")
            .noMoreAbilities().build();
thief=CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build()
Character thief =
        CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build();
StringBuilder sb = new StringBuilder();
Character character = new Character(name);
String[] args = {};
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").withAbility("invisibility").withAbility("wisdom").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .withAbility("invisibility")
        .withAbility("wisdom")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").noSpell().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .noSpell()
        .build();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .noAbilities()
        .build();
character=CharacterStepBuilder.newBuilder().name("Cuauhtemoc").fighterClass("aztec").withWeapon("spear").withAbility("speed").withAbility("strength").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Cuauhtemoc")
        .fighterClass("aztec")
        .withWeapon("spear")
        .withAbility("speed")
        .withAbility("strength")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Poor warrior").fighterClass("none").noWeapon().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Poor warrior")
        .fighterClass("none")
        .noWeapon()
        .build();
character=CharacterStepBuilder.newBuilder().name("Weak warrior").fighterClass("none").withWeapon("Slingshot").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Weak warrior")
        .fighterClass("none")
        .withWeapon("Slingshot")
        .noAbilities()
        .build();
DragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());
String[] args = {};
strategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy strategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(strategy);
initialStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy initialStrategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(initialStrategy);
newStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy newStrategy = mock(DragonSlayingStrategy.class);
HalflingThief thief = new HalflingThief(new HitAndRunMethod());
target=pickTarget()
String target = pickTarget();
String[] args = {};
method=mock(StealingMethod.class)
final StealingMethod method = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(method);
initialMethod=mock(StealingMethod.class)
final StealingMethod initialMethod = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(initialMethod);
newMethod=mock(StealingMethod.class)
final StealingMethod newMethod = mock(StealingMethod.class);
inOrder=inOrder(this.stdOutMock)
final InOrder inOrder = inOrder(this.stdOutMock);
List<Task> tasks = new ArrayList<>();
executor=Executors.newFixedThreadPool(3)
ExecutorService executor = Executors.newFixedThreadPool(3);
Runnable worker = new Worker(tasks.get(i));
String[] args = {};
service=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService service = Executors.newFixedThreadPool(THREAD_COUNT);
final List<Callable<Integer>> tasks = new ArrayList<>();
int i = 0
task=mock(Task.class)
final Task task = mock(Task.class);
final Worker worker = new Worker(task);
RainbowFish fishV1 = new RainbowFish("Zed", 10, 11, 12);
deserializedFishV1=RainbowFishSerializer.readV1("fish1.out")
RainbowFish deserializedFishV1 = RainbowFishSerializer.readV1("fish1.out");
RainbowFishV2 fishV2 = new RainbowFishV2("Scar", 5, 12, 15, true, true, true);
deserializedFishV2=RainbowFishSerializer.readV1("fish2.out")
RainbowFish deserializedFishV2 = RainbowFishSerializer.readV1("fish2.out");
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
FileInputStream fileIn = new FileInputStream(filename);
ObjectInputStream objIn = new ObjectInputStream(fileIn);
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
String[] args = {};
File file1 = new File("fish1.out");
File file2 = new File("fish2.out");
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
final RainbowFish fish = new RainbowFish("name", 1, 2, 3);
final RainbowFishV2 fish = new RainbowFishV2("name", 1, 2, 3, false, true, false);
BallItem ballItem = new BallItem();
BallThread ballThread = new BallThread();
String[] args = {};
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
inOrder=inOrder(ballThread)
final InOrder inOrder = inOrder(ballThread);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
exceptionHandler=mock(UncaughtExceptionHandler.class)
final UncaughtExceptionHandler exceptionHandler = mock(UncaughtExceptionHandler.class);
statA=HeroStat.valueOf(10,5,0)
HeroStat statA = HeroStat.valueOf(10, 5, 0);
statB=HeroStat.valueOf(10,5,0)
HeroStat statB = HeroStat.valueOf(10, 5, 0);
statC=HeroStat.valueOf(5,1,8)
HeroStat statC = HeroStat.valueOf(5, 1, 8);
final int prime = 31;
int result = 1;
HeroStat other = (HeroStat) obj;
String[] args = {};
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatC=HeroStat.valueOf(3,9,8)
HeroStat heroStatC = HeroStat.valueOf(3, 9, 8);
Commander commander =
        new Commander(new Sergeant(new Soldier(), new Soldier(), new Soldier()), new Sergeant(
            new Soldier(), new Soldier(), new Soldier()));
String[] args = {};
final Unit[] children = new Unit[5];
unit=this.factory.apply(children)
final U unit = this.factory.apply(children);
visitor=mock(UnitVisitor.class)
final UnitVisitor visitor = mock(UnitVisitor.class);

Diff of bc060309e3164e1dbe6775235ba14d5a2bd87d99 and a4637fcf99dabad0f13650f01d4a383eb3427f13:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 212
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 6
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision bc060309e3164e1dbe6775235ba14d5a2bd87d99 to a4637fcf99dabad0f13650f01d4a383eb3427f13


****Parsing for addition at revision a4637fcf99dabad0f13650f01d4a383eb3427f13****

Added App.java to .\/java-design-patterns\ repository source files.
Added Army.java to .\/java-design-patterns\ repository source files.
Added Castle.java to .\/java-design-patterns\ repository source files.
Added ElfArmy.java to .\/java-design-patterns\ repository source files.
Added ElfCastle.java to .\/java-design-patterns\ repository source files.
Added ElfKing.java to .\/java-design-patterns\ repository source files.
Added ElfKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added KingdomFactory.java to .\/java-design-patterns\ repository source files.
Added OrcArmy.java to .\/java-design-patterns\ repository source files.
Added OrcCastle.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added AbstractFactoryTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BattleFishingBoat.java to .\/java-design-patterns\ repository source files.
Added BattleShip.java to .\/java-design-patterns\ repository source files.
Added Captain.java to .\/java-design-patterns\ repository source files.
Added FishingBoat.java to .\/java-design-patterns\ repository source files.
Added AdapterPatternTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsyncCallback.java to .\/java-design-patterns\ repository source files.
Added AsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AsyncResult.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Excalibur.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added MagicWeapon.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Mjollnir.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Stormbringer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Armor.java to .\/java-design-patterns\ repository source files.
Added HairColor.java to .\/java-design-patterns\ repository source files.
Added HairType.java to .\/java-design-patterns\ repository source files.
Added Hero.java to .\/java-design-patterns\ repository source files.
Added Profession.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegate.java to .\/java-design-patterns\ repository source files.
Added BusinessLookup.java to .\/java-design-patterns\ repository source files.
Added BusinessService.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added EjbService.java to .\/java-design-patterns\ repository source files.
Added JmsService.java to .\/java-design-patterns\ repository source files.
Added ServiceType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegateTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppManager.java to .\/java-design-patterns\ repository source files.
Added CacheStore.java to .\/java-design-patterns\ repository source files.
Added CachingPolicy.java to .\/java-design-patterns\ repository source files.
Added DbManager.java to .\/java-design-patterns\ repository source files.
Added LruCache.java to .\/java-design-patterns\ repository source files.
Added UserAccount.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CachingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Callback.java to .\/java-design-patterns\ repository source files.
Added LambdasApp.java to .\/java-design-patterns\ repository source files.
Added SimpleTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CallbackTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added OrcCommander.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcOfficer.java to .\/java-design-patterns\ repository source files.
Added OrcSoldier.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added RequestHandler.java to .\/java-design-patterns\ repository source files.
Added RequestType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OrcKingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added InvisibilitySpell.java to .\/java-design-patterns\ repository source files.
Added ShrinkSpell.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added Visibility.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Letter.java to .\/java-design-patterns\ repository source files.
Added LetterComposite.java to .\/java-design-patterns\ repository source files.
Added Messenger.java to .\/java-design-patterns\ repository source files.
Added Sentence.java to .\/java-design-patterns\ repository source files.
Added Word.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MessengerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Customer.java to .\/java-design-patterns\ repository source files.
Added CustomerDao.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added CustomerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hostile.java to .\/java-design-patterns\ repository source files.
Added SmartHostile.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SmartHostileTest.java to .\/java-design-patterns\ repository source files.
Added TrollTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Printer.java to .\/java-design-patterns\ repository source files.
Added PrinterController.java to .\/java-design-patterns\ repository source files.
Added CanonPrinter.java to .\/java-design-patterns\ repository source files.
Added EpsonPrinter.java to .\/java-design-patterns\ repository source files.
Added HpPrinter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DelegateTest.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizard.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GuiceWizard.java to .\/java-design-patterns\ repository source files.
Added OldTobyTobacco.java to .\/java-design-patterns\ repository source files.
Added RivendellTobacco.java to .\/java-design-patterns\ repository source files.
Added SecondBreakfastTobacco.java to .\/java-design-patterns\ repository source files.
Added SimpleWizard.java to .\/java-design-patterns\ repository source files.
Added Tobacco.java to .\/java-design-patterns\ repository source files.
Added TobaccoModule.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizardTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GuiceWizardTest.java to .\/java-design-patterns\ repository source files.
Added SimpleWizardTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Inventory.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added InventoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroid.java to .\/java-design-patterns\ repository source files.
Added GameObject.java to .\/java-design-patterns\ repository source files.
Added Meteoroid.java to .\/java-design-patterns\ repository source files.
Added Rectangle.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIss.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMir.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CollisionTest.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroidTest.java to .\/java-design-patterns\ repository source files.
Added MeteoroidTest.java to .\/java-design-patterns\ repository source files.
Added RectangleTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIssTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMirTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added EventEmitter.java to .\/java-design-patterns\ repository source files.
Added EventObserver.java to .\/java-design-patterns\ repository source files.
Added KingJoffrey.java to .\/java-design-patterns\ repository source files.
Added KingsHand.java to .\/java-design-patterns\ repository source files.
Added LordBaelish.java to .\/java-design-patterns\ repository source files.
Added LordVarys.java to .\/java-design-patterns\ repository source files.
Added Scout.java to .\/java-design-patterns\ repository source files.
Added Weekday.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EventEmitterTest.java to .\/java-design-patterns\ repository source files.
Added EventTest.java to .\/java-design-patterns\ repository source files.
Added KingJoffreyTest.java to .\/java-design-patterns\ repository source files.
Added KingsHandTest.java to .\/java-design-patterns\ repository source files.
Added LordBaelishTest.java to .\/java-design-patterns\ repository source files.
Added LordVarysTest.java to .\/java-design-patterns\ repository source files.
Added ScoutTest.java to .\/java-design-patterns\ repository source files.
Added WeekdayTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEvent.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEvent.java to .\/java-design-patterns\ repository source files.
Added EventDispatcher.java to .\/java-design-patterns\ repository source files.
Added Handler.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventTest.java to .\/java-design-patterns\ repository source files.
Added EventDispatcherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileWriterAction.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DwarvenCartOperator.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldDigger.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacade.java to .\/java-design-patterns\ repository source files.
Added DwarvenMineWorker.java to .\/java-design-patterns\ repository source files.
Added DwarvenTunnelDigger.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacadeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Axe.java to .\/java-design-patterns\ repository source files.
Added Bow.java to .\/java-design-patterns\ repository source files.
Added Builder.java to .\/java-design-patterns\ repository source files.
Added Spear.java to .\/java-design-patterns\ repository source files.
Added Sword.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponFactory.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryKitTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Blacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfBlacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfWeapon.java to .\/java-design-patterns\ repository source files.
Added OrcBlacksmith.java to .\/java-design-patterns\ repository source files.
Added OrcWeapon.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added UserGroup.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added UserGroupTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FluentIterable.java to .\/java-design-patterns\ repository source files.
Added DecoratingIterator.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterable.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterable.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added ActionType.java to .\/java-design-patterns\ repository source files.
Added Content.java to .\/java-design-patterns\ repository source files.
Added ContentAction.java to .\/java-design-patterns\ repository source files.
Added MenuAction.java to .\/java-design-patterns\ repository source files.
Added MenuItem.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added ContentStore.java to .\/java-design-patterns\ repository source files.
Added MenuStore.java to .\/java-design-patterns\ repository source files.
Added Store.java to .\/java-design-patterns\ repository source files.
Added ContentView.java to .\/java-design-patterns\ repository source files.
Added MenuView.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ContentTest.java to .\/java-design-patterns\ repository source files.
Added MenuItemTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DispatcherTest.java to .\/java-design-patterns\ repository source files.
Added ContentStoreTest.java to .\/java-design-patterns\ repository source files.
Added MenuStoreTest.java to .\/java-design-patterns\ repository source files.
Added ContentViewTest.java to .\/java-design-patterns\ repository source files.
Added MenuViewTest.java to .\/java-design-patterns\ repository source files.
Added AlchemistShop.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HealingPotion.java to .\/java-design-patterns\ repository source files.
Added HolyWaterPotion.java to .\/java-design-patterns\ repository source files.
Added InvisibilityPotion.java to .\/java-design-patterns\ repository source files.
Added PoisonPotion.java to .\/java-design-patterns\ repository source files.
Added Potion.java to .\/java-design-patterns\ repository source files.
Added PotionFactory.java to .\/java-design-patterns\ repository source files.
Added PotionType.java to .\/java-design-patterns\ repository source files.
Added StrengthPotion.java to .\/java-design-patterns\ repository source files.
Added AlchemistShopTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ApplicationException.java to .\/java-design-patterns\ repository source files.
Added ArcherCommand.java to .\/java-design-patterns\ repository source files.
Added ArcherView.java to .\/java-design-patterns\ repository source files.
Added CatapultCommand.java to .\/java-design-patterns\ repository source files.
Added CatapultView.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added ErrorView.java to .\/java-design-patterns\ repository source files.
Added FrontController.java to .\/java-design-patterns\ repository source files.
Added UnknownCommand.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ApplicationExceptionTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added FrontControllerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added ViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsynchronousService.java to .\/java-design-patterns\ repository source files.
Added AsyncTask.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added AsynchronousServiceTest.java to .\/java-design-patterns\ repository source files.
Added AbstractFilter.java to .\/java-design-patterns\ repository source files.
Added AddressFilter.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added ContactFilter.java to .\/java-design-patterns\ repository source files.
Added DepositFilter.java to .\/java-design-patterns\ repository source files.
Added Filter.java to .\/java-design-patterns\ repository source files.
Added FilterChain.java to .\/java-design-patterns\ repository source files.
Added FilterManager.java to .\/java-design-patterns\ repository source files.
Added NameFilter.java to .\/java-design-patterns\ repository source files.
Added Order.java to .\/java-design-patterns\ repository source files.
Added OrderFilter.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FilterManagerTest.java to .\/java-design-patterns\ repository source files.
Added FilterTest.java to .\/java-design-patterns\ repository source files.
Added OrderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Expression.java to .\/java-design-patterns\ repository source files.
Added MinusExpression.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpression.java to .\/java-design-patterns\ repository source files.
Added NumberExpression.java to .\/java-design-patterns\ repository source files.
Added PlusExpression.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MinusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpressionTest.java to .\/java-design-patterns\ repository source files.
Added NumberExpressionTest.java to .\/java-design-patterns\ repository source files.
Added PlusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemIterator.java to .\/java-design-patterns\ repository source files.
Added ItemType.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestItemIterator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Cake.java to .\/java-design-patterns\ repository source files.
Added CakeBakingException.java to .\/java-design-patterns\ repository source files.
Added CakeBakingService.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImpl.java to .\/java-design-patterns\ repository source files.
Added CakeDao.java to .\/java-design-patterns\ repository source files.
Added CakeInfo.java to .\/java-design-patterns\ repository source files.
Added CakeLayer.java to .\/java-design-patterns\ repository source files.
Added CakeLayerDao.java to .\/java-design-patterns\ repository source files.
Added CakeLayerInfo.java to .\/java-design-patterns\ repository source files.
Added CakeTopping.java to .\/java-design-patterns\ repository source files.
Added CakeToppingDao.java to .\/java-design-patterns\ repository source files.
Added CakeToppingInfo.java to .\/java-design-patterns\ repository source files.
Added CakeViewImpl.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingExceptionTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added CakeTest.java to .\/java-design-patterns\ repository source files.
Added CakeViewImplTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Heavy.java to .\/java-design-patterns\ repository source files.
Added HolderNaive.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafe.java to .\/java-design-patterns\ repository source files.
Added Java8Holder.java to .\/java-design-patterns\ repository source files.
Added AbstractHolderTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HolderNaiveTest.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafeTest.java to .\/java-design-patterns\ repository source files.
Added Java8HolderTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hobbit.java to .\/java-design-patterns\ repository source files.
Added Hunter.java to .\/java-design-patterns\ repository source files.
Added Party.java to .\/java-design-patterns\ repository source files.
Added PartyImpl.java to .\/java-design-patterns\ repository source files.
Added PartyMember.java to .\/java-design-patterns\ repository source files.
Added PartyMemberBase.java to .\/java-design-patterns\ repository source files.
Added Rogue.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added PartyImplTest.java to .\/java-design-patterns\ repository source files.
Added PartyMemberTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Star.java to .\/java-design-patterns\ repository source files.
Added StarMemento.java to .\/java-design-patterns\ repository source files.
Added StarType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StarTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Fatigue.java to .\/java-design-patterns\ repository source files.
Added GiantController.java to .\/java-design-patterns\ repository source files.
Added GiantModel.java to .\/java-design-patterns\ repository source files.
Added GiantView.java to .\/java-design-patterns\ repository source files.
Added Health.java to .\/java-design-patterns\ repository source files.
Added Nourishment.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GiantControllerTest.java to .\/java-design-patterns\ repository source files.
Added GiantModelTest.java to .\/java-design-patterns\ repository source files.
Added GiantViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileLoader.java to .\/java-design-patterns\ repository source files.
Added FileSelectorJFrame.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenter.java to .\/java-design-patterns\ repository source files.
Added FileSelectorStub.java to .\/java-design-patterns\ repository source files.
Added FileSelectorView.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FileLoaderTest.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Sex.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added Validator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MonadTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added LoadBalancer.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added Server.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added LoadBalancerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Nazgul.java to .\/java-design-patterns\ repository source files.
Added NazgulName.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NazgulTest.java to .\/java-design-patterns\ repository source files.
Added HomePageService.java to .\/java-design-patterns\ repository source files.
Added HomePageViewModel.java to .\/java-design-patterns\ repository source files.
Added SimpleObject.java to .\/java-design-patterns\ repository source files.
Added SimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectTest.java to .\/java-design-patterns\ repository source files.
Added DomainAppFixturesProvider.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectCreate.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTearDown.java to .\/java-design-patterns\ repository source files.
Added RecreateSimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleAppSystemInitializer.java to .\/java-design-patterns\ repository source files.
Added BootstrappingGlue.java to .\/java-design-patterns\ repository source files.
Added CatalogOfFixturesGlue.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectGlue.java to .\/java-design-patterns\ repository source files.
Added RunSpecs.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleAppIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleApplication.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Node.java to .\/java-design-patterns\ repository source files.
Added NodeImpl.java to .\/java-design-patterns\ repository source files.
Added NullNode.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NullNodeTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added TreeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ObjectPool.java to .\/java-design-patterns\ repository source files.
Added Oliphaunt.java to .\/java-design-patterns\ repository source files.
Added OliphauntPool.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OliphauntPoolTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GHobbits.java to .\/java-design-patterns\ repository source files.
Added GOrcs.java to .\/java-design-patterns\ repository source files.
Added GWeather.java to .\/java-design-patterns\ repository source files.
Added Observable.java to .\/java-design-patterns\ repository source files.
Added Observer.java to .\/java-design-patterns\ repository source files.
Added Race.java to .\/java-design-patterns\ repository source files.
Added Hobbits.java to .\/java-design-patterns\ repository source files.
Added Orcs.java to .\/java-design-patterns\ repository source files.
Added Weather.java to .\/java-design-patterns\ repository source files.
Added WeatherObserver.java to .\/java-design-patterns\ repository source files.
Added WeatherType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GHobbitsTest.java to .\/java-design-patterns\ repository source files.
Added GWeatherTest.java to .\/java-design-patterns\ repository source files.
Added ObserverTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added HobbitsTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WeatherObserverTest.java to .\/java-design-patterns\ repository source files.
Added WeatherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added MessageQueue.java to .\/java-design-patterns\ repository source files.
Added MqPublishPoint.java to .\/java-design-patterns\ repository source files.
Added MqSubscribePoint.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added SimpleMessage.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageQueue.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added PoisonMessageTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ImmutableStew.java to .\/java-design-patterns\ repository source files.
Added Stew.java to .\/java-design-patterns\ repository source files.
Added StewData.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ImmutableStewTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added StewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemQueue.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Stats.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Beast.java to .\/java-design-patterns\ repository source files.
Added ElfBeast.java to .\/java-design-patterns\ repository source files.
Added ElfMage.java to .\/java-design-patterns\ repository source files.
Added ElfWarlord.java to .\/java-design-patterns\ repository source files.
Added HeroFactory.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImpl.java to .\/java-design-patterns\ repository source files.
Added Mage.java to .\/java-design-patterns\ repository source files.
Added OrcBeast.java to .\/java-design-patterns\ repository source files.
Added OrcMage.java to .\/java-design-patterns\ repository source files.
Added OrcWarlord.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Warlord.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImplTest.java to .\/java-design-patterns\ repository source files.
Added PrototypeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardTower.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WizardTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxyTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppClient.java to .\/java-design-patterns\ repository source files.
Added LoggingHandler.java to .\/java-design-patterns\ repository source files.
Added AbstractNioChannel.java to .\/java-design-patterns\ repository source files.
Added ChannelHandler.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added NioDatagramChannel.java to .\/java-design-patterns\ repository source files.
Added NioReactor.java to .\/java-design-patterns\ repository source files.
Added NioServerSocketChannel.java to .\/java-design-patterns\ repository source files.
Added SameThreadDispatcher.java to .\/java-design-patterns\ repository source files.
Added ThreadPoolDispatcher.java to .\/java-design-patterns\ repository source files.
Added ReactorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Reader.java to .\/java-design-patterns\ repository source files.
Added ReaderWriterLock.java to .\/java-design-patterns\ repository source files.
Added Writer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ReaderAndWriterTest.java to .\/java-design-patterns\ repository source files.
Added ReaderTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppConfig.java to .\/java-design-patterns\ repository source files.
Added Person.java to .\/java-design-patterns\ repository source files.
Added PersonRepository.java to .\/java-design-patterns\ repository source files.
Added PersonSpecifications.java to .\/java-design-patterns\ repository source files.
Added AnnotationBasedRepositoryTest.java to .\/java-design-patterns\ repository source files.
Added AppConfigTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RepositoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added SlidingDoor.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ClosableTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added Queen.java to .\/java-design-patterns\ repository source files.
Added Royalty.java to .\/java-design-patterns\ repository source files.
Added Servant.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added KingTest.java to .\/java-design-patterns\ repository source files.
Added QueenTest.java to .\/java-design-patterns\ repository source files.
Added ServantTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BaseEntity.java to .\/java-design-patterns\ repository source files.
Added Dao.java to .\/java-design-patterns\ repository source files.
Added DaoBaseImpl.java to .\/java-design-patterns\ repository source files.
Added HibernateUtil.java to .\/java-design-patterns\ repository source files.
Added MagicService.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImpl.java to .\/java-design-patterns\ repository source files.
Added Spell.java to .\/java-design-patterns\ repository source files.
Added SpellDao.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Spellbook.java to .\/java-design-patterns\ repository source files.
Added SpellbookDao.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardDao.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BaseDaoTest.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added InitContext.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added ServiceCache.java to .\/java-design-patterns\ repository source files.
Added ServiceImpl.java to .\/java-design-patterns\ repository source files.
Added ServiceLocator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ServiceLocatorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTower.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiom.java to .\/java-design-patterns\ repository source files.
Added IvoryTower.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLocking.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTower.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiomTest.java to .\/java-design-patterns\ repository source files.
Added IvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added SingletonTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLockingTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AbstractCreature.java to .\/java-design-patterns\ repository source files.
Added Creature.java to .\/java-design-patterns\ repository source files.
Added Dragon.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added KillerBee.java to .\/java-design-patterns\ repository source files.
Added Octopus.java to .\/java-design-patterns\ repository source files.
Added Shark.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added Color.java to .\/java-design-patterns\ repository source files.
Added Movement.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added ColorSelector.java to .\/java-design-patterns\ repository source files.
Added MovementSelector.java to .\/java-design-patterns\ repository source files.
Added SizeSelector.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CreatureTest.java to .\/java-design-patterns\ repository source files.
Added ColorSelectorTest.java to .\/java-design-patterns\ repository source files.
Added MovementSelectorTest.java to .\/java-design-patterns\ repository source files.
Added SizeSelectorTest.java to .\/java-design-patterns\ repository source files.
Added AngryState.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Mammoth.java to .\/java-design-patterns\ repository source files.
Added PeacefulState.java to .\/java-design-patterns\ repository source files.
Added State.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MammothTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilder.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DragonSlayer.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategy.java to .\/java-design-patterns\ repository source files.
Added MeleeStrategy.java to .\/java-design-patterns\ repository source files.
Added ProjectileStrategy.java to .\/java-design-patterns\ repository source files.
Added SpellStrategy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayerTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategyTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HalflingThief.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethod.java to .\/java-design-patterns\ repository source files.
Added StealingMethod.java to .\/java-design-patterns\ repository source files.
Added SubtleMethod.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HalflingThiefTest.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethodTest.java to .\/java-design-patterns\ repository source files.
Added StealingMethodTest.java to .\/java-design-patterns\ repository source files.
Added SubtleMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTask.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added Worker.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTaskTest.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTaskTest.java to .\/java-design-patterns\ repository source files.
Added TaskTest.java to .\/java-design-patterns\ repository source files.
Added WorkerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added RainbowFish.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializer.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializerTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2Test.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BallItem.java to .\/java-design-patterns\ repository source files.
Added BallThread.java to .\/java-design-patterns\ repository source files.
Added GameItem.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BallItemTest.java to .\/java-design-patterns\ repository source files.
Added BallThreadTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HeroStat.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroStatTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Commander.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitor.java to .\/java-design-patterns\ repository source files.
Added Sergeant.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitor.java to .\/java-design-patterns\ repository source files.
Added Soldier.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitor.java to .\/java-design-patterns\ repository source files.
Added Unit.java to .\/java-design-patterns\ repository source files.
Added UnitVisitor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommanderTest.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SergeantTest.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SoldierTest.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitorTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added UnitTest.java to .\/java-design-patterns\ repository source files.
Added VisitorTest.java to .\/java-design-patterns\ repository source files.
App app = new App();
elfKing=app.getKing(elfFactory)
final King elfKing = app.getKing(elfFactory);
orcKing=app.getKing(orcFactory)
final King orcKing = app.getKing(orcFactory);
elfCastle=app.getCastle(elfFactory)
final Castle elfCastle = app.getCastle(elfFactory);
orcCastle=app.getCastle(orcFactory)
final Castle orcCastle = app.getCastle(orcFactory);
elfArmy=app.getArmy(elfFactory)
final Army elfArmy = app.getArmy(elfFactory);
orcArmy=app.getArmy(orcFactory)
final Army orcArmy = app.getArmy(orcFactory);
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
String[] args = {};
Captain captain = new Captain(new BattleFishingBoat());
battleFishingBoat=spy(new BattleFishingBoat())
BattleFishingBoat battleFishingBoat = spy(new BattleFishingBoat());
Captain captain = new Captain();
BattleShip captain = (BattleShip) beans.get(CAPTAIN_BEAN);
BattleShip battleship = (BattleShip) beans.get(BATTLESHIP_BEAN);
String[] args = {};
AsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult1=executor.startProcess(lazyval(10,500))
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
asyncResult2=executor.startProcess(lazyval("test",300))
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
asyncResult3=executor.startProcess(lazyval(50L,700))
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
asyncResult4=executor.startProcess(lazyval(20,400),callback("Callback result 4"))
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
asyncResult5=executor.startProcess(lazyval("callback",600),callback("Callback result 5"))
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
result1=executor.endProcess(asyncResult1)
Integer result1 = executor.endProcess(asyncResult1);
result2=executor.endProcess(asyncResult2)
String result2 = executor.endProcess(asyncResult2);
result3=executor.endProcess(asyncResult3)
Long result3 = executor.endProcess(asyncResult3);
CompletableResult<T> result = new CompletableResult<>(callback);
String[] args = {};
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null)
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(null,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
exception=optionalException.get()
final Exception exception = optionalException.get();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null,null)
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());
FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());
SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());
String[] args = {};
excalibur=spy(new Excalibur())
final Excalibur excalibur = spy(new Excalibur());
final BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(excalibur);
mjollnir=spy(new Mjollnir())
final Mjollnir mjollnir = spy(new Mjollnir());
final FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(mjollnir);
stormbringer=spy(new Stormbringer())
final Stormbringer stormbringer = spy(new Stormbringer());
final SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(stormbringer);
mage=new HeroBuilder(Profession.MAGE,"Riobard").withHairColor(HairColor.BLACK).withWeapon(Weapon.DAGGER).build()
Hero mage =
        new HeroBuilder(Profession.MAGE, "Riobard").withHairColor(HairColor.BLACK)
            .withWeapon(Weapon.DAGGER).build();
warrior=new HeroBuilder(Profession.WARRIOR,"Amberjill").withHairColor(HairColor.BLOND).withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).build()
Hero warrior =
        new HeroBuilder(Profession.WARRIOR, "Amberjill").withHairColor(HairColor.BLOND)
            .withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD)
            .build();
thief=new HeroBuilder(Profession.THIEF,"Desmond").withHairType(HairType.BALD).withWeapon(Weapon.BOW).build()
Hero thief =
        new HeroBuilder(Profession.THIEF, "Desmond").withHairType(HairType.BALD)
            .withWeapon(Weapon.BOW).build();
StringBuilder sb = new StringBuilder();
String[] args = {};
final String heroName = "Sir Lancelot";
hero=new Hero.HeroBuilder(Profession.WARRIOR,heroName).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).withHairType(HairType.LONG_CURLY).withHairColor(HairColor.BLOND).build()
final Hero hero = new Hero.HeroBuilder(Profession.WARRIOR, heroName)
        .withArmor(Armor.CHAIN_MAIL)
        .withWeapon(Weapon.SWORD)
        .withHairType(HairType.LONG_CURLY)
        .withHairColor(HairColor.BLOND)
        .build();
BusinessDelegate businessDelegate = new BusinessDelegate();
BusinessLookup businessLookup = new BusinessLookup();
Client client = new Client(businessDelegate);
String[] args = {};
Client client = new Client(businessDelegate);
App app = new App();
UserAccount userAccount1 = new UserAccount("001", "John", "He is a boy.");
UserAccount userAccount2 = new UserAccount("002", "Jane", "She is a girl.");
UserAccount userAccount3 = new UserAccount("003", "Adam", "He likes food.");
UserAccount userAccount4 = new UserAccount("004", "Rita", "She hates cats.");
UserAccount userAccount5 = new UserAccount("005", "Isaac", "He is allergic to mustard.");
UserAccount userAccount6 = new UserAccount("006", "Yasha", "She is an only child.");
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
StringBuilder sb = new StringBuilder();
iterable=db.getCollection("user_accounts").find(new Document("userID",userId))
FindIterable<Document> iterable =
        db.getCollection("user_accounts").find(new Document("userID", userId));
doc=iterable.first()
Document doc = iterable.first();
node=cache.get(userId)
Node node = cache.get(userId);
old=cache.get(userId)
Node old = cache.get(userId);
Node newNode = new Node(userId, userAccount);
toBeRemoved=cache.get(userId)
Node toBeRemoved = cache.get(userId);
ArrayList<UserAccount> listOfCacheData = new ArrayList<>();
Node temp = head;
String[] args = {};
Task task = new SimpleTask();
Callback callback = new Callback() {
      @Override
      public void call() {
        System.out.println("I'm done now.");
      }
    };
Task task = new SimpleTask();
Callback c = () -> System.out.println("I'm done now.");
    task.executeWith(c);
  
String[] args = {};
Callback callback = new Callback() {
      @Override
      public void call() {
        callingCount++;
      }
    };
Task task = new SimpleTask();
Callback callback = () -> callingCount++;

    Task task = new SimpleTask();

    assertEquals("Initial calling count of 0", new Integer(0), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called once", new Integer(1), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called twice", new Integer(2), callingCount);

  
OrcKing king = new OrcKing();
String[] args = {};
final OrcKing king = new OrcKing();
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
temp=target.getSize()
Size temp = target.getSize();
previousSpell=undoStack.pollLast()
Command previousSpell = undoStack.pollLast();
previousSpell=redoStack.pollLast()
Command previousSpell = redoStack.pollLast();
String[] args = {};
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
orcMessage=new Messenger().messageFromOrcs()
LetterComposite orcMessage = new Messenger().messageFromOrcs();
elfMessage=new Messenger().messageFromElves()
LetterComposite elfMessage = new Messenger().messageFromElves();
List<Word> words = new ArrayList<>();
List<Word> words = new ArrayList<>();
String[] args = {};
final Messenger messenger = new Messenger();
final Messenger messenger = new Messenger();
words=message.split(" ")
final String[] words = message.split(" ");
final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());
final Customer customer = new Customer(4, "Dan", "Danson");
final Customer customer1 = new Customer(1, "Adam", "Adamson");
final Customer customer2 = new Customer(2, "Bob", "Bobson");
final Customer customer3 = new Customer(3, "Carl", "Carlson");
final List<Customer> customers = new ArrayList<>();
boolean isEqual = false;
final Customer customer = (Customer) o;
Customer customer = null;
index=getAllCustomers().indexOf(customer)
final int index = getAllCustomers().indexOf(customer);
String[] args = {};
final Customer nonExistingCustomer = new Customer(2, "Robert", "Englund");
final String newFirstname = "Bernard";
final String newLastname = "Montgomery";
final Customer customer = new Customer(CUSTOMER.getId(), newFirstname, newLastname);
cust=impl.getCustomerById(CUSTOMER.getId())
final Customer cust = impl.getCustomerById(CUSTOMER.getId());
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final String newFirstname = "Douglas";
final String newLastname = "MacArthur";
final Customer customer = new Customer(nonExistingId, newFirstname, newLastname);
existingCustomer=impl.getCustomerById(CUSTOMER.getId())
final Customer existingCustomer = impl.getCustomerById(CUSTOMER.getId());
final Customer newCustomer = new Customer(3, "George", "Patton");
final Customer newCustomer = new Customer(3, "George", "Patton");
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final int newId = 2;
final String newFirstname = "Bill";
final String newLastname = "Clinton";
final int newId = 2;
final Customer otherCustomer = new Customer(newId, FIRSTNAME, LASTNAME);
final Customer otherCustomer = new Customer(ID, FIRSTNAME, LASTNAME);
final StringBuffer buffer = new StringBuffer();
Hostile troll = new Troll();
Hostile smart = new SmartHostile(troll);
String[] args = {};
simpleTroll=spy(new Troll())
final Hostile simpleTroll = spy(new Troll());
final Hostile smartTroll = new SmartHostile(simpleTroll);
final Troll troll = new Troll();
PrinterController hpPrinterController = new PrinterController(new HpPrinter());
PrinterController canonPrinterController = new PrinterController(new CanonPrinter());
PrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());
String[] args = {};
PrinterController printerController = new PrinterController(new CanonPrinter());
PrinterController printerController = new PrinterController(new HpPrinter());
PrinterController printerController = new PrinterController(new EpsonPrinter());
SimpleWizard simpleWizard = new SimpleWizard();
AdvancedWizard advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());
injector=Guice.createInjector(new TobaccoModule())
Injector injector = Guice.createInjector(new TobaccoModule());
guiceWizard=injector.getInstance(GuiceWizard.class)
GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final AdvancedWizard advancedWizard = new AdvancedWizard(tobacco);
String[] args = {};
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final GuiceWizard guiceWizard = new GuiceWizard(tobacco);
@SuppressWarnings("unchecked")
    final Class<? extends Tobacco>[] tobaccos = new Class[]{
        OldTobyTobacco.class, RivendellTobacco.class, SecondBreakfastTobacco.class
    };
injector=Guice.createInjector(new AbstractModule(){
  @Override protected void configure(){
    bind(Tobacco.class).to(tobaccoClass);
  }
}
)
final Injector injector = Guice.createInjector(new AbstractModule() {
        @Override
        protected void configure() {
          bind(Tobacco.class).to(tobaccoClass);
        }
      });
guiceWizard=injector.getInstance(GuiceWizard.class)
final GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final SimpleWizard simpleWizard = new SimpleWizard();
final Inventory inventory = new Inventory(1000);
executorService=Executors.newFixedThreadPool(3)
ExecutorService executorService = Executors.newFixedThreadPool(3);
String[] args = {};
final Inventory inventory = new Inventory(INVENTORY_SIZE);
executorService=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);
items=inventory.getItems()
final List<Item> items = inventory.getItems();
final List<Item> items = inventory.getItems();
stdOutCaptor=ArgumentCaptor.forClass(String.class)
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
values=stdOutCaptor.getAllValues()
final List<String> values = stdOutCaptor.getAllValues();
final List<String> values = stdOutCaptor.getAllValues();
List<GameObject> objects = new ArrayList<>();
String[] args = {};
tested=getTestedObject()
final O tested = getTestedObject();
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectTargetOnFire 
        ? "Expected [" + targetName + "] to be on fire after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be on fire after colliding with [" + otherName + "] but it was!";
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectedDamage
        ? "Expected [" + targetName + "] to be damaged after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be damaged after colliding with [" + otherName + "] but it was!";
final FlamingAsteroid asteroid = new FlamingAsteroid(1, 2, 3, 4);
final Meteoroid meteoroid = new Meteoroid(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final SpaceStationIss iss = new SpaceStationIss(1, 2, 3, 4);
final SpaceStationMir mir = new SpaceStationMir(1, 2, 3, 4);
KingJoffrey kingJoffrey = new KingJoffrey();
KingsHand kingsHand = new KingsHand(kingJoffrey);
List<EventEmitter> emitters = new ArrayList<>();
String[] args = {};
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithoutDefaultObserver.get()
final E emitter = this.factoryWithoutDefaultObserver.get();
defaultObserver=mock(EventObserver.class)
final EventObserver defaultObserver = mock(EventObserver.class);
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithDefaultObserver.apply(defaultObserver)
final E emitter = this.factoryWithDefaultObserver.apply(defaultObserver);
toString=event.toString()
final String toString = event.toString();
final KingJoffrey kingJoffrey = new KingJoffrey();
final String expectedMessage = "Received event from the King's Hand: " + event.toString();
observer=mock(EventObserver.class)
final EventObserver observer = mock(EventObserver.class);
final KingsHand kingsHand = new KingsHand(observer);
toString=weekday.toString()
final String toString = weekday.toString();
EventDispatcher dispatcher = new EventDispatcher();
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = (UserCreatedEvent) message;
UserUpdatedEvent userUpdatedEvent = (UserUpdatedEvent) message;
String[] args = {};
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
dispatcher=spy(new EventDispatcher())
EventDispatcher dispatcher = spy(new EventDispatcher());
userCreatedEventHandler=spy(new UserCreatedEventHandler())
UserCreatedEventHandler userCreatedEventHandler = spy(new UserCreatedEventHandler());
userUpdatedEventHandler=spy(new UserUpdatedEventHandler())
UserUpdatedEventHandler userUpdatedEventHandler = spy(new UserUpdatedEventHandler());
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
UserUpdatedEvent userUpdatedEvent = new UserUpdatedEvent(user);
FileWriter writer = new FileWriter(filename);
String[] args = {};
File file = new File("testfile.txt");
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
final File nonExistingFile = new File(this.testFolder.getRoot(), "non-existing-file");
final String testMessage = "Test message";
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
DwarvenGoldmineFacade facade = new DwarvenGoldmineFacade();
String[] args = {};
final DwarvenGoldmineFacade goldMine = new DwarvenGoldmineFacade();
WeaponFactory factory = WeaponFactory.factory(builder -> {
      builder.add(WeaponType.SWORD, Sword::new);
      builder.add(WeaponType.AXE, Axe::new);
      builder.add(WeaponType.SPEAR, Spear::new);
      builder.add(WeaponType.BOW, Bow::new);
    });
    Weapon axe = factory.create(WeaponType.AXE);
    System.out.println(axe);
  
HashMap<WeaponType, Supplier<Weapon>> map = new HashMap<>();
String[] args = {};
weapon=factory.create(WeaponType.SPEAR)
Weapon weapon = factory.create(WeaponType.SPEAR);
weapon=factory.create(WeaponType.AXE)
Weapon weapon = factory.create(WeaponType.AXE);
weapon=factory.create(WeaponType.SWORD)
Weapon weapon = factory.create(WeaponType.SWORD);
App app = new App(new OrcBlacksmith());
Weapon weapon;
String[] args = {};
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.AXE)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.AXE);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties turnedOff = new Properties();
Service turnedOffService = new PropertiesFeatureToggleVersion(turnedOff);
welcomeMessageturnedOff=turnedOffService.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessageturnedOff = turnedOffService.getWelcomeMessage(new User("Jamie No Code"));
final User paidUser = new User("Jamie Coder");
final User freeUser = new User("Alan Defect");
welcomeMessagePaidUser=service.getWelcomeMessage(paidUser)
final String welcomeMessagePaidUser = service.getWelcomeMessage(paidUser);
welcomeMessageFreeUser=service.getWelcomeMessage(freeUser)
final String welcomeMessageFreeUser = service.getWelcomeMessage(freeUser);
final Properties properties = new Properties();
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
welcomeMessage=service.getWelcomeMessage(paidUser)
final String welcomeMessage = service.getWelcomeMessage(paidUser);
final String expected = "You're amazing Jamie Coder. Thanks for paying for this awesome software.";
welcomeMessage=service.getWelcomeMessage(freeUser)
final String welcomeMessage = service.getWelcomeMessage(freeUser);
final String expected = "I suppose you can use this software.";
User user = new User("Free User");
User user = new User("Paid User");
User user = new User("Paid User");
User user = new User("Free User");
List<Integer> integerList = new ArrayList<>();
firstFiveNegatives=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList()
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
lastTwoPositives=SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList()
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
transformedList=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString()).asList()
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
lastTwoOfFirstFourStringMapped=LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2).map(number-- > "String[" + valueOf(number) + "]").asList()
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
StringJoiner joiner = new StringJoiner(delimiter, prefix, ".");
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
ArrayList<E> copy = new ArrayList<>();
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
final E result = next;
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=last(1).iterator()
Iterator<E> resultIterator = last(1).iterator();
Iterator<E> resultIterator = last(1).iterator();
E candidate = null;
newIterator=iterable.iterator()
Iterator<E> newIterator = iterable.iterator();
candidate=oldTypeIterator.next()
E candidate = oldTypeIterator.next();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
nextElement=iterator.next()
E nextElement = iterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentCount = 0;
list=last(1).asList()
List<E> list = last(1).asList();
List<E> list = last(1).asList();
remainingElementsCount=getRemainingElementsCount()
int remainingElementsCount = getRemainingElementsCount();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentIndex = 0;
List<T> temporaryList = new ArrayList<>();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
copy=FluentIterable.copyToList(iterable)
List<E> copy = FluentIterable.copyToList(iterable);
List<E> copy = FluentIterable.copyToList(iterable);
int counter = 0;
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
List<E> copy = new ArrayList<>();
String[] args = {};
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
evenItems=createFluentIterable(integers).filter(i-- > i % 2 == 0).asList()
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
longs=createFluentIterable(integers).map(Integer).asList()
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
consumer=mock(Consumer.class)
final Consumer<Integer> consumer = mock(Consumer.class);
final Consumer<Integer> consumer = mock(Consumer.class);
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
split=createFluentIterable(integers).spliterator()
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
MenuStore menuStore = new MenuStore();
ContentStore contentStore = new ContentStore();
MenuView menuView = new MenuView();
ContentView contentView = new ContentView();
ContentAction contentAction = (ContentAction) action;
MenuAction menuAction = (MenuAction) action;
ContentStore contentStore = (ContentStore) store;
MenuStore menuStore = (MenuStore) store;
toString=content.toString()
final String toString = content.toString();
toString=menuItem.toString()
final String toString = menuItem.toString();
String[] args = {};
final Constructor<Dispatcher> constructor;
final Constructor<Dispatcher> constructor;
field=Dispatcher.class.getDeclaredField("instance")
final Field field = Dispatcher.class.getDeclaredField("instance");
dispatcher=Dispatcher.getInstance()
final Dispatcher dispatcher = Dispatcher.getInstance();
store=mock(Store.class)
final Store store = mock(Store.class);
actionCaptor=ArgumentCaptor.forClass(Action.class)
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
actions=actionCaptor.getAllValues()
final List<Action> actions = actionCaptor.getAllValues();
final List<Action> actions = actionCaptor.getAllValues();
menuActions=actions.stream().filter(a-- > a.getType().equals(ActionType.MENU_ITEM_SELECTED)).map(a-- > (MenuAction)a).collect(Collectors.toList())
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
contentActions=actions.stream().filter(a-- > a.getType().equals(ActionType.CONTENT_CHANGED)).map(a-- > (ContentAction)a).collect(Collectors.toList())
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final ContentStore contentStore = new ContentStore();
view=mock(View.class)
final View view = mock(View.class);
final MenuStore menuStore = new MenuStore();
view=mock(View.class)
final View view = mock(View.class);
store=mock(ContentStore.class)
final ContentStore store = mock(ContentStore.class);
final ContentView view = new ContentView();
store=mock(MenuStore.class)
final MenuStore store = mock(MenuStore.class);
final MenuView view = new MenuView();
store=mock(Store.class)
final Store store = mock(Store.class);
final MenuView view = new MenuView();
PotionFactory factory = new PotionFactory();
AlchemistShop alchemistShop = new AlchemistShop();
potion=potions.get(type)
Potion potion = potions.get(type);
final AlchemistShop shop = new AlchemistShop();
bottomShelf=shop.getBottomShelf()
final List<Potion> bottomShelf = shop.getBottomShelf();
final List<Potion> bottomShelf = shop.getBottomShelf();
topShelf=shop.getTopShelf()
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> allPotions = new ArrayList<>();
String[] args = {};
FrontController controller = new FrontController();
command=getCommand(request)
Command command = getCommand(request);
commandClass=getCommandClass(request)
Class commandClass = getCommandClass(request);
Class result;
final Exception cause = new Exception();
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final FrontController frontController = new FrontController();
final List<Object[]> parameters = new ArrayList<>();
final List<Object[]> parameters = new ArrayList<>();
AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final Object result = new Object();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IOException exception = new IOException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IllegalStateException exception = new IllegalStateException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
Filter last = this;
String result = super.execute(order);
FilterManager filterManager = new FilterManager();
Client client = new Client();
JPanel panel = new JPanel();
Order order =
            new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),
                jtFields[2].getText(), jtAreas[1].getText());
rootPane=SwingUtilities.getRootPane(processButton)
JRootPane rootPane = SwingUtilities.getRootPane(processButton);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
JPanel bot = new JPanel();
rootPane=SwingUtilities.getRootPane(del)
JRootPane rootPane = SwingUtilities.getRootPane(del);
temp=jt.getSelectedRow()
int temp = jt.getSelectedRow();
temp2=jt.getSelectedRowCount()
int temp2 = jt.getSelectedRowCount();
String[] args = {};
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
filter=mock(Filter.class)
final Filter filter = mock(Filter.class);
order=mock(Order.class)
final Order order = mock(Order.class);
final List<Object[]> testData = new ArrayList<>();
result=this.filter.execute(this.order)
final String result = this.filter.execute(this.order);
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
String tokenString = "4 3 2 - 1 + *";
Stack<Expression> stack = new Stack<>();
tokenList=tokenString.split(" ")
String[] tokenList = tokenString.split(" ");
rightExpression=stack.pop()
Expression rightExpression = stack.pop();
leftExpression=stack.pop()
Expression leftExpression = stack.pop();
operator=getOperatorInstance(s,leftExpression,rightExpression)
Expression operator = getOperatorInstance(s, leftExpression, rightExpression);
result=operator.interpret()
int result = operator.interpret();
NumberExpression resultExpression = new NumberExpression(result);
Expression i = new NumberExpression(s);
String[] args = {};
final List<Object[]> testData = new ArrayList<>();
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expectedValue=getFirst().interpret()
final int expectedValue = getFirst().interpret();
testStingValue=String.valueOf(expectedValue)
final String testStingValue = String.valueOf(expectedValue);
final NumberExpression numberExpression = new NumberExpression(testStingValue);
TreasureChest chest = new TreasureChest();
ringIterator=chest.iterator(ItemType.RING)
ItemIterator ringIterator = chest.iterator(ItemType.RING);
potionIterator=chest.iterator(ItemType.POTION)
ItemIterator potionIterator = chest.iterator(ItemType.POTION);
weaponIterator=chest.iterator(ItemType.WEAPON)
ItemIterator weaponIterator = chest.iterator(ItemType.WEAPON);
it=chest.iterator(ItemType.ANY)
ItemIterator it = chest.iterator(ItemType.ANY);
ArrayList<Item> list = new ArrayList<>();
items=chest.getItems()
List<Item> items = chest.getItems();
List<Item> items = chest.getItems();
boolean found = false;
int tempIdx = idx;
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final TreasureChest chest = new TreasureChest();
iterator=chest.iterator(expectedItem.getType())
final ItemIterator iterator = chest.iterator(expectedItem.getType());
item=iterator.next()
final Item item = iterator.next();
name=item.toString()
final String name = item.toString();
final TreasureChest chest = new TreasureChest();
items=chest.getItems()
final List<Item> items = chest.getItems();
final List<Item> items = chest.getItems();
final boolean sameType = this.expectedItem.getType() == item.getType();
sameName=this.expectedItem.toString().equals(item.toString())
final boolean sameName = this.expectedItem.toString().equals(item.toString());
CakeViewImpl cakeView = new CakeViewImpl(cakeBakingService);
CakeInfo cake1 =
        new CakeInfo(new CakeToppingInfo("candies", 0), Arrays.asList(new CakeLayerInfo(
            "chocolate", 0), new CakeLayerInfo("banana", 0), new CakeLayerInfo("strawberry", 0)));
CakeInfo cake2 =
        new CakeInfo(new CakeToppingInfo("cherry", 0), Arrays.asList(
            new CakeLayerInfo("vanilla", 0), new CakeLayerInfo("lemon", 0), new CakeLayerInfo(
                "strawberry", 0)));
allToppings=getAvailableToppingEntities()
List<CakeTopping> allToppings = getAvailableToppingEntities();
List<CakeTopping> allToppings = getAvailableToppingEntities();
matchingToppings=allToppings.stream().filter((t)-- > t.getName().equals(cakeInfo.cakeToppingInfo.name)).collect(Collectors.toList())
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
allLayers=getAvailableLayerEntities()
List<CakeLayer> allLayers = getAvailableLayerEntities();
List<CakeLayer> allLayers = getAvailableLayerEntities();
Set<CakeLayer> foundLayers = new HashSet<>();
found=allLayers.stream().filter((layer)-- > layer.getName().equals(info.name)).findFirst()
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
toppingBean=context.getBean(CakeToppingDao.class)
CakeToppingDao toppingBean = context.getBean(CakeToppingDao.class);
topping=toppingBean.findOne(matchingToppings.iterator().next().getId())
CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().getId());
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
Cake cake = new Cake();
layerBean=context.getBean(CakeLayerDao.class)
CakeLayerDao layerBean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeTopping> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
topping=iterator.next()
CakeTopping topping = iterator.next();
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeToppingInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
next=iterator.next()
CakeTopping next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayer> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayerInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
List<CakeInfo> result = new ArrayList<>();
iterator=cakeBean.findAll().iterator()
Iterator<Cake> iterator = cakeBean.findAll().iterator();
Iterator<Cake> iterator = cakeBean.findAll().iterator();
cake=iterator.next()
Cake cake = iterator.next();
CakeToppingInfo cakeToppingInfo =
          new CakeToppingInfo(cake.getTopping().getId(), cake.getTopping().getName(), cake
              .getTopping().getCalories());
ArrayList<CakeLayerInfo> cakeLayerInfos = new ArrayList<>();
CakeInfo cakeInfo = new CakeInfo(cake.getId(), cakeToppingInfo, cakeLayerInfos);
int total = cakeToppingInfo != null ? cakeToppingInfo.calories : 0;
String[] args = {};
final CakeBakingException exception = new CakeBakingException();
final String expectedMessage = "message";
final CakeBakingException exception = new CakeBakingException(expectedMessage);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialLayers=service.getAvailableLayers()
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
availableLayers=service.getAvailableLayers()
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialToppings=service.getAvailableToppings()
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
availableToppings=service.getAvailableToppings()
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeLayerInfo layer3 = new CakeLayerInfo("Layer3", 2000);
allCakes=service.getAllCakes()
final List<CakeInfo> allCakes = service.getAllCakes();
final List<CakeInfo> allCakes = service.getAllCakes();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeToppingInfo missingTopping = new CakeToppingInfo("Topping1", 1000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo missingLayer = new CakeLayerInfo("Layer2", 2000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final Cake cake = new Cake();
expectedId=Long.valueOf(1234L)
final Long expectedId = Long.valueOf(1234L);
final Cake cake = new Cake();
final CakeTopping expectedTopping = new CakeTopping("DummyTopping", 1000);
final Cake cake = new Cake();
final Set<CakeLayer> expectedLayers = new HashSet<>();
final Cake cake = new Cake();
final Set<CakeLayer> initialLayers = new HashSet<>();
final CakeLayer newLayer = new CakeLayer("layer3", 3000);
final Set<CakeLayer> expectedLayers = new HashSet<>();
final CakeTopping topping = new CakeTopping("topping", 20);
final CakeLayer layer = new CakeLayer("layer", 100);
final Cake cake = new Cake();
final String expected = "id=1234 topping=id=2345 name=topping calories=20 " 
            + "layers=[id=3456 name=layer calories=100]";
final List<CakeLayerInfo> layers = new ArrayList<>();
final List<CakeInfo> cakes = new ArrayList<>();
final CakeInfo cake = new CakeInfo(new CakeToppingInfo("topping", 1000), layers);
bakingService=mock(CakeBakingService.class)
final CakeBakingService bakingService = mock(CakeBakingService.class);
final CakeViewImpl cakeView = new CakeViewImpl(bakingService);
HolderNaive holderNaive = new HolderNaive();
heavy=holderNaive.getHeavy()
Heavy heavy = holderNaive.getHeavy();
HolderThreadSafe holderThreadSafe = new HolderThreadSafe();
another=holderThreadSafe.getHeavy()
Heavy another = holderThreadSafe.getHeavy();
Java8Holder java8Holder = new Java8Holder();
next=java8Holder.getHeavy()
Heavy next = java8Holder.getHeavy();
String[] args = {};
holderField=HolderNaive.class.getDeclaredField("heavy")
final Field holderField = HolderNaive.class.getDeclaredField("heavy");
holderField=HolderThreadSafe.class.getDeclaredField("heavy")
final Field holderField = HolderThreadSafe.class.getDeclaredField("heavy");
holderField=Java8Holder.class.getDeclaredField("heavy")
final Field holderField = Java8Holder.class.getDeclaredField("heavy");
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
supplierClass=supplier.getClass()
final Class<? extends Supplier> supplierClass = supplier.getClass();
final Class<? extends Supplier> supplierClass = supplier.getClass();
instanceField=supplierClass.getDeclaredField("heavyInstance")
final Field instanceField = supplierClass.getDeclaredField("heavyInstance");
Party party = new PartyImpl();
Hobbit hobbit = new Hobbit();
Wizard wizard = new Wizard();
Rogue rogue = new Rogue();
Hunter hunter = new Hunter();
String[] args = {};
partyMember1=mock(PartyMember.class)
final PartyMember partyMember1 = mock(PartyMember.class);
partyMember2=mock(PartyMember.class)
final PartyMember partyMember2 = mock(PartyMember.class);
final PartyImpl party = new PartyImpl();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
party=mock(Party.class)
final Party party = mock(Party.class);
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
memberClass=member.getClass()
final Class<? extends PartyMember> memberClass = member.getClass();
final Class<? extends PartyMember> memberClass = member.getClass();
Stack<StarMemento> states = new Stack<>();
Star star = new Star(StarType.SUN, 10000000, 500000);
StarMementoInternal state = new StarMementoInternal();
StarMementoInternal state = (StarMementoInternal) memento;
String[] args = {};
final Star star = new Star(StarType.SUN, 1, 2);
final Star star = new Star(StarType.SUN, 1, 2);
firstMemento=star.getMemento()
final StarMemento firstMemento = star.getMemento();
secondMemento=star.getMemento()
final StarMemento secondMemento = star.getMemento();
thirdMemento=star.getMemento()
final StarMemento thirdMemento = star.getMemento();
CamelContext context = new DefaultCamelContext();
String[] args = {};
GiantModel giant = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
GiantView view = new GiantView();
GiantController controller = new GiantController(giant, view);
String[] args = {};
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantView view = new GiantView();
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
FileLoader loader = new FileLoader();
FileSelectorJFrame jFrame = new FileSelectorJFrame();
FileSelectorPresenter presenter = new FileSelectorPresenter(jFrame);
BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)));
StringBuilder sb = new StringBuilder();
String line;
JScrollPane pane = new JScrollPane(area);
data=loader.loadData()
String data = loader.loadData();
String[] args = {};
final FileLoader fileLoader = new FileLoader();
String expectedFile = "Stamatis";
User user = new User("user", 24, Sex.FEMALE, "foobar.com");
IllegalStateException e = new IllegalStateException();
String[] args = {};
User tom = new User(null, 21, Sex.MALE, "tom@foo.bar");
User john = new User("John", 17, Sex.MALE, "john@qwe.bar");
User sarah = new User("Sarah", 42, Sex.FEMALE, "sarah@det.org");
validated=Validator.of(sarah).validate(getName,Objects,"name cannot be null").validate(User,age-- > age > 21,"user is underaged").validate(User,sex-- > sex == Sex.FEMALE,"user is not female").validate(User,email-- > email.contains("@"),"email does not contain @ sign").get()
User validated = Validator.of(sarah).validate(User::getName, Objects::nonNull, "name cannot be null")
        .validate(User::getAge, age -> age > 21, "user is underaged")
        .validate(User::getSex, sex -> sex == Sex.FEMALE, "user is not female")
        .validate(User::getEmail, email -> email.contains("@"), "email does not contain @ sign")
        .get();
LoadBalancer loadBalancer1 = new LoadBalancer();
LoadBalancer loadBalancer2 = new LoadBalancer();
server=servers.get(lastServedId++)
Server server = servers.get(lastServedId++);
String[] args = {};
final LoadBalancer firstBalancer = new LoadBalancer();
final LoadBalancer secondBalancer = new LoadBalancer();
server=mock(Server.class)
final Server server = mock(Server.class);
final LoadBalancer loadBalancer = new LoadBalancer();
final Request request = new Request("test");
String[] args = {};
nazgul=Nazgul.getInstance(name)
final Nazgul nazgul = Nazgul.getInstance(name);
obj=container.newTransientInstance(SimpleObject.class)
final SimpleObject obj = container.newTransientInstance(SimpleObject.class);
final SimpleObject simpleObject = new SimpleObject();
seq=context.sequence("create")
final Sequence seq = context.sequence("create");
obj=simpleObjects.create("Foobar")
final SimpleObject obj = simpleObjects.create("Foobar");
all=Lists.newArrayList()
final List<SimpleObject> all = Lists.newArrayList();
list=simpleObjects.listAll()
final List<SimpleObject> list = simpleObjects.listAll();
final List<SimpleObject> list = simpleObjects.listAll();
String name = "Foobar";
paramName=checkParam("name",ec,String.class)
String paramName = checkParam("name", ec, String.class);
paramNumber=defaultParam("number",ec,3)
final int paramNumber = defaultParam("number", ec, 3);
fs=new SimpleObjectCreate().setName(names.get(i))
final SimpleObjectCreate fs = new SimpleObjectCreate().setName(names.get(i));
isft=IsisSystemForTest.getElseNull()
IsisSystemForTest isft = IsisSystemForTest.getElseNull();
final IsisConfigurationForJdoIntegTests testConfiguration =
          new IsisConfigurationForJdoIntegTests();
findAll=service(SimpleObjects.class).listAll()
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
title=container.titleOf(simpleObjectWrapped)
final String title = container.titleOf(simpleObjectWrapped);
RecreateSimpleObjects fs = new RecreateSimpleObjects();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
simpleObject=wrap(all.get(0))
SimpleObject simpleObject = wrap(all.get(0));
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
causalChain=Throwables.getCausalChain(item)
final List<Throwable> causalChain = Throwables.getCausalChain(item);
final List<Throwable> causalChain = Throwables.getCausalChain(item);
settings=Bootstrap.getSettings()
IBootstrapSettings settings = Bootstrap.getSettings();
final AuthenticatedWebSessionForIsis s =
        (AuthenticatedWebSessionForIsis) super.newSession(request, response);
requestParameters=request.getRequestParameters()
IRequestParameters requestParameters = request.getRequestParameters();
user=requestParameters.getParameterValue("user")
final org.apache.wicket.util.string.StringValue user =
        requestParameters.getParameterValue("user");
password=requestParameters.getParameterValue("pass")
final org.apache.wicket.util.string.StringValue password =
        requestParameters.getParameterValue("pass");
uname=servletRequest.getParameter("user")
String uname = servletRequest.getParameter("user");
final Module isisDefaults = super.newIsisWicketModule();
final Module overrides = new AbstractModule() {
      @Override
      protected void configure() {
        bind(String.class).annotatedWith(Names.named("applicationName")).toInstance("Simple App");
        bind(String.class).annotatedWith(Names.named("applicationCss")).toInstance(
            "css/application.css");
        bind(String.class).annotatedWith(Names.named("applicationJs")).toInstance(
            "scripts/application.js");
        bind(String.class).annotatedWith(Names.named("welcomeMessage")).toInstance(
            readLines(getClass(), "welcome.html"));
        bind(String.class).annotatedWith(Names.named("aboutMessage")).toInstance("Simple App");
        bind(InputStream.class).annotatedWith(Names.named("metaInfManifest")).toProvider(
            Providers.of(getServletContext().getResourceAsStream("/META-INF/MANIFEST.MF")));
      }
    };
readLines=Resources.readLines(Resources.getResource(contextClass,resourceName),Charset.defaultCharset())
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
Node root =
        new NodeImpl("1", new NodeImpl("11", new NodeImpl("111", NullNode.getInstance(),
            NullNode.getInstance()), NullNode.getInstance()), new NodeImpl("12",
            NullNode.getInstance(), new NodeImpl("122", NullNode.getInstance(),
                NullNode.getInstance())));
String[] args = {};
instance=NullNode.getInstance()
final NullNode instance = NullNode.getInstance();
node=NullNode.getInstance()
final NullNode node = NullNode.getInstance();
final NodeImpl level1B = new NodeImpl("level1_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2B = new NodeImpl("level2_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3A = new NodeImpl("level3_a", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3B = new NodeImpl("level3_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2A = new NodeImpl("level2_a", level3A, level3B);
final NodeImpl level1A = new NodeImpl("level1_a", level2A, level2B);
inOrder=Mockito.inOrder(getStdOutMock())
final InOrder inOrder = Mockito.inOrder(getStdOutMock());
level1=TREE_ROOT.getLeft()
final Node level1 = TREE_ROOT.getLeft();
level2=level1.getLeft()
final Node level2 = level1.getLeft();
level3=level2.getLeft()
final Node level3 = level2.getLeft();
level1=TREE_ROOT.getRight()
final Node level1 = TREE_ROOT.getRight();
OliphauntPool pool = new OliphauntPool();
oliphaunt1=pool.checkOut()
Oliphaunt oliphaunt1 = pool.checkOut();
oliphaunt2=pool.checkOut()
Oliphaunt oliphaunt2 = pool.checkOut();
oliphaunt3=pool.checkOut()
Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunt5=pool.checkOut()
Oliphaunt oliphaunt5 = pool.checkOut();
instance=available.iterator().next()
T instance = available.iterator().next();
String[] args = {};
final OliphauntPool pool = new OliphauntPool();
expectedOliphaunt=pool.checkOut()
final Oliphaunt expectedOliphaunt = pool.checkOut();
oliphaunt=pool.checkOut()
final Oliphaunt oliphaunt = pool.checkOut();
final OliphauntPool pool = new OliphauntPool();
firstOliphaunt=pool.checkOut()
final Oliphaunt firstOliphaunt = pool.checkOut();
secondOliphaunt=pool.checkOut()
final Oliphaunt secondOliphaunt = pool.checkOut();
oliphaunt3=pool.checkOut()
final Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
final Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunts=Arrays.asList(pool.checkOut(),pool.checkOut())
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
Weather weather = new Weather();
GWeather gWeather = new GWeather();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
String[] args = {};
final ArrayList<Object[]> testData = new ArrayList<>();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
observer=this.factory.get()
final O observer = this.factory.get();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
observer=this.factory.get()
final O observer = this.factory.get();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
MessageQueue queue = new SimpleMessageQueue(10000);
final Producer producer = new Producer("PRODUCER_1", queue);
final Consumer consumer = new Consumer("CONSUMER_1", queue);
Message msg;
sender=msg.getHeader(Headers.SENDER)
String sender = msg.getHeader(Headers.SENDER);
body=msg.getBody()
String body = msg.getBody();
Message msg = new SimpleMessage();
String[] args = {};
final Message[] messages = new Message[]{
        createMessage("you", "Hello!"),
        createMessage("me", "Hi!"),
        Message.POISON_PILL,
        createMessage("late_for_the_party", "Hello? Anyone here?"),
    };
final MessageQueue queue = new SimpleMessageQueue(messages.length);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final SimpleMessage msg = new SimpleMessage();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
messageCaptor=ArgumentCaptor.forClass(Message.class)
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
message=messageCaptor.getValue()
final Message message = messageCaptor.getValue();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
final SimpleMessage message = new SimpleMessage();
final String senderName = "test";
final SimpleMessage message = new SimpleMessage();
headers=message.getHeaders()
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
Stew stew = new Stew(1, 2, 3, 4);
ImmutableStew immutableStew = new ImmutableStew(2, 4, 3, 6);
String[] args = {};
final Stew stew = new Stew(1, 2, 3, 4);
final String message = "Mixing the stew we find: 1 potatoes, 2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Stew stew = new Stew(1, 2, 3, 4);
final ImmutableStew stew = new ImmutableStew(1, 2, 3, 4);
final String expectedMessage = "Mixing the immutable stew we find: 1 potatoes, "
        + "2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ItemQueue queue = new ItemQueue();
executorService=Executors.newFixedThreadPool(5)
ExecutorService executorService = Executors.newFixedThreadPool(5);
final Producer producer = new Producer("Producer_" + i, queue);
final Consumer consumer = new Consumer("Consumer_" + i, queue);
item=queue.take()
Item item = queue.take();
Item item = new Item(name, itemId++);
Random random = new Random();
String[] args = {};
queue=spy(new ItemQueue())
final ItemQueue queue = spy(new ItemQueue());
final Consumer consumer = new Consumer("consumer", queue);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
queue=mock(ItemQueue.class)
final ItemQueue queue = mock(ItemQueue.class);
final Producer producer = new Producer("producer", queue);
Prototype charProto = new Character();
Character mageProto = new Character(Type.MAGE, charProto);
Character warProto = new Character(Type.WARRIOR, charProto);
Character rogueProto = new Character(Type.ROGUE, charProto);
Character mag = new Character("Player_1", mageProto);
Character warrior = new Character("Player_2", warProto);
Character rogue = new Character("Player_3", rogueProto);
Character rogueDouble = new Character("Player_4", rogue);
containsValue=properties.containsKey(stat)
boolean containsValue = properties.containsKey(stat);
StringBuilder builder = new StringBuilder();
value=this.get(stat)
Integer value = this.get(stat);
String[] args = {};
final Character prototype = new Character();
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character mage = new Character(Type.MAGE, prototype);
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
HeroFactory factory;
Mage mage;
Warlord warlord;
Beast beast;
String[] args = {};
mage=mock(Mage.class)
final Mage mage = mock(Mage.class);
warlord=mock(Warlord.class)
final Warlord warlord = mock(Warlord.class);
beast=mock(Beast.class)
final Beast beast = mock(Beast.class);
final HeroFactoryImpl factory = new HeroFactoryImpl(mage, warlord, beast);
clone=this.testedPrototype.clone()
final Object clone = this.testedPrototype.clone();
WizardTowerProxy tower = new WizardTowerProxy();
String[] args = {};
final String[] wizardNames = {"Gandalf", "Dumbledore", "Oz", "Merlin"};
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTowerProxy tower = new WizardTowerProxy();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTower tower = new WizardTower();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
CamelContext context = new DefaultCamelContext();
template=context.createProducerTemplate()
ProducerTemplate template = context.createProducerTemplate();
String[] args = {};
LoggingHandler loggingHandler = new LoggingHandler();
NioServerSocketChannel channel = new NioServerSocketChannel(port, handler);
NioDatagramChannel channel = new NioDatagramChannel(port, handler);
AppClient appClient = new AppClient();
outputStream=socket.getOutputStream()
OutputStream outputStream = socket.getOutputStream();
PrintWriter writer = new PrintWriter(outputStream);
byte[] data = new byte[1024];
read=inputStream.read(data,0,data.length)
int read = inputStream.read(data, 0, data.length);
String message = clientName + " - Log request: " + i;
DatagramPacket request =
              new DatagramPacket(message.getBytes(), message.getBytes().length, remoteAddress);
byte[] data = new byte[1024];
DatagramPacket reply = new DatagramPacket(data, data.length);
DatagramPacket datagram = (DatagramPacket) readObject;
DatagramPacket replyPacket = new DatagramPacket(ByteBuffer.wrap(ACK));
buffer=ByteBuffer.wrap(ACK)
ByteBuffer buffer = ByteBuffer.wrap(ACK);
pendingWrites=channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
pendingWrite=pendingWrites.poll()
Object pendingWrite = pendingWrites.poll();
pendingWrites=this.channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
sender=((DatagramChannel)key.channel()).receive(buffer)
SocketAddress sender = ((DatagramChannel) key.channel()).receive(buffer);
DatagramPacket packet = new DatagramPacket(buffer);
DatagramPacket pendingPacket = (DatagramPacket) pendingWrite;
key=channel.getJavaChannel().register(selector,channel.getInterestedOps())
SelectionKey key = channel.getJavaChannel().register(selector, channel.getInterestedOps());
keys=selector.selectedKeys()
Set<SelectionKey> keys = selector.selectedKeys();
Set<SelectionKey> keys = selector.selectedKeys();
iterator=keys.iterator()
Iterator<SelectionKey> iterator = keys.iterator();
Iterator<SelectionKey> iterator = keys.iterator();
key=iterator.next()
SelectionKey key = iterator.next();
iterator=pendingCommands.iterator()
Iterator<Runnable> iterator = pendingCommands.iterator();
Iterator<Runnable> iterator = pendingCommands.iterator();
command=iterator.next()
Runnable command = iterator.next();
AbstractNioChannel channel = (AbstractNioChannel) key.attachment();
readObject=((AbstractNioChannel)key.attachment()).read(key)
Object readObject = ((AbstractNioChannel) key.attachment()).read(key);
ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();
socketChannel=serverSocketChannel.accept()
SocketChannel socketChannel = serverSocketChannel.accept();
readKey=socketChannel.register(selector,SelectionKey.OP_READ)
SelectionKey readKey = socketChannel.register(selector, SelectionKey.OP_READ);
SocketChannel socketChannel = (SocketChannel) key.channel();
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
read=socketChannel.read(buffer)
int read = socketChannel.read(buffer);
ByteBuffer pendingBuffer = (ByteBuffer) pendingWrite;
App app = new App(new ThreadPoolDispatcher(2));
AppClient client = new AppClient();
App app = new App(new SameThreadDispatcher());
AppClient client = new AppClient();
executeService=Executors.newFixedThreadPool(10)
ExecutorService executeService = Executors.newFixedThreadPool(10);
ReaderWriterLock lock = new ReaderWriterLock();
String[] args = {};
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
reader1=spy(new Reader("Reader 1",lock.readLock()))
Reader reader1 = spy(new Reader("Reader 1", lock.readLock()));
reader2=spy(new Reader("Reader 2",lock.readLock()))
Reader reader2 = spy(new Reader("Reader 2", lock.readLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
writer1=spy(new Writer("Writer 1",lock.writeLock()))
Writer writer1 = spy(new Writer("Writer 1", lock.writeLock()));
writer2=spy(new Writer("Writer 2",lock.writeLock()))
Writer writer2 = spy(new Writer("Writer 2", lock.writeLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
        "applicationContext.xml");
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
BasicDataSource basicDataSource = new BasicDataSource();
LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();
Properties properties = new Properties();
JpaTransactionManager transactionManager = new JpaTransactionManager();
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
        AppConfig.class);
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
final int prime = 31;
int result = 1;
Person other = (Person) obj;
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
resultSet=dataSource.getConnection().createStatement().executeQuery("SELECT 1")
ResultSet resultSet = dataSource.getConnection().createStatement().executeQuery("SELECT 1");
String result = null;
String expected = "1";
String[] args = {};
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
String[] args = {};
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
King k = new King();
Queen q = new Queen();
ArrayList<Royalty> guests = new ArrayList<>();
boolean anotherDay = true;
String[] args = {};
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
goodMoodRoyalty=mock(Royalty.class)
final Royalty goodMoodRoyalty = mock(Royalty.class);
badMoodRoyalty=mock(Royalty.class)
final Royalty badMoodRoyalty = mock(Royalty.class);
final ArrayList<Royalty> goodCompany = new ArrayList<>();
final ArrayList<Royalty> badCompany = new ArrayList<>();
Spell spell1 = new Spell("Ice dart");
Spell spell2 = new Spell("Invisibility");
Spell spell3 = new Spell("Stun bolt");
Spell spell4 = new Spell("Confusion");
Spell spell5 = new Spell("Darkness");
Spell spell6 = new Spell("Fireball");
Spell spell7 = new Spell("Enchant weapon");
Spell spell8 = new Spell("Rock armour");
Spell spell9 = new Spell("Light");
Spell spell10 = new Spell("Bee swarm");
Spell spell11 = new Spell("Haste");
Spell spell12 = new Spell("Levitation");
Spell spell13 = new Spell("Magic lock");
Spell spell14 = new Spell("Summon hell bat");
Spell spell15 = new Spell("Water walking");
Spell spell16 = new Spell("Magic storm");
Spell spell17 = new Spell("Entangle");
SpellDao spellDao = new SpellDaoImpl();
SpellbookDao spellbookDao = new SpellbookDaoImpl();
Spellbook spellbook1 = new Spellbook("Book of Orgymon");
Spellbook spellbook2 = new Spellbook("Book of Aras");
Spellbook spellbook3 = new Spellbook("Book of Kritior");
Spellbook spellbook4 = new Spellbook("Book of Tamaex");
Spellbook spellbook5 = new Spellbook("Book of Idores");
Spellbook spellbook6 = new Spellbook("Book of Opaen");
Spellbook spellbook7 = new Spellbook("Book of Kihione");
WizardDao wizardDao = new WizardDaoImpl();
Wizard wizard1 = new Wizard("Aderlard Boud");
Wizard wizard2 = new Wizard("Anaxis Bajraktari");
Wizard wizard3 = new Wizard("Xuban Munoa");
Wizard wizard4 = new Wizard("Blasius Dehooge");
MagicService service =
        new MagicServiceImpl(new WizardDaoImpl(), new SpellbookDaoImpl(), new SpellDaoImpl());
wizardsWithSpellbook=service.findWizardsWithSpellbook("Book of Idores")
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
wizardsWithSpell=service.findWizardsWithSpell("Fireball")
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
List<E> result = null;
List<E> result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
spellbook=spellbookDao.findByName(name)
Spellbook spellbook = spellbookDao.findByName(name);
spell=spellDao.findByName(name)
Spell spell = spellDao.findByName(name);
spellbook=spell.getSpellbook()
Spellbook spellbook = spell.getSpellbook();
session=getSession()
Session session = getSession();
Transaction tx = null;
Spell result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Spellbook result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Wizard result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
String[] args = {};
className=dao.persistentClass.getSimpleName()
final String className = dao.persistentClass.getSimpleName();
entityName=String.format("%s%d",className,ID_GENERATOR.incrementAndGet())
final String entityName = String.format("%s%d", className, ID_GENERATOR.incrementAndGet());
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
byId=this.dao.find(entity.getId())
final E byId = this.dao.find(entity.getId());
originalEntities=this.dao.findAll()
final List<E> originalEntities = this.dao.findAll();
final List<E> originalEntities = this.dao.findAll();
entitiesLeft=this.dao.findAll()
final List<E> entitiesLeft = this.dao.findAll();
final List<E> entitiesLeft = this.dao.findAll();
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
expectedId=Long.valueOf(1)
final Long expectedId = Long.valueOf(1);
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
final String expectedName = "new name";
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
final String bookname = "bookname";
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
final Set<Wizard> wizards = new HashSet<>();
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpellbook(bookname)
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final Set<Wizard> wizards = new HashSet<>();
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spell=mock(Spell.class)
final Spell spell = mock(Spell.class);
final String spellName = "spellname";
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpell(spellName)
final List<Wizard> result = service.findWizardsWithSpell(spellName);
final List<Wizard> result = service.findWizardsWithSpell(spellName);
dao=getDao()
final SpellDaoImpl dao = getDao();
allSpells=dao.findAll()
final List<Spell> allSpells = dao.findAll();
final List<Spell> allSpells = dao.findAll();
spellByName=dao.findByName(spell.getName())
final Spell spellByName = dao.findByName(spell.getName());
dao=getDao()
final SpellbookDaoImpl dao = getDao();
allBooks=dao.findAll()
final List<Spellbook> allBooks = dao.findAll();
final List<Spellbook> allBooks = dao.findAll();
spellByName=dao.findByName(book.getName())
final Spellbook spellByName = dao.findByName(book.getName());
dao=getDao()
final WizardDaoImpl dao = getDao();
allWizards=dao.findAll()
final List<Wizard> allWizards = dao.findAll();
final List<Wizard> allWizards = dao.findAll();
byName=dao.findByName(spell.getName())
final Wizard byName = dao.findByName(spell.getName());
service=ServiceLocator.getService("jndi/serviceA")
Service service = ServiceLocator.getService("jndi/serviceA");
Service cachedService = null;
serviceObj=serviceCache.getService(serviceJndiName)
Service serviceObj = serviceCache.getService(serviceJndiName);
InitContext ctx = new InitContext();
String[] args = {};
final String[] serviceNames = new String[]{
        "jndi/serviceA", "jndi/serviceB"
    };
service=ServiceLocator.getService(serviceName)
final Service service = ServiceLocator.getService(serviceName);
ivoryTower1=IvoryTower.getInstance()
IvoryTower ivoryTower1 = IvoryTower.getInstance();
ivoryTower2=IvoryTower.getInstance()
IvoryTower ivoryTower2 = IvoryTower.getInstance();
threadSafeIvoryTower1=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower1 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
threadSafeIvoryTower2=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower2 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
EnumIvoryTower enumIvoryTower1 = EnumIvoryTower.INSTANCE;
EnumIvoryTower enumIvoryTower2 = EnumIvoryTower.INSTANCE;
dcl1=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();
dcl2=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();
demandHolderIdiom=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom =
        InitializingOnDemandHolderIdiom.getInstance();
demandHolderIdiom2=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom2 =
        InitializingOnDemandHolderIdiom.getInstance();
ThreadSafeDoubleCheckLocking result = instance;
String[] args = {};
instance1=this.singletonInstanceMethod.get()
S instance1 = this.singletonInstanceMethod.get();
instance2=this.singletonInstanceMethod.get()
S instance2 = this.singletonInstanceMethod.get();
instance3=this.singletonInstanceMethod.get()
S instance3 = this.singletonInstanceMethod.get();
final List<Callable<S>> tasks = new ArrayList<>();
int i = 0
creatures=Arrays.asList(new Goblin(),new Octopus(),new Dragon(),new Shark(),new Troll(),new KillerBee())
List<Creature> creatures =
        Arrays.asList(new Goblin(), new Octopus(), new Dragon(), new Shark(), new Troll(),
            new KillerBee());
walkingCreatures=creatures.stream().filter(new MovementSelector(Movement.WALKING)).collect(Collectors.toList())
List<Creature> walkingCreatures =
        creatures.stream().filter(new MovementSelector(Movement.WALKING))
            .collect(Collectors.toList());
darkCreatures=creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList())
List<Creature> darkCreatures =
        creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList());
redAndFlyingCreatures=creatures.stream().filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING))).collect(Collectors.toList())
List<Creature> redAndFlyingCreatures =
        creatures.stream()
            .filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING)))
            .collect(Collectors.toList());
String[] args = {};
toString=this.testedCreature.toString()
final String toString = this.testedCreature.toString();
greenCreature=mock(Creature.class)
final Creature greenCreature = mock(Creature.class);
redCreature=mock(Creature.class)
final Creature redCreature = mock(Creature.class);
final ColorSelector greenSelector = new ColorSelector(Color.GREEN);
swimmingCreature=mock(Creature.class)
final Creature swimmingCreature = mock(Creature.class);
flyingCreature=mock(Creature.class)
final Creature flyingCreature = mock(Creature.class);
final MovementSelector swimmingSelector = new MovementSelector(Movement.SWIMMING);
normalCreature=mock(Creature.class)
final Creature normalCreature = mock(Creature.class);
smallCreature=mock(Creature.class)
final Creature smallCreature = mock(Creature.class);
final SizeSelector normalSelector = new SizeSelector(Size.NORMAL);
Mammoth mammoth = new Mammoth();
String[] args = {};
inOrder=Mockito.inOrder(this.stdOutMock)
final InOrder inOrder = Mockito.inOrder(this.stdOutMock);
final Mammoth mammoth = new Mammoth();
toString=new Mammoth().toString()
final String toString = new Mammoth().toString();
warrior=CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin").withWeapon("Sword").noAbilities().build()
Character warrior =
        CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin")
            .withWeapon("Sword").noAbilities().build();
mage=CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer").withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport").noMoreAbilities().build()
Character mage =
        CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer")
            .withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport")
            .noMoreAbilities().build();
thief=CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build()
Character thief =
        CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build();
StringBuilder sb = new StringBuilder();
Character character = new Character(name);
String[] args = {};
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").withAbility("invisibility").withAbility("wisdom").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .withAbility("invisibility")
        .withAbility("wisdom")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").noSpell().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .noSpell()
        .build();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .noAbilities()
        .build();
character=CharacterStepBuilder.newBuilder().name("Cuauhtemoc").fighterClass("aztec").withWeapon("spear").withAbility("speed").withAbility("strength").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Cuauhtemoc")
        .fighterClass("aztec")
        .withWeapon("spear")
        .withAbility("speed")
        .withAbility("strength")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Poor warrior").fighterClass("none").noWeapon().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Poor warrior")
        .fighterClass("none")
        .noWeapon()
        .build();
character=CharacterStepBuilder.newBuilder().name("Weak warrior").fighterClass("none").withWeapon("Slingshot").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Weak warrior")
        .fighterClass("none")
        .withWeapon("Slingshot")
        .noAbilities()
        .build();
DragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());
String[] args = {};
strategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy strategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(strategy);
initialStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy initialStrategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(initialStrategy);
newStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy newStrategy = mock(DragonSlayingStrategy.class);
HalflingThief thief = new HalflingThief(new HitAndRunMethod());
target=pickTarget()
String target = pickTarget();
String[] args = {};
method=mock(StealingMethod.class)
final StealingMethod method = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(method);
initialMethod=mock(StealingMethod.class)
final StealingMethod initialMethod = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(initialMethod);
newMethod=mock(StealingMethod.class)
final StealingMethod newMethod = mock(StealingMethod.class);
inOrder=inOrder(this.stdOutMock)
final InOrder inOrder = inOrder(this.stdOutMock);
List<Task> tasks = new ArrayList<>();
executor=Executors.newFixedThreadPool(3)
ExecutorService executor = Executors.newFixedThreadPool(3);
Runnable worker = new Worker(tasks.get(i));
String[] args = {};
service=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService service = Executors.newFixedThreadPool(THREAD_COUNT);
final List<Callable<Integer>> tasks = new ArrayList<>();
int i = 0
task=mock(Task.class)
final Task task = mock(Task.class);
final Worker worker = new Worker(task);
RainbowFish fishV1 = new RainbowFish("Zed", 10, 11, 12);
deserializedFishV1=RainbowFishSerializer.readV1("fish1.out")
RainbowFish deserializedFishV1 = RainbowFishSerializer.readV1("fish1.out");
RainbowFishV2 fishV2 = new RainbowFishV2("Scar", 5, 12, 15, true, true, true);
deserializedFishV2=RainbowFishSerializer.readV1("fish2.out")
RainbowFish deserializedFishV2 = RainbowFishSerializer.readV1("fish2.out");
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
FileInputStream fileIn = new FileInputStream(filename);
ObjectInputStream objIn = new ObjectInputStream(fileIn);
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
String[] args = {};
File file1 = new File("fish1.out");
File file2 = new File("fish2.out");
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
final RainbowFish fish = new RainbowFish("name", 1, 2, 3);
final RainbowFishV2 fish = new RainbowFishV2("name", 1, 2, 3, false, true, false);
BallItem ballItem = new BallItem();
BallThread ballThread = new BallThread();
String[] args = {};
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
inOrder=inOrder(ballThread)
final InOrder inOrder = inOrder(ballThread);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
exceptionHandler=mock(UncaughtExceptionHandler.class)
final UncaughtExceptionHandler exceptionHandler = mock(UncaughtExceptionHandler.class);
statA=HeroStat.valueOf(10,5,0)
HeroStat statA = HeroStat.valueOf(10, 5, 0);
statB=HeroStat.valueOf(10,5,0)
HeroStat statB = HeroStat.valueOf(10, 5, 0);
statC=HeroStat.valueOf(5,1,8)
HeroStat statC = HeroStat.valueOf(5, 1, 8);
final int prime = 31;
int result = 1;
HeroStat other = (HeroStat) obj;
String[] args = {};
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatC=HeroStat.valueOf(3,9,8)
HeroStat heroStatC = HeroStat.valueOf(3, 9, 8);
Commander commander =
        new Commander(new Sergeant(new Soldier(), new Soldier(), new Soldier()), new Sergeant(
            new Soldier(), new Soldier(), new Soldier()));
String[] args = {};
final Unit[] children = new Unit[5];
unit=this.factory.apply(children)
final U unit = this.factory.apply(children);
visitor=mock(UnitVisitor.class)
final UnitVisitor visitor = mock(UnitVisitor.class);

Diff of a4637fcf99dabad0f13650f01d4a383eb3427f13 and 031bbe9f096762ec4c6852bf63eff957e3ef5ac0:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 212
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 6
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision a4637fcf99dabad0f13650f01d4a383eb3427f13 to 031bbe9f096762ec4c6852bf63eff957e3ef5ac0


****Parsing for addition at revision 031bbe9f096762ec4c6852bf63eff957e3ef5ac0****

Added App.java to .\/java-design-patterns\ repository source files.
Added Army.java to .\/java-design-patterns\ repository source files.
Added Castle.java to .\/java-design-patterns\ repository source files.
Added ElfArmy.java to .\/java-design-patterns\ repository source files.
Added ElfCastle.java to .\/java-design-patterns\ repository source files.
Added ElfKing.java to .\/java-design-patterns\ repository source files.
Added ElfKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added KingdomFactory.java to .\/java-design-patterns\ repository source files.
Added OrcArmy.java to .\/java-design-patterns\ repository source files.
Added OrcCastle.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added AbstractFactoryTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BattleFishingBoat.java to .\/java-design-patterns\ repository source files.
Added BattleShip.java to .\/java-design-patterns\ repository source files.
Added Captain.java to .\/java-design-patterns\ repository source files.
Added FishingBoat.java to .\/java-design-patterns\ repository source files.
Added AdapterPatternTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsyncCallback.java to .\/java-design-patterns\ repository source files.
Added AsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AsyncResult.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Excalibur.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added MagicWeapon.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Mjollnir.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Stormbringer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Armor.java to .\/java-design-patterns\ repository source files.
Added HairColor.java to .\/java-design-patterns\ repository source files.
Added HairType.java to .\/java-design-patterns\ repository source files.
Added Hero.java to .\/java-design-patterns\ repository source files.
Added Profession.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegate.java to .\/java-design-patterns\ repository source files.
Added BusinessLookup.java to .\/java-design-patterns\ repository source files.
Added BusinessService.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added EjbService.java to .\/java-design-patterns\ repository source files.
Added JmsService.java to .\/java-design-patterns\ repository source files.
Added ServiceType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegateTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppManager.java to .\/java-design-patterns\ repository source files.
Added CacheStore.java to .\/java-design-patterns\ repository source files.
Added CachingPolicy.java to .\/java-design-patterns\ repository source files.
Added DbManager.java to .\/java-design-patterns\ repository source files.
Added LruCache.java to .\/java-design-patterns\ repository source files.
Added UserAccount.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CachingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Callback.java to .\/java-design-patterns\ repository source files.
Added LambdasApp.java to .\/java-design-patterns\ repository source files.
Added SimpleTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CallbackTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added OrcCommander.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcOfficer.java to .\/java-design-patterns\ repository source files.
Added OrcSoldier.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added RequestHandler.java to .\/java-design-patterns\ repository source files.
Added RequestType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OrcKingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added InvisibilitySpell.java to .\/java-design-patterns\ repository source files.
Added ShrinkSpell.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added Visibility.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Letter.java to .\/java-design-patterns\ repository source files.
Added LetterComposite.java to .\/java-design-patterns\ repository source files.
Added Messenger.java to .\/java-design-patterns\ repository source files.
Added Sentence.java to .\/java-design-patterns\ repository source files.
Added Word.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MessengerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Customer.java to .\/java-design-patterns\ repository source files.
Added CustomerDao.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added CustomerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hostile.java to .\/java-design-patterns\ repository source files.
Added SmartHostile.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SmartHostileTest.java to .\/java-design-patterns\ repository source files.
Added TrollTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Printer.java to .\/java-design-patterns\ repository source files.
Added PrinterController.java to .\/java-design-patterns\ repository source files.
Added CanonPrinter.java to .\/java-design-patterns\ repository source files.
Added EpsonPrinter.java to .\/java-design-patterns\ repository source files.
Added HpPrinter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DelegateTest.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizard.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GuiceWizard.java to .\/java-design-patterns\ repository source files.
Added OldTobyTobacco.java to .\/java-design-patterns\ repository source files.
Added RivendellTobacco.java to .\/java-design-patterns\ repository source files.
Added SecondBreakfastTobacco.java to .\/java-design-patterns\ repository source files.
Added SimpleWizard.java to .\/java-design-patterns\ repository source files.
Added Tobacco.java to .\/java-design-patterns\ repository source files.
Added TobaccoModule.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizardTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GuiceWizardTest.java to .\/java-design-patterns\ repository source files.
Added SimpleWizardTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Inventory.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added InventoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroid.java to .\/java-design-patterns\ repository source files.
Added GameObject.java to .\/java-design-patterns\ repository source files.
Added Meteoroid.java to .\/java-design-patterns\ repository source files.
Added Rectangle.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIss.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMir.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CollisionTest.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroidTest.java to .\/java-design-patterns\ repository source files.
Added MeteoroidTest.java to .\/java-design-patterns\ repository source files.
Added RectangleTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIssTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMirTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added EventEmitter.java to .\/java-design-patterns\ repository source files.
Added EventObserver.java to .\/java-design-patterns\ repository source files.
Added KingJoffrey.java to .\/java-design-patterns\ repository source files.
Added KingsHand.java to .\/java-design-patterns\ repository source files.
Added LordBaelish.java to .\/java-design-patterns\ repository source files.
Added LordVarys.java to .\/java-design-patterns\ repository source files.
Added Scout.java to .\/java-design-patterns\ repository source files.
Added Weekday.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EventEmitterTest.java to .\/java-design-patterns\ repository source files.
Added EventTest.java to .\/java-design-patterns\ repository source files.
Added KingJoffreyTest.java to .\/java-design-patterns\ repository source files.
Added KingsHandTest.java to .\/java-design-patterns\ repository source files.
Added LordBaelishTest.java to .\/java-design-patterns\ repository source files.
Added LordVarysTest.java to .\/java-design-patterns\ repository source files.
Added ScoutTest.java to .\/java-design-patterns\ repository source files.
Added WeekdayTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEvent.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEvent.java to .\/java-design-patterns\ repository source files.
Added EventDispatcher.java to .\/java-design-patterns\ repository source files.
Added Handler.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventTest.java to .\/java-design-patterns\ repository source files.
Added EventDispatcherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileWriterAction.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DwarvenCartOperator.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldDigger.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacade.java to .\/java-design-patterns\ repository source files.
Added DwarvenMineWorker.java to .\/java-design-patterns\ repository source files.
Added DwarvenTunnelDigger.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacadeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Axe.java to .\/java-design-patterns\ repository source files.
Added Bow.java to .\/java-design-patterns\ repository source files.
Added Builder.java to .\/java-design-patterns\ repository source files.
Added Spear.java to .\/java-design-patterns\ repository source files.
Added Sword.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponFactory.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryKitTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Blacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfBlacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfWeapon.java to .\/java-design-patterns\ repository source files.
Added OrcBlacksmith.java to .\/java-design-patterns\ repository source files.
Added OrcWeapon.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added UserGroup.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added UserGroupTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FluentIterable.java to .\/java-design-patterns\ repository source files.
Added DecoratingIterator.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterable.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterable.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added ActionType.java to .\/java-design-patterns\ repository source files.
Added Content.java to .\/java-design-patterns\ repository source files.
Added ContentAction.java to .\/java-design-patterns\ repository source files.
Added MenuAction.java to .\/java-design-patterns\ repository source files.
Added MenuItem.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added ContentStore.java to .\/java-design-patterns\ repository source files.
Added MenuStore.java to .\/java-design-patterns\ repository source files.
Added Store.java to .\/java-design-patterns\ repository source files.
Added ContentView.java to .\/java-design-patterns\ repository source files.
Added MenuView.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ContentTest.java to .\/java-design-patterns\ repository source files.
Added MenuItemTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DispatcherTest.java to .\/java-design-patterns\ repository source files.
Added ContentStoreTest.java to .\/java-design-patterns\ repository source files.
Added MenuStoreTest.java to .\/java-design-patterns\ repository source files.
Added ContentViewTest.java to .\/java-design-patterns\ repository source files.
Added MenuViewTest.java to .\/java-design-patterns\ repository source files.
Added AlchemistShop.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HealingPotion.java to .\/java-design-patterns\ repository source files.
Added HolyWaterPotion.java to .\/java-design-patterns\ repository source files.
Added InvisibilityPotion.java to .\/java-design-patterns\ repository source files.
Added PoisonPotion.java to .\/java-design-patterns\ repository source files.
Added Potion.java to .\/java-design-patterns\ repository source files.
Added PotionFactory.java to .\/java-design-patterns\ repository source files.
Added PotionType.java to .\/java-design-patterns\ repository source files.
Added StrengthPotion.java to .\/java-design-patterns\ repository source files.
Added AlchemistShopTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ApplicationException.java to .\/java-design-patterns\ repository source files.
Added ArcherCommand.java to .\/java-design-patterns\ repository source files.
Added ArcherView.java to .\/java-design-patterns\ repository source files.
Added CatapultCommand.java to .\/java-design-patterns\ repository source files.
Added CatapultView.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added ErrorView.java to .\/java-design-patterns\ repository source files.
Added FrontController.java to .\/java-design-patterns\ repository source files.
Added UnknownCommand.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ApplicationExceptionTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added FrontControllerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added ViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsynchronousService.java to .\/java-design-patterns\ repository source files.
Added AsyncTask.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added AsynchronousServiceTest.java to .\/java-design-patterns\ repository source files.
Added AbstractFilter.java to .\/java-design-patterns\ repository source files.
Added AddressFilter.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added ContactFilter.java to .\/java-design-patterns\ repository source files.
Added DepositFilter.java to .\/java-design-patterns\ repository source files.
Added Filter.java to .\/java-design-patterns\ repository source files.
Added FilterChain.java to .\/java-design-patterns\ repository source files.
Added FilterManager.java to .\/java-design-patterns\ repository source files.
Added NameFilter.java to .\/java-design-patterns\ repository source files.
Added Order.java to .\/java-design-patterns\ repository source files.
Added OrderFilter.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FilterManagerTest.java to .\/java-design-patterns\ repository source files.
Added FilterTest.java to .\/java-design-patterns\ repository source files.
Added OrderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Expression.java to .\/java-design-patterns\ repository source files.
Added MinusExpression.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpression.java to .\/java-design-patterns\ repository source files.
Added NumberExpression.java to .\/java-design-patterns\ repository source files.
Added PlusExpression.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MinusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpressionTest.java to .\/java-design-patterns\ repository source files.
Added NumberExpressionTest.java to .\/java-design-patterns\ repository source files.
Added PlusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemIterator.java to .\/java-design-patterns\ repository source files.
Added ItemType.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestItemIterator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Cake.java to .\/java-design-patterns\ repository source files.
Added CakeBakingException.java to .\/java-design-patterns\ repository source files.
Added CakeBakingService.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImpl.java to .\/java-design-patterns\ repository source files.
Added CakeDao.java to .\/java-design-patterns\ repository source files.
Added CakeInfo.java to .\/java-design-patterns\ repository source files.
Added CakeLayer.java to .\/java-design-patterns\ repository source files.
Added CakeLayerDao.java to .\/java-design-patterns\ repository source files.
Added CakeLayerInfo.java to .\/java-design-patterns\ repository source files.
Added CakeTopping.java to .\/java-design-patterns\ repository source files.
Added CakeToppingDao.java to .\/java-design-patterns\ repository source files.
Added CakeToppingInfo.java to .\/java-design-patterns\ repository source files.
Added CakeViewImpl.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingExceptionTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added CakeTest.java to .\/java-design-patterns\ repository source files.
Added CakeViewImplTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Heavy.java to .\/java-design-patterns\ repository source files.
Added HolderNaive.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafe.java to .\/java-design-patterns\ repository source files.
Added Java8Holder.java to .\/java-design-patterns\ repository source files.
Added AbstractHolderTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HolderNaiveTest.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafeTest.java to .\/java-design-patterns\ repository source files.
Added Java8HolderTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hobbit.java to .\/java-design-patterns\ repository source files.
Added Hunter.java to .\/java-design-patterns\ repository source files.
Added Party.java to .\/java-design-patterns\ repository source files.
Added PartyImpl.java to .\/java-design-patterns\ repository source files.
Added PartyMember.java to .\/java-design-patterns\ repository source files.
Added PartyMemberBase.java to .\/java-design-patterns\ repository source files.
Added Rogue.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added PartyImplTest.java to .\/java-design-patterns\ repository source files.
Added PartyMemberTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Star.java to .\/java-design-patterns\ repository source files.
Added StarMemento.java to .\/java-design-patterns\ repository source files.
Added StarType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StarTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Fatigue.java to .\/java-design-patterns\ repository source files.
Added GiantController.java to .\/java-design-patterns\ repository source files.
Added GiantModel.java to .\/java-design-patterns\ repository source files.
Added GiantView.java to .\/java-design-patterns\ repository source files.
Added Health.java to .\/java-design-patterns\ repository source files.
Added Nourishment.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GiantControllerTest.java to .\/java-design-patterns\ repository source files.
Added GiantModelTest.java to .\/java-design-patterns\ repository source files.
Added GiantViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileLoader.java to .\/java-design-patterns\ repository source files.
Added FileSelectorJFrame.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenter.java to .\/java-design-patterns\ repository source files.
Added FileSelectorStub.java to .\/java-design-patterns\ repository source files.
Added FileSelectorView.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FileLoaderTest.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Sex.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added Validator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MonadTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added LoadBalancer.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added Server.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added LoadBalancerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Nazgul.java to .\/java-design-patterns\ repository source files.
Added NazgulName.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NazgulTest.java to .\/java-design-patterns\ repository source files.
Added HomePageService.java to .\/java-design-patterns\ repository source files.
Added HomePageViewModel.java to .\/java-design-patterns\ repository source files.
Added SimpleObject.java to .\/java-design-patterns\ repository source files.
Added SimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectTest.java to .\/java-design-patterns\ repository source files.
Added DomainAppFixturesProvider.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectCreate.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTearDown.java to .\/java-design-patterns\ repository source files.
Added RecreateSimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleAppSystemInitializer.java to .\/java-design-patterns\ repository source files.
Added BootstrappingGlue.java to .\/java-design-patterns\ repository source files.
Added CatalogOfFixturesGlue.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectGlue.java to .\/java-design-patterns\ repository source files.
Added RunSpecs.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleAppIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleApplication.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Node.java to .\/java-design-patterns\ repository source files.
Added NodeImpl.java to .\/java-design-patterns\ repository source files.
Added NullNode.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NullNodeTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added TreeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ObjectPool.java to .\/java-design-patterns\ repository source files.
Added Oliphaunt.java to .\/java-design-patterns\ repository source files.
Added OliphauntPool.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OliphauntPoolTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GHobbits.java to .\/java-design-patterns\ repository source files.
Added GOrcs.java to .\/java-design-patterns\ repository source files.
Added GWeather.java to .\/java-design-patterns\ repository source files.
Added Observable.java to .\/java-design-patterns\ repository source files.
Added Observer.java to .\/java-design-patterns\ repository source files.
Added Race.java to .\/java-design-patterns\ repository source files.
Added Hobbits.java to .\/java-design-patterns\ repository source files.
Added Orcs.java to .\/java-design-patterns\ repository source files.
Added Weather.java to .\/java-design-patterns\ repository source files.
Added WeatherObserver.java to .\/java-design-patterns\ repository source files.
Added WeatherType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GHobbitsTest.java to .\/java-design-patterns\ repository source files.
Added GWeatherTest.java to .\/java-design-patterns\ repository source files.
Added ObserverTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added HobbitsTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WeatherObserverTest.java to .\/java-design-patterns\ repository source files.
Added WeatherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added MessageQueue.java to .\/java-design-patterns\ repository source files.
Added MqPublishPoint.java to .\/java-design-patterns\ repository source files.
Added MqSubscribePoint.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added SimpleMessage.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageQueue.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added PoisonMessageTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ImmutableStew.java to .\/java-design-patterns\ repository source files.
Added Stew.java to .\/java-design-patterns\ repository source files.
Added StewData.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ImmutableStewTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added StewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemQueue.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Stats.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Beast.java to .\/java-design-patterns\ repository source files.
Added ElfBeast.java to .\/java-design-patterns\ repository source files.
Added ElfMage.java to .\/java-design-patterns\ repository source files.
Added ElfWarlord.java to .\/java-design-patterns\ repository source files.
Added HeroFactory.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImpl.java to .\/java-design-patterns\ repository source files.
Added Mage.java to .\/java-design-patterns\ repository source files.
Added OrcBeast.java to .\/java-design-patterns\ repository source files.
Added OrcMage.java to .\/java-design-patterns\ repository source files.
Added OrcWarlord.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Warlord.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImplTest.java to .\/java-design-patterns\ repository source files.
Added PrototypeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardTower.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WizardTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxyTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppClient.java to .\/java-design-patterns\ repository source files.
Added LoggingHandler.java to .\/java-design-patterns\ repository source files.
Added AbstractNioChannel.java to .\/java-design-patterns\ repository source files.
Added ChannelHandler.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added NioDatagramChannel.java to .\/java-design-patterns\ repository source files.
Added NioReactor.java to .\/java-design-patterns\ repository source files.
Added NioServerSocketChannel.java to .\/java-design-patterns\ repository source files.
Added SameThreadDispatcher.java to .\/java-design-patterns\ repository source files.
Added ThreadPoolDispatcher.java to .\/java-design-patterns\ repository source files.
Added ReactorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Reader.java to .\/java-design-patterns\ repository source files.
Added ReaderWriterLock.java to .\/java-design-patterns\ repository source files.
Added Writer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ReaderAndWriterTest.java to .\/java-design-patterns\ repository source files.
Added ReaderTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppConfig.java to .\/java-design-patterns\ repository source files.
Added Person.java to .\/java-design-patterns\ repository source files.
Added PersonRepository.java to .\/java-design-patterns\ repository source files.
Added PersonSpecifications.java to .\/java-design-patterns\ repository source files.
Added AnnotationBasedRepositoryTest.java to .\/java-design-patterns\ repository source files.
Added AppConfigTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RepositoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added SlidingDoor.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ClosableTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added Queen.java to .\/java-design-patterns\ repository source files.
Added Royalty.java to .\/java-design-patterns\ repository source files.
Added Servant.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added KingTest.java to .\/java-design-patterns\ repository source files.
Added QueenTest.java to .\/java-design-patterns\ repository source files.
Added ServantTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BaseEntity.java to .\/java-design-patterns\ repository source files.
Added Dao.java to .\/java-design-patterns\ repository source files.
Added DaoBaseImpl.java to .\/java-design-patterns\ repository source files.
Added HibernateUtil.java to .\/java-design-patterns\ repository source files.
Added MagicService.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImpl.java to .\/java-design-patterns\ repository source files.
Added Spell.java to .\/java-design-patterns\ repository source files.
Added SpellDao.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Spellbook.java to .\/java-design-patterns\ repository source files.
Added SpellbookDao.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardDao.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BaseDaoTest.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added InitContext.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added ServiceCache.java to .\/java-design-patterns\ repository source files.
Added ServiceImpl.java to .\/java-design-patterns\ repository source files.
Added ServiceLocator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ServiceLocatorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTower.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiom.java to .\/java-design-patterns\ repository source files.
Added IvoryTower.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLocking.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTower.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiomTest.java to .\/java-design-patterns\ repository source files.
Added IvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added SingletonTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLockingTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AbstractCreature.java to .\/java-design-patterns\ repository source files.
Added Creature.java to .\/java-design-patterns\ repository source files.
Added Dragon.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added KillerBee.java to .\/java-design-patterns\ repository source files.
Added Octopus.java to .\/java-design-patterns\ repository source files.
Added Shark.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added Color.java to .\/java-design-patterns\ repository source files.
Added Movement.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added ColorSelector.java to .\/java-design-patterns\ repository source files.
Added MovementSelector.java to .\/java-design-patterns\ repository source files.
Added SizeSelector.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CreatureTest.java to .\/java-design-patterns\ repository source files.
Added ColorSelectorTest.java to .\/java-design-patterns\ repository source files.
Added MovementSelectorTest.java to .\/java-design-patterns\ repository source files.
Added SizeSelectorTest.java to .\/java-design-patterns\ repository source files.
Added AngryState.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Mammoth.java to .\/java-design-patterns\ repository source files.
Added PeacefulState.java to .\/java-design-patterns\ repository source files.
Added State.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MammothTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilder.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DragonSlayer.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategy.java to .\/java-design-patterns\ repository source files.
Added MeleeStrategy.java to .\/java-design-patterns\ repository source files.
Added ProjectileStrategy.java to .\/java-design-patterns\ repository source files.
Added SpellStrategy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayerTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategyTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HalflingThief.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethod.java to .\/java-design-patterns\ repository source files.
Added StealingMethod.java to .\/java-design-patterns\ repository source files.
Added SubtleMethod.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HalflingThiefTest.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethodTest.java to .\/java-design-patterns\ repository source files.
Added StealingMethodTest.java to .\/java-design-patterns\ repository source files.
Added SubtleMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTask.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added Worker.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTaskTest.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTaskTest.java to .\/java-design-patterns\ repository source files.
Added TaskTest.java to .\/java-design-patterns\ repository source files.
Added WorkerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added RainbowFish.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializer.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializerTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2Test.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BallItem.java to .\/java-design-patterns\ repository source files.
Added BallThread.java to .\/java-design-patterns\ repository source files.
Added GameItem.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BallItemTest.java to .\/java-design-patterns\ repository source files.
Added BallThreadTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HeroStat.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroStatTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Commander.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitor.java to .\/java-design-patterns\ repository source files.
Added Sergeant.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitor.java to .\/java-design-patterns\ repository source files.
Added Soldier.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitor.java to .\/java-design-patterns\ repository source files.
Added Unit.java to .\/java-design-patterns\ repository source files.
Added UnitVisitor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommanderTest.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SergeantTest.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SoldierTest.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitorTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added UnitTest.java to .\/java-design-patterns\ repository source files.
Added VisitorTest.java to .\/java-design-patterns\ repository source files.
App app = new App();
elfKing=app.getKing(elfFactory)
final King elfKing = app.getKing(elfFactory);
orcKing=app.getKing(orcFactory)
final King orcKing = app.getKing(orcFactory);
elfCastle=app.getCastle(elfFactory)
final Castle elfCastle = app.getCastle(elfFactory);
orcCastle=app.getCastle(orcFactory)
final Castle orcCastle = app.getCastle(orcFactory);
elfArmy=app.getArmy(elfFactory)
final Army elfArmy = app.getArmy(elfFactory);
orcArmy=app.getArmy(orcFactory)
final Army orcArmy = app.getArmy(orcFactory);
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
String[] args = {};
Captain captain = new Captain(new BattleFishingBoat());
battleFishingBoat=spy(new BattleFishingBoat())
BattleFishingBoat battleFishingBoat = spy(new BattleFishingBoat());
Captain captain = new Captain();
BattleShip captain = (BattleShip) beans.get(CAPTAIN_BEAN);
BattleShip battleship = (BattleShip) beans.get(BATTLESHIP_BEAN);
String[] args = {};
AsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult1=executor.startProcess(lazyval(10,500))
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
asyncResult2=executor.startProcess(lazyval("test",300))
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
asyncResult3=executor.startProcess(lazyval(50L,700))
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
asyncResult4=executor.startProcess(lazyval(20,400),callback("Callback result 4"))
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
asyncResult5=executor.startProcess(lazyval("callback",600),callback("Callback result 5"))
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
result1=executor.endProcess(asyncResult1)
Integer result1 = executor.endProcess(asyncResult1);
result2=executor.endProcess(asyncResult2)
String result2 = executor.endProcess(asyncResult2);
result3=executor.endProcess(asyncResult3)
Long result3 = executor.endProcess(asyncResult3);
CompletableResult<T> result = new CompletableResult<>(callback);
String[] args = {};
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null)
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(null,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
exception=optionalException.get()
final Exception exception = optionalException.get();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null,null)
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());
FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());
SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());
String[] args = {};
excalibur=spy(new Excalibur())
final Excalibur excalibur = spy(new Excalibur());
final BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(excalibur);
mjollnir=spy(new Mjollnir())
final Mjollnir mjollnir = spy(new Mjollnir());
final FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(mjollnir);
stormbringer=spy(new Stormbringer())
final Stormbringer stormbringer = spy(new Stormbringer());
final SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(stormbringer);
mage=new HeroBuilder(Profession.MAGE,"Riobard").withHairColor(HairColor.BLACK).withWeapon(Weapon.DAGGER).build()
Hero mage =
        new HeroBuilder(Profession.MAGE, "Riobard").withHairColor(HairColor.BLACK)
            .withWeapon(Weapon.DAGGER).build();
warrior=new HeroBuilder(Profession.WARRIOR,"Amberjill").withHairColor(HairColor.BLOND).withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).build()
Hero warrior =
        new HeroBuilder(Profession.WARRIOR, "Amberjill").withHairColor(HairColor.BLOND)
            .withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD)
            .build();
thief=new HeroBuilder(Profession.THIEF,"Desmond").withHairType(HairType.BALD).withWeapon(Weapon.BOW).build()
Hero thief =
        new HeroBuilder(Profession.THIEF, "Desmond").withHairType(HairType.BALD)
            .withWeapon(Weapon.BOW).build();
StringBuilder sb = new StringBuilder();
String[] args = {};
final String heroName = "Sir Lancelot";
hero=new Hero.HeroBuilder(Profession.WARRIOR,heroName).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).withHairType(HairType.LONG_CURLY).withHairColor(HairColor.BLOND).build()
final Hero hero = new Hero.HeroBuilder(Profession.WARRIOR, heroName)
        .withArmor(Armor.CHAIN_MAIL)
        .withWeapon(Weapon.SWORD)
        .withHairType(HairType.LONG_CURLY)
        .withHairColor(HairColor.BLOND)
        .build();
BusinessDelegate businessDelegate = new BusinessDelegate();
BusinessLookup businessLookup = new BusinessLookup();
Client client = new Client(businessDelegate);
String[] args = {};
Client client = new Client(businessDelegate);
App app = new App();
UserAccount userAccount1 = new UserAccount("001", "John", "He is a boy.");
UserAccount userAccount2 = new UserAccount("002", "Jane", "She is a girl.");
UserAccount userAccount3 = new UserAccount("003", "Adam", "He likes food.");
UserAccount userAccount4 = new UserAccount("004", "Rita", "She hates cats.");
UserAccount userAccount5 = new UserAccount("005", "Isaac", "He is allergic to mustard.");
UserAccount userAccount6 = new UserAccount("006", "Yasha", "She is an only child.");
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
StringBuilder sb = new StringBuilder();
iterable=db.getCollection("user_accounts").find(new Document("userID",userId))
FindIterable<Document> iterable =
        db.getCollection("user_accounts").find(new Document("userID", userId));
doc=iterable.first()
Document doc = iterable.first();
node=cache.get(userId)
Node node = cache.get(userId);
old=cache.get(userId)
Node old = cache.get(userId);
Node newNode = new Node(userId, userAccount);
toBeRemoved=cache.get(userId)
Node toBeRemoved = cache.get(userId);
ArrayList<UserAccount> listOfCacheData = new ArrayList<>();
Node temp = head;
String[] args = {};
Task task = new SimpleTask();
Callback callback = new Callback() {
      @Override
      public void call() {
        System.out.println("I'm done now.");
      }
    };
Task task = new SimpleTask();
Callback c = () -> System.out.println("I'm done now.");
    task.executeWith(c);
  
String[] args = {};
Callback callback = new Callback() {
      @Override
      public void call() {
        callingCount++;
      }
    };
Task task = new SimpleTask();
Callback callback = () -> callingCount++;

    Task task = new SimpleTask();

    assertEquals("Initial calling count of 0", new Integer(0), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called once", new Integer(1), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called twice", new Integer(2), callingCount);

  
OrcKing king = new OrcKing();
String[] args = {};
final OrcKing king = new OrcKing();
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
temp=target.getSize()
Size temp = target.getSize();
previousSpell=undoStack.pollLast()
Command previousSpell = undoStack.pollLast();
previousSpell=redoStack.pollLast()
Command previousSpell = redoStack.pollLast();
String[] args = {};
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
orcMessage=new Messenger().messageFromOrcs()
LetterComposite orcMessage = new Messenger().messageFromOrcs();
elfMessage=new Messenger().messageFromElves()
LetterComposite elfMessage = new Messenger().messageFromElves();
List<Word> words = new ArrayList<>();
List<Word> words = new ArrayList<>();
String[] args = {};
final Messenger messenger = new Messenger();
final Messenger messenger = new Messenger();
words=message.split(" ")
final String[] words = message.split(" ");
final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());
final Customer customer = new Customer(4, "Dan", "Danson");
final Customer customer1 = new Customer(1, "Adam", "Adamson");
final Customer customer2 = new Customer(2, "Bob", "Bobson");
final Customer customer3 = new Customer(3, "Carl", "Carlson");
final List<Customer> customers = new ArrayList<>();
boolean isEqual = false;
final Customer customer = (Customer) o;
Customer customer = null;
index=getAllCustomers().indexOf(customer)
final int index = getAllCustomers().indexOf(customer);
String[] args = {};
final Customer nonExistingCustomer = new Customer(2, "Robert", "Englund");
final String newFirstname = "Bernard";
final String newLastname = "Montgomery";
final Customer customer = new Customer(CUSTOMER.getId(), newFirstname, newLastname);
cust=impl.getCustomerById(CUSTOMER.getId())
final Customer cust = impl.getCustomerById(CUSTOMER.getId());
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final String newFirstname = "Douglas";
final String newLastname = "MacArthur";
final Customer customer = new Customer(nonExistingId, newFirstname, newLastname);
existingCustomer=impl.getCustomerById(CUSTOMER.getId())
final Customer existingCustomer = impl.getCustomerById(CUSTOMER.getId());
final Customer newCustomer = new Customer(3, "George", "Patton");
final Customer newCustomer = new Customer(3, "George", "Patton");
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final int newId = 2;
final String newFirstname = "Bill";
final String newLastname = "Clinton";
final int newId = 2;
final Customer otherCustomer = new Customer(newId, FIRSTNAME, LASTNAME);
final Customer otherCustomer = new Customer(ID, FIRSTNAME, LASTNAME);
final StringBuffer buffer = new StringBuffer();
Hostile troll = new Troll();
Hostile smart = new SmartHostile(troll);
String[] args = {};
simpleTroll=spy(new Troll())
final Hostile simpleTroll = spy(new Troll());
final Hostile smartTroll = new SmartHostile(simpleTroll);
final Troll troll = new Troll();
PrinterController hpPrinterController = new PrinterController(new HpPrinter());
PrinterController canonPrinterController = new PrinterController(new CanonPrinter());
PrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());
String[] args = {};
PrinterController printerController = new PrinterController(new CanonPrinter());
PrinterController printerController = new PrinterController(new HpPrinter());
PrinterController printerController = new PrinterController(new EpsonPrinter());
SimpleWizard simpleWizard = new SimpleWizard();
AdvancedWizard advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());
injector=Guice.createInjector(new TobaccoModule())
Injector injector = Guice.createInjector(new TobaccoModule());
guiceWizard=injector.getInstance(GuiceWizard.class)
GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final AdvancedWizard advancedWizard = new AdvancedWizard(tobacco);
String[] args = {};
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final GuiceWizard guiceWizard = new GuiceWizard(tobacco);
@SuppressWarnings("unchecked")
    final Class<? extends Tobacco>[] tobaccos = new Class[]{
        OldTobyTobacco.class, RivendellTobacco.class, SecondBreakfastTobacco.class
    };
injector=Guice.createInjector(new AbstractModule(){
  @Override protected void configure(){
    bind(Tobacco.class).to(tobaccoClass);
  }
}
)
final Injector injector = Guice.createInjector(new AbstractModule() {
        @Override
        protected void configure() {
          bind(Tobacco.class).to(tobaccoClass);
        }
      });
guiceWizard=injector.getInstance(GuiceWizard.class)
final GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final SimpleWizard simpleWizard = new SimpleWizard();
final Inventory inventory = new Inventory(1000);
executorService=Executors.newFixedThreadPool(3)
ExecutorService executorService = Executors.newFixedThreadPool(3);
String[] args = {};
final Inventory inventory = new Inventory(INVENTORY_SIZE);
executorService=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);
items=inventory.getItems()
final List<Item> items = inventory.getItems();
final List<Item> items = inventory.getItems();
stdOutCaptor=ArgumentCaptor.forClass(String.class)
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
values=stdOutCaptor.getAllValues()
final List<String> values = stdOutCaptor.getAllValues();
final List<String> values = stdOutCaptor.getAllValues();
List<GameObject> objects = new ArrayList<>();
String[] args = {};
tested=getTestedObject()
final O tested = getTestedObject();
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectTargetOnFire 
        ? "Expected [" + targetName + "] to be on fire after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be on fire after colliding with [" + otherName + "] but it was!";
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectedDamage
        ? "Expected [" + targetName + "] to be damaged after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be damaged after colliding with [" + otherName + "] but it was!";
final FlamingAsteroid asteroid = new FlamingAsteroid(1, 2, 3, 4);
final Meteoroid meteoroid = new Meteoroid(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final SpaceStationIss iss = new SpaceStationIss(1, 2, 3, 4);
final SpaceStationMir mir = new SpaceStationMir(1, 2, 3, 4);
KingJoffrey kingJoffrey = new KingJoffrey();
KingsHand kingsHand = new KingsHand(kingJoffrey);
List<EventEmitter> emitters = new ArrayList<>();
String[] args = {};
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithoutDefaultObserver.get()
final E emitter = this.factoryWithoutDefaultObserver.get();
defaultObserver=mock(EventObserver.class)
final EventObserver defaultObserver = mock(EventObserver.class);
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithDefaultObserver.apply(defaultObserver)
final E emitter = this.factoryWithDefaultObserver.apply(defaultObserver);
toString=event.toString()
final String toString = event.toString();
final KingJoffrey kingJoffrey = new KingJoffrey();
final String expectedMessage = "Received event from the King's Hand: " + event.toString();
observer=mock(EventObserver.class)
final EventObserver observer = mock(EventObserver.class);
final KingsHand kingsHand = new KingsHand(observer);
toString=weekday.toString()
final String toString = weekday.toString();
EventDispatcher dispatcher = new EventDispatcher();
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = (UserCreatedEvent) message;
UserUpdatedEvent userUpdatedEvent = (UserUpdatedEvent) message;
String[] args = {};
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
dispatcher=spy(new EventDispatcher())
EventDispatcher dispatcher = spy(new EventDispatcher());
userCreatedEventHandler=spy(new UserCreatedEventHandler())
UserCreatedEventHandler userCreatedEventHandler = spy(new UserCreatedEventHandler());
userUpdatedEventHandler=spy(new UserUpdatedEventHandler())
UserUpdatedEventHandler userUpdatedEventHandler = spy(new UserUpdatedEventHandler());
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
UserUpdatedEvent userUpdatedEvent = new UserUpdatedEvent(user);
FileWriter writer = new FileWriter(filename);
String[] args = {};
File file = new File("testfile.txt");
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
final File nonExistingFile = new File(this.testFolder.getRoot(), "non-existing-file");
final String testMessage = "Test message";
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
DwarvenGoldmineFacade facade = new DwarvenGoldmineFacade();
String[] args = {};
final DwarvenGoldmineFacade goldMine = new DwarvenGoldmineFacade();
WeaponFactory factory = WeaponFactory.factory(builder -> {
      builder.add(WeaponType.SWORD, Sword::new);
      builder.add(WeaponType.AXE, Axe::new);
      builder.add(WeaponType.SPEAR, Spear::new);
      builder.add(WeaponType.BOW, Bow::new);
    });
    Weapon axe = factory.create(WeaponType.AXE);
    System.out.println(axe);
  
HashMap<WeaponType, Supplier<Weapon>> map = new HashMap<>();
String[] args = {};
weapon=factory.create(WeaponType.SPEAR)
Weapon weapon = factory.create(WeaponType.SPEAR);
weapon=factory.create(WeaponType.AXE)
Weapon weapon = factory.create(WeaponType.AXE);
weapon=factory.create(WeaponType.SWORD)
Weapon weapon = factory.create(WeaponType.SWORD);
App app = new App(new OrcBlacksmith());
Weapon weapon;
String[] args = {};
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.AXE)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.AXE);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties turnedOff = new Properties();
Service turnedOffService = new PropertiesFeatureToggleVersion(turnedOff);
welcomeMessageturnedOff=turnedOffService.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessageturnedOff = turnedOffService.getWelcomeMessage(new User("Jamie No Code"));
final User paidUser = new User("Jamie Coder");
final User freeUser = new User("Alan Defect");
welcomeMessagePaidUser=service.getWelcomeMessage(paidUser)
final String welcomeMessagePaidUser = service.getWelcomeMessage(paidUser);
welcomeMessageFreeUser=service.getWelcomeMessage(freeUser)
final String welcomeMessageFreeUser = service.getWelcomeMessage(freeUser);
final Properties properties = new Properties();
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
welcomeMessage=service.getWelcomeMessage(paidUser)
final String welcomeMessage = service.getWelcomeMessage(paidUser);
final String expected = "You're amazing Jamie Coder. Thanks for paying for this awesome software.";
welcomeMessage=service.getWelcomeMessage(freeUser)
final String welcomeMessage = service.getWelcomeMessage(freeUser);
final String expected = "I suppose you can use this software.";
User user = new User("Free User");
User user = new User("Paid User");
User user = new User("Paid User");
User user = new User("Free User");
List<Integer> integerList = new ArrayList<>();
firstFiveNegatives=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList()
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
lastTwoPositives=SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList()
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
transformedList=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString()).asList()
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
lastTwoOfFirstFourStringMapped=LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2).map(number-- > "String[" + valueOf(number) + "]").asList()
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
StringJoiner joiner = new StringJoiner(delimiter, prefix, ".");
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
ArrayList<E> copy = new ArrayList<>();
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
final E result = next;
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=last(1).iterator()
Iterator<E> resultIterator = last(1).iterator();
Iterator<E> resultIterator = last(1).iterator();
E candidate = null;
newIterator=iterable.iterator()
Iterator<E> newIterator = iterable.iterator();
candidate=oldTypeIterator.next()
E candidate = oldTypeIterator.next();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
nextElement=iterator.next()
E nextElement = iterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentCount = 0;
list=last(1).asList()
List<E> list = last(1).asList();
List<E> list = last(1).asList();
remainingElementsCount=getRemainingElementsCount()
int remainingElementsCount = getRemainingElementsCount();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentIndex = 0;
List<T> temporaryList = new ArrayList<>();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
copy=FluentIterable.copyToList(iterable)
List<E> copy = FluentIterable.copyToList(iterable);
List<E> copy = FluentIterable.copyToList(iterable);
int counter = 0;
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
List<E> copy = new ArrayList<>();
String[] args = {};
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
evenItems=createFluentIterable(integers).filter(i-- > i % 2 == 0).asList()
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
longs=createFluentIterable(integers).map(Integer).asList()
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
consumer=mock(Consumer.class)
final Consumer<Integer> consumer = mock(Consumer.class);
final Consumer<Integer> consumer = mock(Consumer.class);
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
split=createFluentIterable(integers).spliterator()
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
MenuStore menuStore = new MenuStore();
ContentStore contentStore = new ContentStore();
MenuView menuView = new MenuView();
ContentView contentView = new ContentView();
ContentAction contentAction = (ContentAction) action;
MenuAction menuAction = (MenuAction) action;
ContentStore contentStore = (ContentStore) store;
MenuStore menuStore = (MenuStore) store;
toString=content.toString()
final String toString = content.toString();
toString=menuItem.toString()
final String toString = menuItem.toString();
String[] args = {};
final Constructor<Dispatcher> constructor;
final Constructor<Dispatcher> constructor;
field=Dispatcher.class.getDeclaredField("instance")
final Field field = Dispatcher.class.getDeclaredField("instance");
dispatcher=Dispatcher.getInstance()
final Dispatcher dispatcher = Dispatcher.getInstance();
store=mock(Store.class)
final Store store = mock(Store.class);
actionCaptor=ArgumentCaptor.forClass(Action.class)
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
actions=actionCaptor.getAllValues()
final List<Action> actions = actionCaptor.getAllValues();
final List<Action> actions = actionCaptor.getAllValues();
menuActions=actions.stream().filter(a-- > a.getType().equals(ActionType.MENU_ITEM_SELECTED)).map(a-- > (MenuAction)a).collect(Collectors.toList())
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
contentActions=actions.stream().filter(a-- > a.getType().equals(ActionType.CONTENT_CHANGED)).map(a-- > (ContentAction)a).collect(Collectors.toList())
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final ContentStore contentStore = new ContentStore();
view=mock(View.class)
final View view = mock(View.class);
final MenuStore menuStore = new MenuStore();
view=mock(View.class)
final View view = mock(View.class);
store=mock(ContentStore.class)
final ContentStore store = mock(ContentStore.class);
final ContentView view = new ContentView();
store=mock(MenuStore.class)
final MenuStore store = mock(MenuStore.class);
final MenuView view = new MenuView();
store=mock(Store.class)
final Store store = mock(Store.class);
final MenuView view = new MenuView();
PotionFactory factory = new PotionFactory();
AlchemistShop alchemistShop = new AlchemistShop();
potion=potions.get(type)
Potion potion = potions.get(type);
final AlchemistShop shop = new AlchemistShop();
bottomShelf=shop.getBottomShelf()
final List<Potion> bottomShelf = shop.getBottomShelf();
final List<Potion> bottomShelf = shop.getBottomShelf();
topShelf=shop.getTopShelf()
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> allPotions = new ArrayList<>();
String[] args = {};
FrontController controller = new FrontController();
command=getCommand(request)
Command command = getCommand(request);
commandClass=getCommandClass(request)
Class commandClass = getCommandClass(request);
Class result;
final Exception cause = new Exception();
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final FrontController frontController = new FrontController();
final List<Object[]> parameters = new ArrayList<>();
final List<Object[]> parameters = new ArrayList<>();
AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final Object result = new Object();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IOException exception = new IOException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IllegalStateException exception = new IllegalStateException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
Filter last = this;
String result = super.execute(order);
FilterManager filterManager = new FilterManager();
Client client = new Client();
JPanel panel = new JPanel();
Order order =
            new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),
                jtFields[2].getText(), jtAreas[1].getText());
rootPane=SwingUtilities.getRootPane(processButton)
JRootPane rootPane = SwingUtilities.getRootPane(processButton);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
JPanel bot = new JPanel();
rootPane=SwingUtilities.getRootPane(del)
JRootPane rootPane = SwingUtilities.getRootPane(del);
temp=jt.getSelectedRow()
int temp = jt.getSelectedRow();
temp2=jt.getSelectedRowCount()
int temp2 = jt.getSelectedRowCount();
String[] args = {};
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
filter=mock(Filter.class)
final Filter filter = mock(Filter.class);
order=mock(Order.class)
final Order order = mock(Order.class);
final List<Object[]> testData = new ArrayList<>();
result=this.filter.execute(this.order)
final String result = this.filter.execute(this.order);
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
String tokenString = "4 3 2 - 1 + *";
Stack<Expression> stack = new Stack<>();
tokenList=tokenString.split(" ")
String[] tokenList = tokenString.split(" ");
rightExpression=stack.pop()
Expression rightExpression = stack.pop();
leftExpression=stack.pop()
Expression leftExpression = stack.pop();
operator=getOperatorInstance(s,leftExpression,rightExpression)
Expression operator = getOperatorInstance(s, leftExpression, rightExpression);
result=operator.interpret()
int result = operator.interpret();
NumberExpression resultExpression = new NumberExpression(result);
Expression i = new NumberExpression(s);
String[] args = {};
final List<Object[]> testData = new ArrayList<>();
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expectedValue=getFirst().interpret()
final int expectedValue = getFirst().interpret();
testStingValue=String.valueOf(expectedValue)
final String testStingValue = String.valueOf(expectedValue);
final NumberExpression numberExpression = new NumberExpression(testStingValue);
TreasureChest chest = new TreasureChest();
ringIterator=chest.iterator(ItemType.RING)
ItemIterator ringIterator = chest.iterator(ItemType.RING);
potionIterator=chest.iterator(ItemType.POTION)
ItemIterator potionIterator = chest.iterator(ItemType.POTION);
weaponIterator=chest.iterator(ItemType.WEAPON)
ItemIterator weaponIterator = chest.iterator(ItemType.WEAPON);
it=chest.iterator(ItemType.ANY)
ItemIterator it = chest.iterator(ItemType.ANY);
ArrayList<Item> list = new ArrayList<>();
items=chest.getItems()
List<Item> items = chest.getItems();
List<Item> items = chest.getItems();
boolean found = false;
int tempIdx = idx;
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final TreasureChest chest = new TreasureChest();
iterator=chest.iterator(expectedItem.getType())
final ItemIterator iterator = chest.iterator(expectedItem.getType());
item=iterator.next()
final Item item = iterator.next();
name=item.toString()
final String name = item.toString();
final TreasureChest chest = new TreasureChest();
items=chest.getItems()
final List<Item> items = chest.getItems();
final List<Item> items = chest.getItems();
final boolean sameType = this.expectedItem.getType() == item.getType();
sameName=this.expectedItem.toString().equals(item.toString())
final boolean sameName = this.expectedItem.toString().equals(item.toString());
CakeViewImpl cakeView = new CakeViewImpl(cakeBakingService);
CakeInfo cake1 =
        new CakeInfo(new CakeToppingInfo("candies", 0), Arrays.asList(new CakeLayerInfo(
            "chocolate", 0), new CakeLayerInfo("banana", 0), new CakeLayerInfo("strawberry", 0)));
CakeInfo cake2 =
        new CakeInfo(new CakeToppingInfo("cherry", 0), Arrays.asList(
            new CakeLayerInfo("vanilla", 0), new CakeLayerInfo("lemon", 0), new CakeLayerInfo(
                "strawberry", 0)));
allToppings=getAvailableToppingEntities()
List<CakeTopping> allToppings = getAvailableToppingEntities();
List<CakeTopping> allToppings = getAvailableToppingEntities();
matchingToppings=allToppings.stream().filter((t)-- > t.getName().equals(cakeInfo.cakeToppingInfo.name)).collect(Collectors.toList())
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
allLayers=getAvailableLayerEntities()
List<CakeLayer> allLayers = getAvailableLayerEntities();
List<CakeLayer> allLayers = getAvailableLayerEntities();
Set<CakeLayer> foundLayers = new HashSet<>();
found=allLayers.stream().filter((layer)-- > layer.getName().equals(info.name)).findFirst()
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
toppingBean=context.getBean(CakeToppingDao.class)
CakeToppingDao toppingBean = context.getBean(CakeToppingDao.class);
topping=toppingBean.findOne(matchingToppings.iterator().next().getId())
CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().getId());
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
Cake cake = new Cake();
layerBean=context.getBean(CakeLayerDao.class)
CakeLayerDao layerBean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeTopping> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
topping=iterator.next()
CakeTopping topping = iterator.next();
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeToppingInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
next=iterator.next()
CakeTopping next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayer> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayerInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
List<CakeInfo> result = new ArrayList<>();
iterator=cakeBean.findAll().iterator()
Iterator<Cake> iterator = cakeBean.findAll().iterator();
Iterator<Cake> iterator = cakeBean.findAll().iterator();
cake=iterator.next()
Cake cake = iterator.next();
CakeToppingInfo cakeToppingInfo =
          new CakeToppingInfo(cake.getTopping().getId(), cake.getTopping().getName(), cake
              .getTopping().getCalories());
ArrayList<CakeLayerInfo> cakeLayerInfos = new ArrayList<>();
CakeInfo cakeInfo = new CakeInfo(cake.getId(), cakeToppingInfo, cakeLayerInfos);
int total = cakeToppingInfo != null ? cakeToppingInfo.calories : 0;
String[] args = {};
final CakeBakingException exception = new CakeBakingException();
final String expectedMessage = "message";
final CakeBakingException exception = new CakeBakingException(expectedMessage);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialLayers=service.getAvailableLayers()
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
availableLayers=service.getAvailableLayers()
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialToppings=service.getAvailableToppings()
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
availableToppings=service.getAvailableToppings()
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeLayerInfo layer3 = new CakeLayerInfo("Layer3", 2000);
allCakes=service.getAllCakes()
final List<CakeInfo> allCakes = service.getAllCakes();
final List<CakeInfo> allCakes = service.getAllCakes();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeToppingInfo missingTopping = new CakeToppingInfo("Topping1", 1000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo missingLayer = new CakeLayerInfo("Layer2", 2000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final Cake cake = new Cake();
expectedId=Long.valueOf(1234L)
final Long expectedId = Long.valueOf(1234L);
final Cake cake = new Cake();
final CakeTopping expectedTopping = new CakeTopping("DummyTopping", 1000);
final Cake cake = new Cake();
final Set<CakeLayer> expectedLayers = new HashSet<>();
final Cake cake = new Cake();
final Set<CakeLayer> initialLayers = new HashSet<>();
final CakeLayer newLayer = new CakeLayer("layer3", 3000);
final Set<CakeLayer> expectedLayers = new HashSet<>();
final CakeTopping topping = new CakeTopping("topping", 20);
final CakeLayer layer = new CakeLayer("layer", 100);
final Cake cake = new Cake();
final String expected = "id=1234 topping=id=2345 name=topping calories=20 " 
            + "layers=[id=3456 name=layer calories=100]";
final List<CakeLayerInfo> layers = new ArrayList<>();
final List<CakeInfo> cakes = new ArrayList<>();
final CakeInfo cake = new CakeInfo(new CakeToppingInfo("topping", 1000), layers);
bakingService=mock(CakeBakingService.class)
final CakeBakingService bakingService = mock(CakeBakingService.class);
final CakeViewImpl cakeView = new CakeViewImpl(bakingService);
HolderNaive holderNaive = new HolderNaive();
heavy=holderNaive.getHeavy()
Heavy heavy = holderNaive.getHeavy();
HolderThreadSafe holderThreadSafe = new HolderThreadSafe();
another=holderThreadSafe.getHeavy()
Heavy another = holderThreadSafe.getHeavy();
Java8Holder java8Holder = new Java8Holder();
next=java8Holder.getHeavy()
Heavy next = java8Holder.getHeavy();
String[] args = {};
holderField=HolderNaive.class.getDeclaredField("heavy")
final Field holderField = HolderNaive.class.getDeclaredField("heavy");
holderField=HolderThreadSafe.class.getDeclaredField("heavy")
final Field holderField = HolderThreadSafe.class.getDeclaredField("heavy");
holderField=Java8Holder.class.getDeclaredField("heavy")
final Field holderField = Java8Holder.class.getDeclaredField("heavy");
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
supplierClass=supplier.getClass()
final Class<? extends Supplier> supplierClass = supplier.getClass();
final Class<? extends Supplier> supplierClass = supplier.getClass();
instanceField=supplierClass.getDeclaredField("heavyInstance")
final Field instanceField = supplierClass.getDeclaredField("heavyInstance");
Party party = new PartyImpl();
Hobbit hobbit = new Hobbit();
Wizard wizard = new Wizard();
Rogue rogue = new Rogue();
Hunter hunter = new Hunter();
String[] args = {};
partyMember1=mock(PartyMember.class)
final PartyMember partyMember1 = mock(PartyMember.class);
partyMember2=mock(PartyMember.class)
final PartyMember partyMember2 = mock(PartyMember.class);
final PartyImpl party = new PartyImpl();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
party=mock(Party.class)
final Party party = mock(Party.class);
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
memberClass=member.getClass()
final Class<? extends PartyMember> memberClass = member.getClass();
final Class<? extends PartyMember> memberClass = member.getClass();
Stack<StarMemento> states = new Stack<>();
Star star = new Star(StarType.SUN, 10000000, 500000);
StarMementoInternal state = new StarMementoInternal();
StarMementoInternal state = (StarMementoInternal) memento;
String[] args = {};
final Star star = new Star(StarType.SUN, 1, 2);
final Star star = new Star(StarType.SUN, 1, 2);
firstMemento=star.getMemento()
final StarMemento firstMemento = star.getMemento();
secondMemento=star.getMemento()
final StarMemento secondMemento = star.getMemento();
thirdMemento=star.getMemento()
final StarMemento thirdMemento = star.getMemento();
CamelContext context = new DefaultCamelContext();
String[] args = {};
GiantModel giant = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
GiantView view = new GiantView();
GiantController controller = new GiantController(giant, view);
String[] args = {};
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantView view = new GiantView();
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
FileLoader loader = new FileLoader();
FileSelectorJFrame jFrame = new FileSelectorJFrame();
FileSelectorPresenter presenter = new FileSelectorPresenter(jFrame);
BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)));
StringBuilder sb = new StringBuilder();
String line;
JScrollPane pane = new JScrollPane(area);
data=loader.loadData()
String data = loader.loadData();
String[] args = {};
final FileLoader fileLoader = new FileLoader();
String expectedFile = "Stamatis";
User user = new User("user", 24, Sex.FEMALE, "foobar.com");
IllegalStateException e = new IllegalStateException();
String[] args = {};
User tom = new User(null, 21, Sex.MALE, "tom@foo.bar");
User john = new User("John", 17, Sex.MALE, "john@qwe.bar");
User sarah = new User("Sarah", 42, Sex.FEMALE, "sarah@det.org");
validated=Validator.of(sarah).validate(getName,Objects,"name cannot be null").validate(User,age-- > age > 21,"user is underaged").validate(User,sex-- > sex == Sex.FEMALE,"user is not female").validate(User,email-- > email.contains("@"),"email does not contain @ sign").get()
User validated = Validator.of(sarah).validate(User::getName, Objects::nonNull, "name cannot be null")
        .validate(User::getAge, age -> age > 21, "user is underaged")
        .validate(User::getSex, sex -> sex == Sex.FEMALE, "user is not female")
        .validate(User::getEmail, email -> email.contains("@"), "email does not contain @ sign")
        .get();
LoadBalancer loadBalancer1 = new LoadBalancer();
LoadBalancer loadBalancer2 = new LoadBalancer();
server=servers.get(lastServedId++)
Server server = servers.get(lastServedId++);
String[] args = {};
final LoadBalancer firstBalancer = new LoadBalancer();
final LoadBalancer secondBalancer = new LoadBalancer();
server=mock(Server.class)
final Server server = mock(Server.class);
final LoadBalancer loadBalancer = new LoadBalancer();
final Request request = new Request("test");
String[] args = {};
nazgul=Nazgul.getInstance(name)
final Nazgul nazgul = Nazgul.getInstance(name);
obj=container.newTransientInstance(SimpleObject.class)
final SimpleObject obj = container.newTransientInstance(SimpleObject.class);
final SimpleObject simpleObject = new SimpleObject();
seq=context.sequence("create")
final Sequence seq = context.sequence("create");
obj=simpleObjects.create("Foobar")
final SimpleObject obj = simpleObjects.create("Foobar");
all=Lists.newArrayList()
final List<SimpleObject> all = Lists.newArrayList();
list=simpleObjects.listAll()
final List<SimpleObject> list = simpleObjects.listAll();
final List<SimpleObject> list = simpleObjects.listAll();
String name = "Foobar";
paramName=checkParam("name",ec,String.class)
String paramName = checkParam("name", ec, String.class);
paramNumber=defaultParam("number",ec,3)
final int paramNumber = defaultParam("number", ec, 3);
fs=new SimpleObjectCreate().setName(names.get(i))
final SimpleObjectCreate fs = new SimpleObjectCreate().setName(names.get(i));
isft=IsisSystemForTest.getElseNull()
IsisSystemForTest isft = IsisSystemForTest.getElseNull();
final IsisConfigurationForJdoIntegTests testConfiguration =
          new IsisConfigurationForJdoIntegTests();
findAll=service(SimpleObjects.class).listAll()
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
title=container.titleOf(simpleObjectWrapped)
final String title = container.titleOf(simpleObjectWrapped);
RecreateSimpleObjects fs = new RecreateSimpleObjects();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
simpleObject=wrap(all.get(0))
SimpleObject simpleObject = wrap(all.get(0));
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
causalChain=Throwables.getCausalChain(item)
final List<Throwable> causalChain = Throwables.getCausalChain(item);
final List<Throwable> causalChain = Throwables.getCausalChain(item);
settings=Bootstrap.getSettings()
IBootstrapSettings settings = Bootstrap.getSettings();
final AuthenticatedWebSessionForIsis s =
        (AuthenticatedWebSessionForIsis) super.newSession(request, response);
requestParameters=request.getRequestParameters()
IRequestParameters requestParameters = request.getRequestParameters();
user=requestParameters.getParameterValue("user")
final org.apache.wicket.util.string.StringValue user =
        requestParameters.getParameterValue("user");
password=requestParameters.getParameterValue("pass")
final org.apache.wicket.util.string.StringValue password =
        requestParameters.getParameterValue("pass");
uname=servletRequest.getParameter("user")
String uname = servletRequest.getParameter("user");
final Module isisDefaults = super.newIsisWicketModule();
final Module overrides = new AbstractModule() {
      @Override
      protected void configure() {
        bind(String.class).annotatedWith(Names.named("applicationName")).toInstance("Simple App");
        bind(String.class).annotatedWith(Names.named("applicationCss")).toInstance(
            "css/application.css");
        bind(String.class).annotatedWith(Names.named("applicationJs")).toInstance(
            "scripts/application.js");
        bind(String.class).annotatedWith(Names.named("welcomeMessage")).toInstance(
            readLines(getClass(), "welcome.html"));
        bind(String.class).annotatedWith(Names.named("aboutMessage")).toInstance("Simple App");
        bind(InputStream.class).annotatedWith(Names.named("metaInfManifest")).toProvider(
            Providers.of(getServletContext().getResourceAsStream("/META-INF/MANIFEST.MF")));
      }
    };
readLines=Resources.readLines(Resources.getResource(contextClass,resourceName),Charset.defaultCharset())
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
Node root =
        new NodeImpl("1", new NodeImpl("11", new NodeImpl("111", NullNode.getInstance(),
            NullNode.getInstance()), NullNode.getInstance()), new NodeImpl("12",
            NullNode.getInstance(), new NodeImpl("122", NullNode.getInstance(),
                NullNode.getInstance())));
String[] args = {};
instance=NullNode.getInstance()
final NullNode instance = NullNode.getInstance();
node=NullNode.getInstance()
final NullNode node = NullNode.getInstance();
final NodeImpl level1B = new NodeImpl("level1_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2B = new NodeImpl("level2_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3A = new NodeImpl("level3_a", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3B = new NodeImpl("level3_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2A = new NodeImpl("level2_a", level3A, level3B);
final NodeImpl level1A = new NodeImpl("level1_a", level2A, level2B);
inOrder=Mockito.inOrder(getStdOutMock())
final InOrder inOrder = Mockito.inOrder(getStdOutMock());
level1=TREE_ROOT.getLeft()
final Node level1 = TREE_ROOT.getLeft();
level2=level1.getLeft()
final Node level2 = level1.getLeft();
level3=level2.getLeft()
final Node level3 = level2.getLeft();
level1=TREE_ROOT.getRight()
final Node level1 = TREE_ROOT.getRight();
OliphauntPool pool = new OliphauntPool();
oliphaunt1=pool.checkOut()
Oliphaunt oliphaunt1 = pool.checkOut();
oliphaunt2=pool.checkOut()
Oliphaunt oliphaunt2 = pool.checkOut();
oliphaunt3=pool.checkOut()
Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunt5=pool.checkOut()
Oliphaunt oliphaunt5 = pool.checkOut();
instance=available.iterator().next()
T instance = available.iterator().next();
String[] args = {};
final OliphauntPool pool = new OliphauntPool();
expectedOliphaunt=pool.checkOut()
final Oliphaunt expectedOliphaunt = pool.checkOut();
oliphaunt=pool.checkOut()
final Oliphaunt oliphaunt = pool.checkOut();
final OliphauntPool pool = new OliphauntPool();
firstOliphaunt=pool.checkOut()
final Oliphaunt firstOliphaunt = pool.checkOut();
secondOliphaunt=pool.checkOut()
final Oliphaunt secondOliphaunt = pool.checkOut();
oliphaunt3=pool.checkOut()
final Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
final Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunts=Arrays.asList(pool.checkOut(),pool.checkOut())
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
Weather weather = new Weather();
GWeather gWeather = new GWeather();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
String[] args = {};
final ArrayList<Object[]> testData = new ArrayList<>();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
observer=this.factory.get()
final O observer = this.factory.get();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
observer=this.factory.get()
final O observer = this.factory.get();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
MessageQueue queue = new SimpleMessageQueue(10000);
final Producer producer = new Producer("PRODUCER_1", queue);
final Consumer consumer = new Consumer("CONSUMER_1", queue);
Message msg;
sender=msg.getHeader(Headers.SENDER)
String sender = msg.getHeader(Headers.SENDER);
body=msg.getBody()
String body = msg.getBody();
Message msg = new SimpleMessage();
String[] args = {};
final Message[] messages = new Message[]{
        createMessage("you", "Hello!"),
        createMessage("me", "Hi!"),
        Message.POISON_PILL,
        createMessage("late_for_the_party", "Hello? Anyone here?"),
    };
final MessageQueue queue = new SimpleMessageQueue(messages.length);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final SimpleMessage msg = new SimpleMessage();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
messageCaptor=ArgumentCaptor.forClass(Message.class)
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
message=messageCaptor.getValue()
final Message message = messageCaptor.getValue();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
final SimpleMessage message = new SimpleMessage();
final String senderName = "test";
final SimpleMessage message = new SimpleMessage();
headers=message.getHeaders()
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
Stew stew = new Stew(1, 2, 3, 4);
ImmutableStew immutableStew = new ImmutableStew(2, 4, 3, 6);
String[] args = {};
final Stew stew = new Stew(1, 2, 3, 4);
final String message = "Mixing the stew we find: 1 potatoes, 2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Stew stew = new Stew(1, 2, 3, 4);
final ImmutableStew stew = new ImmutableStew(1, 2, 3, 4);
final String expectedMessage = "Mixing the immutable stew we find: 1 potatoes, "
        + "2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ItemQueue queue = new ItemQueue();
executorService=Executors.newFixedThreadPool(5)
ExecutorService executorService = Executors.newFixedThreadPool(5);
final Producer producer = new Producer("Producer_" + i, queue);
final Consumer consumer = new Consumer("Consumer_" + i, queue);
item=queue.take()
Item item = queue.take();
Item item = new Item(name, itemId++);
Random random = new Random();
String[] args = {};
queue=spy(new ItemQueue())
final ItemQueue queue = spy(new ItemQueue());
final Consumer consumer = new Consumer("consumer", queue);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
queue=mock(ItemQueue.class)
final ItemQueue queue = mock(ItemQueue.class);
final Producer producer = new Producer("producer", queue);
Prototype charProto = new Character();
Character mageProto = new Character(Type.MAGE, charProto);
Character warProto = new Character(Type.WARRIOR, charProto);
Character rogueProto = new Character(Type.ROGUE, charProto);
Character mag = new Character("Player_1", mageProto);
Character warrior = new Character("Player_2", warProto);
Character rogue = new Character("Player_3", rogueProto);
Character rogueDouble = new Character("Player_4", rogue);
containsValue=properties.containsKey(stat)
boolean containsValue = properties.containsKey(stat);
StringBuilder builder = new StringBuilder();
value=this.get(stat)
Integer value = this.get(stat);
String[] args = {};
final Character prototype = new Character();
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character mage = new Character(Type.MAGE, prototype);
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
HeroFactory factory;
Mage mage;
Warlord warlord;
Beast beast;
String[] args = {};
mage=mock(Mage.class)
final Mage mage = mock(Mage.class);
warlord=mock(Warlord.class)
final Warlord warlord = mock(Warlord.class);
beast=mock(Beast.class)
final Beast beast = mock(Beast.class);
final HeroFactoryImpl factory = new HeroFactoryImpl(mage, warlord, beast);
clone=this.testedPrototype.clone()
final Object clone = this.testedPrototype.clone();
WizardTowerProxy tower = new WizardTowerProxy();
String[] args = {};
final String[] wizardNames = {"Gandalf", "Dumbledore", "Oz", "Merlin"};
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTowerProxy tower = new WizardTowerProxy();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTower tower = new WizardTower();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
CamelContext context = new DefaultCamelContext();
template=context.createProducerTemplate()
ProducerTemplate template = context.createProducerTemplate();
String[] args = {};
LoggingHandler loggingHandler = new LoggingHandler();
NioServerSocketChannel channel = new NioServerSocketChannel(port, handler);
NioDatagramChannel channel = new NioDatagramChannel(port, handler);
AppClient appClient = new AppClient();
outputStream=socket.getOutputStream()
OutputStream outputStream = socket.getOutputStream();
PrintWriter writer = new PrintWriter(outputStream);
byte[] data = new byte[1024];
read=inputStream.read(data,0,data.length)
int read = inputStream.read(data, 0, data.length);
String message = clientName + " - Log request: " + i;
DatagramPacket request =
              new DatagramPacket(message.getBytes(), message.getBytes().length, remoteAddress);
byte[] data = new byte[1024];
DatagramPacket reply = new DatagramPacket(data, data.length);
DatagramPacket datagram = (DatagramPacket) readObject;
DatagramPacket replyPacket = new DatagramPacket(ByteBuffer.wrap(ACK));
buffer=ByteBuffer.wrap(ACK)
ByteBuffer buffer = ByteBuffer.wrap(ACK);
pendingWrites=channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
pendingWrite=pendingWrites.poll()
Object pendingWrite = pendingWrites.poll();
pendingWrites=this.channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
sender=((DatagramChannel)key.channel()).receive(buffer)
SocketAddress sender = ((DatagramChannel) key.channel()).receive(buffer);
DatagramPacket packet = new DatagramPacket(buffer);
DatagramPacket pendingPacket = (DatagramPacket) pendingWrite;
key=channel.getJavaChannel().register(selector,channel.getInterestedOps())
SelectionKey key = channel.getJavaChannel().register(selector, channel.getInterestedOps());
keys=selector.selectedKeys()
Set<SelectionKey> keys = selector.selectedKeys();
Set<SelectionKey> keys = selector.selectedKeys();
iterator=keys.iterator()
Iterator<SelectionKey> iterator = keys.iterator();
Iterator<SelectionKey> iterator = keys.iterator();
key=iterator.next()
SelectionKey key = iterator.next();
iterator=pendingCommands.iterator()
Iterator<Runnable> iterator = pendingCommands.iterator();
Iterator<Runnable> iterator = pendingCommands.iterator();
command=iterator.next()
Runnable command = iterator.next();
AbstractNioChannel channel = (AbstractNioChannel) key.attachment();
readObject=((AbstractNioChannel)key.attachment()).read(key)
Object readObject = ((AbstractNioChannel) key.attachment()).read(key);
ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();
socketChannel=serverSocketChannel.accept()
SocketChannel socketChannel = serverSocketChannel.accept();
readKey=socketChannel.register(selector,SelectionKey.OP_READ)
SelectionKey readKey = socketChannel.register(selector, SelectionKey.OP_READ);
SocketChannel socketChannel = (SocketChannel) key.channel();
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
read=socketChannel.read(buffer)
int read = socketChannel.read(buffer);
ByteBuffer pendingBuffer = (ByteBuffer) pendingWrite;
App app = new App(new ThreadPoolDispatcher(2));
AppClient client = new AppClient();
App app = new App(new SameThreadDispatcher());
AppClient client = new AppClient();
executeService=Executors.newFixedThreadPool(10)
ExecutorService executeService = Executors.newFixedThreadPool(10);
ReaderWriterLock lock = new ReaderWriterLock();
String[] args = {};
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
reader1=spy(new Reader("Reader 1",lock.readLock()))
Reader reader1 = spy(new Reader("Reader 1", lock.readLock()));
reader2=spy(new Reader("Reader 2",lock.readLock()))
Reader reader2 = spy(new Reader("Reader 2", lock.readLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
writer1=spy(new Writer("Writer 1",lock.writeLock()))
Writer writer1 = spy(new Writer("Writer 1", lock.writeLock()));
writer2=spy(new Writer("Writer 2",lock.writeLock()))
Writer writer2 = spy(new Writer("Writer 2", lock.writeLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
        "applicationContext.xml");
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
BasicDataSource basicDataSource = new BasicDataSource();
LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();
Properties properties = new Properties();
JpaTransactionManager transactionManager = new JpaTransactionManager();
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
        AppConfig.class);
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
final int prime = 31;
int result = 1;
Person other = (Person) obj;
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
resultSet=dataSource.getConnection().createStatement().executeQuery("SELECT 1")
ResultSet resultSet = dataSource.getConnection().createStatement().executeQuery("SELECT 1");
String result = null;
String expected = "1";
String[] args = {};
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
String[] args = {};
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
King k = new King();
Queen q = new Queen();
ArrayList<Royalty> guests = new ArrayList<>();
boolean anotherDay = true;
String[] args = {};
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
goodMoodRoyalty=mock(Royalty.class)
final Royalty goodMoodRoyalty = mock(Royalty.class);
badMoodRoyalty=mock(Royalty.class)
final Royalty badMoodRoyalty = mock(Royalty.class);
final ArrayList<Royalty> goodCompany = new ArrayList<>();
final ArrayList<Royalty> badCompany = new ArrayList<>();
Spell spell1 = new Spell("Ice dart");
Spell spell2 = new Spell("Invisibility");
Spell spell3 = new Spell("Stun bolt");
Spell spell4 = new Spell("Confusion");
Spell spell5 = new Spell("Darkness");
Spell spell6 = new Spell("Fireball");
Spell spell7 = new Spell("Enchant weapon");
Spell spell8 = new Spell("Rock armour");
Spell spell9 = new Spell("Light");
Spell spell10 = new Spell("Bee swarm");
Spell spell11 = new Spell("Haste");
Spell spell12 = new Spell("Levitation");
Spell spell13 = new Spell("Magic lock");
Spell spell14 = new Spell("Summon hell bat");
Spell spell15 = new Spell("Water walking");
Spell spell16 = new Spell("Magic storm");
Spell spell17 = new Spell("Entangle");
SpellDao spellDao = new SpellDaoImpl();
SpellbookDao spellbookDao = new SpellbookDaoImpl();
Spellbook spellbook1 = new Spellbook("Book of Orgymon");
Spellbook spellbook2 = new Spellbook("Book of Aras");
Spellbook spellbook3 = new Spellbook("Book of Kritior");
Spellbook spellbook4 = new Spellbook("Book of Tamaex");
Spellbook spellbook5 = new Spellbook("Book of Idores");
Spellbook spellbook6 = new Spellbook("Book of Opaen");
Spellbook spellbook7 = new Spellbook("Book of Kihione");
WizardDao wizardDao = new WizardDaoImpl();
Wizard wizard1 = new Wizard("Aderlard Boud");
Wizard wizard2 = new Wizard("Anaxis Bajraktari");
Wizard wizard3 = new Wizard("Xuban Munoa");
Wizard wizard4 = new Wizard("Blasius Dehooge");
MagicService service =
        new MagicServiceImpl(new WizardDaoImpl(), new SpellbookDaoImpl(), new SpellDaoImpl());
wizardsWithSpellbook=service.findWizardsWithSpellbook("Book of Idores")
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
wizardsWithSpell=service.findWizardsWithSpell("Fireball")
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
List<E> result = null;
List<E> result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
spellbook=spellbookDao.findByName(name)
Spellbook spellbook = spellbookDao.findByName(name);
spell=spellDao.findByName(name)
Spell spell = spellDao.findByName(name);
spellbook=spell.getSpellbook()
Spellbook spellbook = spell.getSpellbook();
session=getSession()
Session session = getSession();
Transaction tx = null;
Spell result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Spellbook result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Wizard result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
String[] args = {};
className=dao.persistentClass.getSimpleName()
final String className = dao.persistentClass.getSimpleName();
entityName=String.format("%s%d",className,ID_GENERATOR.incrementAndGet())
final String entityName = String.format("%s%d", className, ID_GENERATOR.incrementAndGet());
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
byId=this.dao.find(entity.getId())
final E byId = this.dao.find(entity.getId());
originalEntities=this.dao.findAll()
final List<E> originalEntities = this.dao.findAll();
final List<E> originalEntities = this.dao.findAll();
entitiesLeft=this.dao.findAll()
final List<E> entitiesLeft = this.dao.findAll();
final List<E> entitiesLeft = this.dao.findAll();
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
expectedId=Long.valueOf(1)
final Long expectedId = Long.valueOf(1);
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
final String expectedName = "new name";
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
final String bookname = "bookname";
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
final Set<Wizard> wizards = new HashSet<>();
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpellbook(bookname)
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final Set<Wizard> wizards = new HashSet<>();
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spell=mock(Spell.class)
final Spell spell = mock(Spell.class);
final String spellName = "spellname";
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpell(spellName)
final List<Wizard> result = service.findWizardsWithSpell(spellName);
final List<Wizard> result = service.findWizardsWithSpell(spellName);
dao=getDao()
final SpellDaoImpl dao = getDao();
allSpells=dao.findAll()
final List<Spell> allSpells = dao.findAll();
final List<Spell> allSpells = dao.findAll();
spellByName=dao.findByName(spell.getName())
final Spell spellByName = dao.findByName(spell.getName());
dao=getDao()
final SpellbookDaoImpl dao = getDao();
allBooks=dao.findAll()
final List<Spellbook> allBooks = dao.findAll();
final List<Spellbook> allBooks = dao.findAll();
spellByName=dao.findByName(book.getName())
final Spellbook spellByName = dao.findByName(book.getName());
dao=getDao()
final WizardDaoImpl dao = getDao();
allWizards=dao.findAll()
final List<Wizard> allWizards = dao.findAll();
final List<Wizard> allWizards = dao.findAll();
byName=dao.findByName(spell.getName())
final Wizard byName = dao.findByName(spell.getName());
service=ServiceLocator.getService("jndi/serviceA")
Service service = ServiceLocator.getService("jndi/serviceA");
Service cachedService = null;
serviceObj=serviceCache.getService(serviceJndiName)
Service serviceObj = serviceCache.getService(serviceJndiName);
InitContext ctx = new InitContext();
String[] args = {};
final String[] serviceNames = new String[]{
        "jndi/serviceA", "jndi/serviceB"
    };
service=ServiceLocator.getService(serviceName)
final Service service = ServiceLocator.getService(serviceName);
ivoryTower1=IvoryTower.getInstance()
IvoryTower ivoryTower1 = IvoryTower.getInstance();
ivoryTower2=IvoryTower.getInstance()
IvoryTower ivoryTower2 = IvoryTower.getInstance();
threadSafeIvoryTower1=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower1 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
threadSafeIvoryTower2=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower2 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
EnumIvoryTower enumIvoryTower1 = EnumIvoryTower.INSTANCE;
EnumIvoryTower enumIvoryTower2 = EnumIvoryTower.INSTANCE;
dcl1=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();
dcl2=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();
demandHolderIdiom=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom =
        InitializingOnDemandHolderIdiom.getInstance();
demandHolderIdiom2=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom2 =
        InitializingOnDemandHolderIdiom.getInstance();
ThreadSafeDoubleCheckLocking result = instance;
String[] args = {};
instance1=this.singletonInstanceMethod.get()
S instance1 = this.singletonInstanceMethod.get();
instance2=this.singletonInstanceMethod.get()
S instance2 = this.singletonInstanceMethod.get();
instance3=this.singletonInstanceMethod.get()
S instance3 = this.singletonInstanceMethod.get();
final List<Callable<S>> tasks = new ArrayList<>();
int i = 0
creatures=Arrays.asList(new Goblin(),new Octopus(),new Dragon(),new Shark(),new Troll(),new KillerBee())
List<Creature> creatures =
        Arrays.asList(new Goblin(), new Octopus(), new Dragon(), new Shark(), new Troll(),
            new KillerBee());
walkingCreatures=creatures.stream().filter(new MovementSelector(Movement.WALKING)).collect(Collectors.toList())
List<Creature> walkingCreatures =
        creatures.stream().filter(new MovementSelector(Movement.WALKING))
            .collect(Collectors.toList());
darkCreatures=creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList())
List<Creature> darkCreatures =
        creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList());
redAndFlyingCreatures=creatures.stream().filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING))).collect(Collectors.toList())
List<Creature> redAndFlyingCreatures =
        creatures.stream()
            .filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING)))
            .collect(Collectors.toList());
String[] args = {};
toString=this.testedCreature.toString()
final String toString = this.testedCreature.toString();
greenCreature=mock(Creature.class)
final Creature greenCreature = mock(Creature.class);
redCreature=mock(Creature.class)
final Creature redCreature = mock(Creature.class);
final ColorSelector greenSelector = new ColorSelector(Color.GREEN);
swimmingCreature=mock(Creature.class)
final Creature swimmingCreature = mock(Creature.class);
flyingCreature=mock(Creature.class)
final Creature flyingCreature = mock(Creature.class);
final MovementSelector swimmingSelector = new MovementSelector(Movement.SWIMMING);
normalCreature=mock(Creature.class)
final Creature normalCreature = mock(Creature.class);
smallCreature=mock(Creature.class)
final Creature smallCreature = mock(Creature.class);
final SizeSelector normalSelector = new SizeSelector(Size.NORMAL);
Mammoth mammoth = new Mammoth();
String[] args = {};
inOrder=Mockito.inOrder(this.stdOutMock)
final InOrder inOrder = Mockito.inOrder(this.stdOutMock);
final Mammoth mammoth = new Mammoth();
toString=new Mammoth().toString()
final String toString = new Mammoth().toString();
warrior=CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin").withWeapon("Sword").noAbilities().build()
Character warrior =
        CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin")
            .withWeapon("Sword").noAbilities().build();
mage=CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer").withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport").noMoreAbilities().build()
Character mage =
        CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer")
            .withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport")
            .noMoreAbilities().build();
thief=CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build()
Character thief =
        CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build();
StringBuilder sb = new StringBuilder();
Character character = new Character(name);
String[] args = {};
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").withAbility("invisibility").withAbility("wisdom").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .withAbility("invisibility")
        .withAbility("wisdom")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").noSpell().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .noSpell()
        .build();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .noAbilities()
        .build();
character=CharacterStepBuilder.newBuilder().name("Cuauhtemoc").fighterClass("aztec").withWeapon("spear").withAbility("speed").withAbility("strength").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Cuauhtemoc")
        .fighterClass("aztec")
        .withWeapon("spear")
        .withAbility("speed")
        .withAbility("strength")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Poor warrior").fighterClass("none").noWeapon().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Poor warrior")
        .fighterClass("none")
        .noWeapon()
        .build();
character=CharacterStepBuilder.newBuilder().name("Weak warrior").fighterClass("none").withWeapon("Slingshot").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Weak warrior")
        .fighterClass("none")
        .withWeapon("Slingshot")
        .noAbilities()
        .build();
DragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());
String[] args = {};
strategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy strategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(strategy);
initialStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy initialStrategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(initialStrategy);
newStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy newStrategy = mock(DragonSlayingStrategy.class);
HalflingThief thief = new HalflingThief(new HitAndRunMethod());
target=pickTarget()
String target = pickTarget();
String[] args = {};
method=mock(StealingMethod.class)
final StealingMethod method = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(method);
initialMethod=mock(StealingMethod.class)
final StealingMethod initialMethod = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(initialMethod);
newMethod=mock(StealingMethod.class)
final StealingMethod newMethod = mock(StealingMethod.class);
inOrder=inOrder(this.stdOutMock)
final InOrder inOrder = inOrder(this.stdOutMock);
List<Task> tasks = new ArrayList<>();
executor=Executors.newFixedThreadPool(3)
ExecutorService executor = Executors.newFixedThreadPool(3);
Runnable worker = new Worker(tasks.get(i));
String[] args = {};
service=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService service = Executors.newFixedThreadPool(THREAD_COUNT);
final List<Callable<Integer>> tasks = new ArrayList<>();
int i = 0
task=mock(Task.class)
final Task task = mock(Task.class);
final Worker worker = new Worker(task);
RainbowFish fishV1 = new RainbowFish("Zed", 10, 11, 12);
deserializedFishV1=RainbowFishSerializer.readV1("fish1.out")
RainbowFish deserializedFishV1 = RainbowFishSerializer.readV1("fish1.out");
RainbowFishV2 fishV2 = new RainbowFishV2("Scar", 5, 12, 15, true, true, true);
deserializedFishV2=RainbowFishSerializer.readV1("fish2.out")
RainbowFish deserializedFishV2 = RainbowFishSerializer.readV1("fish2.out");
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
FileInputStream fileIn = new FileInputStream(filename);
ObjectInputStream objIn = new ObjectInputStream(fileIn);
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
String[] args = {};
File file1 = new File("fish1.out");
File file2 = new File("fish2.out");
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
final RainbowFish fish = new RainbowFish("name", 1, 2, 3);
final RainbowFishV2 fish = new RainbowFishV2("name", 1, 2, 3, false, true, false);
BallItem ballItem = new BallItem();
BallThread ballThread = new BallThread();
String[] args = {};
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
inOrder=inOrder(ballThread)
final InOrder inOrder = inOrder(ballThread);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
exceptionHandler=mock(UncaughtExceptionHandler.class)
final UncaughtExceptionHandler exceptionHandler = mock(UncaughtExceptionHandler.class);
statA=HeroStat.valueOf(10,5,0)
HeroStat statA = HeroStat.valueOf(10, 5, 0);
statB=HeroStat.valueOf(10,5,0)
HeroStat statB = HeroStat.valueOf(10, 5, 0);
statC=HeroStat.valueOf(5,1,8)
HeroStat statC = HeroStat.valueOf(5, 1, 8);
final int prime = 31;
int result = 1;
HeroStat other = (HeroStat) obj;
String[] args = {};
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatC=HeroStat.valueOf(3,9,8)
HeroStat heroStatC = HeroStat.valueOf(3, 9, 8);
Commander commander =
        new Commander(new Sergeant(new Soldier(), new Soldier(), new Soldier()), new Sergeant(
            new Soldier(), new Soldier(), new Soldier()));
String[] args = {};
final Unit[] children = new Unit[5];
unit=this.factory.apply(children)
final U unit = this.factory.apply(children);
visitor=mock(UnitVisitor.class)
final UnitVisitor visitor = mock(UnitVisitor.class);

Diff of 031bbe9f096762ec4c6852bf63eff957e3ef5ac0 and b563de009a97e3c854a2ba37062f4b3ba4560cb8:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 212
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 6
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 031bbe9f096762ec4c6852bf63eff957e3ef5ac0 to b563de009a97e3c854a2ba37062f4b3ba4560cb8

************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null

****Parsing for addition at revision 5109c8f4623c4f052df323d30bee8e5e86b0897b****

Added App.java to .\/java-design-patterns\ repository source files.
Added Army.java to .\/java-design-patterns\ repository source files.
Added Castle.java to .\/java-design-patterns\ repository source files.
Added ElfArmy.java to .\/java-design-patterns\ repository source files.
Added ElfCastle.java to .\/java-design-patterns\ repository source files.
Added ElfKing.java to .\/java-design-patterns\ repository source files.
Added ElfKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added KingdomFactory.java to .\/java-design-patterns\ repository source files.
Added OrcArmy.java to .\/java-design-patterns\ repository source files.
Added OrcCastle.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added AbstractFactoryTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BattleFishingBoat.java to .\/java-design-patterns\ repository source files.
Added BattleShip.java to .\/java-design-patterns\ repository source files.
Added Captain.java to .\/java-design-patterns\ repository source files.
Added FishingBoat.java to .\/java-design-patterns\ repository source files.
Added AdapterPatternTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsyncCallback.java to .\/java-design-patterns\ repository source files.
Added AsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AsyncResult.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Excalibur.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added MagicWeapon.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Mjollnir.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Stormbringer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Armor.java to .\/java-design-patterns\ repository source files.
Added HairColor.java to .\/java-design-patterns\ repository source files.
Added HairType.java to .\/java-design-patterns\ repository source files.
Added Hero.java to .\/java-design-patterns\ repository source files.
Added Profession.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegate.java to .\/java-design-patterns\ repository source files.
Added BusinessLookup.java to .\/java-design-patterns\ repository source files.
Added BusinessService.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added EjbService.java to .\/java-design-patterns\ repository source files.
Added JmsService.java to .\/java-design-patterns\ repository source files.
Added ServiceType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegateTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppManager.java to .\/java-design-patterns\ repository source files.
Added CacheStore.java to .\/java-design-patterns\ repository source files.
Added CachingPolicy.java to .\/java-design-patterns\ repository source files.
Added DbManager.java to .\/java-design-patterns\ repository source files.
Added LruCache.java to .\/java-design-patterns\ repository source files.
Added UserAccount.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CachingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Callback.java to .\/java-design-patterns\ repository source files.
Added LambdasApp.java to .\/java-design-patterns\ repository source files.
Added SimpleTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CallbackTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added OrcCommander.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcOfficer.java to .\/java-design-patterns\ repository source files.
Added OrcSoldier.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added RequestHandler.java to .\/java-design-patterns\ repository source files.
Added RequestType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OrcKingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added InvisibilitySpell.java to .\/java-design-patterns\ repository source files.
Added ShrinkSpell.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added Visibility.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Letter.java to .\/java-design-patterns\ repository source files.
Added LetterComposite.java to .\/java-design-patterns\ repository source files.
Added Messenger.java to .\/java-design-patterns\ repository source files.
Added Sentence.java to .\/java-design-patterns\ repository source files.
Added Word.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MessengerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Customer.java to .\/java-design-patterns\ repository source files.
Added CustomerDao.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added CustomerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hostile.java to .\/java-design-patterns\ repository source files.
Added SmartHostile.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SmartHostileTest.java to .\/java-design-patterns\ repository source files.
Added TrollTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Printer.java to .\/java-design-patterns\ repository source files.
Added PrinterController.java to .\/java-design-patterns\ repository source files.
Added CanonPrinter.java to .\/java-design-patterns\ repository source files.
Added EpsonPrinter.java to .\/java-design-patterns\ repository source files.
Added HpPrinter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DelegateTest.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizard.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GuiceWizard.java to .\/java-design-patterns\ repository source files.
Added OldTobyTobacco.java to .\/java-design-patterns\ repository source files.
Added RivendellTobacco.java to .\/java-design-patterns\ repository source files.
Added SecondBreakfastTobacco.java to .\/java-design-patterns\ repository source files.
Added SimpleWizard.java to .\/java-design-patterns\ repository source files.
Added Tobacco.java to .\/java-design-patterns\ repository source files.
Added TobaccoModule.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizardTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GuiceWizardTest.java to .\/java-design-patterns\ repository source files.
Added SimpleWizardTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Inventory.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added InventoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroid.java to .\/java-design-patterns\ repository source files.
Added GameObject.java to .\/java-design-patterns\ repository source files.
Added Meteoroid.java to .\/java-design-patterns\ repository source files.
Added Rectangle.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIss.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMir.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CollisionTest.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroidTest.java to .\/java-design-patterns\ repository source files.
Added MeteoroidTest.java to .\/java-design-patterns\ repository source files.
Added RectangleTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIssTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMirTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added EventEmitter.java to .\/java-design-patterns\ repository source files.
Added EventObserver.java to .\/java-design-patterns\ repository source files.
Added KingJoffrey.java to .\/java-design-patterns\ repository source files.
Added KingsHand.java to .\/java-design-patterns\ repository source files.
Added LordBaelish.java to .\/java-design-patterns\ repository source files.
Added LordVarys.java to .\/java-design-patterns\ repository source files.
Added Scout.java to .\/java-design-patterns\ repository source files.
Added Weekday.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EventEmitterTest.java to .\/java-design-patterns\ repository source files.
Added EventTest.java to .\/java-design-patterns\ repository source files.
Added KingJoffreyTest.java to .\/java-design-patterns\ repository source files.
Added KingsHandTest.java to .\/java-design-patterns\ repository source files.
Added LordBaelishTest.java to .\/java-design-patterns\ repository source files.
Added LordVarysTest.java to .\/java-design-patterns\ repository source files.
Added ScoutTest.java to .\/java-design-patterns\ repository source files.
Added WeekdayTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEvent.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEvent.java to .\/java-design-patterns\ repository source files.
Added EventDispatcher.java to .\/java-design-patterns\ repository source files.
Added Handler.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventTest.java to .\/java-design-patterns\ repository source files.
Added EventDispatcherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileWriterAction.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DwarvenCartOperator.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldDigger.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacade.java to .\/java-design-patterns\ repository source files.
Added DwarvenMineWorker.java to .\/java-design-patterns\ repository source files.
Added DwarvenTunnelDigger.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacadeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Axe.java to .\/java-design-patterns\ repository source files.
Added Bow.java to .\/java-design-patterns\ repository source files.
Added Builder.java to .\/java-design-patterns\ repository source files.
Added Spear.java to .\/java-design-patterns\ repository source files.
Added Sword.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponFactory.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryKitTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Blacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfBlacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfWeapon.java to .\/java-design-patterns\ repository source files.
Added OrcBlacksmith.java to .\/java-design-patterns\ repository source files.
Added OrcWeapon.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added UserGroup.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added UserGroupTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FluentIterable.java to .\/java-design-patterns\ repository source files.
Added DecoratingIterator.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterable.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterable.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added ActionType.java to .\/java-design-patterns\ repository source files.
Added Content.java to .\/java-design-patterns\ repository source files.
Added ContentAction.java to .\/java-design-patterns\ repository source files.
Added MenuAction.java to .\/java-design-patterns\ repository source files.
Added MenuItem.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added ContentStore.java to .\/java-design-patterns\ repository source files.
Added MenuStore.java to .\/java-design-patterns\ repository source files.
Added Store.java to .\/java-design-patterns\ repository source files.
Added ContentView.java to .\/java-design-patterns\ repository source files.
Added MenuView.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ContentTest.java to .\/java-design-patterns\ repository source files.
Added MenuItemTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DispatcherTest.java to .\/java-design-patterns\ repository source files.
Added ContentStoreTest.java to .\/java-design-patterns\ repository source files.
Added MenuStoreTest.java to .\/java-design-patterns\ repository source files.
Added ContentViewTest.java to .\/java-design-patterns\ repository source files.
Added MenuViewTest.java to .\/java-design-patterns\ repository source files.
Added AlchemistShop.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HealingPotion.java to .\/java-design-patterns\ repository source files.
Added HolyWaterPotion.java to .\/java-design-patterns\ repository source files.
Added InvisibilityPotion.java to .\/java-design-patterns\ repository source files.
Added PoisonPotion.java to .\/java-design-patterns\ repository source files.
Added Potion.java to .\/java-design-patterns\ repository source files.
Added PotionFactory.java to .\/java-design-patterns\ repository source files.
Added PotionType.java to .\/java-design-patterns\ repository source files.
Added StrengthPotion.java to .\/java-design-patterns\ repository source files.
Added AlchemistShopTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ApplicationException.java to .\/java-design-patterns\ repository source files.
Added ArcherCommand.java to .\/java-design-patterns\ repository source files.
Added ArcherView.java to .\/java-design-patterns\ repository source files.
Added CatapultCommand.java to .\/java-design-patterns\ repository source files.
Added CatapultView.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added ErrorView.java to .\/java-design-patterns\ repository source files.
Added FrontController.java to .\/java-design-patterns\ repository source files.
Added UnknownCommand.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ApplicationExceptionTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added FrontControllerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added ViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsynchronousService.java to .\/java-design-patterns\ repository source files.
Added AsyncTask.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added AsynchronousServiceTest.java to .\/java-design-patterns\ repository source files.
Added AbstractFilter.java to .\/java-design-patterns\ repository source files.
Added AddressFilter.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added ContactFilter.java to .\/java-design-patterns\ repository source files.
Added DepositFilter.java to .\/java-design-patterns\ repository source files.
Added Filter.java to .\/java-design-patterns\ repository source files.
Added FilterChain.java to .\/java-design-patterns\ repository source files.
Added FilterManager.java to .\/java-design-patterns\ repository source files.
Added NameFilter.java to .\/java-design-patterns\ repository source files.
Added Order.java to .\/java-design-patterns\ repository source files.
Added OrderFilter.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FilterManagerTest.java to .\/java-design-patterns\ repository source files.
Added FilterTest.java to .\/java-design-patterns\ repository source files.
Added OrderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Expression.java to .\/java-design-patterns\ repository source files.
Added MinusExpression.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpression.java to .\/java-design-patterns\ repository source files.
Added NumberExpression.java to .\/java-design-patterns\ repository source files.
Added PlusExpression.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MinusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpressionTest.java to .\/java-design-patterns\ repository source files.
Added NumberExpressionTest.java to .\/java-design-patterns\ repository source files.
Added PlusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemIterator.java to .\/java-design-patterns\ repository source files.
Added ItemType.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestItemIterator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Cake.java to .\/java-design-patterns\ repository source files.
Added CakeBakingException.java to .\/java-design-patterns\ repository source files.
Added CakeBakingService.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImpl.java to .\/java-design-patterns\ repository source files.
Added CakeDao.java to .\/java-design-patterns\ repository source files.
Added CakeInfo.java to .\/java-design-patterns\ repository source files.
Added CakeLayer.java to .\/java-design-patterns\ repository source files.
Added CakeLayerDao.java to .\/java-design-patterns\ repository source files.
Added CakeLayerInfo.java to .\/java-design-patterns\ repository source files.
Added CakeTopping.java to .\/java-design-patterns\ repository source files.
Added CakeToppingDao.java to .\/java-design-patterns\ repository source files.
Added CakeToppingInfo.java to .\/java-design-patterns\ repository source files.
Added CakeViewImpl.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingExceptionTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added CakeTest.java to .\/java-design-patterns\ repository source files.
Added CakeViewImplTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Heavy.java to .\/java-design-patterns\ repository source files.
Added HolderNaive.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafe.java to .\/java-design-patterns\ repository source files.
Added Java8Holder.java to .\/java-design-patterns\ repository source files.
Added AbstractHolderTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HolderNaiveTest.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafeTest.java to .\/java-design-patterns\ repository source files.
Added Java8HolderTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hobbit.java to .\/java-design-patterns\ repository source files.
Added Hunter.java to .\/java-design-patterns\ repository source files.
Added Party.java to .\/java-design-patterns\ repository source files.
Added PartyImpl.java to .\/java-design-patterns\ repository source files.
Added PartyMember.java to .\/java-design-patterns\ repository source files.
Added PartyMemberBase.java to .\/java-design-patterns\ repository source files.
Added Rogue.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added PartyImplTest.java to .\/java-design-patterns\ repository source files.
Added PartyMemberTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Star.java to .\/java-design-patterns\ repository source files.
Added StarMemento.java to .\/java-design-patterns\ repository source files.
Added StarType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StarTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Fatigue.java to .\/java-design-patterns\ repository source files.
Added GiantController.java to .\/java-design-patterns\ repository source files.
Added GiantModel.java to .\/java-design-patterns\ repository source files.
Added GiantView.java to .\/java-design-patterns\ repository source files.
Added Health.java to .\/java-design-patterns\ repository source files.
Added Nourishment.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GiantControllerTest.java to .\/java-design-patterns\ repository source files.
Added GiantModelTest.java to .\/java-design-patterns\ repository source files.
Added GiantViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileLoader.java to .\/java-design-patterns\ repository source files.
Added FileSelectorJFrame.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenter.java to .\/java-design-patterns\ repository source files.
Added FileSelectorStub.java to .\/java-design-patterns\ repository source files.
Added FileSelectorView.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FileLoaderTest.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Sex.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added Validator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MonadTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added LoadBalancer.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added Server.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added LoadBalancerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Nazgul.java to .\/java-design-patterns\ repository source files.
Added NazgulName.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NazgulTest.java to .\/java-design-patterns\ repository source files.
Added HomePageService.java to .\/java-design-patterns\ repository source files.
Added HomePageViewModel.java to .\/java-design-patterns\ repository source files.
Added SimpleObject.java to .\/java-design-patterns\ repository source files.
Added SimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectTest.java to .\/java-design-patterns\ repository source files.
Added DomainAppFixturesProvider.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectCreate.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTearDown.java to .\/java-design-patterns\ repository source files.
Added RecreateSimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleAppSystemInitializer.java to .\/java-design-patterns\ repository source files.
Added BootstrappingGlue.java to .\/java-design-patterns\ repository source files.
Added CatalogOfFixturesGlue.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectGlue.java to .\/java-design-patterns\ repository source files.
Added RunSpecs.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleAppIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleApplication.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Node.java to .\/java-design-patterns\ repository source files.
Added NodeImpl.java to .\/java-design-patterns\ repository source files.
Added NullNode.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NullNodeTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added TreeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ObjectPool.java to .\/java-design-patterns\ repository source files.
Added Oliphaunt.java to .\/java-design-patterns\ repository source files.
Added OliphauntPool.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OliphauntPoolTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GHobbits.java to .\/java-design-patterns\ repository source files.
Added GOrcs.java to .\/java-design-patterns\ repository source files.
Added GWeather.java to .\/java-design-patterns\ repository source files.
Added Observable.java to .\/java-design-patterns\ repository source files.
Added Observer.java to .\/java-design-patterns\ repository source files.
Added Race.java to .\/java-design-patterns\ repository source files.
Added Hobbits.java to .\/java-design-patterns\ repository source files.
Added Orcs.java to .\/java-design-patterns\ repository source files.
Added Weather.java to .\/java-design-patterns\ repository source files.
Added WeatherObserver.java to .\/java-design-patterns\ repository source files.
Added WeatherType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GHobbitsTest.java to .\/java-design-patterns\ repository source files.
Added GWeatherTest.java to .\/java-design-patterns\ repository source files.
Added ObserverTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added HobbitsTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WeatherObserverTest.java to .\/java-design-patterns\ repository source files.
Added WeatherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added MessageQueue.java to .\/java-design-patterns\ repository source files.
Added MqPublishPoint.java to .\/java-design-patterns\ repository source files.
Added MqSubscribePoint.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added SimpleMessage.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageQueue.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added PoisonMessageTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ImmutableStew.java to .\/java-design-patterns\ repository source files.
Added Stew.java to .\/java-design-patterns\ repository source files.
Added StewData.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ImmutableStewTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added StewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemQueue.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Stats.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Beast.java to .\/java-design-patterns\ repository source files.
Added ElfBeast.java to .\/java-design-patterns\ repository source files.
Added ElfMage.java to .\/java-design-patterns\ repository source files.
Added ElfWarlord.java to .\/java-design-patterns\ repository source files.
Added HeroFactory.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImpl.java to .\/java-design-patterns\ repository source files.
Added Mage.java to .\/java-design-patterns\ repository source files.
Added OrcBeast.java to .\/java-design-patterns\ repository source files.
Added OrcMage.java to .\/java-design-patterns\ repository source files.
Added OrcWarlord.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Warlord.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImplTest.java to .\/java-design-patterns\ repository source files.
Added PrototypeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardTower.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WizardTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxyTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppClient.java to .\/java-design-patterns\ repository source files.
Added LoggingHandler.java to .\/java-design-patterns\ repository source files.
Added AbstractNioChannel.java to .\/java-design-patterns\ repository source files.
Added ChannelHandler.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added NioDatagramChannel.java to .\/java-design-patterns\ repository source files.
Added NioReactor.java to .\/java-design-patterns\ repository source files.
Added NioServerSocketChannel.java to .\/java-design-patterns\ repository source files.
Added SameThreadDispatcher.java to .\/java-design-patterns\ repository source files.
Added ThreadPoolDispatcher.java to .\/java-design-patterns\ repository source files.
Added ReactorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Reader.java to .\/java-design-patterns\ repository source files.
Added ReaderWriterLock.java to .\/java-design-patterns\ repository source files.
Added Writer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ReaderAndWriterTest.java to .\/java-design-patterns\ repository source files.
Added ReaderTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppConfig.java to .\/java-design-patterns\ repository source files.
Added Person.java to .\/java-design-patterns\ repository source files.
Added PersonRepository.java to .\/java-design-patterns\ repository source files.
Added PersonSpecifications.java to .\/java-design-patterns\ repository source files.
Added AnnotationBasedRepositoryTest.java to .\/java-design-patterns\ repository source files.
Added AppConfigTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RepositoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added SlidingDoor.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ClosableTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added Queen.java to .\/java-design-patterns\ repository source files.
Added Royalty.java to .\/java-design-patterns\ repository source files.
Added Servant.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added KingTest.java to .\/java-design-patterns\ repository source files.
Added QueenTest.java to .\/java-design-patterns\ repository source files.
Added ServantTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BaseEntity.java to .\/java-design-patterns\ repository source files.
Added Dao.java to .\/java-design-patterns\ repository source files.
Added DaoBaseImpl.java to .\/java-design-patterns\ repository source files.
Added HibernateUtil.java to .\/java-design-patterns\ repository source files.
Added MagicService.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImpl.java to .\/java-design-patterns\ repository source files.
Added Spell.java to .\/java-design-patterns\ repository source files.
Added SpellDao.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Spellbook.java to .\/java-design-patterns\ repository source files.
Added SpellbookDao.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardDao.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BaseDaoTest.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added InitContext.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added ServiceCache.java to .\/java-design-patterns\ repository source files.
Added ServiceImpl.java to .\/java-design-patterns\ repository source files.
Added ServiceLocator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ServiceLocatorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTower.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiom.java to .\/java-design-patterns\ repository source files.
Added IvoryTower.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLocking.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTower.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiomTest.java to .\/java-design-patterns\ repository source files.
Added IvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added SingletonTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLockingTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AbstractCreature.java to .\/java-design-patterns\ repository source files.
Added Creature.java to .\/java-design-patterns\ repository source files.
Added Dragon.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added KillerBee.java to .\/java-design-patterns\ repository source files.
Added Octopus.java to .\/java-design-patterns\ repository source files.
Added Shark.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added Color.java to .\/java-design-patterns\ repository source files.
Added Movement.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added ColorSelector.java to .\/java-design-patterns\ repository source files.
Added MovementSelector.java to .\/java-design-patterns\ repository source files.
Added SizeSelector.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CreatureTest.java to .\/java-design-patterns\ repository source files.
Added ColorSelectorTest.java to .\/java-design-patterns\ repository source files.
Added MovementSelectorTest.java to .\/java-design-patterns\ repository source files.
Added SizeSelectorTest.java to .\/java-design-patterns\ repository source files.
Added AngryState.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Mammoth.java to .\/java-design-patterns\ repository source files.
Added PeacefulState.java to .\/java-design-patterns\ repository source files.
Added State.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MammothTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilder.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DragonSlayer.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategy.java to .\/java-design-patterns\ repository source files.
Added MeleeStrategy.java to .\/java-design-patterns\ repository source files.
Added ProjectileStrategy.java to .\/java-design-patterns\ repository source files.
Added SpellStrategy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayerTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategyTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HalflingThief.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethod.java to .\/java-design-patterns\ repository source files.
Added StealingMethod.java to .\/java-design-patterns\ repository source files.
Added SubtleMethod.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HalflingThiefTest.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethodTest.java to .\/java-design-patterns\ repository source files.
Added StealingMethodTest.java to .\/java-design-patterns\ repository source files.
Added SubtleMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTask.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added Worker.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTaskTest.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTaskTest.java to .\/java-design-patterns\ repository source files.
Added TaskTest.java to .\/java-design-patterns\ repository source files.
Added WorkerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added RainbowFish.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializer.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializerTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2Test.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BallItem.java to .\/java-design-patterns\ repository source files.
Added BallThread.java to .\/java-design-patterns\ repository source files.
Added GameItem.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BallItemTest.java to .\/java-design-patterns\ repository source files.
Added BallThreadTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HeroStat.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroStatTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Commander.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitor.java to .\/java-design-patterns\ repository source files.
Added Sergeant.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitor.java to .\/java-design-patterns\ repository source files.
Added Soldier.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitor.java to .\/java-design-patterns\ repository source files.
Added Unit.java to .\/java-design-patterns\ repository source files.
Added UnitVisitor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommanderTest.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SergeantTest.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SoldierTest.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitorTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added UnitTest.java to .\/java-design-patterns\ repository source files.
Added VisitorTest.java to .\/java-design-patterns\ repository source files.
App app = new App();
elfKing=app.getKing(elfFactory)
final King elfKing = app.getKing(elfFactory);
orcKing=app.getKing(orcFactory)
final King orcKing = app.getKing(orcFactory);
elfCastle=app.getCastle(elfFactory)
final Castle elfCastle = app.getCastle(elfFactory);
orcCastle=app.getCastle(orcFactory)
final Castle orcCastle = app.getCastle(orcFactory);
elfArmy=app.getArmy(elfFactory)
final Army elfArmy = app.getArmy(elfFactory);
orcArmy=app.getArmy(orcFactory)
final Army orcArmy = app.getArmy(orcFactory);
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
String[] args = {};
Captain captain = new Captain(new BattleFishingBoat());
battleFishingBoat=spy(new BattleFishingBoat())
BattleFishingBoat battleFishingBoat = spy(new BattleFishingBoat());
Captain captain = new Captain();
BattleShip captain = (BattleShip) beans.get(CAPTAIN_BEAN);
BattleShip battleship = (BattleShip) beans.get(BATTLESHIP_BEAN);
String[] args = {};
AsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult1=executor.startProcess(lazyval(10,500))
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
asyncResult2=executor.startProcess(lazyval("test",300))
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
asyncResult3=executor.startProcess(lazyval(50L,700))
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
asyncResult4=executor.startProcess(lazyval(20,400),callback("Callback result 4"))
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
asyncResult5=executor.startProcess(lazyval("callback",600),callback("Callback result 5"))
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
result1=executor.endProcess(asyncResult1)
Integer result1 = executor.endProcess(asyncResult1);
result2=executor.endProcess(asyncResult2)
String result2 = executor.endProcess(asyncResult2);
result3=executor.endProcess(asyncResult3)
Long result3 = executor.endProcess(asyncResult3);
CompletableResult<T> result = new CompletableResult<>(callback);
String[] args = {};
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null)
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(null,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
exception=optionalException.get()
final Exception exception = optionalException.get();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null,null)
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());
FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());
SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());
String[] args = {};
excalibur=spy(new Excalibur())
final Excalibur excalibur = spy(new Excalibur());
final BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(excalibur);
mjollnir=spy(new Mjollnir())
final Mjollnir mjollnir = spy(new Mjollnir());
final FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(mjollnir);
stormbringer=spy(new Stormbringer())
final Stormbringer stormbringer = spy(new Stormbringer());
final SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(stormbringer);
mage=new HeroBuilder(Profession.MAGE,"Riobard").withHairColor(HairColor.BLACK).withWeapon(Weapon.DAGGER).build()
Hero mage =
        new HeroBuilder(Profession.MAGE, "Riobard").withHairColor(HairColor.BLACK)
            .withWeapon(Weapon.DAGGER).build();
warrior=new HeroBuilder(Profession.WARRIOR,"Amberjill").withHairColor(HairColor.BLOND).withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).build()
Hero warrior =
        new HeroBuilder(Profession.WARRIOR, "Amberjill").withHairColor(HairColor.BLOND)
            .withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD)
            .build();
thief=new HeroBuilder(Profession.THIEF,"Desmond").withHairType(HairType.BALD).withWeapon(Weapon.BOW).build()
Hero thief =
        new HeroBuilder(Profession.THIEF, "Desmond").withHairType(HairType.BALD)
            .withWeapon(Weapon.BOW).build();
StringBuilder sb = new StringBuilder();
String[] args = {};
final String heroName = "Sir Lancelot";
hero=new Hero.HeroBuilder(Profession.WARRIOR,heroName).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).withHairType(HairType.LONG_CURLY).withHairColor(HairColor.BLOND).build()
final Hero hero = new Hero.HeroBuilder(Profession.WARRIOR, heroName)
        .withArmor(Armor.CHAIN_MAIL)
        .withWeapon(Weapon.SWORD)
        .withHairType(HairType.LONG_CURLY)
        .withHairColor(HairColor.BLOND)
        .build();
BusinessDelegate businessDelegate = new BusinessDelegate();
BusinessLookup businessLookup = new BusinessLookup();
Client client = new Client(businessDelegate);
String[] args = {};
Client client = new Client(businessDelegate);
App app = new App();
UserAccount userAccount1 = new UserAccount("001", "John", "He is a boy.");
UserAccount userAccount2 = new UserAccount("002", "Jane", "She is a girl.");
UserAccount userAccount3 = new UserAccount("003", "Adam", "He likes food.");
UserAccount userAccount4 = new UserAccount("004", "Rita", "She hates cats.");
UserAccount userAccount5 = new UserAccount("005", "Isaac", "He is allergic to mustard.");
UserAccount userAccount6 = new UserAccount("006", "Yasha", "She is an only child.");
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
StringBuilder sb = new StringBuilder();
iterable=db.getCollection("user_accounts").find(new Document("userID",userId))
FindIterable<Document> iterable =
        db.getCollection("user_accounts").find(new Document("userID", userId));
doc=iterable.first()
Document doc = iterable.first();
node=cache.get(userId)
Node node = cache.get(userId);
old=cache.get(userId)
Node old = cache.get(userId);
Node newNode = new Node(userId, userAccount);
toBeRemoved=cache.get(userId)
Node toBeRemoved = cache.get(userId);
ArrayList<UserAccount> listOfCacheData = new ArrayList<>();
Node temp = head;
String[] args = {};
Task task = new SimpleTask();
Callback callback = new Callback() {
      @Override
      public void call() {
        System.out.println("I'm done now.");
      }
    };
Task task = new SimpleTask();
Callback c = () -> System.out.println("I'm done now.");
    task.executeWith(c);
  
String[] args = {};
Callback callback = new Callback() {
      @Override
      public void call() {
        callingCount++;
      }
    };
Task task = new SimpleTask();
Callback callback = () -> callingCount++;

    Task task = new SimpleTask();

    assertEquals("Initial calling count of 0", new Integer(0), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called once", new Integer(1), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called twice", new Integer(2), callingCount);

  
OrcKing king = new OrcKing();
String[] args = {};
final OrcKing king = new OrcKing();
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
temp=target.getSize()
Size temp = target.getSize();
previousSpell=undoStack.pollLast()
Command previousSpell = undoStack.pollLast();
previousSpell=redoStack.pollLast()
Command previousSpell = redoStack.pollLast();
String[] args = {};
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
orcMessage=new Messenger().messageFromOrcs()
LetterComposite orcMessage = new Messenger().messageFromOrcs();
elfMessage=new Messenger().messageFromElves()
LetterComposite elfMessage = new Messenger().messageFromElves();
List<Word> words = new ArrayList<>();
List<Word> words = new ArrayList<>();
String[] args = {};
final Messenger messenger = new Messenger();
final Messenger messenger = new Messenger();
words=message.split(" ")
final String[] words = message.split(" ");
final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());
final Customer customer = new Customer(4, "Dan", "Danson");
final Customer customer1 = new Customer(1, "Adam", "Adamson");
final Customer customer2 = new Customer(2, "Bob", "Bobson");
final Customer customer3 = new Customer(3, "Carl", "Carlson");
final List<Customer> customers = new ArrayList<>();
boolean isEqual = false;
final Customer customer = (Customer) o;
Customer customer = null;
index=getAllCustomers().indexOf(customer)
final int index = getAllCustomers().indexOf(customer);
String[] args = {};
final Customer nonExistingCustomer = new Customer(2, "Robert", "Englund");
final String newFirstname = "Bernard";
final String newLastname = "Montgomery";
final Customer customer = new Customer(CUSTOMER.getId(), newFirstname, newLastname);
cust=impl.getCustomerById(CUSTOMER.getId())
final Customer cust = impl.getCustomerById(CUSTOMER.getId());
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final String newFirstname = "Douglas";
final String newLastname = "MacArthur";
final Customer customer = new Customer(nonExistingId, newFirstname, newLastname);
existingCustomer=impl.getCustomerById(CUSTOMER.getId())
final Customer existingCustomer = impl.getCustomerById(CUSTOMER.getId());
final Customer newCustomer = new Customer(3, "George", "Patton");
final Customer newCustomer = new Customer(3, "George", "Patton");
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final int newId = 2;
final String newFirstname = "Bill";
final String newLastname = "Clinton";
final int newId = 2;
final Customer otherCustomer = new Customer(newId, FIRSTNAME, LASTNAME);
final Customer otherCustomer = new Customer(ID, FIRSTNAME, LASTNAME);
final StringBuffer buffer = new StringBuffer();
Hostile troll = new Troll();
Hostile smart = new SmartHostile(troll);
String[] args = {};
simpleTroll=spy(new Troll())
final Hostile simpleTroll = spy(new Troll());
final Hostile smartTroll = new SmartHostile(simpleTroll);
final Troll troll = new Troll();
PrinterController hpPrinterController = new PrinterController(new HpPrinter());
PrinterController canonPrinterController = new PrinterController(new CanonPrinter());
PrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());
String[] args = {};
PrinterController printerController = new PrinterController(new CanonPrinter());
PrinterController printerController = new PrinterController(new HpPrinter());
PrinterController printerController = new PrinterController(new EpsonPrinter());
SimpleWizard simpleWizard = new SimpleWizard();
AdvancedWizard advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());
injector=Guice.createInjector(new TobaccoModule())
Injector injector = Guice.createInjector(new TobaccoModule());
guiceWizard=injector.getInstance(GuiceWizard.class)
GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final AdvancedWizard advancedWizard = new AdvancedWizard(tobacco);
String[] args = {};
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final GuiceWizard guiceWizard = new GuiceWizard(tobacco);
@SuppressWarnings("unchecked")
    final Class<? extends Tobacco>[] tobaccos = new Class[]{
        OldTobyTobacco.class, RivendellTobacco.class, SecondBreakfastTobacco.class
    };
injector=Guice.createInjector(new AbstractModule(){
  @Override protected void configure(){
    bind(Tobacco.class).to(tobaccoClass);
  }
}
)
final Injector injector = Guice.createInjector(new AbstractModule() {
        @Override
        protected void configure() {
          bind(Tobacco.class).to(tobaccoClass);
        }
      });
guiceWizard=injector.getInstance(GuiceWizard.class)
final GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final SimpleWizard simpleWizard = new SimpleWizard();
final Inventory inventory = new Inventory(1000);
executorService=Executors.newFixedThreadPool(3)
ExecutorService executorService = Executors.newFixedThreadPool(3);
String[] args = {};
final Inventory inventory = new Inventory(INVENTORY_SIZE);
executorService=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);
items=inventory.getItems()
final List<Item> items = inventory.getItems();
final List<Item> items = inventory.getItems();
stdOutCaptor=ArgumentCaptor.forClass(String.class)
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
values=stdOutCaptor.getAllValues()
final List<String> values = stdOutCaptor.getAllValues();
final List<String> values = stdOutCaptor.getAllValues();
List<GameObject> objects = new ArrayList<>();
String[] args = {};
tested=getTestedObject()
final O tested = getTestedObject();
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectTargetOnFire 
        ? "Expected [" + targetName + "] to be on fire after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be on fire after colliding with [" + otherName + "] but it was!";
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectedDamage
        ? "Expected [" + targetName + "] to be damaged after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be damaged after colliding with [" + otherName + "] but it was!";
final FlamingAsteroid asteroid = new FlamingAsteroid(1, 2, 3, 4);
final Meteoroid meteoroid = new Meteoroid(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final SpaceStationIss iss = new SpaceStationIss(1, 2, 3, 4);
final SpaceStationMir mir = new SpaceStationMir(1, 2, 3, 4);
KingJoffrey kingJoffrey = new KingJoffrey();
KingsHand kingsHand = new KingsHand(kingJoffrey);
List<EventEmitter> emitters = new ArrayList<>();
String[] args = {};
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithoutDefaultObserver.get()
final E emitter = this.factoryWithoutDefaultObserver.get();
defaultObserver=mock(EventObserver.class)
final EventObserver defaultObserver = mock(EventObserver.class);
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithDefaultObserver.apply(defaultObserver)
final E emitter = this.factoryWithDefaultObserver.apply(defaultObserver);
toString=event.toString()
final String toString = event.toString();
final KingJoffrey kingJoffrey = new KingJoffrey();
final String expectedMessage = "Received event from the King's Hand: " + event.toString();
observer=mock(EventObserver.class)
final EventObserver observer = mock(EventObserver.class);
final KingsHand kingsHand = new KingsHand(observer);
toString=weekday.toString()
final String toString = weekday.toString();
EventDispatcher dispatcher = new EventDispatcher();
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = (UserCreatedEvent) message;
UserUpdatedEvent userUpdatedEvent = (UserUpdatedEvent) message;
String[] args = {};
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
dispatcher=spy(new EventDispatcher())
EventDispatcher dispatcher = spy(new EventDispatcher());
userCreatedEventHandler=spy(new UserCreatedEventHandler())
UserCreatedEventHandler userCreatedEventHandler = spy(new UserCreatedEventHandler());
userUpdatedEventHandler=spy(new UserUpdatedEventHandler())
UserUpdatedEventHandler userUpdatedEventHandler = spy(new UserUpdatedEventHandler());
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
UserUpdatedEvent userUpdatedEvent = new UserUpdatedEvent(user);
FileWriter writer = new FileWriter(filename);
String[] args = {};
File file = new File("testfile.txt");
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
final File nonExistingFile = new File(this.testFolder.getRoot(), "non-existing-file");
final String testMessage = "Test message";
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
DwarvenGoldmineFacade facade = new DwarvenGoldmineFacade();
String[] args = {};
final DwarvenGoldmineFacade goldMine = new DwarvenGoldmineFacade();
WeaponFactory factory = WeaponFactory.factory(builder -> {
      builder.add(WeaponType.SWORD, Sword::new);
      builder.add(WeaponType.AXE, Axe::new);
      builder.add(WeaponType.SPEAR, Spear::new);
      builder.add(WeaponType.BOW, Bow::new);
    });
    Weapon axe = factory.create(WeaponType.AXE);
    System.out.println(axe);
  
HashMap<WeaponType, Supplier<Weapon>> map = new HashMap<>();
String[] args = {};
weapon=factory.create(WeaponType.SPEAR)
Weapon weapon = factory.create(WeaponType.SPEAR);
weapon=factory.create(WeaponType.AXE)
Weapon weapon = factory.create(WeaponType.AXE);
weapon=factory.create(WeaponType.SWORD)
Weapon weapon = factory.create(WeaponType.SWORD);
App app = new App(new OrcBlacksmith());
Weapon weapon;
String[] args = {};
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.AXE)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.AXE);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties turnedOff = new Properties();
Service turnedOffService = new PropertiesFeatureToggleVersion(turnedOff);
welcomeMessageturnedOff=turnedOffService.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessageturnedOff = turnedOffService.getWelcomeMessage(new User("Jamie No Code"));
final User paidUser = new User("Jamie Coder");
final User freeUser = new User("Alan Defect");
welcomeMessagePaidUser=service.getWelcomeMessage(paidUser)
final String welcomeMessagePaidUser = service.getWelcomeMessage(paidUser);
welcomeMessageFreeUser=service.getWelcomeMessage(freeUser)
final String welcomeMessageFreeUser = service.getWelcomeMessage(freeUser);
final Properties properties = new Properties();
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
welcomeMessage=service.getWelcomeMessage(paidUser)
final String welcomeMessage = service.getWelcomeMessage(paidUser);
final String expected = "You're amazing Jamie Coder. Thanks for paying for this awesome software.";
welcomeMessage=service.getWelcomeMessage(freeUser)
final String welcomeMessage = service.getWelcomeMessage(freeUser);
final String expected = "I suppose you can use this software.";
User user = new User("Free User");
User user = new User("Paid User");
User user = new User("Paid User");
User user = new User("Free User");
List<Integer> integerList = new ArrayList<>();
firstFiveNegatives=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList()
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
lastTwoPositives=SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList()
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
transformedList=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString()).asList()
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
lastTwoOfFirstFourStringMapped=LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2).map(number-- > "String[" + valueOf(number) + "]").asList()
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
StringJoiner joiner = new StringJoiner(delimiter, prefix, ".");
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
ArrayList<E> copy = new ArrayList<>();
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
final E result = next;
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=last(1).iterator()
Iterator<E> resultIterator = last(1).iterator();
Iterator<E> resultIterator = last(1).iterator();
E candidate = null;
newIterator=iterable.iterator()
Iterator<E> newIterator = iterable.iterator();
candidate=oldTypeIterator.next()
E candidate = oldTypeIterator.next();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
nextElement=iterator.next()
E nextElement = iterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentCount = 0;
list=last(1).asList()
List<E> list = last(1).asList();
List<E> list = last(1).asList();
remainingElementsCount=getRemainingElementsCount()
int remainingElementsCount = getRemainingElementsCount();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentIndex = 0;
List<T> temporaryList = new ArrayList<>();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
copy=FluentIterable.copyToList(iterable)
List<E> copy = FluentIterable.copyToList(iterable);
List<E> copy = FluentIterable.copyToList(iterable);
int counter = 0;
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
List<E> copy = new ArrayList<>();
String[] args = {};
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
evenItems=createFluentIterable(integers).filter(i-- > i % 2 == 0).asList()
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
longs=createFluentIterable(integers).map(Integer).asList()
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
consumer=mock(Consumer.class)
final Consumer<Integer> consumer = mock(Consumer.class);
final Consumer<Integer> consumer = mock(Consumer.class);
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
split=createFluentIterable(integers).spliterator()
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
MenuStore menuStore = new MenuStore();
ContentStore contentStore = new ContentStore();
MenuView menuView = new MenuView();
ContentView contentView = new ContentView();
ContentAction contentAction = (ContentAction) action;
MenuAction menuAction = (MenuAction) action;
ContentStore contentStore = (ContentStore) store;
MenuStore menuStore = (MenuStore) store;
toString=content.toString()
final String toString = content.toString();
toString=menuItem.toString()
final String toString = menuItem.toString();
String[] args = {};
final Constructor<Dispatcher> constructor;
final Constructor<Dispatcher> constructor;
field=Dispatcher.class.getDeclaredField("instance")
final Field field = Dispatcher.class.getDeclaredField("instance");
dispatcher=Dispatcher.getInstance()
final Dispatcher dispatcher = Dispatcher.getInstance();
store=mock(Store.class)
final Store store = mock(Store.class);
actionCaptor=ArgumentCaptor.forClass(Action.class)
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
actions=actionCaptor.getAllValues()
final List<Action> actions = actionCaptor.getAllValues();
final List<Action> actions = actionCaptor.getAllValues();
menuActions=actions.stream().filter(a-- > a.getType().equals(ActionType.MENU_ITEM_SELECTED)).map(a-- > (MenuAction)a).collect(Collectors.toList())
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
contentActions=actions.stream().filter(a-- > a.getType().equals(ActionType.CONTENT_CHANGED)).map(a-- > (ContentAction)a).collect(Collectors.toList())
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final ContentStore contentStore = new ContentStore();
view=mock(View.class)
final View view = mock(View.class);
final MenuStore menuStore = new MenuStore();
view=mock(View.class)
final View view = mock(View.class);
store=mock(ContentStore.class)
final ContentStore store = mock(ContentStore.class);
final ContentView view = new ContentView();
store=mock(MenuStore.class)
final MenuStore store = mock(MenuStore.class);
final MenuView view = new MenuView();
store=mock(Store.class)
final Store store = mock(Store.class);
final MenuView view = new MenuView();
PotionFactory factory = new PotionFactory();
AlchemistShop alchemistShop = new AlchemistShop();
potion=potions.get(type)
Potion potion = potions.get(type);
final AlchemistShop shop = new AlchemistShop();
bottomShelf=shop.getBottomShelf()
final List<Potion> bottomShelf = shop.getBottomShelf();
final List<Potion> bottomShelf = shop.getBottomShelf();
topShelf=shop.getTopShelf()
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> allPotions = new ArrayList<>();
String[] args = {};
FrontController controller = new FrontController();
command=getCommand(request)
Command command = getCommand(request);
commandClass=getCommandClass(request)
Class commandClass = getCommandClass(request);
Class result;
final Exception cause = new Exception();
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final FrontController frontController = new FrontController();
final List<Object[]> parameters = new ArrayList<>();
final List<Object[]> parameters = new ArrayList<>();
AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final Object result = new Object();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IOException exception = new IOException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IllegalStateException exception = new IllegalStateException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
Filter last = this;
String result = super.execute(order);
FilterManager filterManager = new FilterManager();
Client client = new Client();
JPanel panel = new JPanel();
Order order =
            new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),
                jtFields[2].getText(), jtAreas[1].getText());
rootPane=SwingUtilities.getRootPane(processButton)
JRootPane rootPane = SwingUtilities.getRootPane(processButton);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
JPanel bot = new JPanel();
rootPane=SwingUtilities.getRootPane(del)
JRootPane rootPane = SwingUtilities.getRootPane(del);
temp=jt.getSelectedRow()
int temp = jt.getSelectedRow();
temp2=jt.getSelectedRowCount()
int temp2 = jt.getSelectedRowCount();
String[] args = {};
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
filter=mock(Filter.class)
final Filter filter = mock(Filter.class);
order=mock(Order.class)
final Order order = mock(Order.class);
final List<Object[]> testData = new ArrayList<>();
result=this.filter.execute(this.order)
final String result = this.filter.execute(this.order);
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
String tokenString = "4 3 2 - 1 + *";
Stack<Expression> stack = new Stack<>();
tokenList=tokenString.split(" ")
String[] tokenList = tokenString.split(" ");
rightExpression=stack.pop()
Expression rightExpression = stack.pop();
leftExpression=stack.pop()
Expression leftExpression = stack.pop();
operator=getOperatorInstance(s,leftExpression,rightExpression)
Expression operator = getOperatorInstance(s, leftExpression, rightExpression);
result=operator.interpret()
int result = operator.interpret();
NumberExpression resultExpression = new NumberExpression(result);
Expression i = new NumberExpression(s);
String[] args = {};
final List<Object[]> testData = new ArrayList<>();
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expectedValue=getFirst().interpret()
final int expectedValue = getFirst().interpret();
testStingValue=String.valueOf(expectedValue)
final String testStingValue = String.valueOf(expectedValue);
final NumberExpression numberExpression = new NumberExpression(testStingValue);
TreasureChest chest = new TreasureChest();
ringIterator=chest.iterator(ItemType.RING)
ItemIterator ringIterator = chest.iterator(ItemType.RING);
potionIterator=chest.iterator(ItemType.POTION)
ItemIterator potionIterator = chest.iterator(ItemType.POTION);
weaponIterator=chest.iterator(ItemType.WEAPON)
ItemIterator weaponIterator = chest.iterator(ItemType.WEAPON);
it=chest.iterator(ItemType.ANY)
ItemIterator it = chest.iterator(ItemType.ANY);
ArrayList<Item> list = new ArrayList<>();
items=chest.getItems()
List<Item> items = chest.getItems();
List<Item> items = chest.getItems();
boolean found = false;
int tempIdx = idx;
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final TreasureChest chest = new TreasureChest();
iterator=chest.iterator(expectedItem.getType())
final ItemIterator iterator = chest.iterator(expectedItem.getType());
item=iterator.next()
final Item item = iterator.next();
name=item.toString()
final String name = item.toString();
final TreasureChest chest = new TreasureChest();
items=chest.getItems()
final List<Item> items = chest.getItems();
final List<Item> items = chest.getItems();
final boolean sameType = this.expectedItem.getType() == item.getType();
sameName=this.expectedItem.toString().equals(item.toString())
final boolean sameName = this.expectedItem.toString().equals(item.toString());
CakeViewImpl cakeView = new CakeViewImpl(cakeBakingService);
CakeInfo cake1 =
        new CakeInfo(new CakeToppingInfo("candies", 0), Arrays.asList(new CakeLayerInfo(
            "chocolate", 0), new CakeLayerInfo("banana", 0), new CakeLayerInfo("strawberry", 0)));
CakeInfo cake2 =
        new CakeInfo(new CakeToppingInfo("cherry", 0), Arrays.asList(
            new CakeLayerInfo("vanilla", 0), new CakeLayerInfo("lemon", 0), new CakeLayerInfo(
                "strawberry", 0)));
allToppings=getAvailableToppingEntities()
List<CakeTopping> allToppings = getAvailableToppingEntities();
List<CakeTopping> allToppings = getAvailableToppingEntities();
matchingToppings=allToppings.stream().filter((t)-- > t.getName().equals(cakeInfo.cakeToppingInfo.name)).collect(Collectors.toList())
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
allLayers=getAvailableLayerEntities()
List<CakeLayer> allLayers = getAvailableLayerEntities();
List<CakeLayer> allLayers = getAvailableLayerEntities();
Set<CakeLayer> foundLayers = new HashSet<>();
found=allLayers.stream().filter((layer)-- > layer.getName().equals(info.name)).findFirst()
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
toppingBean=context.getBean(CakeToppingDao.class)
CakeToppingDao toppingBean = context.getBean(CakeToppingDao.class);
topping=toppingBean.findOne(matchingToppings.iterator().next().getId())
CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().getId());
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
Cake cake = new Cake();
layerBean=context.getBean(CakeLayerDao.class)
CakeLayerDao layerBean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeTopping> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
topping=iterator.next()
CakeTopping topping = iterator.next();
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeToppingInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
next=iterator.next()
CakeTopping next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayer> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayerInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
List<CakeInfo> result = new ArrayList<>();
iterator=cakeBean.findAll().iterator()
Iterator<Cake> iterator = cakeBean.findAll().iterator();
Iterator<Cake> iterator = cakeBean.findAll().iterator();
cake=iterator.next()
Cake cake = iterator.next();
CakeToppingInfo cakeToppingInfo =
          new CakeToppingInfo(cake.getTopping().getId(), cake.getTopping().getName(), cake
              .getTopping().getCalories());
ArrayList<CakeLayerInfo> cakeLayerInfos = new ArrayList<>();
CakeInfo cakeInfo = new CakeInfo(cake.getId(), cakeToppingInfo, cakeLayerInfos);
int total = cakeToppingInfo != null ? cakeToppingInfo.calories : 0;
String[] args = {};
final CakeBakingException exception = new CakeBakingException();
final String expectedMessage = "message";
final CakeBakingException exception = new CakeBakingException(expectedMessage);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialLayers=service.getAvailableLayers()
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
availableLayers=service.getAvailableLayers()
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialToppings=service.getAvailableToppings()
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
availableToppings=service.getAvailableToppings()
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeLayerInfo layer3 = new CakeLayerInfo("Layer3", 2000);
allCakes=service.getAllCakes()
final List<CakeInfo> allCakes = service.getAllCakes();
final List<CakeInfo> allCakes = service.getAllCakes();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeToppingInfo missingTopping = new CakeToppingInfo("Topping1", 1000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo missingLayer = new CakeLayerInfo("Layer2", 2000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final Cake cake = new Cake();
expectedId=Long.valueOf(1234L)
final Long expectedId = Long.valueOf(1234L);
final Cake cake = new Cake();
final CakeTopping expectedTopping = new CakeTopping("DummyTopping", 1000);
final Cake cake = new Cake();
final Set<CakeLayer> expectedLayers = new HashSet<>();
final Cake cake = new Cake();
final Set<CakeLayer> initialLayers = new HashSet<>();
final CakeLayer newLayer = new CakeLayer("layer3", 3000);
final Set<CakeLayer> expectedLayers = new HashSet<>();
final CakeTopping topping = new CakeTopping("topping", 20);
final CakeLayer layer = new CakeLayer("layer", 100);
final Cake cake = new Cake();
final String expected = "id=1234 topping=id=2345 name=topping calories=20 " 
            + "layers=[id=3456 name=layer calories=100]";
final List<CakeLayerInfo> layers = new ArrayList<>();
final List<CakeInfo> cakes = new ArrayList<>();
final CakeInfo cake = new CakeInfo(new CakeToppingInfo("topping", 1000), layers);
bakingService=mock(CakeBakingService.class)
final CakeBakingService bakingService = mock(CakeBakingService.class);
final CakeViewImpl cakeView = new CakeViewImpl(bakingService);
HolderNaive holderNaive = new HolderNaive();
heavy=holderNaive.getHeavy()
Heavy heavy = holderNaive.getHeavy();
HolderThreadSafe holderThreadSafe = new HolderThreadSafe();
another=holderThreadSafe.getHeavy()
Heavy another = holderThreadSafe.getHeavy();
Java8Holder java8Holder = new Java8Holder();
next=java8Holder.getHeavy()
Heavy next = java8Holder.getHeavy();
String[] args = {};
holderField=HolderNaive.class.getDeclaredField("heavy")
final Field holderField = HolderNaive.class.getDeclaredField("heavy");
holderField=HolderThreadSafe.class.getDeclaredField("heavy")
final Field holderField = HolderThreadSafe.class.getDeclaredField("heavy");
holderField=Java8Holder.class.getDeclaredField("heavy")
final Field holderField = Java8Holder.class.getDeclaredField("heavy");
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
supplierClass=supplier.getClass()
final Class<? extends Supplier> supplierClass = supplier.getClass();
final Class<? extends Supplier> supplierClass = supplier.getClass();
instanceField=supplierClass.getDeclaredField("heavyInstance")
final Field instanceField = supplierClass.getDeclaredField("heavyInstance");
Party party = new PartyImpl();
Hobbit hobbit = new Hobbit();
Wizard wizard = new Wizard();
Rogue rogue = new Rogue();
Hunter hunter = new Hunter();
String[] args = {};
partyMember1=mock(PartyMember.class)
final PartyMember partyMember1 = mock(PartyMember.class);
partyMember2=mock(PartyMember.class)
final PartyMember partyMember2 = mock(PartyMember.class);
final PartyImpl party = new PartyImpl();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
party=mock(Party.class)
final Party party = mock(Party.class);
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
memberClass=member.getClass()
final Class<? extends PartyMember> memberClass = member.getClass();
final Class<? extends PartyMember> memberClass = member.getClass();
Stack<StarMemento> states = new Stack<>();
Star star = new Star(StarType.SUN, 10000000, 500000);
StarMementoInternal state = new StarMementoInternal();
StarMementoInternal state = (StarMementoInternal) memento;
String[] args = {};
final Star star = new Star(StarType.SUN, 1, 2);
final Star star = new Star(StarType.SUN, 1, 2);
firstMemento=star.getMemento()
final StarMemento firstMemento = star.getMemento();
secondMemento=star.getMemento()
final StarMemento secondMemento = star.getMemento();
thirdMemento=star.getMemento()
final StarMemento thirdMemento = star.getMemento();
CamelContext context = new DefaultCamelContext();
String[] args = {};
GiantModel giant = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
GiantView view = new GiantView();
GiantController controller = new GiantController(giant, view);
String[] args = {};
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantView view = new GiantView();
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
FileLoader loader = new FileLoader();
FileSelectorJFrame jFrame = new FileSelectorJFrame();
FileSelectorPresenter presenter = new FileSelectorPresenter(jFrame);
BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)));
StringBuilder sb = new StringBuilder();
String line;
JScrollPane pane = new JScrollPane(area);
data=loader.loadData()
String data = loader.loadData();
String[] args = {};
final FileLoader fileLoader = new FileLoader();
String expectedFile = "Stamatis";
User user = new User("user", 24, Sex.FEMALE, "foobar.com");
IllegalStateException e = new IllegalStateException();
String[] args = {};
User tom = new User(null, 21, Sex.MALE, "tom@foo.bar");
User john = new User("John", 17, Sex.MALE, "john@qwe.bar");
User sarah = new User("Sarah", 42, Sex.FEMALE, "sarah@det.org");
validated=Validator.of(sarah).validate(getName,Objects,"name cannot be null").validate(User,age-- > age > 21,"user is underaged").validate(User,sex-- > sex == Sex.FEMALE,"user is not female").validate(User,email-- > email.contains("@"),"email does not contain @ sign").get()
User validated = Validator.of(sarah).validate(User::getName, Objects::nonNull, "name cannot be null")
        .validate(User::getAge, age -> age > 21, "user is underaged")
        .validate(User::getSex, sex -> sex == Sex.FEMALE, "user is not female")
        .validate(User::getEmail, email -> email.contains("@"), "email does not contain @ sign")
        .get();
LoadBalancer loadBalancer1 = new LoadBalancer();
LoadBalancer loadBalancer2 = new LoadBalancer();
server=servers.get(lastServedId++)
Server server = servers.get(lastServedId++);
String[] args = {};
final LoadBalancer firstBalancer = new LoadBalancer();
final LoadBalancer secondBalancer = new LoadBalancer();
server=mock(Server.class)
final Server server = mock(Server.class);
final LoadBalancer loadBalancer = new LoadBalancer();
final Request request = new Request("test");
String[] args = {};
nazgul=Nazgul.getInstance(name)
final Nazgul nazgul = Nazgul.getInstance(name);
obj=container.newTransientInstance(SimpleObject.class)
final SimpleObject obj = container.newTransientInstance(SimpleObject.class);
final SimpleObject simpleObject = new SimpleObject();
seq=context.sequence("create")
final Sequence seq = context.sequence("create");
obj=simpleObjects.create("Foobar")
final SimpleObject obj = simpleObjects.create("Foobar");
all=Lists.newArrayList()
final List<SimpleObject> all = Lists.newArrayList();
list=simpleObjects.listAll()
final List<SimpleObject> list = simpleObjects.listAll();
final List<SimpleObject> list = simpleObjects.listAll();
String name = "Foobar";
paramName=checkParam("name",ec,String.class)
String paramName = checkParam("name", ec, String.class);
paramNumber=defaultParam("number",ec,3)
final int paramNumber = defaultParam("number", ec, 3);
fs=new SimpleObjectCreate().setName(names.get(i))
final SimpleObjectCreate fs = new SimpleObjectCreate().setName(names.get(i));
isft=IsisSystemForTest.getElseNull()
IsisSystemForTest isft = IsisSystemForTest.getElseNull();
final IsisConfigurationForJdoIntegTests testConfiguration =
          new IsisConfigurationForJdoIntegTests();
findAll=service(SimpleObjects.class).listAll()
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
title=container.titleOf(simpleObjectWrapped)
final String title = container.titleOf(simpleObjectWrapped);
RecreateSimpleObjects fs = new RecreateSimpleObjects();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
simpleObject=wrap(all.get(0))
SimpleObject simpleObject = wrap(all.get(0));
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
causalChain=Throwables.getCausalChain(item)
final List<Throwable> causalChain = Throwables.getCausalChain(item);
final List<Throwable> causalChain = Throwables.getCausalChain(item);
settings=Bootstrap.getSettings()
IBootstrapSettings settings = Bootstrap.getSettings();
final AuthenticatedWebSessionForIsis s =
        (AuthenticatedWebSessionForIsis) super.newSession(request, response);
requestParameters=request.getRequestParameters()
IRequestParameters requestParameters = request.getRequestParameters();
user=requestParameters.getParameterValue("user")
final org.apache.wicket.util.string.StringValue user =
        requestParameters.getParameterValue("user");
password=requestParameters.getParameterValue("pass")
final org.apache.wicket.util.string.StringValue password =
        requestParameters.getParameterValue("pass");
uname=servletRequest.getParameter("user")
String uname = servletRequest.getParameter("user");
final Module isisDefaults = super.newIsisWicketModule();
final Module overrides = new AbstractModule() {
      @Override
      protected void configure() {
        bind(String.class).annotatedWith(Names.named("applicationName")).toInstance("Simple App");
        bind(String.class).annotatedWith(Names.named("applicationCss")).toInstance(
            "css/application.css");
        bind(String.class).annotatedWith(Names.named("applicationJs")).toInstance(
            "scripts/application.js");
        bind(String.class).annotatedWith(Names.named("welcomeMessage")).toInstance(
            readLines(getClass(), "welcome.html"));
        bind(String.class).annotatedWith(Names.named("aboutMessage")).toInstance("Simple App");
        bind(InputStream.class).annotatedWith(Names.named("metaInfManifest")).toProvider(
            Providers.of(getServletContext().getResourceAsStream("/META-INF/MANIFEST.MF")));
      }
    };
readLines=Resources.readLines(Resources.getResource(contextClass,resourceName),Charset.defaultCharset())
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
Node root =
        new NodeImpl("1", new NodeImpl("11", new NodeImpl("111", NullNode.getInstance(),
            NullNode.getInstance()), NullNode.getInstance()), new NodeImpl("12",
            NullNode.getInstance(), new NodeImpl("122", NullNode.getInstance(),
                NullNode.getInstance())));
String[] args = {};
instance=NullNode.getInstance()
final NullNode instance = NullNode.getInstance();
node=NullNode.getInstance()
final NullNode node = NullNode.getInstance();
final NodeImpl level1B = new NodeImpl("level1_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2B = new NodeImpl("level2_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3A = new NodeImpl("level3_a", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3B = new NodeImpl("level3_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2A = new NodeImpl("level2_a", level3A, level3B);
final NodeImpl level1A = new NodeImpl("level1_a", level2A, level2B);
inOrder=Mockito.inOrder(getStdOutMock())
final InOrder inOrder = Mockito.inOrder(getStdOutMock());
level1=TREE_ROOT.getLeft()
final Node level1 = TREE_ROOT.getLeft();
level2=level1.getLeft()
final Node level2 = level1.getLeft();
level3=level2.getLeft()
final Node level3 = level2.getLeft();
level1=TREE_ROOT.getRight()
final Node level1 = TREE_ROOT.getRight();
OliphauntPool pool = new OliphauntPool();
oliphaunt1=pool.checkOut()
Oliphaunt oliphaunt1 = pool.checkOut();
oliphaunt2=pool.checkOut()
Oliphaunt oliphaunt2 = pool.checkOut();
oliphaunt3=pool.checkOut()
Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunt5=pool.checkOut()
Oliphaunt oliphaunt5 = pool.checkOut();
instance=available.iterator().next()
T instance = available.iterator().next();
String[] args = {};
final OliphauntPool pool = new OliphauntPool();
expectedOliphaunt=pool.checkOut()
final Oliphaunt expectedOliphaunt = pool.checkOut();
oliphaunt=pool.checkOut()
final Oliphaunt oliphaunt = pool.checkOut();
final OliphauntPool pool = new OliphauntPool();
firstOliphaunt=pool.checkOut()
final Oliphaunt firstOliphaunt = pool.checkOut();
secondOliphaunt=pool.checkOut()
final Oliphaunt secondOliphaunt = pool.checkOut();
oliphaunt3=pool.checkOut()
final Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
final Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunts=Arrays.asList(pool.checkOut(),pool.checkOut())
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
Weather weather = new Weather();
GWeather gWeather = new GWeather();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
String[] args = {};
final ArrayList<Object[]> testData = new ArrayList<>();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
observer=this.factory.get()
final O observer = this.factory.get();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
observer=this.factory.get()
final O observer = this.factory.get();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
MessageQueue queue = new SimpleMessageQueue(10000);
final Producer producer = new Producer("PRODUCER_1", queue);
final Consumer consumer = new Consumer("CONSUMER_1", queue);
Message msg;
sender=msg.getHeader(Headers.SENDER)
String sender = msg.getHeader(Headers.SENDER);
body=msg.getBody()
String body = msg.getBody();
Message msg = new SimpleMessage();
String[] args = {};
final Message[] messages = new Message[]{
        createMessage("you", "Hello!"),
        createMessage("me", "Hi!"),
        Message.POISON_PILL,
        createMessage("late_for_the_party", "Hello? Anyone here?"),
    };
final MessageQueue queue = new SimpleMessageQueue(messages.length);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final SimpleMessage msg = new SimpleMessage();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
messageCaptor=ArgumentCaptor.forClass(Message.class)
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
message=messageCaptor.getValue()
final Message message = messageCaptor.getValue();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
final SimpleMessage message = new SimpleMessage();
final String senderName = "test";
final SimpleMessage message = new SimpleMessage();
headers=message.getHeaders()
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
Stew stew = new Stew(1, 2, 3, 4);
ImmutableStew immutableStew = new ImmutableStew(2, 4, 3, 6);
String[] args = {};
final Stew stew = new Stew(1, 2, 3, 4);
final String message = "Mixing the stew we find: 1 potatoes, 2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Stew stew = new Stew(1, 2, 3, 4);
final ImmutableStew stew = new ImmutableStew(1, 2, 3, 4);
final String expectedMessage = "Mixing the immutable stew we find: 1 potatoes, "
        + "2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ItemQueue queue = new ItemQueue();
executorService=Executors.newFixedThreadPool(5)
ExecutorService executorService = Executors.newFixedThreadPool(5);
final Producer producer = new Producer("Producer_" + i, queue);
final Consumer consumer = new Consumer("Consumer_" + i, queue);
item=queue.take()
Item item = queue.take();
Item item = new Item(name, itemId++);
Random random = new Random();
String[] args = {};
queue=spy(new ItemQueue())
final ItemQueue queue = spy(new ItemQueue());
final Consumer consumer = new Consumer("consumer", queue);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
queue=mock(ItemQueue.class)
final ItemQueue queue = mock(ItemQueue.class);
final Producer producer = new Producer("producer", queue);
Prototype charProto = new Character();
Character mageProto = new Character(Type.MAGE, charProto);
Character warProto = new Character(Type.WARRIOR, charProto);
Character rogueProto = new Character(Type.ROGUE, charProto);
Character mag = new Character("Player_1", mageProto);
Character warrior = new Character("Player_2", warProto);
Character rogue = new Character("Player_3", rogueProto);
Character rogueDouble = new Character("Player_4", rogue);
containsValue=properties.containsKey(stat)
boolean containsValue = properties.containsKey(stat);
StringBuilder builder = new StringBuilder();
value=this.get(stat)
Integer value = this.get(stat);
String[] args = {};
final Character prototype = new Character();
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character mage = new Character(Type.MAGE, prototype);
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
HeroFactory factory;
Mage mage;
Warlord warlord;
Beast beast;
String[] args = {};
mage=mock(Mage.class)
final Mage mage = mock(Mage.class);
warlord=mock(Warlord.class)
final Warlord warlord = mock(Warlord.class);
beast=mock(Beast.class)
final Beast beast = mock(Beast.class);
final HeroFactoryImpl factory = new HeroFactoryImpl(mage, warlord, beast);
clone=this.testedPrototype.clone()
final Object clone = this.testedPrototype.clone();
WizardTowerProxy tower = new WizardTowerProxy();
String[] args = {};
final String[] wizardNames = {"Gandalf", "Dumbledore", "Oz", "Merlin"};
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTowerProxy tower = new WizardTowerProxy();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTower tower = new WizardTower();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
CamelContext context = new DefaultCamelContext();
template=context.createProducerTemplate()
ProducerTemplate template = context.createProducerTemplate();
String[] args = {};
LoggingHandler loggingHandler = new LoggingHandler();
NioServerSocketChannel channel = new NioServerSocketChannel(port, handler);
NioDatagramChannel channel = new NioDatagramChannel(port, handler);
AppClient appClient = new AppClient();
outputStream=socket.getOutputStream()
OutputStream outputStream = socket.getOutputStream();
PrintWriter writer = new PrintWriter(outputStream);
byte[] data = new byte[1024];
read=inputStream.read(data,0,data.length)
int read = inputStream.read(data, 0, data.length);
String message = clientName + " - Log request: " + i;
DatagramPacket request =
              new DatagramPacket(message.getBytes(), message.getBytes().length, remoteAddress);
byte[] data = new byte[1024];
DatagramPacket reply = new DatagramPacket(data, data.length);
DatagramPacket datagram = (DatagramPacket) readObject;
DatagramPacket replyPacket = new DatagramPacket(ByteBuffer.wrap(ACK));
buffer=ByteBuffer.wrap(ACK)
ByteBuffer buffer = ByteBuffer.wrap(ACK);
pendingWrites=channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
pendingWrite=pendingWrites.poll()
Object pendingWrite = pendingWrites.poll();
pendingWrites=this.channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
sender=((DatagramChannel)key.channel()).receive(buffer)
SocketAddress sender = ((DatagramChannel) key.channel()).receive(buffer);
DatagramPacket packet = new DatagramPacket(buffer);
DatagramPacket pendingPacket = (DatagramPacket) pendingWrite;
key=channel.getJavaChannel().register(selector,channel.getInterestedOps())
SelectionKey key = channel.getJavaChannel().register(selector, channel.getInterestedOps());
keys=selector.selectedKeys()
Set<SelectionKey> keys = selector.selectedKeys();
Set<SelectionKey> keys = selector.selectedKeys();
iterator=keys.iterator()
Iterator<SelectionKey> iterator = keys.iterator();
Iterator<SelectionKey> iterator = keys.iterator();
key=iterator.next()
SelectionKey key = iterator.next();
iterator=pendingCommands.iterator()
Iterator<Runnable> iterator = pendingCommands.iterator();
Iterator<Runnable> iterator = pendingCommands.iterator();
command=iterator.next()
Runnable command = iterator.next();
AbstractNioChannel channel = (AbstractNioChannel) key.attachment();
readObject=((AbstractNioChannel)key.attachment()).read(key)
Object readObject = ((AbstractNioChannel) key.attachment()).read(key);
ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();
socketChannel=serverSocketChannel.accept()
SocketChannel socketChannel = serverSocketChannel.accept();
readKey=socketChannel.register(selector,SelectionKey.OP_READ)
SelectionKey readKey = socketChannel.register(selector, SelectionKey.OP_READ);
SocketChannel socketChannel = (SocketChannel) key.channel();
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
read=socketChannel.read(buffer)
int read = socketChannel.read(buffer);
ByteBuffer pendingBuffer = (ByteBuffer) pendingWrite;
App app = new App(new ThreadPoolDispatcher(2));
AppClient client = new AppClient();
App app = new App(new SameThreadDispatcher());
AppClient client = new AppClient();
executeService=Executors.newFixedThreadPool(10)
ExecutorService executeService = Executors.newFixedThreadPool(10);
ReaderWriterLock lock = new ReaderWriterLock();
String[] args = {};
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
reader1=spy(new Reader("Reader 1",lock.readLock()))
Reader reader1 = spy(new Reader("Reader 1", lock.readLock()));
reader2=spy(new Reader("Reader 2",lock.readLock()))
Reader reader2 = spy(new Reader("Reader 2", lock.readLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
writer1=spy(new Writer("Writer 1",lock.writeLock()))
Writer writer1 = spy(new Writer("Writer 1", lock.writeLock()));
writer2=spy(new Writer("Writer 2",lock.writeLock()))
Writer writer2 = spy(new Writer("Writer 2", lock.writeLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
        "applicationContext.xml");
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
BasicDataSource basicDataSource = new BasicDataSource();
LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();
Properties properties = new Properties();
JpaTransactionManager transactionManager = new JpaTransactionManager();
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
        AppConfig.class);
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
final int prime = 31;
int result = 1;
Person other = (Person) obj;
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
resultSet=dataSource.getConnection().createStatement().executeQuery("SELECT 1")
ResultSet resultSet = dataSource.getConnection().createStatement().executeQuery("SELECT 1");
String result = null;
String expected = "1";
String[] args = {};
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
String[] args = {};
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
King k = new King();
Queen q = new Queen();
ArrayList<Royalty> guests = new ArrayList<>();
boolean anotherDay = true;
String[] args = {};
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
goodMoodRoyalty=mock(Royalty.class)
final Royalty goodMoodRoyalty = mock(Royalty.class);
badMoodRoyalty=mock(Royalty.class)
final Royalty badMoodRoyalty = mock(Royalty.class);
final ArrayList<Royalty> goodCompany = new ArrayList<>();
final ArrayList<Royalty> badCompany = new ArrayList<>();
Spell spell1 = new Spell("Ice dart");
Spell spell2 = new Spell("Invisibility");
Spell spell3 = new Spell("Stun bolt");
Spell spell4 = new Spell("Confusion");
Spell spell5 = new Spell("Darkness");
Spell spell6 = new Spell("Fireball");
Spell spell7 = new Spell("Enchant weapon");
Spell spell8 = new Spell("Rock armour");
Spell spell9 = new Spell("Light");
Spell spell10 = new Spell("Bee swarm");
Spell spell11 = new Spell("Haste");
Spell spell12 = new Spell("Levitation");
Spell spell13 = new Spell("Magic lock");
Spell spell14 = new Spell("Summon hell bat");
Spell spell15 = new Spell("Water walking");
Spell spell16 = new Spell("Magic storm");
Spell spell17 = new Spell("Entangle");
SpellDao spellDao = new SpellDaoImpl();
SpellbookDao spellbookDao = new SpellbookDaoImpl();
Spellbook spellbook1 = new Spellbook("Book of Orgymon");
Spellbook spellbook2 = new Spellbook("Book of Aras");
Spellbook spellbook3 = new Spellbook("Book of Kritior");
Spellbook spellbook4 = new Spellbook("Book of Tamaex");
Spellbook spellbook5 = new Spellbook("Book of Idores");
Spellbook spellbook6 = new Spellbook("Book of Opaen");
Spellbook spellbook7 = new Spellbook("Book of Kihione");
WizardDao wizardDao = new WizardDaoImpl();
Wizard wizard1 = new Wizard("Aderlard Boud");
Wizard wizard2 = new Wizard("Anaxis Bajraktari");
Wizard wizard3 = new Wizard("Xuban Munoa");
Wizard wizard4 = new Wizard("Blasius Dehooge");
MagicService service =
        new MagicServiceImpl(new WizardDaoImpl(), new SpellbookDaoImpl(), new SpellDaoImpl());
wizardsWithSpellbook=service.findWizardsWithSpellbook("Book of Idores")
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
wizardsWithSpell=service.findWizardsWithSpell("Fireball")
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
List<E> result = null;
List<E> result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
spellbook=spellbookDao.findByName(name)
Spellbook spellbook = spellbookDao.findByName(name);
spell=spellDao.findByName(name)
Spell spell = spellDao.findByName(name);
spellbook=spell.getSpellbook()
Spellbook spellbook = spell.getSpellbook();
session=getSession()
Session session = getSession();
Transaction tx = null;
Spell result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Spellbook result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Wizard result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
String[] args = {};
className=dao.persistentClass.getSimpleName()
final String className = dao.persistentClass.getSimpleName();
entityName=String.format("%s%d",className,ID_GENERATOR.incrementAndGet())
final String entityName = String.format("%s%d", className, ID_GENERATOR.incrementAndGet());
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
byId=this.dao.find(entity.getId())
final E byId = this.dao.find(entity.getId());
originalEntities=this.dao.findAll()
final List<E> originalEntities = this.dao.findAll();
final List<E> originalEntities = this.dao.findAll();
entitiesLeft=this.dao.findAll()
final List<E> entitiesLeft = this.dao.findAll();
final List<E> entitiesLeft = this.dao.findAll();
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
expectedId=Long.valueOf(1)
final Long expectedId = Long.valueOf(1);
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
final String expectedName = "new name";
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
final String bookname = "bookname";
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
final Set<Wizard> wizards = new HashSet<>();
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpellbook(bookname)
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final Set<Wizard> wizards = new HashSet<>();
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spell=mock(Spell.class)
final Spell spell = mock(Spell.class);
final String spellName = "spellname";
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpell(spellName)
final List<Wizard> result = service.findWizardsWithSpell(spellName);
final List<Wizard> result = service.findWizardsWithSpell(spellName);
dao=getDao()
final SpellDaoImpl dao = getDao();
allSpells=dao.findAll()
final List<Spell> allSpells = dao.findAll();
final List<Spell> allSpells = dao.findAll();
spellByName=dao.findByName(spell.getName())
final Spell spellByName = dao.findByName(spell.getName());
dao=getDao()
final SpellbookDaoImpl dao = getDao();
allBooks=dao.findAll()
final List<Spellbook> allBooks = dao.findAll();
final List<Spellbook> allBooks = dao.findAll();
spellByName=dao.findByName(book.getName())
final Spellbook spellByName = dao.findByName(book.getName());
dao=getDao()
final WizardDaoImpl dao = getDao();
allWizards=dao.findAll()
final List<Wizard> allWizards = dao.findAll();
final List<Wizard> allWizards = dao.findAll();
byName=dao.findByName(spell.getName())
final Wizard byName = dao.findByName(spell.getName());
service=ServiceLocator.getService("jndi/serviceA")
Service service = ServiceLocator.getService("jndi/serviceA");
Service cachedService = null;
serviceObj=serviceCache.getService(serviceJndiName)
Service serviceObj = serviceCache.getService(serviceJndiName);
InitContext ctx = new InitContext();
String[] args = {};
final String[] serviceNames = new String[]{
        "jndi/serviceA", "jndi/serviceB"
    };
service=ServiceLocator.getService(serviceName)
final Service service = ServiceLocator.getService(serviceName);
ivoryTower1=IvoryTower.getInstance()
IvoryTower ivoryTower1 = IvoryTower.getInstance();
ivoryTower2=IvoryTower.getInstance()
IvoryTower ivoryTower2 = IvoryTower.getInstance();
threadSafeIvoryTower1=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower1 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
threadSafeIvoryTower2=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower2 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
EnumIvoryTower enumIvoryTower1 = EnumIvoryTower.INSTANCE;
EnumIvoryTower enumIvoryTower2 = EnumIvoryTower.INSTANCE;
dcl1=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();
dcl2=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();
demandHolderIdiom=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom =
        InitializingOnDemandHolderIdiom.getInstance();
demandHolderIdiom2=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom2 =
        InitializingOnDemandHolderIdiom.getInstance();
ThreadSafeDoubleCheckLocking result = instance;
String[] args = {};
instance1=this.singletonInstanceMethod.get()
S instance1 = this.singletonInstanceMethod.get();
instance2=this.singletonInstanceMethod.get()
S instance2 = this.singletonInstanceMethod.get();
instance3=this.singletonInstanceMethod.get()
S instance3 = this.singletonInstanceMethod.get();
final List<Callable<S>> tasks = new ArrayList<>();
int i = 0
creatures=Arrays.asList(new Goblin(),new Octopus(),new Dragon(),new Shark(),new Troll(),new KillerBee())
List<Creature> creatures =
        Arrays.asList(new Goblin(), new Octopus(), new Dragon(), new Shark(), new Troll(),
            new KillerBee());
walkingCreatures=creatures.stream().filter(new MovementSelector(Movement.WALKING)).collect(Collectors.toList())
List<Creature> walkingCreatures =
        creatures.stream().filter(new MovementSelector(Movement.WALKING))
            .collect(Collectors.toList());
darkCreatures=creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList())
List<Creature> darkCreatures =
        creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList());
redAndFlyingCreatures=creatures.stream().filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING))).collect(Collectors.toList())
List<Creature> redAndFlyingCreatures =
        creatures.stream()
            .filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING)))
            .collect(Collectors.toList());
String[] args = {};
toString=this.testedCreature.toString()
final String toString = this.testedCreature.toString();
greenCreature=mock(Creature.class)
final Creature greenCreature = mock(Creature.class);
redCreature=mock(Creature.class)
final Creature redCreature = mock(Creature.class);
final ColorSelector greenSelector = new ColorSelector(Color.GREEN);
swimmingCreature=mock(Creature.class)
final Creature swimmingCreature = mock(Creature.class);
flyingCreature=mock(Creature.class)
final Creature flyingCreature = mock(Creature.class);
final MovementSelector swimmingSelector = new MovementSelector(Movement.SWIMMING);
normalCreature=mock(Creature.class)
final Creature normalCreature = mock(Creature.class);
smallCreature=mock(Creature.class)
final Creature smallCreature = mock(Creature.class);
final SizeSelector normalSelector = new SizeSelector(Size.NORMAL);
Mammoth mammoth = new Mammoth();
String[] args = {};
inOrder=Mockito.inOrder(this.stdOutMock)
final InOrder inOrder = Mockito.inOrder(this.stdOutMock);
final Mammoth mammoth = new Mammoth();
toString=new Mammoth().toString()
final String toString = new Mammoth().toString();
warrior=CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin").withWeapon("Sword").noAbilities().build()
Character warrior =
        CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin")
            .withWeapon("Sword").noAbilities().build();
mage=CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer").withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport").noMoreAbilities().build()
Character mage =
        CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer")
            .withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport")
            .noMoreAbilities().build();
thief=CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build()
Character thief =
        CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build();
StringBuilder sb = new StringBuilder();
Character character = new Character(name);
String[] args = {};
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").withAbility("invisibility").withAbility("wisdom").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .withAbility("invisibility")
        .withAbility("wisdom")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").noSpell().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .noSpell()
        .build();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .noAbilities()
        .build();
character=CharacterStepBuilder.newBuilder().name("Cuauhtemoc").fighterClass("aztec").withWeapon("spear").withAbility("speed").withAbility("strength").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Cuauhtemoc")
        .fighterClass("aztec")
        .withWeapon("spear")
        .withAbility("speed")
        .withAbility("strength")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Poor warrior").fighterClass("none").noWeapon().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Poor warrior")
        .fighterClass("none")
        .noWeapon()
        .build();
character=CharacterStepBuilder.newBuilder().name("Weak warrior").fighterClass("none").withWeapon("Slingshot").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Weak warrior")
        .fighterClass("none")
        .withWeapon("Slingshot")
        .noAbilities()
        .build();
DragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());
String[] args = {};
strategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy strategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(strategy);
initialStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy initialStrategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(initialStrategy);
newStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy newStrategy = mock(DragonSlayingStrategy.class);
HalflingThief thief = new HalflingThief(new HitAndRunMethod());
target=pickTarget()
String target = pickTarget();
String[] args = {};
method=mock(StealingMethod.class)
final StealingMethod method = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(method);
initialMethod=mock(StealingMethod.class)
final StealingMethod initialMethod = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(initialMethod);
newMethod=mock(StealingMethod.class)
final StealingMethod newMethod = mock(StealingMethod.class);
inOrder=inOrder(this.stdOutMock)
final InOrder inOrder = inOrder(this.stdOutMock);
List<Task> tasks = new ArrayList<>();
executor=Executors.newFixedThreadPool(3)
ExecutorService executor = Executors.newFixedThreadPool(3);
Runnable worker = new Worker(tasks.get(i));
String[] args = {};
service=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService service = Executors.newFixedThreadPool(THREAD_COUNT);
final List<Callable<Integer>> tasks = new ArrayList<>();
int i = 0
task=mock(Task.class)
final Task task = mock(Task.class);
final Worker worker = new Worker(task);
RainbowFish fishV1 = new RainbowFish("Zed", 10, 11, 12);
deserializedFishV1=RainbowFishSerializer.readV1("fish1.out")
RainbowFish deserializedFishV1 = RainbowFishSerializer.readV1("fish1.out");
RainbowFishV2 fishV2 = new RainbowFishV2("Scar", 5, 12, 15, true, true, true);
deserializedFishV2=RainbowFishSerializer.readV1("fish2.out")
RainbowFish deserializedFishV2 = RainbowFishSerializer.readV1("fish2.out");
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
FileInputStream fileIn = new FileInputStream(filename);
ObjectInputStream objIn = new ObjectInputStream(fileIn);
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
String[] args = {};
File file1 = new File("fish1.out");
File file2 = new File("fish2.out");
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
final RainbowFish fish = new RainbowFish("name", 1, 2, 3);
final RainbowFishV2 fish = new RainbowFishV2("name", 1, 2, 3, false, true, false);
BallItem ballItem = new BallItem();
BallThread ballThread = new BallThread();
String[] args = {};
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
inOrder=inOrder(ballThread)
final InOrder inOrder = inOrder(ballThread);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
exceptionHandler=mock(UncaughtExceptionHandler.class)
final UncaughtExceptionHandler exceptionHandler = mock(UncaughtExceptionHandler.class);
statA=HeroStat.valueOf(10,5,0)
HeroStat statA = HeroStat.valueOf(10, 5, 0);
statB=HeroStat.valueOf(10,5,0)
HeroStat statB = HeroStat.valueOf(10, 5, 0);
statC=HeroStat.valueOf(5,1,8)
HeroStat statC = HeroStat.valueOf(5, 1, 8);
final int prime = 31;
int result = 1;
HeroStat other = (HeroStat) obj;
String[] args = {};
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatC=HeroStat.valueOf(3,9,8)
HeroStat heroStatC = HeroStat.valueOf(3, 9, 8);
Commander commander =
        new Commander(new Sergeant(new Soldier(), new Soldier(), new Soldier()), new Sergeant(
            new Soldier(), new Soldier(), new Soldier()));
String[] args = {};
final Unit[] children = new Unit[5];
unit=this.factory.apply(children)
final U unit = this.factory.apply(children);
visitor=mock(UnitVisitor.class)
final UnitVisitor visitor = mock(UnitVisitor.class);

Diff of 5109c8f4623c4f052df323d30bee8e5e86b0897b and edc93ea7cf79430d13f9d0c5a5dcf0420ef34863:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 212
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 6
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5109c8f4623c4f052df323d30bee8e5e86b0897b to edc93ea7cf79430d13f9d0c5a5dcf0420ef34863


****Parsing for addition at revision edc93ea7cf79430d13f9d0c5a5dcf0420ef34863****

Added App.java to .\/java-design-patterns\ repository source files.
Added Army.java to .\/java-design-patterns\ repository source files.
Added Castle.java to .\/java-design-patterns\ repository source files.
Added ElfArmy.java to .\/java-design-patterns\ repository source files.
Added ElfCastle.java to .\/java-design-patterns\ repository source files.
Added ElfKing.java to .\/java-design-patterns\ repository source files.
Added ElfKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added KingdomFactory.java to .\/java-design-patterns\ repository source files.
Added OrcArmy.java to .\/java-design-patterns\ repository source files.
Added OrcCastle.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added AbstractFactoryTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BattleFishingBoat.java to .\/java-design-patterns\ repository source files.
Added BattleShip.java to .\/java-design-patterns\ repository source files.
Added Captain.java to .\/java-design-patterns\ repository source files.
Added FishingBoat.java to .\/java-design-patterns\ repository source files.
Added AdapterPatternTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsyncCallback.java to .\/java-design-patterns\ repository source files.
Added AsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AsyncResult.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Excalibur.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added MagicWeapon.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Mjollnir.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Stormbringer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Armor.java to .\/java-design-patterns\ repository source files.
Added HairColor.java to .\/java-design-patterns\ repository source files.
Added HairType.java to .\/java-design-patterns\ repository source files.
Added Hero.java to .\/java-design-patterns\ repository source files.
Added Profession.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegate.java to .\/java-design-patterns\ repository source files.
Added BusinessLookup.java to .\/java-design-patterns\ repository source files.
Added BusinessService.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added EjbService.java to .\/java-design-patterns\ repository source files.
Added JmsService.java to .\/java-design-patterns\ repository source files.
Added ServiceType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegateTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppManager.java to .\/java-design-patterns\ repository source files.
Added CacheStore.java to .\/java-design-patterns\ repository source files.
Added CachingPolicy.java to .\/java-design-patterns\ repository source files.
Added DbManager.java to .\/java-design-patterns\ repository source files.
Added LruCache.java to .\/java-design-patterns\ repository source files.
Added UserAccount.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CachingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Callback.java to .\/java-design-patterns\ repository source files.
Added LambdasApp.java to .\/java-design-patterns\ repository source files.
Added SimpleTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CallbackTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added OrcCommander.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcOfficer.java to .\/java-design-patterns\ repository source files.
Added OrcSoldier.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added RequestHandler.java to .\/java-design-patterns\ repository source files.
Added RequestType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OrcKingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added InvisibilitySpell.java to .\/java-design-patterns\ repository source files.
Added ShrinkSpell.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added Visibility.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Letter.java to .\/java-design-patterns\ repository source files.
Added LetterComposite.java to .\/java-design-patterns\ repository source files.
Added Messenger.java to .\/java-design-patterns\ repository source files.
Added Sentence.java to .\/java-design-patterns\ repository source files.
Added Word.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MessengerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Customer.java to .\/java-design-patterns\ repository source files.
Added CustomerDao.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added CustomerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hostile.java to .\/java-design-patterns\ repository source files.
Added SmartHostile.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SmartHostileTest.java to .\/java-design-patterns\ repository source files.
Added TrollTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Printer.java to .\/java-design-patterns\ repository source files.
Added PrinterController.java to .\/java-design-patterns\ repository source files.
Added CanonPrinter.java to .\/java-design-patterns\ repository source files.
Added EpsonPrinter.java to .\/java-design-patterns\ repository source files.
Added HpPrinter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DelegateTest.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizard.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GuiceWizard.java to .\/java-design-patterns\ repository source files.
Added OldTobyTobacco.java to .\/java-design-patterns\ repository source files.
Added RivendellTobacco.java to .\/java-design-patterns\ repository source files.
Added SecondBreakfastTobacco.java to .\/java-design-patterns\ repository source files.
Added SimpleWizard.java to .\/java-design-patterns\ repository source files.
Added Tobacco.java to .\/java-design-patterns\ repository source files.
Added TobaccoModule.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizardTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GuiceWizardTest.java to .\/java-design-patterns\ repository source files.
Added SimpleWizardTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Inventory.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added InventoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroid.java to .\/java-design-patterns\ repository source files.
Added GameObject.java to .\/java-design-patterns\ repository source files.
Added Meteoroid.java to .\/java-design-patterns\ repository source files.
Added Rectangle.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIss.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMir.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CollisionTest.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroidTest.java to .\/java-design-patterns\ repository source files.
Added MeteoroidTest.java to .\/java-design-patterns\ repository source files.
Added RectangleTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIssTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMirTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added EventEmitter.java to .\/java-design-patterns\ repository source files.
Added EventObserver.java to .\/java-design-patterns\ repository source files.
Added KingJoffrey.java to .\/java-design-patterns\ repository source files.
Added KingsHand.java to .\/java-design-patterns\ repository source files.
Added LordBaelish.java to .\/java-design-patterns\ repository source files.
Added LordVarys.java to .\/java-design-patterns\ repository source files.
Added Scout.java to .\/java-design-patterns\ repository source files.
Added Weekday.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EventEmitterTest.java to .\/java-design-patterns\ repository source files.
Added EventTest.java to .\/java-design-patterns\ repository source files.
Added KingJoffreyTest.java to .\/java-design-patterns\ repository source files.
Added KingsHandTest.java to .\/java-design-patterns\ repository source files.
Added LordBaelishTest.java to .\/java-design-patterns\ repository source files.
Added LordVarysTest.java to .\/java-design-patterns\ repository source files.
Added ScoutTest.java to .\/java-design-patterns\ repository source files.
Added WeekdayTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEvent.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEvent.java to .\/java-design-patterns\ repository source files.
Added EventDispatcher.java to .\/java-design-patterns\ repository source files.
Added Handler.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventTest.java to .\/java-design-patterns\ repository source files.
Added EventDispatcherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileWriterAction.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DwarvenCartOperator.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldDigger.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacade.java to .\/java-design-patterns\ repository source files.
Added DwarvenMineWorker.java to .\/java-design-patterns\ repository source files.
Added DwarvenTunnelDigger.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacadeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Axe.java to .\/java-design-patterns\ repository source files.
Added Bow.java to .\/java-design-patterns\ repository source files.
Added Builder.java to .\/java-design-patterns\ repository source files.
Added Spear.java to .\/java-design-patterns\ repository source files.
Added Sword.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponFactory.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryKitTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Blacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfBlacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfWeapon.java to .\/java-design-patterns\ repository source files.
Added OrcBlacksmith.java to .\/java-design-patterns\ repository source files.
Added OrcWeapon.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added UserGroup.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added UserGroupTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FluentIterable.java to .\/java-design-patterns\ repository source files.
Added DecoratingIterator.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterable.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterable.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added ActionType.java to .\/java-design-patterns\ repository source files.
Added Content.java to .\/java-design-patterns\ repository source files.
Added ContentAction.java to .\/java-design-patterns\ repository source files.
Added MenuAction.java to .\/java-design-patterns\ repository source files.
Added MenuItem.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added ContentStore.java to .\/java-design-patterns\ repository source files.
Added MenuStore.java to .\/java-design-patterns\ repository source files.
Added Store.java to .\/java-design-patterns\ repository source files.
Added ContentView.java to .\/java-design-patterns\ repository source files.
Added MenuView.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ContentTest.java to .\/java-design-patterns\ repository source files.
Added MenuItemTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DispatcherTest.java to .\/java-design-patterns\ repository source files.
Added ContentStoreTest.java to .\/java-design-patterns\ repository source files.
Added MenuStoreTest.java to .\/java-design-patterns\ repository source files.
Added ContentViewTest.java to .\/java-design-patterns\ repository source files.
Added MenuViewTest.java to .\/java-design-patterns\ repository source files.
Added AlchemistShop.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HealingPotion.java to .\/java-design-patterns\ repository source files.
Added HolyWaterPotion.java to .\/java-design-patterns\ repository source files.
Added InvisibilityPotion.java to .\/java-design-patterns\ repository source files.
Added PoisonPotion.java to .\/java-design-patterns\ repository source files.
Added Potion.java to .\/java-design-patterns\ repository source files.
Added PotionFactory.java to .\/java-design-patterns\ repository source files.
Added PotionType.java to .\/java-design-patterns\ repository source files.
Added StrengthPotion.java to .\/java-design-patterns\ repository source files.
Added AlchemistShopTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ApplicationException.java to .\/java-design-patterns\ repository source files.
Added ArcherCommand.java to .\/java-design-patterns\ repository source files.
Added ArcherView.java to .\/java-design-patterns\ repository source files.
Added CatapultCommand.java to .\/java-design-patterns\ repository source files.
Added CatapultView.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added ErrorView.java to .\/java-design-patterns\ repository source files.
Added FrontController.java to .\/java-design-patterns\ repository source files.
Added UnknownCommand.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ApplicationExceptionTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added FrontControllerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added ViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsynchronousService.java to .\/java-design-patterns\ repository source files.
Added AsyncTask.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added AsynchronousServiceTest.java to .\/java-design-patterns\ repository source files.
Added AbstractFilter.java to .\/java-design-patterns\ repository source files.
Added AddressFilter.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added ContactFilter.java to .\/java-design-patterns\ repository source files.
Added DepositFilter.java to .\/java-design-patterns\ repository source files.
Added Filter.java to .\/java-design-patterns\ repository source files.
Added FilterChain.java to .\/java-design-patterns\ repository source files.
Added FilterManager.java to .\/java-design-patterns\ repository source files.
Added NameFilter.java to .\/java-design-patterns\ repository source files.
Added Order.java to .\/java-design-patterns\ repository source files.
Added OrderFilter.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FilterManagerTest.java to .\/java-design-patterns\ repository source files.
Added FilterTest.java to .\/java-design-patterns\ repository source files.
Added OrderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Expression.java to .\/java-design-patterns\ repository source files.
Added MinusExpression.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpression.java to .\/java-design-patterns\ repository source files.
Added NumberExpression.java to .\/java-design-patterns\ repository source files.
Added PlusExpression.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MinusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpressionTest.java to .\/java-design-patterns\ repository source files.
Added NumberExpressionTest.java to .\/java-design-patterns\ repository source files.
Added PlusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemIterator.java to .\/java-design-patterns\ repository source files.
Added ItemType.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestItemIterator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Cake.java to .\/java-design-patterns\ repository source files.
Added CakeBakingException.java to .\/java-design-patterns\ repository source files.
Added CakeBakingService.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImpl.java to .\/java-design-patterns\ repository source files.
Added CakeDao.java to .\/java-design-patterns\ repository source files.
Added CakeInfo.java to .\/java-design-patterns\ repository source files.
Added CakeLayer.java to .\/java-design-patterns\ repository source files.
Added CakeLayerDao.java to .\/java-design-patterns\ repository source files.
Added CakeLayerInfo.java to .\/java-design-patterns\ repository source files.
Added CakeTopping.java to .\/java-design-patterns\ repository source files.
Added CakeToppingDao.java to .\/java-design-patterns\ repository source files.
Added CakeToppingInfo.java to .\/java-design-patterns\ repository source files.
Added CakeViewImpl.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingExceptionTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added CakeTest.java to .\/java-design-patterns\ repository source files.
Added CakeViewImplTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Heavy.java to .\/java-design-patterns\ repository source files.
Added HolderNaive.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafe.java to .\/java-design-patterns\ repository source files.
Added Java8Holder.java to .\/java-design-patterns\ repository source files.
Added AbstractHolderTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HolderNaiveTest.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafeTest.java to .\/java-design-patterns\ repository source files.
Added Java8HolderTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hobbit.java to .\/java-design-patterns\ repository source files.
Added Hunter.java to .\/java-design-patterns\ repository source files.
Added Party.java to .\/java-design-patterns\ repository source files.
Added PartyImpl.java to .\/java-design-patterns\ repository source files.
Added PartyMember.java to .\/java-design-patterns\ repository source files.
Added PartyMemberBase.java to .\/java-design-patterns\ repository source files.
Added Rogue.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added PartyImplTest.java to .\/java-design-patterns\ repository source files.
Added PartyMemberTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Star.java to .\/java-design-patterns\ repository source files.
Added StarMemento.java to .\/java-design-patterns\ repository source files.
Added StarType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StarTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Fatigue.java to .\/java-design-patterns\ repository source files.
Added GiantController.java to .\/java-design-patterns\ repository source files.
Added GiantModel.java to .\/java-design-patterns\ repository source files.
Added GiantView.java to .\/java-design-patterns\ repository source files.
Added Health.java to .\/java-design-patterns\ repository source files.
Added Nourishment.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GiantControllerTest.java to .\/java-design-patterns\ repository source files.
Added GiantModelTest.java to .\/java-design-patterns\ repository source files.
Added GiantViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileLoader.java to .\/java-design-patterns\ repository source files.
Added FileSelectorJFrame.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenter.java to .\/java-design-patterns\ repository source files.
Added FileSelectorStub.java to .\/java-design-patterns\ repository source files.
Added FileSelectorView.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FileLoaderTest.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Sex.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added Validator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MonadTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added LoadBalancer.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added Server.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added LoadBalancerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Nazgul.java to .\/java-design-patterns\ repository source files.
Added NazgulName.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NazgulTest.java to .\/java-design-patterns\ repository source files.
Added HomePageService.java to .\/java-design-patterns\ repository source files.
Added HomePageViewModel.java to .\/java-design-patterns\ repository source files.
Added SimpleObject.java to .\/java-design-patterns\ repository source files.
Added SimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectTest.java to .\/java-design-patterns\ repository source files.
Added DomainAppFixturesProvider.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectCreate.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTearDown.java to .\/java-design-patterns\ repository source files.
Added RecreateSimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleAppSystemInitializer.java to .\/java-design-patterns\ repository source files.
Added BootstrappingGlue.java to .\/java-design-patterns\ repository source files.
Added CatalogOfFixturesGlue.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectGlue.java to .\/java-design-patterns\ repository source files.
Added RunSpecs.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleAppIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleApplication.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Node.java to .\/java-design-patterns\ repository source files.
Added NodeImpl.java to .\/java-design-patterns\ repository source files.
Added NullNode.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NullNodeTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added TreeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ObjectPool.java to .\/java-design-patterns\ repository source files.
Added Oliphaunt.java to .\/java-design-patterns\ repository source files.
Added OliphauntPool.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OliphauntPoolTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GHobbits.java to .\/java-design-patterns\ repository source files.
Added GOrcs.java to .\/java-design-patterns\ repository source files.
Added GWeather.java to .\/java-design-patterns\ repository source files.
Added Observable.java to .\/java-design-patterns\ repository source files.
Added Observer.java to .\/java-design-patterns\ repository source files.
Added Race.java to .\/java-design-patterns\ repository source files.
Added Hobbits.java to .\/java-design-patterns\ repository source files.
Added Orcs.java to .\/java-design-patterns\ repository source files.
Added Weather.java to .\/java-design-patterns\ repository source files.
Added WeatherObserver.java to .\/java-design-patterns\ repository source files.
Added WeatherType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GHobbitsTest.java to .\/java-design-patterns\ repository source files.
Added GWeatherTest.java to .\/java-design-patterns\ repository source files.
Added ObserverTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added HobbitsTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WeatherObserverTest.java to .\/java-design-patterns\ repository source files.
Added WeatherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added MessageQueue.java to .\/java-design-patterns\ repository source files.
Added MqPublishPoint.java to .\/java-design-patterns\ repository source files.
Added MqSubscribePoint.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added SimpleMessage.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageQueue.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added PoisonMessageTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ImmutableStew.java to .\/java-design-patterns\ repository source files.
Added Stew.java to .\/java-design-patterns\ repository source files.
Added StewData.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ImmutableStewTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added StewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemQueue.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Stats.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Beast.java to .\/java-design-patterns\ repository source files.
Added ElfBeast.java to .\/java-design-patterns\ repository source files.
Added ElfMage.java to .\/java-design-patterns\ repository source files.
Added ElfWarlord.java to .\/java-design-patterns\ repository source files.
Added HeroFactory.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImpl.java to .\/java-design-patterns\ repository source files.
Added Mage.java to .\/java-design-patterns\ repository source files.
Added OrcBeast.java to .\/java-design-patterns\ repository source files.
Added OrcMage.java to .\/java-design-patterns\ repository source files.
Added OrcWarlord.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Warlord.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImplTest.java to .\/java-design-patterns\ repository source files.
Added PrototypeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardTower.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WizardTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxyTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppClient.java to .\/java-design-patterns\ repository source files.
Added LoggingHandler.java to .\/java-design-patterns\ repository source files.
Added AbstractNioChannel.java to .\/java-design-patterns\ repository source files.
Added ChannelHandler.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added NioDatagramChannel.java to .\/java-design-patterns\ repository source files.
Added NioReactor.java to .\/java-design-patterns\ repository source files.
Added NioServerSocketChannel.java to .\/java-design-patterns\ repository source files.
Added SameThreadDispatcher.java to .\/java-design-patterns\ repository source files.
Added ThreadPoolDispatcher.java to .\/java-design-patterns\ repository source files.
Added ReactorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Reader.java to .\/java-design-patterns\ repository source files.
Added ReaderWriterLock.java to .\/java-design-patterns\ repository source files.
Added Writer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ReaderAndWriterTest.java to .\/java-design-patterns\ repository source files.
Added ReaderTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppConfig.java to .\/java-design-patterns\ repository source files.
Added Person.java to .\/java-design-patterns\ repository source files.
Added PersonRepository.java to .\/java-design-patterns\ repository source files.
Added PersonSpecifications.java to .\/java-design-patterns\ repository source files.
Added AnnotationBasedRepositoryTest.java to .\/java-design-patterns\ repository source files.
Added AppConfigTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RepositoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added SlidingDoor.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ClosableTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added Queen.java to .\/java-design-patterns\ repository source files.
Added Royalty.java to .\/java-design-patterns\ repository source files.
Added Servant.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added KingTest.java to .\/java-design-patterns\ repository source files.
Added QueenTest.java to .\/java-design-patterns\ repository source files.
Added ServantTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BaseEntity.java to .\/java-design-patterns\ repository source files.
Added Dao.java to .\/java-design-patterns\ repository source files.
Added DaoBaseImpl.java to .\/java-design-patterns\ repository source files.
Added HibernateUtil.java to .\/java-design-patterns\ repository source files.
Added MagicService.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImpl.java to .\/java-design-patterns\ repository source files.
Added Spell.java to .\/java-design-patterns\ repository source files.
Added SpellDao.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Spellbook.java to .\/java-design-patterns\ repository source files.
Added SpellbookDao.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardDao.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BaseDaoTest.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added InitContext.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added ServiceCache.java to .\/java-design-patterns\ repository source files.
Added ServiceImpl.java to .\/java-design-patterns\ repository source files.
Added ServiceLocator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ServiceLocatorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTower.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiom.java to .\/java-design-patterns\ repository source files.
Added IvoryTower.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLocking.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTower.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiomTest.java to .\/java-design-patterns\ repository source files.
Added IvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added SingletonTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLockingTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AbstractCreature.java to .\/java-design-patterns\ repository source files.
Added Creature.java to .\/java-design-patterns\ repository source files.
Added Dragon.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added KillerBee.java to .\/java-design-patterns\ repository source files.
Added Octopus.java to .\/java-design-patterns\ repository source files.
Added Shark.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added Color.java to .\/java-design-patterns\ repository source files.
Added Movement.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added ColorSelector.java to .\/java-design-patterns\ repository source files.
Added MovementSelector.java to .\/java-design-patterns\ repository source files.
Added SizeSelector.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CreatureTest.java to .\/java-design-patterns\ repository source files.
Added ColorSelectorTest.java to .\/java-design-patterns\ repository source files.
Added MovementSelectorTest.java to .\/java-design-patterns\ repository source files.
Added SizeSelectorTest.java to .\/java-design-patterns\ repository source files.
Added AngryState.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Mammoth.java to .\/java-design-patterns\ repository source files.
Added PeacefulState.java to .\/java-design-patterns\ repository source files.
Added State.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MammothTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilder.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DragonSlayer.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategy.java to .\/java-design-patterns\ repository source files.
Added MeleeStrategy.java to .\/java-design-patterns\ repository source files.
Added ProjectileStrategy.java to .\/java-design-patterns\ repository source files.
Added SpellStrategy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayerTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategyTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HalflingThief.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethod.java to .\/java-design-patterns\ repository source files.
Added StealingMethod.java to .\/java-design-patterns\ repository source files.
Added SubtleMethod.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HalflingThiefTest.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethodTest.java to .\/java-design-patterns\ repository source files.
Added StealingMethodTest.java to .\/java-design-patterns\ repository source files.
Added SubtleMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTask.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added Worker.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTaskTest.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTaskTest.java to .\/java-design-patterns\ repository source files.
Added TaskTest.java to .\/java-design-patterns\ repository source files.
Added WorkerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added RainbowFish.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializer.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializerTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2Test.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BallItem.java to .\/java-design-patterns\ repository source files.
Added BallThread.java to .\/java-design-patterns\ repository source files.
Added GameItem.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BallItemTest.java to .\/java-design-patterns\ repository source files.
Added BallThreadTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HeroStat.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroStatTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Commander.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitor.java to .\/java-design-patterns\ repository source files.
Added Sergeant.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitor.java to .\/java-design-patterns\ repository source files.
Added Soldier.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitor.java to .\/java-design-patterns\ repository source files.
Added Unit.java to .\/java-design-patterns\ repository source files.
Added UnitVisitor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommanderTest.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SergeantTest.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SoldierTest.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitorTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added UnitTest.java to .\/java-design-patterns\ repository source files.
Added VisitorTest.java to .\/java-design-patterns\ repository source files.
App app = new App();
elfKing=app.getKing(elfFactory)
final King elfKing = app.getKing(elfFactory);
orcKing=app.getKing(orcFactory)
final King orcKing = app.getKing(orcFactory);
elfCastle=app.getCastle(elfFactory)
final Castle elfCastle = app.getCastle(elfFactory);
orcCastle=app.getCastle(orcFactory)
final Castle orcCastle = app.getCastle(orcFactory);
elfArmy=app.getArmy(elfFactory)
final Army elfArmy = app.getArmy(elfFactory);
orcArmy=app.getArmy(orcFactory)
final Army orcArmy = app.getArmy(orcFactory);
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
String[] args = {};
Captain captain = new Captain(new BattleFishingBoat());
battleFishingBoat=spy(new BattleFishingBoat())
BattleFishingBoat battleFishingBoat = spy(new BattleFishingBoat());
Captain captain = new Captain();
BattleShip captain = (BattleShip) beans.get(CAPTAIN_BEAN);
BattleShip battleship = (BattleShip) beans.get(BATTLESHIP_BEAN);
String[] args = {};
AsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult1=executor.startProcess(lazyval(10,500))
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
asyncResult2=executor.startProcess(lazyval("test",300))
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
asyncResult3=executor.startProcess(lazyval(50L,700))
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
asyncResult4=executor.startProcess(lazyval(20,400),callback("Callback result 4"))
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
asyncResult5=executor.startProcess(lazyval("callback",600),callback("Callback result 5"))
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
result1=executor.endProcess(asyncResult1)
Integer result1 = executor.endProcess(asyncResult1);
result2=executor.endProcess(asyncResult2)
String result2 = executor.endProcess(asyncResult2);
result3=executor.endProcess(asyncResult3)
Long result3 = executor.endProcess(asyncResult3);
CompletableResult<T> result = new CompletableResult<>(callback);
String[] args = {};
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null)
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(null,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
exception=optionalException.get()
final Exception exception = optionalException.get();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null,null)
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());
FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());
SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());
String[] args = {};
excalibur=spy(new Excalibur())
final Excalibur excalibur = spy(new Excalibur());
final BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(excalibur);
mjollnir=spy(new Mjollnir())
final Mjollnir mjollnir = spy(new Mjollnir());
final FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(mjollnir);
stormbringer=spy(new Stormbringer())
final Stormbringer stormbringer = spy(new Stormbringer());
final SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(stormbringer);
mage=new HeroBuilder(Profession.MAGE,"Riobard").withHairColor(HairColor.BLACK).withWeapon(Weapon.DAGGER).build()
Hero mage =
        new HeroBuilder(Profession.MAGE, "Riobard").withHairColor(HairColor.BLACK)
            .withWeapon(Weapon.DAGGER).build();
warrior=new HeroBuilder(Profession.WARRIOR,"Amberjill").withHairColor(HairColor.BLOND).withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).build()
Hero warrior =
        new HeroBuilder(Profession.WARRIOR, "Amberjill").withHairColor(HairColor.BLOND)
            .withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD)
            .build();
thief=new HeroBuilder(Profession.THIEF,"Desmond").withHairType(HairType.BALD).withWeapon(Weapon.BOW).build()
Hero thief =
        new HeroBuilder(Profession.THIEF, "Desmond").withHairType(HairType.BALD)
            .withWeapon(Weapon.BOW).build();
StringBuilder sb = new StringBuilder();
String[] args = {};
final String heroName = "Sir Lancelot";
hero=new Hero.HeroBuilder(Profession.WARRIOR,heroName).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).withHairType(HairType.LONG_CURLY).withHairColor(HairColor.BLOND).build()
final Hero hero = new Hero.HeroBuilder(Profession.WARRIOR, heroName)
        .withArmor(Armor.CHAIN_MAIL)
        .withWeapon(Weapon.SWORD)
        .withHairType(HairType.LONG_CURLY)
        .withHairColor(HairColor.BLOND)
        .build();
BusinessDelegate businessDelegate = new BusinessDelegate();
BusinessLookup businessLookup = new BusinessLookup();
Client client = new Client(businessDelegate);
String[] args = {};
Client client = new Client(businessDelegate);
App app = new App();
UserAccount userAccount1 = new UserAccount("001", "John", "He is a boy.");
UserAccount userAccount2 = new UserAccount("002", "Jane", "She is a girl.");
UserAccount userAccount3 = new UserAccount("003", "Adam", "He likes food.");
UserAccount userAccount4 = new UserAccount("004", "Rita", "She hates cats.");
UserAccount userAccount5 = new UserAccount("005", "Isaac", "He is allergic to mustard.");
UserAccount userAccount6 = new UserAccount("006", "Yasha", "She is an only child.");
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
StringBuilder sb = new StringBuilder();
iterable=db.getCollection("user_accounts").find(new Document("userID",userId))
FindIterable<Document> iterable =
        db.getCollection("user_accounts").find(new Document("userID", userId));
doc=iterable.first()
Document doc = iterable.first();
node=cache.get(userId)
Node node = cache.get(userId);
old=cache.get(userId)
Node old = cache.get(userId);
Node newNode = new Node(userId, userAccount);
toBeRemoved=cache.get(userId)
Node toBeRemoved = cache.get(userId);
ArrayList<UserAccount> listOfCacheData = new ArrayList<>();
Node temp = head;
String[] args = {};
Task task = new SimpleTask();
Callback callback = new Callback() {
      @Override
      public void call() {
        System.out.println("I'm done now.");
      }
    };
Task task = new SimpleTask();
Callback c = () -> System.out.println("I'm done now.");
    task.executeWith(c);
  
String[] args = {};
Callback callback = new Callback() {
      @Override
      public void call() {
        callingCount++;
      }
    };
Task task = new SimpleTask();
Callback callback = () -> callingCount++;

    Task task = new SimpleTask();

    assertEquals("Initial calling count of 0", new Integer(0), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called once", new Integer(1), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called twice", new Integer(2), callingCount);

  
OrcKing king = new OrcKing();
String[] args = {};
final OrcKing king = new OrcKing();
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
temp=target.getSize()
Size temp = target.getSize();
previousSpell=undoStack.pollLast()
Command previousSpell = undoStack.pollLast();
previousSpell=redoStack.pollLast()
Command previousSpell = redoStack.pollLast();
String[] args = {};
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
orcMessage=new Messenger().messageFromOrcs()
LetterComposite orcMessage = new Messenger().messageFromOrcs();
elfMessage=new Messenger().messageFromElves()
LetterComposite elfMessage = new Messenger().messageFromElves();
List<Word> words = new ArrayList<>();
List<Word> words = new ArrayList<>();
String[] args = {};
final Messenger messenger = new Messenger();
final Messenger messenger = new Messenger();
words=message.split(" ")
final String[] words = message.split(" ");
final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());
final Customer customer = new Customer(4, "Dan", "Danson");
final Customer customer1 = new Customer(1, "Adam", "Adamson");
final Customer customer2 = new Customer(2, "Bob", "Bobson");
final Customer customer3 = new Customer(3, "Carl", "Carlson");
final List<Customer> customers = new ArrayList<>();
boolean isEqual = false;
final Customer customer = (Customer) o;
Customer customer = null;
index=getAllCustomers().indexOf(customer)
final int index = getAllCustomers().indexOf(customer);
String[] args = {};
final Customer nonExistingCustomer = new Customer(2, "Robert", "Englund");
final String newFirstname = "Bernard";
final String newLastname = "Montgomery";
final Customer customer = new Customer(CUSTOMER.getId(), newFirstname, newLastname);
cust=impl.getCustomerById(CUSTOMER.getId())
final Customer cust = impl.getCustomerById(CUSTOMER.getId());
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final String newFirstname = "Douglas";
final String newLastname = "MacArthur";
final Customer customer = new Customer(nonExistingId, newFirstname, newLastname);
existingCustomer=impl.getCustomerById(CUSTOMER.getId())
final Customer existingCustomer = impl.getCustomerById(CUSTOMER.getId());
final Customer newCustomer = new Customer(3, "George", "Patton");
final Customer newCustomer = new Customer(3, "George", "Patton");
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final int newId = 2;
final String newFirstname = "Bill";
final String newLastname = "Clinton";
final int newId = 2;
final Customer otherCustomer = new Customer(newId, FIRSTNAME, LASTNAME);
final Customer otherCustomer = new Customer(ID, FIRSTNAME, LASTNAME);
final StringBuffer buffer = new StringBuffer();
Hostile troll = new Troll();
Hostile smart = new SmartHostile(troll);
String[] args = {};
simpleTroll=spy(new Troll())
final Hostile simpleTroll = spy(new Troll());
final Hostile smartTroll = new SmartHostile(simpleTroll);
final Troll troll = new Troll();
PrinterController hpPrinterController = new PrinterController(new HpPrinter());
PrinterController canonPrinterController = new PrinterController(new CanonPrinter());
PrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());
String[] args = {};
PrinterController printerController = new PrinterController(new CanonPrinter());
PrinterController printerController = new PrinterController(new HpPrinter());
PrinterController printerController = new PrinterController(new EpsonPrinter());
SimpleWizard simpleWizard = new SimpleWizard();
AdvancedWizard advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());
injector=Guice.createInjector(new TobaccoModule())
Injector injector = Guice.createInjector(new TobaccoModule());
guiceWizard=injector.getInstance(GuiceWizard.class)
GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final AdvancedWizard advancedWizard = new AdvancedWizard(tobacco);
String[] args = {};
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final GuiceWizard guiceWizard = new GuiceWizard(tobacco);
@SuppressWarnings("unchecked")
    final Class<? extends Tobacco>[] tobaccos = new Class[]{
        OldTobyTobacco.class, RivendellTobacco.class, SecondBreakfastTobacco.class
    };
injector=Guice.createInjector(new AbstractModule(){
  @Override protected void configure(){
    bind(Tobacco.class).to(tobaccoClass);
  }
}
)
final Injector injector = Guice.createInjector(new AbstractModule() {
        @Override
        protected void configure() {
          bind(Tobacco.class).to(tobaccoClass);
        }
      });
guiceWizard=injector.getInstance(GuiceWizard.class)
final GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final SimpleWizard simpleWizard = new SimpleWizard();
final Inventory inventory = new Inventory(1000);
executorService=Executors.newFixedThreadPool(3)
ExecutorService executorService = Executors.newFixedThreadPool(3);
String[] args = {};
final Inventory inventory = new Inventory(INVENTORY_SIZE);
executorService=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);
items=inventory.getItems()
final List<Item> items = inventory.getItems();
final List<Item> items = inventory.getItems();
stdOutCaptor=ArgumentCaptor.forClass(String.class)
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
values=stdOutCaptor.getAllValues()
final List<String> values = stdOutCaptor.getAllValues();
final List<String> values = stdOutCaptor.getAllValues();
List<GameObject> objects = new ArrayList<>();
String[] args = {};
tested=getTestedObject()
final O tested = getTestedObject();
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectTargetOnFire 
        ? "Expected [" + targetName + "] to be on fire after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be on fire after colliding with [" + otherName + "] but it was!";
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectedDamage
        ? "Expected [" + targetName + "] to be damaged after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be damaged after colliding with [" + otherName + "] but it was!";
final FlamingAsteroid asteroid = new FlamingAsteroid(1, 2, 3, 4);
final Meteoroid meteoroid = new Meteoroid(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final SpaceStationIss iss = new SpaceStationIss(1, 2, 3, 4);
final SpaceStationMir mir = new SpaceStationMir(1, 2, 3, 4);
KingJoffrey kingJoffrey = new KingJoffrey();
KingsHand kingsHand = new KingsHand(kingJoffrey);
List<EventEmitter> emitters = new ArrayList<>();
String[] args = {};
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithoutDefaultObserver.get()
final E emitter = this.factoryWithoutDefaultObserver.get();
defaultObserver=mock(EventObserver.class)
final EventObserver defaultObserver = mock(EventObserver.class);
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithDefaultObserver.apply(defaultObserver)
final E emitter = this.factoryWithDefaultObserver.apply(defaultObserver);
toString=event.toString()
final String toString = event.toString();
final KingJoffrey kingJoffrey = new KingJoffrey();
final String expectedMessage = "Received event from the King's Hand: " + event.toString();
observer=mock(EventObserver.class)
final EventObserver observer = mock(EventObserver.class);
final KingsHand kingsHand = new KingsHand(observer);
toString=weekday.toString()
final String toString = weekday.toString();
EventDispatcher dispatcher = new EventDispatcher();
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = (UserCreatedEvent) message;
UserUpdatedEvent userUpdatedEvent = (UserUpdatedEvent) message;
String[] args = {};
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
dispatcher=spy(new EventDispatcher())
EventDispatcher dispatcher = spy(new EventDispatcher());
userCreatedEventHandler=spy(new UserCreatedEventHandler())
UserCreatedEventHandler userCreatedEventHandler = spy(new UserCreatedEventHandler());
userUpdatedEventHandler=spy(new UserUpdatedEventHandler())
UserUpdatedEventHandler userUpdatedEventHandler = spy(new UserUpdatedEventHandler());
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
UserUpdatedEvent userUpdatedEvent = new UserUpdatedEvent(user);
FileWriter writer = new FileWriter(filename);
String[] args = {};
File file = new File("testfile.txt");
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
final File nonExistingFile = new File(this.testFolder.getRoot(), "non-existing-file");
final String testMessage = "Test message";
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
DwarvenGoldmineFacade facade = new DwarvenGoldmineFacade();
String[] args = {};
final DwarvenGoldmineFacade goldMine = new DwarvenGoldmineFacade();
WeaponFactory factory = WeaponFactory.factory(builder -> {
      builder.add(WeaponType.SWORD, Sword::new);
      builder.add(WeaponType.AXE, Axe::new);
      builder.add(WeaponType.SPEAR, Spear::new);
      builder.add(WeaponType.BOW, Bow::new);
    });
    Weapon axe = factory.create(WeaponType.AXE);
    System.out.println(axe);
  
HashMap<WeaponType, Supplier<Weapon>> map = new HashMap<>();
String[] args = {};
weapon=factory.create(WeaponType.SPEAR)
Weapon weapon = factory.create(WeaponType.SPEAR);
weapon=factory.create(WeaponType.AXE)
Weapon weapon = factory.create(WeaponType.AXE);
weapon=factory.create(WeaponType.SWORD)
Weapon weapon = factory.create(WeaponType.SWORD);
App app = new App(new OrcBlacksmith());
Weapon weapon;
String[] args = {};
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.AXE)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.AXE);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties turnedOff = new Properties();
Service turnedOffService = new PropertiesFeatureToggleVersion(turnedOff);
welcomeMessageturnedOff=turnedOffService.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessageturnedOff = turnedOffService.getWelcomeMessage(new User("Jamie No Code"));
final User paidUser = new User("Jamie Coder");
final User freeUser = new User("Alan Defect");
welcomeMessagePaidUser=service.getWelcomeMessage(paidUser)
final String welcomeMessagePaidUser = service.getWelcomeMessage(paidUser);
welcomeMessageFreeUser=service.getWelcomeMessage(freeUser)
final String welcomeMessageFreeUser = service.getWelcomeMessage(freeUser);
final Properties properties = new Properties();
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
welcomeMessage=service.getWelcomeMessage(paidUser)
final String welcomeMessage = service.getWelcomeMessage(paidUser);
final String expected = "You're amazing Jamie Coder. Thanks for paying for this awesome software.";
welcomeMessage=service.getWelcomeMessage(freeUser)
final String welcomeMessage = service.getWelcomeMessage(freeUser);
final String expected = "I suppose you can use this software.";
User user = new User("Free User");
User user = new User("Paid User");
User user = new User("Paid User");
User user = new User("Free User");
List<Integer> integerList = new ArrayList<>();
firstFiveNegatives=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList()
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
lastTwoPositives=SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList()
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
transformedList=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString()).asList()
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
lastTwoOfFirstFourStringMapped=LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2).map(number-- > "String[" + valueOf(number) + "]").asList()
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
StringJoiner joiner = new StringJoiner(delimiter, prefix, ".");
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
ArrayList<E> copy = new ArrayList<>();
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
final E result = next;
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=last(1).iterator()
Iterator<E> resultIterator = last(1).iterator();
Iterator<E> resultIterator = last(1).iterator();
E candidate = null;
newIterator=iterable.iterator()
Iterator<E> newIterator = iterable.iterator();
candidate=oldTypeIterator.next()
E candidate = oldTypeIterator.next();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
nextElement=iterator.next()
E nextElement = iterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentCount = 0;
list=last(1).asList()
List<E> list = last(1).asList();
List<E> list = last(1).asList();
remainingElementsCount=getRemainingElementsCount()
int remainingElementsCount = getRemainingElementsCount();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentIndex = 0;
List<T> temporaryList = new ArrayList<>();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
copy=FluentIterable.copyToList(iterable)
List<E> copy = FluentIterable.copyToList(iterable);
List<E> copy = FluentIterable.copyToList(iterable);
int counter = 0;
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
List<E> copy = new ArrayList<>();
String[] args = {};
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
evenItems=createFluentIterable(integers).filter(i-- > i % 2 == 0).asList()
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
longs=createFluentIterable(integers).map(Integer).asList()
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
consumer=mock(Consumer.class)
final Consumer<Integer> consumer = mock(Consumer.class);
final Consumer<Integer> consumer = mock(Consumer.class);
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
split=createFluentIterable(integers).spliterator()
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
MenuStore menuStore = new MenuStore();
ContentStore contentStore = new ContentStore();
MenuView menuView = new MenuView();
ContentView contentView = new ContentView();
ContentAction contentAction = (ContentAction) action;
MenuAction menuAction = (MenuAction) action;
ContentStore contentStore = (ContentStore) store;
MenuStore menuStore = (MenuStore) store;
toString=content.toString()
final String toString = content.toString();
toString=menuItem.toString()
final String toString = menuItem.toString();
String[] args = {};
final Constructor<Dispatcher> constructor;
final Constructor<Dispatcher> constructor;
field=Dispatcher.class.getDeclaredField("instance")
final Field field = Dispatcher.class.getDeclaredField("instance");
dispatcher=Dispatcher.getInstance()
final Dispatcher dispatcher = Dispatcher.getInstance();
store=mock(Store.class)
final Store store = mock(Store.class);
actionCaptor=ArgumentCaptor.forClass(Action.class)
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
actions=actionCaptor.getAllValues()
final List<Action> actions = actionCaptor.getAllValues();
final List<Action> actions = actionCaptor.getAllValues();
menuActions=actions.stream().filter(a-- > a.getType().equals(ActionType.MENU_ITEM_SELECTED)).map(a-- > (MenuAction)a).collect(Collectors.toList())
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
contentActions=actions.stream().filter(a-- > a.getType().equals(ActionType.CONTENT_CHANGED)).map(a-- > (ContentAction)a).collect(Collectors.toList())
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final ContentStore contentStore = new ContentStore();
view=mock(View.class)
final View view = mock(View.class);
final MenuStore menuStore = new MenuStore();
view=mock(View.class)
final View view = mock(View.class);
store=mock(ContentStore.class)
final ContentStore store = mock(ContentStore.class);
final ContentView view = new ContentView();
store=mock(MenuStore.class)
final MenuStore store = mock(MenuStore.class);
final MenuView view = new MenuView();
store=mock(Store.class)
final Store store = mock(Store.class);
final MenuView view = new MenuView();
PotionFactory factory = new PotionFactory();
AlchemistShop alchemistShop = new AlchemistShop();
potion=potions.get(type)
Potion potion = potions.get(type);
final AlchemistShop shop = new AlchemistShop();
bottomShelf=shop.getBottomShelf()
final List<Potion> bottomShelf = shop.getBottomShelf();
final List<Potion> bottomShelf = shop.getBottomShelf();
topShelf=shop.getTopShelf()
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> allPotions = new ArrayList<>();
String[] args = {};
FrontController controller = new FrontController();
command=getCommand(request)
Command command = getCommand(request);
commandClass=getCommandClass(request)
Class commandClass = getCommandClass(request);
Class result;
final Exception cause = new Exception();
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final FrontController frontController = new FrontController();
final List<Object[]> parameters = new ArrayList<>();
final List<Object[]> parameters = new ArrayList<>();
AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final Object result = new Object();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IOException exception = new IOException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IllegalStateException exception = new IllegalStateException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
Filter last = this;
String result = super.execute(order);
FilterManager filterManager = new FilterManager();
Client client = new Client();
JPanel panel = new JPanel();
Order order =
            new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),
                jtFields[2].getText(), jtAreas[1].getText());
rootPane=SwingUtilities.getRootPane(processButton)
JRootPane rootPane = SwingUtilities.getRootPane(processButton);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
JPanel bot = new JPanel();
rootPane=SwingUtilities.getRootPane(del)
JRootPane rootPane = SwingUtilities.getRootPane(del);
temp=jt.getSelectedRow()
int temp = jt.getSelectedRow();
temp2=jt.getSelectedRowCount()
int temp2 = jt.getSelectedRowCount();
String[] args = {};
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
filter=mock(Filter.class)
final Filter filter = mock(Filter.class);
order=mock(Order.class)
final Order order = mock(Order.class);
final List<Object[]> testData = new ArrayList<>();
result=this.filter.execute(this.order)
final String result = this.filter.execute(this.order);
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
String tokenString = "4 3 2 - 1 + *";
Stack<Expression> stack = new Stack<>();
tokenList=tokenString.split(" ")
String[] tokenList = tokenString.split(" ");
rightExpression=stack.pop()
Expression rightExpression = stack.pop();
leftExpression=stack.pop()
Expression leftExpression = stack.pop();
operator=getOperatorInstance(s,leftExpression,rightExpression)
Expression operator = getOperatorInstance(s, leftExpression, rightExpression);
result=operator.interpret()
int result = operator.interpret();
NumberExpression resultExpression = new NumberExpression(result);
Expression i = new NumberExpression(s);
String[] args = {};
final List<Object[]> testData = new ArrayList<>();
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expectedValue=getFirst().interpret()
final int expectedValue = getFirst().interpret();
testStingValue=String.valueOf(expectedValue)
final String testStingValue = String.valueOf(expectedValue);
final NumberExpression numberExpression = new NumberExpression(testStingValue);
TreasureChest chest = new TreasureChest();
ringIterator=chest.iterator(ItemType.RING)
ItemIterator ringIterator = chest.iterator(ItemType.RING);
potionIterator=chest.iterator(ItemType.POTION)
ItemIterator potionIterator = chest.iterator(ItemType.POTION);
weaponIterator=chest.iterator(ItemType.WEAPON)
ItemIterator weaponIterator = chest.iterator(ItemType.WEAPON);
it=chest.iterator(ItemType.ANY)
ItemIterator it = chest.iterator(ItemType.ANY);
ArrayList<Item> list = new ArrayList<>();
items=chest.getItems()
List<Item> items = chest.getItems();
List<Item> items = chest.getItems();
boolean found = false;
int tempIdx = idx;
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final TreasureChest chest = new TreasureChest();
iterator=chest.iterator(expectedItem.getType())
final ItemIterator iterator = chest.iterator(expectedItem.getType());
item=iterator.next()
final Item item = iterator.next();
name=item.toString()
final String name = item.toString();
final TreasureChest chest = new TreasureChest();
items=chest.getItems()
final List<Item> items = chest.getItems();
final List<Item> items = chest.getItems();
final boolean sameType = this.expectedItem.getType() == item.getType();
sameName=this.expectedItem.toString().equals(item.toString())
final boolean sameName = this.expectedItem.toString().equals(item.toString());
CakeViewImpl cakeView = new CakeViewImpl(cakeBakingService);
CakeInfo cake1 =
        new CakeInfo(new CakeToppingInfo("candies", 0), Arrays.asList(new CakeLayerInfo(
            "chocolate", 0), new CakeLayerInfo("banana", 0), new CakeLayerInfo("strawberry", 0)));
CakeInfo cake2 =
        new CakeInfo(new CakeToppingInfo("cherry", 0), Arrays.asList(
            new CakeLayerInfo("vanilla", 0), new CakeLayerInfo("lemon", 0), new CakeLayerInfo(
                "strawberry", 0)));
allToppings=getAvailableToppingEntities()
List<CakeTopping> allToppings = getAvailableToppingEntities();
List<CakeTopping> allToppings = getAvailableToppingEntities();
matchingToppings=allToppings.stream().filter((t)-- > t.getName().equals(cakeInfo.cakeToppingInfo.name)).collect(Collectors.toList())
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
allLayers=getAvailableLayerEntities()
List<CakeLayer> allLayers = getAvailableLayerEntities();
List<CakeLayer> allLayers = getAvailableLayerEntities();
Set<CakeLayer> foundLayers = new HashSet<>();
found=allLayers.stream().filter((layer)-- > layer.getName().equals(info.name)).findFirst()
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
toppingBean=context.getBean(CakeToppingDao.class)
CakeToppingDao toppingBean = context.getBean(CakeToppingDao.class);
topping=toppingBean.findOne(matchingToppings.iterator().next().getId())
CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().getId());
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
Cake cake = new Cake();
layerBean=context.getBean(CakeLayerDao.class)
CakeLayerDao layerBean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeTopping> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
topping=iterator.next()
CakeTopping topping = iterator.next();
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeToppingInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
next=iterator.next()
CakeTopping next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayer> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayerInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
List<CakeInfo> result = new ArrayList<>();
iterator=cakeBean.findAll().iterator()
Iterator<Cake> iterator = cakeBean.findAll().iterator();
Iterator<Cake> iterator = cakeBean.findAll().iterator();
cake=iterator.next()
Cake cake = iterator.next();
CakeToppingInfo cakeToppingInfo =
          new CakeToppingInfo(cake.getTopping().getId(), cake.getTopping().getName(), cake
              .getTopping().getCalories());
ArrayList<CakeLayerInfo> cakeLayerInfos = new ArrayList<>();
CakeInfo cakeInfo = new CakeInfo(cake.getId(), cakeToppingInfo, cakeLayerInfos);
int total = cakeToppingInfo != null ? cakeToppingInfo.calories : 0;
String[] args = {};
final CakeBakingException exception = new CakeBakingException();
final String expectedMessage = "message";
final CakeBakingException exception = new CakeBakingException(expectedMessage);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialLayers=service.getAvailableLayers()
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
availableLayers=service.getAvailableLayers()
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialToppings=service.getAvailableToppings()
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
availableToppings=service.getAvailableToppings()
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeLayerInfo layer3 = new CakeLayerInfo("Layer3", 2000);
allCakes=service.getAllCakes()
final List<CakeInfo> allCakes = service.getAllCakes();
final List<CakeInfo> allCakes = service.getAllCakes();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeToppingInfo missingTopping = new CakeToppingInfo("Topping1", 1000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo missingLayer = new CakeLayerInfo("Layer2", 2000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final Cake cake = new Cake();
expectedId=Long.valueOf(1234L)
final Long expectedId = Long.valueOf(1234L);
final Cake cake = new Cake();
final CakeTopping expectedTopping = new CakeTopping("DummyTopping", 1000);
final Cake cake = new Cake();
final Set<CakeLayer> expectedLayers = new HashSet<>();
final Cake cake = new Cake();
final Set<CakeLayer> initialLayers = new HashSet<>();
final CakeLayer newLayer = new CakeLayer("layer3", 3000);
final Set<CakeLayer> expectedLayers = new HashSet<>();
final CakeTopping topping = new CakeTopping("topping", 20);
final CakeLayer layer = new CakeLayer("layer", 100);
final Cake cake = new Cake();
final String expected = "id=1234 topping=id=2345 name=topping calories=20 " 
            + "layers=[id=3456 name=layer calories=100]";
final List<CakeLayerInfo> layers = new ArrayList<>();
final List<CakeInfo> cakes = new ArrayList<>();
final CakeInfo cake = new CakeInfo(new CakeToppingInfo("topping", 1000), layers);
bakingService=mock(CakeBakingService.class)
final CakeBakingService bakingService = mock(CakeBakingService.class);
final CakeViewImpl cakeView = new CakeViewImpl(bakingService);
HolderNaive holderNaive = new HolderNaive();
heavy=holderNaive.getHeavy()
Heavy heavy = holderNaive.getHeavy();
HolderThreadSafe holderThreadSafe = new HolderThreadSafe();
another=holderThreadSafe.getHeavy()
Heavy another = holderThreadSafe.getHeavy();
Java8Holder java8Holder = new Java8Holder();
next=java8Holder.getHeavy()
Heavy next = java8Holder.getHeavy();
String[] args = {};
holderField=HolderNaive.class.getDeclaredField("heavy")
final Field holderField = HolderNaive.class.getDeclaredField("heavy");
holderField=HolderThreadSafe.class.getDeclaredField("heavy")
final Field holderField = HolderThreadSafe.class.getDeclaredField("heavy");
holderField=Java8Holder.class.getDeclaredField("heavy")
final Field holderField = Java8Holder.class.getDeclaredField("heavy");
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
supplierClass=supplier.getClass()
final Class<? extends Supplier> supplierClass = supplier.getClass();
final Class<? extends Supplier> supplierClass = supplier.getClass();
instanceField=supplierClass.getDeclaredField("heavyInstance")
final Field instanceField = supplierClass.getDeclaredField("heavyInstance");
Party party = new PartyImpl();
Hobbit hobbit = new Hobbit();
Wizard wizard = new Wizard();
Rogue rogue = new Rogue();
Hunter hunter = new Hunter();
String[] args = {};
partyMember1=mock(PartyMember.class)
final PartyMember partyMember1 = mock(PartyMember.class);
partyMember2=mock(PartyMember.class)
final PartyMember partyMember2 = mock(PartyMember.class);
final PartyImpl party = new PartyImpl();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
party=mock(Party.class)
final Party party = mock(Party.class);
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
memberClass=member.getClass()
final Class<? extends PartyMember> memberClass = member.getClass();
final Class<? extends PartyMember> memberClass = member.getClass();
Stack<StarMemento> states = new Stack<>();
Star star = new Star(StarType.SUN, 10000000, 500000);
StarMementoInternal state = new StarMementoInternal();
StarMementoInternal state = (StarMementoInternal) memento;
String[] args = {};
final Star star = new Star(StarType.SUN, 1, 2);
final Star star = new Star(StarType.SUN, 1, 2);
firstMemento=star.getMemento()
final StarMemento firstMemento = star.getMemento();
secondMemento=star.getMemento()
final StarMemento secondMemento = star.getMemento();
thirdMemento=star.getMemento()
final StarMemento thirdMemento = star.getMemento();
CamelContext context = new DefaultCamelContext();
String[] args = {};
GiantModel giant = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
GiantView view = new GiantView();
GiantController controller = new GiantController(giant, view);
String[] args = {};
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantView view = new GiantView();
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
FileLoader loader = new FileLoader();
FileSelectorJFrame jFrame = new FileSelectorJFrame();
FileSelectorPresenter presenter = new FileSelectorPresenter(jFrame);
BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)));
StringBuilder sb = new StringBuilder();
String line;
JScrollPane pane = new JScrollPane(area);
data=loader.loadData()
String data = loader.loadData();
String[] args = {};
final FileLoader fileLoader = new FileLoader();
String expectedFile = "Stamatis";
User user = new User("user", 24, Sex.FEMALE, "foobar.com");
IllegalStateException e = new IllegalStateException();
String[] args = {};
User tom = new User(null, 21, Sex.MALE, "tom@foo.bar");
User john = new User("John", 17, Sex.MALE, "john@qwe.bar");
User sarah = new User("Sarah", 42, Sex.FEMALE, "sarah@det.org");
validated=Validator.of(sarah).validate(getName,Objects,"name cannot be null").validate(User,age-- > age > 21,"user is underaged").validate(User,sex-- > sex == Sex.FEMALE,"user is not female").validate(User,email-- > email.contains("@"),"email does not contain @ sign").get()
User validated = Validator.of(sarah).validate(User::getName, Objects::nonNull, "name cannot be null")
        .validate(User::getAge, age -> age > 21, "user is underaged")
        .validate(User::getSex, sex -> sex == Sex.FEMALE, "user is not female")
        .validate(User::getEmail, email -> email.contains("@"), "email does not contain @ sign")
        .get();
LoadBalancer loadBalancer1 = new LoadBalancer();
LoadBalancer loadBalancer2 = new LoadBalancer();
server=servers.get(lastServedId++)
Server server = servers.get(lastServedId++);
String[] args = {};
final LoadBalancer firstBalancer = new LoadBalancer();
final LoadBalancer secondBalancer = new LoadBalancer();
server=mock(Server.class)
final Server server = mock(Server.class);
final LoadBalancer loadBalancer = new LoadBalancer();
final Request request = new Request("test");
String[] args = {};
nazgul=Nazgul.getInstance(name)
final Nazgul nazgul = Nazgul.getInstance(name);
obj=container.newTransientInstance(SimpleObject.class)
final SimpleObject obj = container.newTransientInstance(SimpleObject.class);
final SimpleObject simpleObject = new SimpleObject();
seq=context.sequence("create")
final Sequence seq = context.sequence("create");
obj=simpleObjects.create("Foobar")
final SimpleObject obj = simpleObjects.create("Foobar");
all=Lists.newArrayList()
final List<SimpleObject> all = Lists.newArrayList();
list=simpleObjects.listAll()
final List<SimpleObject> list = simpleObjects.listAll();
final List<SimpleObject> list = simpleObjects.listAll();
String name = "Foobar";
paramName=checkParam("name",ec,String.class)
String paramName = checkParam("name", ec, String.class);
paramNumber=defaultParam("number",ec,3)
final int paramNumber = defaultParam("number", ec, 3);
fs=new SimpleObjectCreate().setName(names.get(i))
final SimpleObjectCreate fs = new SimpleObjectCreate().setName(names.get(i));
isft=IsisSystemForTest.getElseNull()
IsisSystemForTest isft = IsisSystemForTest.getElseNull();
final IsisConfigurationForJdoIntegTests testConfiguration =
          new IsisConfigurationForJdoIntegTests();
findAll=service(SimpleObjects.class).listAll()
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
title=container.titleOf(simpleObjectWrapped)
final String title = container.titleOf(simpleObjectWrapped);
RecreateSimpleObjects fs = new RecreateSimpleObjects();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
simpleObject=wrap(all.get(0))
SimpleObject simpleObject = wrap(all.get(0));
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
causalChain=Throwables.getCausalChain(item)
final List<Throwable> causalChain = Throwables.getCausalChain(item);
final List<Throwable> causalChain = Throwables.getCausalChain(item);
settings=Bootstrap.getSettings()
IBootstrapSettings settings = Bootstrap.getSettings();
final AuthenticatedWebSessionForIsis s =
        (AuthenticatedWebSessionForIsis) super.newSession(request, response);
requestParameters=request.getRequestParameters()
IRequestParameters requestParameters = request.getRequestParameters();
user=requestParameters.getParameterValue("user")
final org.apache.wicket.util.string.StringValue user =
        requestParameters.getParameterValue("user");
password=requestParameters.getParameterValue("pass")
final org.apache.wicket.util.string.StringValue password =
        requestParameters.getParameterValue("pass");
uname=servletRequest.getParameter("user")
String uname = servletRequest.getParameter("user");
final Module isisDefaults = super.newIsisWicketModule();
final Module overrides = new AbstractModule() {
      @Override
      protected void configure() {
        bind(String.class).annotatedWith(Names.named("applicationName")).toInstance("Simple App");
        bind(String.class).annotatedWith(Names.named("applicationCss")).toInstance(
            "css/application.css");
        bind(String.class).annotatedWith(Names.named("applicationJs")).toInstance(
            "scripts/application.js");
        bind(String.class).annotatedWith(Names.named("welcomeMessage")).toInstance(
            readLines(getClass(), "welcome.html"));
        bind(String.class).annotatedWith(Names.named("aboutMessage")).toInstance("Simple App");
        bind(InputStream.class).annotatedWith(Names.named("metaInfManifest")).toProvider(
            Providers.of(getServletContext().getResourceAsStream("/META-INF/MANIFEST.MF")));
      }
    };
readLines=Resources.readLines(Resources.getResource(contextClass,resourceName),Charset.defaultCharset())
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
Node root =
        new NodeImpl("1", new NodeImpl("11", new NodeImpl("111", NullNode.getInstance(),
            NullNode.getInstance()), NullNode.getInstance()), new NodeImpl("12",
            NullNode.getInstance(), new NodeImpl("122", NullNode.getInstance(),
                NullNode.getInstance())));
String[] args = {};
instance=NullNode.getInstance()
final NullNode instance = NullNode.getInstance();
node=NullNode.getInstance()
final NullNode node = NullNode.getInstance();
final NodeImpl level1B = new NodeImpl("level1_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2B = new NodeImpl("level2_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3A = new NodeImpl("level3_a", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3B = new NodeImpl("level3_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2A = new NodeImpl("level2_a", level3A, level3B);
final NodeImpl level1A = new NodeImpl("level1_a", level2A, level2B);
inOrder=Mockito.inOrder(getStdOutMock())
final InOrder inOrder = Mockito.inOrder(getStdOutMock());
level1=TREE_ROOT.getLeft()
final Node level1 = TREE_ROOT.getLeft();
level2=level1.getLeft()
final Node level2 = level1.getLeft();
level3=level2.getLeft()
final Node level3 = level2.getLeft();
level1=TREE_ROOT.getRight()
final Node level1 = TREE_ROOT.getRight();
OliphauntPool pool = new OliphauntPool();
oliphaunt1=pool.checkOut()
Oliphaunt oliphaunt1 = pool.checkOut();
oliphaunt2=pool.checkOut()
Oliphaunt oliphaunt2 = pool.checkOut();
oliphaunt3=pool.checkOut()
Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunt5=pool.checkOut()
Oliphaunt oliphaunt5 = pool.checkOut();
instance=available.iterator().next()
T instance = available.iterator().next();
String[] args = {};
final OliphauntPool pool = new OliphauntPool();
expectedOliphaunt=pool.checkOut()
final Oliphaunt expectedOliphaunt = pool.checkOut();
oliphaunt=pool.checkOut()
final Oliphaunt oliphaunt = pool.checkOut();
final OliphauntPool pool = new OliphauntPool();
firstOliphaunt=pool.checkOut()
final Oliphaunt firstOliphaunt = pool.checkOut();
secondOliphaunt=pool.checkOut()
final Oliphaunt secondOliphaunt = pool.checkOut();
oliphaunt3=pool.checkOut()
final Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
final Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunts=Arrays.asList(pool.checkOut(),pool.checkOut())
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
Weather weather = new Weather();
GWeather gWeather = new GWeather();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
String[] args = {};
final ArrayList<Object[]> testData = new ArrayList<>();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
observer=this.factory.get()
final O observer = this.factory.get();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
observer=this.factory.get()
final O observer = this.factory.get();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
MessageQueue queue = new SimpleMessageQueue(10000);
final Producer producer = new Producer("PRODUCER_1", queue);
final Consumer consumer = new Consumer("CONSUMER_1", queue);
Message msg;
sender=msg.getHeader(Headers.SENDER)
String sender = msg.getHeader(Headers.SENDER);
body=msg.getBody()
String body = msg.getBody();
Message msg = new SimpleMessage();
String[] args = {};
final Message[] messages = new Message[]{
        createMessage("you", "Hello!"),
        createMessage("me", "Hi!"),
        Message.POISON_PILL,
        createMessage("late_for_the_party", "Hello? Anyone here?"),
    };
final MessageQueue queue = new SimpleMessageQueue(messages.length);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final SimpleMessage msg = new SimpleMessage();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
messageCaptor=ArgumentCaptor.forClass(Message.class)
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
message=messageCaptor.getValue()
final Message message = messageCaptor.getValue();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
final SimpleMessage message = new SimpleMessage();
final String senderName = "test";
final SimpleMessage message = new SimpleMessage();
headers=message.getHeaders()
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
Stew stew = new Stew(1, 2, 3, 4);
ImmutableStew immutableStew = new ImmutableStew(2, 4, 3, 6);
String[] args = {};
final Stew stew = new Stew(1, 2, 3, 4);
final String message = "Mixing the stew we find: 1 potatoes, 2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Stew stew = new Stew(1, 2, 3, 4);
final ImmutableStew stew = new ImmutableStew(1, 2, 3, 4);
final String expectedMessage = "Mixing the immutable stew we find: 1 potatoes, "
        + "2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ItemQueue queue = new ItemQueue();
executorService=Executors.newFixedThreadPool(5)
ExecutorService executorService = Executors.newFixedThreadPool(5);
final Producer producer = new Producer("Producer_" + i, queue);
final Consumer consumer = new Consumer("Consumer_" + i, queue);
item=queue.take()
Item item = queue.take();
Item item = new Item(name, itemId++);
Random random = new Random();
String[] args = {};
queue=spy(new ItemQueue())
final ItemQueue queue = spy(new ItemQueue());
final Consumer consumer = new Consumer("consumer", queue);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
queue=mock(ItemQueue.class)
final ItemQueue queue = mock(ItemQueue.class);
final Producer producer = new Producer("producer", queue);
Prototype charProto = new Character();
Character mageProto = new Character(Type.MAGE, charProto);
Character warProto = new Character(Type.WARRIOR, charProto);
Character rogueProto = new Character(Type.ROGUE, charProto);
Character mag = new Character("Player_1", mageProto);
Character warrior = new Character("Player_2", warProto);
Character rogue = new Character("Player_3", rogueProto);
Character rogueDouble = new Character("Player_4", rogue);
containsValue=properties.containsKey(stat)
boolean containsValue = properties.containsKey(stat);
StringBuilder builder = new StringBuilder();
value=this.get(stat)
Integer value = this.get(stat);
String[] args = {};
final Character prototype = new Character();
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character mage = new Character(Type.MAGE, prototype);
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
HeroFactory factory;
Mage mage;
Warlord warlord;
Beast beast;
String[] args = {};
mage=mock(Mage.class)
final Mage mage = mock(Mage.class);
warlord=mock(Warlord.class)
final Warlord warlord = mock(Warlord.class);
beast=mock(Beast.class)
final Beast beast = mock(Beast.class);
final HeroFactoryImpl factory = new HeroFactoryImpl(mage, warlord, beast);
clone=this.testedPrototype.clone()
final Object clone = this.testedPrototype.clone();
WizardTowerProxy tower = new WizardTowerProxy();
String[] args = {};
final String[] wizardNames = {"Gandalf", "Dumbledore", "Oz", "Merlin"};
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTowerProxy tower = new WizardTowerProxy();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTower tower = new WizardTower();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
CamelContext context = new DefaultCamelContext();
template=context.createProducerTemplate()
ProducerTemplate template = context.createProducerTemplate();
String[] args = {};
LoggingHandler loggingHandler = new LoggingHandler();
NioServerSocketChannel channel = new NioServerSocketChannel(port, handler);
NioDatagramChannel channel = new NioDatagramChannel(port, handler);
AppClient appClient = new AppClient();
outputStream=socket.getOutputStream()
OutputStream outputStream = socket.getOutputStream();
PrintWriter writer = new PrintWriter(outputStream);
byte[] data = new byte[1024];
read=inputStream.read(data,0,data.length)
int read = inputStream.read(data, 0, data.length);
String message = clientName + " - Log request: " + i;
DatagramPacket request =
              new DatagramPacket(message.getBytes(), message.getBytes().length, remoteAddress);
byte[] data = new byte[1024];
DatagramPacket reply = new DatagramPacket(data, data.length);
DatagramPacket datagram = (DatagramPacket) readObject;
DatagramPacket replyPacket = new DatagramPacket(ByteBuffer.wrap(ACK));
buffer=ByteBuffer.wrap(ACK)
ByteBuffer buffer = ByteBuffer.wrap(ACK);
pendingWrites=channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
pendingWrite=pendingWrites.poll()
Object pendingWrite = pendingWrites.poll();
pendingWrites=this.channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
sender=((DatagramChannel)key.channel()).receive(buffer)
SocketAddress sender = ((DatagramChannel) key.channel()).receive(buffer);
DatagramPacket packet = new DatagramPacket(buffer);
DatagramPacket pendingPacket = (DatagramPacket) pendingWrite;
key=channel.getJavaChannel().register(selector,channel.getInterestedOps())
SelectionKey key = channel.getJavaChannel().register(selector, channel.getInterestedOps());
keys=selector.selectedKeys()
Set<SelectionKey> keys = selector.selectedKeys();
Set<SelectionKey> keys = selector.selectedKeys();
iterator=keys.iterator()
Iterator<SelectionKey> iterator = keys.iterator();
Iterator<SelectionKey> iterator = keys.iterator();
key=iterator.next()
SelectionKey key = iterator.next();
iterator=pendingCommands.iterator()
Iterator<Runnable> iterator = pendingCommands.iterator();
Iterator<Runnable> iterator = pendingCommands.iterator();
command=iterator.next()
Runnable command = iterator.next();
AbstractNioChannel channel = (AbstractNioChannel) key.attachment();
readObject=((AbstractNioChannel)key.attachment()).read(key)
Object readObject = ((AbstractNioChannel) key.attachment()).read(key);
ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();
socketChannel=serverSocketChannel.accept()
SocketChannel socketChannel = serverSocketChannel.accept();
readKey=socketChannel.register(selector,SelectionKey.OP_READ)
SelectionKey readKey = socketChannel.register(selector, SelectionKey.OP_READ);
SocketChannel socketChannel = (SocketChannel) key.channel();
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
read=socketChannel.read(buffer)
int read = socketChannel.read(buffer);
ByteBuffer pendingBuffer = (ByteBuffer) pendingWrite;
App app = new App(new ThreadPoolDispatcher(2));
AppClient client = new AppClient();
App app = new App(new SameThreadDispatcher());
AppClient client = new AppClient();
executeService=Executors.newFixedThreadPool(10)
ExecutorService executeService = Executors.newFixedThreadPool(10);
ReaderWriterLock lock = new ReaderWriterLock();
String[] args = {};
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
reader1=spy(new Reader("Reader 1",lock.readLock()))
Reader reader1 = spy(new Reader("Reader 1", lock.readLock()));
reader2=spy(new Reader("Reader 2",lock.readLock()))
Reader reader2 = spy(new Reader("Reader 2", lock.readLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
writer1=spy(new Writer("Writer 1",lock.writeLock()))
Writer writer1 = spy(new Writer("Writer 1", lock.writeLock()));
writer2=spy(new Writer("Writer 2",lock.writeLock()))
Writer writer2 = spy(new Writer("Writer 2", lock.writeLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
        "applicationContext.xml");
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
BasicDataSource basicDataSource = new BasicDataSource();
LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();
Properties properties = new Properties();
JpaTransactionManager transactionManager = new JpaTransactionManager();
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
        AppConfig.class);
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
final int prime = 31;
int result = 1;
Person other = (Person) obj;
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
resultSet=dataSource.getConnection().createStatement().executeQuery("SELECT 1")
ResultSet resultSet = dataSource.getConnection().createStatement().executeQuery("SELECT 1");
String result = null;
String expected = "1";
String[] args = {};
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
String[] args = {};
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
King k = new King();
Queen q = new Queen();
ArrayList<Royalty> guests = new ArrayList<>();
boolean anotherDay = true;
String[] args = {};
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
goodMoodRoyalty=mock(Royalty.class)
final Royalty goodMoodRoyalty = mock(Royalty.class);
badMoodRoyalty=mock(Royalty.class)
final Royalty badMoodRoyalty = mock(Royalty.class);
final ArrayList<Royalty> goodCompany = new ArrayList<>();
final ArrayList<Royalty> badCompany = new ArrayList<>();
Spell spell1 = new Spell("Ice dart");
Spell spell2 = new Spell("Invisibility");
Spell spell3 = new Spell("Stun bolt");
Spell spell4 = new Spell("Confusion");
Spell spell5 = new Spell("Darkness");
Spell spell6 = new Spell("Fireball");
Spell spell7 = new Spell("Enchant weapon");
Spell spell8 = new Spell("Rock armour");
Spell spell9 = new Spell("Light");
Spell spell10 = new Spell("Bee swarm");
Spell spell11 = new Spell("Haste");
Spell spell12 = new Spell("Levitation");
Spell spell13 = new Spell("Magic lock");
Spell spell14 = new Spell("Summon hell bat");
Spell spell15 = new Spell("Water walking");
Spell spell16 = new Spell("Magic storm");
Spell spell17 = new Spell("Entangle");
SpellDao spellDao = new SpellDaoImpl();
SpellbookDao spellbookDao = new SpellbookDaoImpl();
Spellbook spellbook1 = new Spellbook("Book of Orgymon");
Spellbook spellbook2 = new Spellbook("Book of Aras");
Spellbook spellbook3 = new Spellbook("Book of Kritior");
Spellbook spellbook4 = new Spellbook("Book of Tamaex");
Spellbook spellbook5 = new Spellbook("Book of Idores");
Spellbook spellbook6 = new Spellbook("Book of Opaen");
Spellbook spellbook7 = new Spellbook("Book of Kihione");
WizardDao wizardDao = new WizardDaoImpl();
Wizard wizard1 = new Wizard("Aderlard Boud");
Wizard wizard2 = new Wizard("Anaxis Bajraktari");
Wizard wizard3 = new Wizard("Xuban Munoa");
Wizard wizard4 = new Wizard("Blasius Dehooge");
MagicService service =
        new MagicServiceImpl(new WizardDaoImpl(), new SpellbookDaoImpl(), new SpellDaoImpl());
wizardsWithSpellbook=service.findWizardsWithSpellbook("Book of Idores")
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
wizardsWithSpell=service.findWizardsWithSpell("Fireball")
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
List<E> result = null;
List<E> result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
spellbook=spellbookDao.findByName(name)
Spellbook spellbook = spellbookDao.findByName(name);
spell=spellDao.findByName(name)
Spell spell = spellDao.findByName(name);
spellbook=spell.getSpellbook()
Spellbook spellbook = spell.getSpellbook();
session=getSession()
Session session = getSession();
Transaction tx = null;
Spell result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Spellbook result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Wizard result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
String[] args = {};
className=dao.persistentClass.getSimpleName()
final String className = dao.persistentClass.getSimpleName();
entityName=String.format("%s%d",className,ID_GENERATOR.incrementAndGet())
final String entityName = String.format("%s%d", className, ID_GENERATOR.incrementAndGet());
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
byId=this.dao.find(entity.getId())
final E byId = this.dao.find(entity.getId());
originalEntities=this.dao.findAll()
final List<E> originalEntities = this.dao.findAll();
final List<E> originalEntities = this.dao.findAll();
entitiesLeft=this.dao.findAll()
final List<E> entitiesLeft = this.dao.findAll();
final List<E> entitiesLeft = this.dao.findAll();
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
expectedId=Long.valueOf(1)
final Long expectedId = Long.valueOf(1);
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
final String expectedName = "new name";
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
final String bookname = "bookname";
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
final Set<Wizard> wizards = new HashSet<>();
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpellbook(bookname)
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final Set<Wizard> wizards = new HashSet<>();
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spell=mock(Spell.class)
final Spell spell = mock(Spell.class);
final String spellName = "spellname";
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpell(spellName)
final List<Wizard> result = service.findWizardsWithSpell(spellName);
final List<Wizard> result = service.findWizardsWithSpell(spellName);
dao=getDao()
final SpellDaoImpl dao = getDao();
allSpells=dao.findAll()
final List<Spell> allSpells = dao.findAll();
final List<Spell> allSpells = dao.findAll();
spellByName=dao.findByName(spell.getName())
final Spell spellByName = dao.findByName(spell.getName());
dao=getDao()
final SpellbookDaoImpl dao = getDao();
allBooks=dao.findAll()
final List<Spellbook> allBooks = dao.findAll();
final List<Spellbook> allBooks = dao.findAll();
spellByName=dao.findByName(book.getName())
final Spellbook spellByName = dao.findByName(book.getName());
dao=getDao()
final WizardDaoImpl dao = getDao();
allWizards=dao.findAll()
final List<Wizard> allWizards = dao.findAll();
final List<Wizard> allWizards = dao.findAll();
byName=dao.findByName(spell.getName())
final Wizard byName = dao.findByName(spell.getName());
service=ServiceLocator.getService("jndi/serviceA")
Service service = ServiceLocator.getService("jndi/serviceA");
Service cachedService = null;
serviceObj=serviceCache.getService(serviceJndiName)
Service serviceObj = serviceCache.getService(serviceJndiName);
InitContext ctx = new InitContext();
String[] args = {};
final String[] serviceNames = new String[]{
        "jndi/serviceA", "jndi/serviceB"
    };
service=ServiceLocator.getService(serviceName)
final Service service = ServiceLocator.getService(serviceName);
ivoryTower1=IvoryTower.getInstance()
IvoryTower ivoryTower1 = IvoryTower.getInstance();
ivoryTower2=IvoryTower.getInstance()
IvoryTower ivoryTower2 = IvoryTower.getInstance();
threadSafeIvoryTower1=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower1 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
threadSafeIvoryTower2=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower2 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
EnumIvoryTower enumIvoryTower1 = EnumIvoryTower.INSTANCE;
EnumIvoryTower enumIvoryTower2 = EnumIvoryTower.INSTANCE;
dcl1=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();
dcl2=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();
demandHolderIdiom=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom =
        InitializingOnDemandHolderIdiom.getInstance();
demandHolderIdiom2=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom2 =
        InitializingOnDemandHolderIdiom.getInstance();
ThreadSafeDoubleCheckLocking result = instance;
String[] args = {};
instance1=this.singletonInstanceMethod.get()
S instance1 = this.singletonInstanceMethod.get();
instance2=this.singletonInstanceMethod.get()
S instance2 = this.singletonInstanceMethod.get();
instance3=this.singletonInstanceMethod.get()
S instance3 = this.singletonInstanceMethod.get();
final List<Callable<S>> tasks = new ArrayList<>();
int i = 0
creatures=Arrays.asList(new Goblin(),new Octopus(),new Dragon(),new Shark(),new Troll(),new KillerBee())
List<Creature> creatures =
        Arrays.asList(new Goblin(), new Octopus(), new Dragon(), new Shark(), new Troll(),
            new KillerBee());
walkingCreatures=creatures.stream().filter(new MovementSelector(Movement.WALKING)).collect(Collectors.toList())
List<Creature> walkingCreatures =
        creatures.stream().filter(new MovementSelector(Movement.WALKING))
            .collect(Collectors.toList());
darkCreatures=creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList())
List<Creature> darkCreatures =
        creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList());
redAndFlyingCreatures=creatures.stream().filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING))).collect(Collectors.toList())
List<Creature> redAndFlyingCreatures =
        creatures.stream()
            .filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING)))
            .collect(Collectors.toList());
String[] args = {};
toString=this.testedCreature.toString()
final String toString = this.testedCreature.toString();
greenCreature=mock(Creature.class)
final Creature greenCreature = mock(Creature.class);
redCreature=mock(Creature.class)
final Creature redCreature = mock(Creature.class);
final ColorSelector greenSelector = new ColorSelector(Color.GREEN);
swimmingCreature=mock(Creature.class)
final Creature swimmingCreature = mock(Creature.class);
flyingCreature=mock(Creature.class)
final Creature flyingCreature = mock(Creature.class);
final MovementSelector swimmingSelector = new MovementSelector(Movement.SWIMMING);
normalCreature=mock(Creature.class)
final Creature normalCreature = mock(Creature.class);
smallCreature=mock(Creature.class)
final Creature smallCreature = mock(Creature.class);
final SizeSelector normalSelector = new SizeSelector(Size.NORMAL);
Mammoth mammoth = new Mammoth();
String[] args = {};
inOrder=Mockito.inOrder(this.stdOutMock)
final InOrder inOrder = Mockito.inOrder(this.stdOutMock);
final Mammoth mammoth = new Mammoth();
toString=new Mammoth().toString()
final String toString = new Mammoth().toString();
warrior=CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin").withWeapon("Sword").noAbilities().build()
Character warrior =
        CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin")
            .withWeapon("Sword").noAbilities().build();
mage=CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer").withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport").noMoreAbilities().build()
Character mage =
        CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer")
            .withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport")
            .noMoreAbilities().build();
thief=CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build()
Character thief =
        CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build();
StringBuilder sb = new StringBuilder();
Character character = new Character(name);
String[] args = {};
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").withAbility("invisibility").withAbility("wisdom").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .withAbility("invisibility")
        .withAbility("wisdom")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").noSpell().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .noSpell()
        .build();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .noAbilities()
        .build();
character=CharacterStepBuilder.newBuilder().name("Cuauhtemoc").fighterClass("aztec").withWeapon("spear").withAbility("speed").withAbility("strength").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Cuauhtemoc")
        .fighterClass("aztec")
        .withWeapon("spear")
        .withAbility("speed")
        .withAbility("strength")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Poor warrior").fighterClass("none").noWeapon().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Poor warrior")
        .fighterClass("none")
        .noWeapon()
        .build();
character=CharacterStepBuilder.newBuilder().name("Weak warrior").fighterClass("none").withWeapon("Slingshot").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Weak warrior")
        .fighterClass("none")
        .withWeapon("Slingshot")
        .noAbilities()
        .build();
DragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());
String[] args = {};
strategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy strategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(strategy);
initialStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy initialStrategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(initialStrategy);
newStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy newStrategy = mock(DragonSlayingStrategy.class);
HalflingThief thief = new HalflingThief(new HitAndRunMethod());
target=pickTarget()
String target = pickTarget();
String[] args = {};
method=mock(StealingMethod.class)
final StealingMethod method = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(method);
initialMethod=mock(StealingMethod.class)
final StealingMethod initialMethod = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(initialMethod);
newMethod=mock(StealingMethod.class)
final StealingMethod newMethod = mock(StealingMethod.class);
inOrder=inOrder(this.stdOutMock)
final InOrder inOrder = inOrder(this.stdOutMock);
List<Task> tasks = new ArrayList<>();
executor=Executors.newFixedThreadPool(3)
ExecutorService executor = Executors.newFixedThreadPool(3);
Runnable worker = new Worker(tasks.get(i));
String[] args = {};
service=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService service = Executors.newFixedThreadPool(THREAD_COUNT);
final List<Callable<Integer>> tasks = new ArrayList<>();
int i = 0
task=mock(Task.class)
final Task task = mock(Task.class);
final Worker worker = new Worker(task);
RainbowFish fishV1 = new RainbowFish("Zed", 10, 11, 12);
deserializedFishV1=RainbowFishSerializer.readV1("fish1.out")
RainbowFish deserializedFishV1 = RainbowFishSerializer.readV1("fish1.out");
RainbowFishV2 fishV2 = new RainbowFishV2("Scar", 5, 12, 15, true, true, true);
deserializedFishV2=RainbowFishSerializer.readV1("fish2.out")
RainbowFish deserializedFishV2 = RainbowFishSerializer.readV1("fish2.out");
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
FileInputStream fileIn = new FileInputStream(filename);
ObjectInputStream objIn = new ObjectInputStream(fileIn);
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
String[] args = {};
File file1 = new File("fish1.out");
File file2 = new File("fish2.out");
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
final RainbowFish fish = new RainbowFish("name", 1, 2, 3);
final RainbowFishV2 fish = new RainbowFishV2("name", 1, 2, 3, false, true, false);
BallItem ballItem = new BallItem();
BallThread ballThread = new BallThread();
String[] args = {};
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
inOrder=inOrder(ballThread)
final InOrder inOrder = inOrder(ballThread);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
exceptionHandler=mock(UncaughtExceptionHandler.class)
final UncaughtExceptionHandler exceptionHandler = mock(UncaughtExceptionHandler.class);
statA=HeroStat.valueOf(10,5,0)
HeroStat statA = HeroStat.valueOf(10, 5, 0);
statB=HeroStat.valueOf(10,5,0)
HeroStat statB = HeroStat.valueOf(10, 5, 0);
statC=HeroStat.valueOf(5,1,8)
HeroStat statC = HeroStat.valueOf(5, 1, 8);
final int prime = 31;
int result = 1;
HeroStat other = (HeroStat) obj;
String[] args = {};
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatC=HeroStat.valueOf(3,9,8)
HeroStat heroStatC = HeroStat.valueOf(3, 9, 8);
Commander commander =
        new Commander(new Sergeant(new Soldier(), new Soldier(), new Soldier()), new Sergeant(
            new Soldier(), new Soldier(), new Soldier()));
String[] args = {};
final Unit[] children = new Unit[5];
unit=this.factory.apply(children)
final U unit = this.factory.apply(children);
visitor=mock(UnitVisitor.class)
final UnitVisitor visitor = mock(UnitVisitor.class);

Diff of edc93ea7cf79430d13f9d0c5a5dcf0420ef34863 and 6faa8dff57873a7760c0b6967a790e8f589ed176:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 212
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 6
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision edc93ea7cf79430d13f9d0c5a5dcf0420ef34863 to 6faa8dff57873a7760c0b6967a790e8f589ed176

************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null

****Parsing for addition at revision 74c0ab90ac259edeccac72ce627c0b2d411fcfdc****

Added App.java to .\/java-design-patterns\ repository source files.
Added Army.java to .\/java-design-patterns\ repository source files.
Added Castle.java to .\/java-design-patterns\ repository source files.
Added ElfArmy.java to .\/java-design-patterns\ repository source files.
Added ElfCastle.java to .\/java-design-patterns\ repository source files.
Added ElfKing.java to .\/java-design-patterns\ repository source files.
Added ElfKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added KingdomFactory.java to .\/java-design-patterns\ repository source files.
Added OrcArmy.java to .\/java-design-patterns\ repository source files.
Added OrcCastle.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcKingdomFactory.java to .\/java-design-patterns\ repository source files.
Added AbstractFactoryTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BattleFishingBoat.java to .\/java-design-patterns\ repository source files.
Added BattleShip.java to .\/java-design-patterns\ repository source files.
Added Captain.java to .\/java-design-patterns\ repository source files.
Added FishingBoat.java to .\/java-design-patterns\ repository source files.
Added AdapterPatternTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsyncCallback.java to .\/java-design-patterns\ repository source files.
Added AsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AsyncResult.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ThreadAsyncExecutorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Excalibur.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added MagicWeapon.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Mjollnir.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeapon.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponImpl.java to .\/java-design-patterns\ repository source files.
Added Stormbringer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BlindingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added FlyingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added MagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added SoulEatingMagicWeaponTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Armor.java to .\/java-design-patterns\ repository source files.
Added HairColor.java to .\/java-design-patterns\ repository source files.
Added HairType.java to .\/java-design-patterns\ repository source files.
Added Hero.java to .\/java-design-patterns\ repository source files.
Added Profession.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegate.java to .\/java-design-patterns\ repository source files.
Added BusinessLookup.java to .\/java-design-patterns\ repository source files.
Added BusinessService.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added EjbService.java to .\/java-design-patterns\ repository source files.
Added JmsService.java to .\/java-design-patterns\ repository source files.
Added ServiceType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BusinessDelegateTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppManager.java to .\/java-design-patterns\ repository source files.
Added CacheStore.java to .\/java-design-patterns\ repository source files.
Added CachingPolicy.java to .\/java-design-patterns\ repository source files.
Added DbManager.java to .\/java-design-patterns\ repository source files.
Added LruCache.java to .\/java-design-patterns\ repository source files.
Added UserAccount.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CachingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Callback.java to .\/java-design-patterns\ repository source files.
Added LambdasApp.java to .\/java-design-patterns\ repository source files.
Added SimpleTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CallbackTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added OrcCommander.java to .\/java-design-patterns\ repository source files.
Added OrcKing.java to .\/java-design-patterns\ repository source files.
Added OrcOfficer.java to .\/java-design-patterns\ repository source files.
Added OrcSoldier.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added RequestHandler.java to .\/java-design-patterns\ repository source files.
Added RequestType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OrcKingTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added InvisibilitySpell.java to .\/java-design-patterns\ repository source files.
Added ShrinkSpell.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added Visibility.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Letter.java to .\/java-design-patterns\ repository source files.
Added LetterComposite.java to .\/java-design-patterns\ repository source files.
Added Messenger.java to .\/java-design-patterns\ repository source files.
Added Sentence.java to .\/java-design-patterns\ repository source files.
Added Word.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MessengerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Customer.java to .\/java-design-patterns\ repository source files.
Added CustomerDao.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CustomerDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added CustomerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hostile.java to .\/java-design-patterns\ repository source files.
Added SmartHostile.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SmartHostileTest.java to .\/java-design-patterns\ repository source files.
Added TrollTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Printer.java to .\/java-design-patterns\ repository source files.
Added PrinterController.java to .\/java-design-patterns\ repository source files.
Added CanonPrinter.java to .\/java-design-patterns\ repository source files.
Added EpsonPrinter.java to .\/java-design-patterns\ repository source files.
Added HpPrinter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DelegateTest.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizard.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GuiceWizard.java to .\/java-design-patterns\ repository source files.
Added OldTobyTobacco.java to .\/java-design-patterns\ repository source files.
Added RivendellTobacco.java to .\/java-design-patterns\ repository source files.
Added SecondBreakfastTobacco.java to .\/java-design-patterns\ repository source files.
Added SimpleWizard.java to .\/java-design-patterns\ repository source files.
Added Tobacco.java to .\/java-design-patterns\ repository source files.
Added TobaccoModule.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AdvancedWizardTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GuiceWizardTest.java to .\/java-design-patterns\ repository source files.
Added SimpleWizardTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Inventory.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added InventoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroid.java to .\/java-design-patterns\ repository source files.
Added GameObject.java to .\/java-design-patterns\ repository source files.
Added Meteoroid.java to .\/java-design-patterns\ repository source files.
Added Rectangle.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIss.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMir.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CollisionTest.java to .\/java-design-patterns\ repository source files.
Added FlamingAsteroidTest.java to .\/java-design-patterns\ repository source files.
Added MeteoroidTest.java to .\/java-design-patterns\ repository source files.
Added RectangleTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationIssTest.java to .\/java-design-patterns\ repository source files.
Added SpaceStationMirTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added EventEmitter.java to .\/java-design-patterns\ repository source files.
Added EventObserver.java to .\/java-design-patterns\ repository source files.
Added KingJoffrey.java to .\/java-design-patterns\ repository source files.
Added KingsHand.java to .\/java-design-patterns\ repository source files.
Added LordBaelish.java to .\/java-design-patterns\ repository source files.
Added LordVarys.java to .\/java-design-patterns\ repository source files.
Added Scout.java to .\/java-design-patterns\ repository source files.
Added Weekday.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EventEmitterTest.java to .\/java-design-patterns\ repository source files.
Added EventTest.java to .\/java-design-patterns\ repository source files.
Added KingJoffreyTest.java to .\/java-design-patterns\ repository source files.
Added KingsHandTest.java to .\/java-design-patterns\ repository source files.
Added LordBaelishTest.java to .\/java-design-patterns\ repository source files.
Added LordVarysTest.java to .\/java-design-patterns\ repository source files.
Added ScoutTest.java to .\/java-design-patterns\ repository source files.
Added WeekdayTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Event.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEvent.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEvent.java to .\/java-design-patterns\ repository source files.
Added EventDispatcher.java to .\/java-design-patterns\ repository source files.
Added Handler.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added UserUpdatedEventHandler.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added UserCreatedEventTest.java to .\/java-design-patterns\ repository source files.
Added EventDispatcherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileWriterAction.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriter.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFileWriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DwarvenCartOperator.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldDigger.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacade.java to .\/java-design-patterns\ repository source files.
Added DwarvenMineWorker.java to .\/java-design-patterns\ repository source files.
Added DwarvenTunnelDigger.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DwarvenGoldmineFacadeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Axe.java to .\/java-design-patterns\ repository source files.
Added Bow.java to .\/java-design-patterns\ repository source files.
Added Builder.java to .\/java-design-patterns\ repository source files.
Added Spear.java to .\/java-design-patterns\ repository source files.
Added Sword.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponFactory.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryKitTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Blacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfBlacksmith.java to .\/java-design-patterns\ repository source files.
Added ElfWeapon.java to .\/java-design-patterns\ repository source files.
Added OrcBlacksmith.java to .\/java-design-patterns\ repository source files.
Added OrcWeapon.java to .\/java-design-patterns\ repository source files.
Added Weapon.java to .\/java-design-patterns\ repository source files.
Added WeaponType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FactoryMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersion.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added UserGroup.java to .\/java-design-patterns\ repository source files.
Added PropertiesFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added TieredFeatureToggleVersionTest.java to .\/java-design-patterns\ repository source files.
Added UserGroupTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FluentIterable.java to .\/java-design-patterns\ repository source files.
Added DecoratingIterator.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterable.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterable.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added LazyFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added SimpleFluentIterableTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added ActionType.java to .\/java-design-patterns\ repository source files.
Added Content.java to .\/java-design-patterns\ repository source files.
Added ContentAction.java to .\/java-design-patterns\ repository source files.
Added MenuAction.java to .\/java-design-patterns\ repository source files.
Added MenuItem.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added ContentStore.java to .\/java-design-patterns\ repository source files.
Added MenuStore.java to .\/java-design-patterns\ repository source files.
Added Store.java to .\/java-design-patterns\ repository source files.
Added ContentView.java to .\/java-design-patterns\ repository source files.
Added MenuView.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ContentTest.java to .\/java-design-patterns\ repository source files.
Added MenuItemTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DispatcherTest.java to .\/java-design-patterns\ repository source files.
Added ContentStoreTest.java to .\/java-design-patterns\ repository source files.
Added MenuStoreTest.java to .\/java-design-patterns\ repository source files.
Added ContentViewTest.java to .\/java-design-patterns\ repository source files.
Added MenuViewTest.java to .\/java-design-patterns\ repository source files.
Added AlchemistShop.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HealingPotion.java to .\/java-design-patterns\ repository source files.
Added HolyWaterPotion.java to .\/java-design-patterns\ repository source files.
Added InvisibilityPotion.java to .\/java-design-patterns\ repository source files.
Added PoisonPotion.java to .\/java-design-patterns\ repository source files.
Added Potion.java to .\/java-design-patterns\ repository source files.
Added PotionFactory.java to .\/java-design-patterns\ repository source files.
Added PotionType.java to .\/java-design-patterns\ repository source files.
Added StrengthPotion.java to .\/java-design-patterns\ repository source files.
Added AlchemistShopTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ApplicationException.java to .\/java-design-patterns\ repository source files.
Added ArcherCommand.java to .\/java-design-patterns\ repository source files.
Added ArcherView.java to .\/java-design-patterns\ repository source files.
Added CatapultCommand.java to .\/java-design-patterns\ repository source files.
Added CatapultView.java to .\/java-design-patterns\ repository source files.
Added Command.java to .\/java-design-patterns\ repository source files.
Added ErrorView.java to .\/java-design-patterns\ repository source files.
Added FrontController.java to .\/java-design-patterns\ repository source files.
Added UnknownCommand.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added ApplicationExceptionTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommandTest.java to .\/java-design-patterns\ repository source files.
Added FrontControllerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added ViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AsynchronousService.java to .\/java-design-patterns\ repository source files.
Added AsyncTask.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added AsynchronousServiceTest.java to .\/java-design-patterns\ repository source files.
Added AbstractFilter.java to .\/java-design-patterns\ repository source files.
Added AddressFilter.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Client.java to .\/java-design-patterns\ repository source files.
Added ContactFilter.java to .\/java-design-patterns\ repository source files.
Added DepositFilter.java to .\/java-design-patterns\ repository source files.
Added Filter.java to .\/java-design-patterns\ repository source files.
Added FilterChain.java to .\/java-design-patterns\ repository source files.
Added FilterManager.java to .\/java-design-patterns\ repository source files.
Added NameFilter.java to .\/java-design-patterns\ repository source files.
Added Order.java to .\/java-design-patterns\ repository source files.
Added OrderFilter.java to .\/java-design-patterns\ repository source files.
Added Target.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FilterManagerTest.java to .\/java-design-patterns\ repository source files.
Added FilterTest.java to .\/java-design-patterns\ repository source files.
Added OrderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Expression.java to .\/java-design-patterns\ repository source files.
Added MinusExpression.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpression.java to .\/java-design-patterns\ repository source files.
Added NumberExpression.java to .\/java-design-patterns\ repository source files.
Added PlusExpression.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MinusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added MultiplyExpressionTest.java to .\/java-design-patterns\ repository source files.
Added NumberExpressionTest.java to .\/java-design-patterns\ repository source files.
Added PlusExpressionTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemIterator.java to .\/java-design-patterns\ repository source files.
Added ItemType.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestItemIterator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added TreasureChestTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Cake.java to .\/java-design-patterns\ repository source files.
Added CakeBakingException.java to .\/java-design-patterns\ repository source files.
Added CakeBakingService.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImpl.java to .\/java-design-patterns\ repository source files.
Added CakeDao.java to .\/java-design-patterns\ repository source files.
Added CakeInfo.java to .\/java-design-patterns\ repository source files.
Added CakeLayer.java to .\/java-design-patterns\ repository source files.
Added CakeLayerDao.java to .\/java-design-patterns\ repository source files.
Added CakeLayerInfo.java to .\/java-design-patterns\ repository source files.
Added CakeTopping.java to .\/java-design-patterns\ repository source files.
Added CakeToppingDao.java to .\/java-design-patterns\ repository source files.
Added CakeToppingInfo.java to .\/java-design-patterns\ repository source files.
Added CakeViewImpl.java to .\/java-design-patterns\ repository source files.
Added View.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingExceptionTest.java to .\/java-design-patterns\ repository source files.
Added CakeBakingServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added CakeTest.java to .\/java-design-patterns\ repository source files.
Added CakeViewImplTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Heavy.java to .\/java-design-patterns\ repository source files.
Added HolderNaive.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafe.java to .\/java-design-patterns\ repository source files.
Added Java8Holder.java to .\/java-design-patterns\ repository source files.
Added AbstractHolderTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HolderNaiveTest.java to .\/java-design-patterns\ repository source files.
Added HolderThreadSafeTest.java to .\/java-design-patterns\ repository source files.
Added Java8HolderTest.java to .\/java-design-patterns\ repository source files.
Added Action.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Hobbit.java to .\/java-design-patterns\ repository source files.
Added Hunter.java to .\/java-design-patterns\ repository source files.
Added Party.java to .\/java-design-patterns\ repository source files.
Added PartyImpl.java to .\/java-design-patterns\ repository source files.
Added PartyMember.java to .\/java-design-patterns\ repository source files.
Added PartyMemberBase.java to .\/java-design-patterns\ repository source files.
Added Rogue.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added PartyImplTest.java to .\/java-design-patterns\ repository source files.
Added PartyMemberTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Star.java to .\/java-design-patterns\ repository source files.
Added StarMemento.java to .\/java-design-patterns\ repository source files.
Added StarType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StarTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Fatigue.java to .\/java-design-patterns\ repository source files.
Added GiantController.java to .\/java-design-patterns\ repository source files.
Added GiantModel.java to .\/java-design-patterns\ repository source files.
Added GiantView.java to .\/java-design-patterns\ repository source files.
Added Health.java to .\/java-design-patterns\ repository source files.
Added Nourishment.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GiantControllerTest.java to .\/java-design-patterns\ repository source files.
Added GiantModelTest.java to .\/java-design-patterns\ repository source files.
Added GiantViewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added FileLoader.java to .\/java-design-patterns\ repository source files.
Added FileSelectorJFrame.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenter.java to .\/java-design-patterns\ repository source files.
Added FileSelectorStub.java to .\/java-design-patterns\ repository source files.
Added FileSelectorView.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added FileLoaderTest.java to .\/java-design-patterns\ repository source files.
Added FileSelectorPresenterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Sex.java to .\/java-design-patterns\ repository source files.
Added User.java to .\/java-design-patterns\ repository source files.
Added Validator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MonadTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added LoadBalancer.java to .\/java-design-patterns\ repository source files.
Added Request.java to .\/java-design-patterns\ repository source files.
Added Server.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added LoadBalancerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Nazgul.java to .\/java-design-patterns\ repository source files.
Added NazgulName.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NazgulTest.java to .\/java-design-patterns\ repository source files.
Added HomePageService.java to .\/java-design-patterns\ repository source files.
Added HomePageViewModel.java to .\/java-design-patterns\ repository source files.
Added SimpleObject.java to .\/java-design-patterns\ repository source files.
Added SimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectTest.java to .\/java-design-patterns\ repository source files.
Added DomainAppFixturesProvider.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectCreate.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsTearDown.java to .\/java-design-patterns\ repository source files.
Added RecreateSimpleObjects.java to .\/java-design-patterns\ repository source files.
Added SimpleAppSystemInitializer.java to .\/java-design-patterns\ repository source files.
Added BootstrappingGlue.java to .\/java-design-patterns\ repository source files.
Added CatalogOfFixturesGlue.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectGlue.java to .\/java-design-patterns\ repository source files.
Added RunSpecs.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleObjectsIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleAppIntegTest.java to .\/java-design-patterns\ repository source files.
Added SimpleApplication.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Node.java to .\/java-design-patterns\ repository source files.
Added NodeImpl.java to .\/java-design-patterns\ repository source files.
Added NullNode.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added NullNodeTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added TreeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ObjectPool.java to .\/java-design-patterns\ repository source files.
Added Oliphaunt.java to .\/java-design-patterns\ repository source files.
Added OliphauntPool.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added OliphauntPoolTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added GHobbits.java to .\/java-design-patterns\ repository source files.
Added GOrcs.java to .\/java-design-patterns\ repository source files.
Added GWeather.java to .\/java-design-patterns\ repository source files.
Added Observable.java to .\/java-design-patterns\ repository source files.
Added Observer.java to .\/java-design-patterns\ repository source files.
Added Race.java to .\/java-design-patterns\ repository source files.
Added Hobbits.java to .\/java-design-patterns\ repository source files.
Added Orcs.java to .\/java-design-patterns\ repository source files.
Added Weather.java to .\/java-design-patterns\ repository source files.
Added WeatherObserver.java to .\/java-design-patterns\ repository source files.
Added WeatherType.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added GHobbitsTest.java to .\/java-design-patterns\ repository source files.
Added GWeatherTest.java to .\/java-design-patterns\ repository source files.
Added ObserverTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added HobbitsTest.java to .\/java-design-patterns\ repository source files.
Added OrcsTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WeatherObserverTest.java to .\/java-design-patterns\ repository source files.
Added WeatherTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Message.java to .\/java-design-patterns\ repository source files.
Added MessageQueue.java to .\/java-design-patterns\ repository source files.
Added MqPublishPoint.java to .\/java-design-patterns\ repository source files.
Added MqSubscribePoint.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added SimpleMessage.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageQueue.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added PoisonMessageTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added SimpleMessageTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added ImmutableStew.java to .\/java-design-patterns\ repository source files.
Added Stew.java to .\/java-design-patterns\ repository source files.
Added StewData.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ImmutableStewTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added StewTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Consumer.java to .\/java-design-patterns\ repository source files.
Added Item.java to .\/java-design-patterns\ repository source files.
Added ItemQueue.java to .\/java-design-patterns\ repository source files.
Added Producer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ConsumerTest.java to .\/java-design-patterns\ repository source files.
Added ProducerTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Stats.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Beast.java to .\/java-design-patterns\ repository source files.
Added ElfBeast.java to .\/java-design-patterns\ repository source files.
Added ElfMage.java to .\/java-design-patterns\ repository source files.
Added ElfWarlord.java to .\/java-design-patterns\ repository source files.
Added HeroFactory.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImpl.java to .\/java-design-patterns\ repository source files.
Added Mage.java to .\/java-design-patterns\ repository source files.
Added OrcBeast.java to .\/java-design-patterns\ repository source files.
Added OrcMage.java to .\/java-design-patterns\ repository source files.
Added OrcWarlord.java to .\/java-design-patterns\ repository source files.
Added Prototype.java to .\/java-design-patterns\ repository source files.
Added Warlord.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroFactoryImplTest.java to .\/java-design-patterns\ repository source files.
Added PrototypeTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardTower.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WizardTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerProxyTest.java to .\/java-design-patterns\ repository source files.
Added WizardTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppClient.java to .\/java-design-patterns\ repository source files.
Added LoggingHandler.java to .\/java-design-patterns\ repository source files.
Added AbstractNioChannel.java to .\/java-design-patterns\ repository source files.
Added ChannelHandler.java to .\/java-design-patterns\ repository source files.
Added Dispatcher.java to .\/java-design-patterns\ repository source files.
Added NioDatagramChannel.java to .\/java-design-patterns\ repository source files.
Added NioReactor.java to .\/java-design-patterns\ repository source files.
Added NioServerSocketChannel.java to .\/java-design-patterns\ repository source files.
Added SameThreadDispatcher.java to .\/java-design-patterns\ repository source files.
Added ThreadPoolDispatcher.java to .\/java-design-patterns\ repository source files.
Added ReactorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Reader.java to .\/java-design-patterns\ repository source files.
Added ReaderWriterLock.java to .\/java-design-patterns\ repository source files.
Added Writer.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ReaderAndWriterTest.java to .\/java-design-patterns\ repository source files.
Added ReaderTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added WriterTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AppConfig.java to .\/java-design-patterns\ repository source files.
Added Person.java to .\/java-design-patterns\ repository source files.
Added PersonRepository.java to .\/java-design-patterns\ repository source files.
Added PersonSpecifications.java to .\/java-design-patterns\ repository source files.
Added AnnotationBasedRepositoryTest.java to .\/java-design-patterns\ repository source files.
Added AppConfigTest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RepositoryTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added SlidingDoor.java to .\/java-design-patterns\ repository source files.
Added TreasureChest.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ClosableTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added King.java to .\/java-design-patterns\ repository source files.
Added Queen.java to .\/java-design-patterns\ repository source files.
Added Royalty.java to .\/java-design-patterns\ repository source files.
Added Servant.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added KingTest.java to .\/java-design-patterns\ repository source files.
Added QueenTest.java to .\/java-design-patterns\ repository source files.
Added ServantTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BaseEntity.java to .\/java-design-patterns\ repository source files.
Added Dao.java to .\/java-design-patterns\ repository source files.
Added DaoBaseImpl.java to .\/java-design-patterns\ repository source files.
Added HibernateUtil.java to .\/java-design-patterns\ repository source files.
Added MagicService.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImpl.java to .\/java-design-patterns\ repository source files.
Added Spell.java to .\/java-design-patterns\ repository source files.
Added SpellDao.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Spellbook.java to .\/java-design-patterns\ repository source files.
Added SpellbookDao.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImpl.java to .\/java-design-patterns\ repository source files.
Added Wizard.java to .\/java-design-patterns\ repository source files.
Added WizardDao.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImpl.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BaseDaoTest.java to .\/java-design-patterns\ repository source files.
Added MagicServiceImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added SpellbookDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added WizardDaoImplTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added InitContext.java to .\/java-design-patterns\ repository source files.
Added Service.java to .\/java-design-patterns\ repository source files.
Added ServiceCache.java to .\/java-design-patterns\ repository source files.
Added ServiceImpl.java to .\/java-design-patterns\ repository source files.
Added ServiceLocator.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added ServiceLocatorTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTower.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiom.java to .\/java-design-patterns\ repository source files.
Added IvoryTower.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLocking.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTower.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added EnumIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added InitializingOnDemandHolderIdiomTest.java to .\/java-design-patterns\ repository source files.
Added IvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added SingletonTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeDoubleCheckLockingTest.java to .\/java-design-patterns\ repository source files.
Added ThreadSafeLazyLoadedIvoryTowerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added AbstractCreature.java to .\/java-design-patterns\ repository source files.
Added Creature.java to .\/java-design-patterns\ repository source files.
Added Dragon.java to .\/java-design-patterns\ repository source files.
Added Goblin.java to .\/java-design-patterns\ repository source files.
Added KillerBee.java to .\/java-design-patterns\ repository source files.
Added Octopus.java to .\/java-design-patterns\ repository source files.
Added Shark.java to .\/java-design-patterns\ repository source files.
Added Troll.java to .\/java-design-patterns\ repository source files.
Added Color.java to .\/java-design-patterns\ repository source files.
Added Movement.java to .\/java-design-patterns\ repository source files.
Added Size.java to .\/java-design-patterns\ repository source files.
Added ColorSelector.java to .\/java-design-patterns\ repository source files.
Added MovementSelector.java to .\/java-design-patterns\ repository source files.
Added SizeSelector.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CreatureTest.java to .\/java-design-patterns\ repository source files.
Added ColorSelectorTest.java to .\/java-design-patterns\ repository source files.
Added MovementSelectorTest.java to .\/java-design-patterns\ repository source files.
Added SizeSelectorTest.java to .\/java-design-patterns\ repository source files.
Added AngryState.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Mammoth.java to .\/java-design-patterns\ repository source files.
Added PeacefulState.java to .\/java-design-patterns\ repository source files.
Added State.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added MammothTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Character.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilder.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CharacterStepBuilderTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added DragonSlayer.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategy.java to .\/java-design-patterns\ repository source files.
Added MeleeStrategy.java to .\/java-design-patterns\ repository source files.
Added ProjectileStrategy.java to .\/java-design-patterns\ repository source files.
Added SpellStrategy.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayerTest.java to .\/java-design-patterns\ repository source files.
Added DragonSlayingStrategyTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HalflingThief.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethod.java to .\/java-design-patterns\ repository source files.
Added StealingMethod.java to .\/java-design-patterns\ repository source files.
Added SubtleMethod.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HalflingThiefTest.java to .\/java-design-patterns\ repository source files.
Added HitAndRunMethodTest.java to .\/java-design-patterns\ repository source files.
Added StealingMethodTest.java to .\/java-design-patterns\ repository source files.
Added SubtleMethodTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTask.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTask.java to .\/java-design-patterns\ repository source files.
Added Task.java to .\/java-design-patterns\ repository source files.
Added Worker.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CoffeeMakingTaskTest.java to .\/java-design-patterns\ repository source files.
Added PotatoPeelingTaskTest.java to .\/java-design-patterns\ repository source files.
Added TaskTest.java to .\/java-design-patterns\ repository source files.
Added WorkerTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added RainbowFish.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializer.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishSerializerTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishTest.java to .\/java-design-patterns\ repository source files.
Added RainbowFishV2Test.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added BallItem.java to .\/java-design-patterns\ repository source files.
Added BallThread.java to .\/java-design-patterns\ repository source files.
Added GameItem.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added BallItemTest.java to .\/java-design-patterns\ repository source files.
Added BallThreadTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added HeroStat.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added HeroStatTest.java to .\/java-design-patterns\ repository source files.
Added App.java to .\/java-design-patterns\ repository source files.
Added Commander.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitor.java to .\/java-design-patterns\ repository source files.
Added Sergeant.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitor.java to .\/java-design-patterns\ repository source files.
Added Soldier.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitor.java to .\/java-design-patterns\ repository source files.
Added Unit.java to .\/java-design-patterns\ repository source files.
Added UnitVisitor.java to .\/java-design-patterns\ repository source files.
Added AppTest.java to .\/java-design-patterns\ repository source files.
Added CommanderTest.java to .\/java-design-patterns\ repository source files.
Added CommanderVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SergeantTest.java to .\/java-design-patterns\ repository source files.
Added SergeantVisitorTest.java to .\/java-design-patterns\ repository source files.
Added SoldierTest.java to .\/java-design-patterns\ repository source files.
Added SoldierVisitorTest.java to .\/java-design-patterns\ repository source files.
Added StdOutTest.java to .\/java-design-patterns\ repository source files.
Added UnitTest.java to .\/java-design-patterns\ repository source files.
Added VisitorTest.java to .\/java-design-patterns\ repository source files.
App app = new App();
elfKing=app.getKing(elfFactory)
final King elfKing = app.getKing(elfFactory);
orcKing=app.getKing(orcFactory)
final King orcKing = app.getKing(orcFactory);
elfCastle=app.getCastle(elfFactory)
final Castle elfCastle = app.getCastle(elfFactory);
orcCastle=app.getCastle(orcFactory)
final Castle orcCastle = app.getCastle(orcFactory);
elfArmy=app.getArmy(elfFactory)
final Army elfArmy = app.getArmy(elfFactory);
orcArmy=app.getArmy(orcFactory)
final Army orcArmy = app.getArmy(orcFactory);
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
king=app.getKing()
final King king = app.getKing();
castle=app.getCastle()
final Castle castle = app.getCastle();
army=app.getArmy()
final Army army = app.getArmy();
String[] args = {};
Captain captain = new Captain(new BattleFishingBoat());
battleFishingBoat=spy(new BattleFishingBoat())
BattleFishingBoat battleFishingBoat = spy(new BattleFishingBoat());
Captain captain = new Captain();
BattleShip captain = (BattleShip) beans.get(CAPTAIN_BEAN);
BattleShip battleship = (BattleShip) beans.get(BATTLESHIP_BEAN);
String[] args = {};
AsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult1=executor.startProcess(lazyval(10,500))
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
AsyncResult<Integer> asyncResult1 = executor.startProcess(lazyval(10, 500));
asyncResult2=executor.startProcess(lazyval("test",300))
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
AsyncResult<String> asyncResult2 = executor.startProcess(lazyval("test", 300));
asyncResult3=executor.startProcess(lazyval(50L,700))
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
AsyncResult<Long> asyncResult3 = executor.startProcess(lazyval(50L, 700));
asyncResult4=executor.startProcess(lazyval(20,400),callback("Callback result 4"))
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
AsyncResult<Integer> asyncResult4 = executor.startProcess(lazyval(20, 400), callback("Callback result 4"));
asyncResult5=executor.startProcess(lazyval("callback",600),callback("Callback result 5"))
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
AsyncResult<String> asyncResult5 = executor.startProcess(lazyval("callback", 600), callback("Callback result 5"));
result1=executor.endProcess(asyncResult1)
Integer result1 = executor.endProcess(asyncResult1);
result2=executor.endProcess(asyncResult2)
String result2 = executor.endProcess(asyncResult2);
result3=executor.endProcess(asyncResult3)
Long result3 = executor.endProcess(asyncResult3);
CompletableResult<T> result = new CompletableResult<>(callback);
String[] args = {};
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(task,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(task, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
final Object result = new Object();
task=mock(Callable.class)
final Callable<Object> task = mock(Callable.class);
final Callable<Object> task = mock(Callable.class);
asyncResult=executor.startProcess(task)
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final AsyncResult<Object> asyncResult = executor.startProcess(task);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null)
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final AsyncResult<Object> asyncResult = executor.startProcess(null);
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
callback=mock(AsyncCallback.class)
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
final AsyncCallback<Object> callback = mock(AsyncCallback.class);
asyncResult=executor.startProcess(null,callback)
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
final AsyncResult<Object> asyncResult = executor.startProcess(null, callback);
optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class)
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor.forClass((Class) Optional.class);
optionalException=optionalCaptor.getValue()
final Optional<Exception> optionalException = optionalCaptor.getValue();
final Optional<Exception> optionalException = optionalCaptor.getValue();
exception=optionalException.get()
final Exception exception = optionalException.get();
final ThreadAsyncExecutor executor = new ThreadAsyncExecutor();
asyncResult=executor.startProcess(null,null)
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
final AsyncResult<Object> asyncResult = executor.startProcess(null, null);
BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());
FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());
SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());
String[] args = {};
excalibur=spy(new Excalibur())
final Excalibur excalibur = spy(new Excalibur());
final BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(excalibur);
mjollnir=spy(new Mjollnir())
final Mjollnir mjollnir = spy(new Mjollnir());
final FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(mjollnir);
stormbringer=spy(new Stormbringer())
final Stormbringer stormbringer = spy(new Stormbringer());
final SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(stormbringer);
mage=new HeroBuilder(Profession.MAGE,"Riobard").withHairColor(HairColor.BLACK).withWeapon(Weapon.DAGGER).build()
Hero mage =
        new HeroBuilder(Profession.MAGE, "Riobard").withHairColor(HairColor.BLACK)
            .withWeapon(Weapon.DAGGER).build();
warrior=new HeroBuilder(Profession.WARRIOR,"Amberjill").withHairColor(HairColor.BLOND).withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).build()
Hero warrior =
        new HeroBuilder(Profession.WARRIOR, "Amberjill").withHairColor(HairColor.BLOND)
            .withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD)
            .build();
thief=new HeroBuilder(Profession.THIEF,"Desmond").withHairType(HairType.BALD).withWeapon(Weapon.BOW).build()
Hero thief =
        new HeroBuilder(Profession.THIEF, "Desmond").withHairType(HairType.BALD)
            .withWeapon(Weapon.BOW).build();
StringBuilder sb = new StringBuilder();
String[] args = {};
final String heroName = "Sir Lancelot";
hero=new Hero.HeroBuilder(Profession.WARRIOR,heroName).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD).withHairType(HairType.LONG_CURLY).withHairColor(HairColor.BLOND).build()
final Hero hero = new Hero.HeroBuilder(Profession.WARRIOR, heroName)
        .withArmor(Armor.CHAIN_MAIL)
        .withWeapon(Weapon.SWORD)
        .withHairType(HairType.LONG_CURLY)
        .withHairColor(HairColor.BLOND)
        .build();
BusinessDelegate businessDelegate = new BusinessDelegate();
BusinessLookup businessLookup = new BusinessLookup();
Client client = new Client(businessDelegate);
String[] args = {};
Client client = new Client(businessDelegate);
App app = new App();
UserAccount userAccount1 = new UserAccount("001", "John", "He is a boy.");
UserAccount userAccount2 = new UserAccount("002", "Jane", "She is a girl.");
UserAccount userAccount3 = new UserAccount("003", "Adam", "He likes food.");
UserAccount userAccount4 = new UserAccount("004", "Rita", "She hates cats.");
UserAccount userAccount5 = new UserAccount("005", "Isaac", "He is allergic to mustard.");
UserAccount userAccount6 = new UserAccount("006", "Yasha", "She is an only child.");
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
userAccount=DbManager.readFromDb(userId)
UserAccount userAccount = DbManager.readFromDb(userId);
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
toBeWrittenToDb=cache.getLruData()
UserAccount toBeWrittenToDb = cache.getLruData();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
listOfUserAccounts=cache.getCacheDataInListForm()
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();
StringBuilder sb = new StringBuilder();
iterable=db.getCollection("user_accounts").find(new Document("userID",userId))
FindIterable<Document> iterable =
        db.getCollection("user_accounts").find(new Document("userID", userId));
doc=iterable.first()
Document doc = iterable.first();
node=cache.get(userId)
Node node = cache.get(userId);
old=cache.get(userId)
Node old = cache.get(userId);
Node newNode = new Node(userId, userAccount);
toBeRemoved=cache.get(userId)
Node toBeRemoved = cache.get(userId);
ArrayList<UserAccount> listOfCacheData = new ArrayList<>();
Node temp = head;
String[] args = {};
Task task = new SimpleTask();
Callback callback = new Callback() {
      @Override
      public void call() {
        System.out.println("I'm done now.");
      }
    };
Task task = new SimpleTask();
Callback c = () -> System.out.println("I'm done now.");
    task.executeWith(c);
  
String[] args = {};
Callback callback = new Callback() {
      @Override
      public void call() {
        callingCount++;
      }
    };
Task task = new SimpleTask();
Callback callback = () -> callingCount++;

    Task task = new SimpleTask();

    assertEquals("Initial calling count of 0", new Integer(0), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called once", new Integer(1), callingCount);

    task.executeWith(callback);

    assertEquals("Callback called twice", new Integer(2), callingCount);

  
OrcKing king = new OrcKing();
String[] args = {};
final OrcKing king = new OrcKing();
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
temp=target.getSize()
Size temp = target.getSize();
previousSpell=undoStack.pollLast()
Command previousSpell = undoStack.pollLast();
previousSpell=redoStack.pollLast()
Command previousSpell = redoStack.pollLast();
String[] args = {};
Wizard wizard = new Wizard();
Goblin goblin = new Goblin();
orcMessage=new Messenger().messageFromOrcs()
LetterComposite orcMessage = new Messenger().messageFromOrcs();
elfMessage=new Messenger().messageFromElves()
LetterComposite elfMessage = new Messenger().messageFromElves();
List<Word> words = new ArrayList<>();
List<Word> words = new ArrayList<>();
String[] args = {};
final Messenger messenger = new Messenger();
final Messenger messenger = new Messenger();
words=message.split(" ")
final String[] words = message.split(" ");
final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());
final Customer customer = new Customer(4, "Dan", "Danson");
final Customer customer1 = new Customer(1, "Adam", "Adamson");
final Customer customer2 = new Customer(2, "Bob", "Bobson");
final Customer customer3 = new Customer(3, "Carl", "Carlson");
final List<Customer> customers = new ArrayList<>();
boolean isEqual = false;
final Customer customer = (Customer) o;
Customer customer = null;
index=getAllCustomers().indexOf(customer)
final int index = getAllCustomers().indexOf(customer);
String[] args = {};
final Customer nonExistingCustomer = new Customer(2, "Robert", "Englund");
final String newFirstname = "Bernard";
final String newLastname = "Montgomery";
final Customer customer = new Customer(CUSTOMER.getId(), newFirstname, newLastname);
cust=impl.getCustomerById(CUSTOMER.getId())
final Customer cust = impl.getCustomerById(CUSTOMER.getId());
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final String newFirstname = "Douglas";
final String newLastname = "MacArthur";
final Customer customer = new Customer(nonExistingId, newFirstname, newLastname);
existingCustomer=impl.getCustomerById(CUSTOMER.getId())
final Customer existingCustomer = impl.getCustomerById(CUSTOMER.getId());
final Customer newCustomer = new Customer(3, "George", "Patton");
final Customer newCustomer = new Customer(3, "George", "Patton");
nonExistingId=getNonExistingCustomerId()
final int nonExistingId = getNonExistingCustomerId();
final int newId = 2;
final String newFirstname = "Bill";
final String newLastname = "Clinton";
final int newId = 2;
final Customer otherCustomer = new Customer(newId, FIRSTNAME, LASTNAME);
final Customer otherCustomer = new Customer(ID, FIRSTNAME, LASTNAME);
final StringBuffer buffer = new StringBuffer();
Hostile troll = new Troll();
Hostile smart = new SmartHostile(troll);
String[] args = {};
simpleTroll=spy(new Troll())
final Hostile simpleTroll = spy(new Troll());
final Hostile smartTroll = new SmartHostile(simpleTroll);
final Troll troll = new Troll();
PrinterController hpPrinterController = new PrinterController(new HpPrinter());
PrinterController canonPrinterController = new PrinterController(new CanonPrinter());
PrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());
String[] args = {};
PrinterController printerController = new PrinterController(new CanonPrinter());
PrinterController printerController = new PrinterController(new HpPrinter());
PrinterController printerController = new PrinterController(new EpsonPrinter());
SimpleWizard simpleWizard = new SimpleWizard();
AdvancedWizard advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());
injector=Guice.createInjector(new TobaccoModule())
Injector injector = Guice.createInjector(new TobaccoModule());
guiceWizard=injector.getInstance(GuiceWizard.class)
GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final AdvancedWizard advancedWizard = new AdvancedWizard(tobacco);
String[] args = {};
final Tobacco[] tobaccos = {
        new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()
    };
final GuiceWizard guiceWizard = new GuiceWizard(tobacco);
@SuppressWarnings("unchecked")
    final Class<? extends Tobacco>[] tobaccos = new Class[]{
        OldTobyTobacco.class, RivendellTobacco.class, SecondBreakfastTobacco.class
    };
injector=Guice.createInjector(new AbstractModule(){
  @Override protected void configure(){
    bind(Tobacco.class).to(tobaccoClass);
  }
}
)
final Injector injector = Guice.createInjector(new AbstractModule() {
        @Override
        protected void configure() {
          bind(Tobacco.class).to(tobaccoClass);
        }
      });
guiceWizard=injector.getInstance(GuiceWizard.class)
final GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);
final SimpleWizard simpleWizard = new SimpleWizard();
final Inventory inventory = new Inventory(1000);
executorService=Executors.newFixedThreadPool(3)
ExecutorService executorService = Executors.newFixedThreadPool(3);
String[] args = {};
final Inventory inventory = new Inventory(INVENTORY_SIZE);
executorService=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);
items=inventory.getItems()
final List<Item> items = inventory.getItems();
final List<Item> items = inventory.getItems();
stdOutCaptor=ArgumentCaptor.forClass(String.class)
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);
values=stdOutCaptor.getAllValues()
final List<String> values = stdOutCaptor.getAllValues();
final List<String> values = stdOutCaptor.getAllValues();
List<GameObject> objects = new ArrayList<>();
String[] args = {};
tested=getTestedObject()
final O tested = getTestedObject();
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectTargetOnFire 
        ? "Expected [" + targetName + "] to be on fire after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be on fire after colliding with [" + otherName + "] but it was!";
targetName=target.getClass().getSimpleName()
final String targetName = target.getClass().getSimpleName();
otherName=other.getClass().getSimpleName()
final String otherName = other.getClass().getSimpleName();
final String errorMessage = expectedDamage
        ? "Expected [" + targetName + "] to be damaged after colliding with [" + otherName + "] but it was not!" 
        : "Expected [" + targetName + "] not to be damaged after colliding with [" + otherName + "] but it was!";
final FlamingAsteroid asteroid = new FlamingAsteroid(1, 2, 3, 4);
final Meteoroid meteoroid = new Meteoroid(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final Rectangle rectangle = new Rectangle(1, 2, 3, 4);
final SpaceStationIss iss = new SpaceStationIss(1, 2, 3, 4);
final SpaceStationMir mir = new SpaceStationMir(1, 2, 3, 4);
KingJoffrey kingJoffrey = new KingJoffrey();
KingsHand kingsHand = new KingsHand(kingJoffrey);
List<EventEmitter> emitters = new ArrayList<>();
String[] args = {};
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithoutDefaultObserver.get()
final E emitter = this.factoryWithoutDefaultObserver.get();
defaultObserver=mock(EventObserver.class)
final EventObserver defaultObserver = mock(EventObserver.class);
observer1=mock(EventObserver.class)
final EventObserver observer1 = mock(EventObserver.class);
observer2=mock(EventObserver.class)
final EventObserver observer2 = mock(EventObserver.class);
emitter=this.factoryWithDefaultObserver.apply(defaultObserver)
final E emitter = this.factoryWithDefaultObserver.apply(defaultObserver);
toString=event.toString()
final String toString = event.toString();
final KingJoffrey kingJoffrey = new KingJoffrey();
final String expectedMessage = "Received event from the King's Hand: " + event.toString();
observer=mock(EventObserver.class)
final EventObserver observer = mock(EventObserver.class);
final KingsHand kingsHand = new KingsHand(observer);
toString=weekday.toString()
final String toString = weekday.toString();
EventDispatcher dispatcher = new EventDispatcher();
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = (UserCreatedEvent) message;
UserUpdatedEvent userUpdatedEvent = (UserUpdatedEvent) message;
String[] args = {};
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
dispatcher=spy(new EventDispatcher())
EventDispatcher dispatcher = spy(new EventDispatcher());
userCreatedEventHandler=spy(new UserCreatedEventHandler())
UserCreatedEventHandler userCreatedEventHandler = spy(new UserCreatedEventHandler());
userUpdatedEventHandler=spy(new UserUpdatedEventHandler())
UserUpdatedEventHandler userUpdatedEventHandler = spy(new UserUpdatedEventHandler());
User user = new User("iluwatar");
UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);
UserUpdatedEvent userUpdatedEvent = new UserUpdatedEvent(user);
FileWriter writer = new FileWriter(filename);
String[] args = {};
File file = new File("testfile.txt");
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
final File nonExistingFile = new File(this.testFolder.getRoot(), "non-existing-file");
final String testMessage = "Test message";
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
temporaryFile=this.testFolder.newFile()
final File temporaryFile = this.testFolder.newFile();
DwarvenGoldmineFacade facade = new DwarvenGoldmineFacade();
String[] args = {};
final DwarvenGoldmineFacade goldMine = new DwarvenGoldmineFacade();
WeaponFactory factory = WeaponFactory.factory(builder -> {
      builder.add(WeaponType.SWORD, Sword::new);
      builder.add(WeaponType.AXE, Axe::new);
      builder.add(WeaponType.SPEAR, Spear::new);
      builder.add(WeaponType.BOW, Bow::new);
    });
    Weapon axe = factory.create(WeaponType.AXE);
    System.out.println(axe);
  
HashMap<WeaponType, Supplier<Weapon>> map = new HashMap<>();
String[] args = {};
weapon=factory.create(WeaponType.SPEAR)
Weapon weapon = factory.create(WeaponType.SPEAR);
weapon=factory.create(WeaponType.AXE)
Weapon weapon = factory.create(WeaponType.AXE);
weapon=factory.create(WeaponType.SWORD)
Weapon weapon = factory.create(WeaponType.SWORD);
App app = new App(new OrcBlacksmith());
Weapon weapon;
String[] args = {};
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
Blacksmith blacksmith = new OrcBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.AXE)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.AXE);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);
Blacksmith blacksmith = new ElfBlacksmith();
weapon=blacksmith.manufactureWeapon(WeaponType.SPEAR)
Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties turnedOff = new Properties();
Service turnedOffService = new PropertiesFeatureToggleVersion(turnedOff);
welcomeMessageturnedOff=turnedOffService.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessageturnedOff = turnedOffService.getWelcomeMessage(new User("Jamie No Code"));
final User paidUser = new User("Jamie Coder");
final User freeUser = new User("Alan Defect");
welcomeMessagePaidUser=service.getWelcomeMessage(paidUser)
final String welcomeMessagePaidUser = service.getWelcomeMessage(paidUser);
welcomeMessageFreeUser=service.getWelcomeMessage(freeUser)
final String welcomeMessageFreeUser = service.getWelcomeMessage(freeUser);
final Properties properties = new Properties();
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
final Properties properties = new Properties();
Service service = new PropertiesFeatureToggleVersion(properties);
welcomeMessage=service.getWelcomeMessage(new User("Jamie No Code"))
final String welcomeMessage = service.getWelcomeMessage(new User("Jamie No Code"));
welcomeMessage=service.getWelcomeMessage(paidUser)
final String welcomeMessage = service.getWelcomeMessage(paidUser);
final String expected = "You're amazing Jamie Coder. Thanks for paying for this awesome software.";
welcomeMessage=service.getWelcomeMessage(freeUser)
final String welcomeMessage = service.getWelcomeMessage(freeUser);
final String expected = "I suppose you can use this software.";
User user = new User("Free User");
User user = new User("Paid User");
User user = new User("Paid User");
User user = new User("Free User");
List<Integer> integerList = new ArrayList<>();
firstFiveNegatives=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList()
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
List<Integer> firstFiveNegatives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();
lastTwoPositives=SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList()
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
List<Integer> lastTwoPositives =
        SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();
transformedList=SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString()).asList()
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
List<String> transformedList =
        SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())
            .asList();
lastTwoOfFirstFourStringMapped=LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2).map(number-- > "String[" + valueOf(number) + "]").asList()
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
List<String> lastTwoOfFirstFourStringMapped =
        LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)
            .map(number -> "String[" + valueOf(number) + "]").asList();
StringJoiner joiner = new StringJoiner(delimiter, prefix, ".");
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
ArrayList<E> copy = new ArrayList<>();
iterator=iterable.iterator()
Iterator<E> iterator = iterable.iterator();
Iterator<E> iterator = iterable.iterator();
final E result = next;
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
candidate=fromIterator.next()
E candidate = fromIterator.next();
resultIterator=last(1).iterator()
Iterator<E> resultIterator = last(1).iterator();
Iterator<E> resultIterator = last(1).iterator();
E candidate = null;
newIterator=iterable.iterator()
Iterator<E> newIterator = iterable.iterator();
candidate=oldTypeIterator.next()
E candidate = oldTypeIterator.next();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
nextElement=iterator.next()
E nextElement = iterator.next();
resultIterator=first(1).iterator()
Iterator<E> resultIterator = first(1).iterator();
Iterator<E> resultIterator = first(1).iterator();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentCount = 0;
list=last(1).asList()
List<E> list = last(1).asList();
List<E> list = last(1).asList();
remainingElementsCount=getRemainingElementsCount()
int remainingElementsCount = getRemainingElementsCount();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
int currentIndex = 0;
List<T> temporaryList = new ArrayList<>();
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
copy=FluentIterable.copyToList(iterable)
List<E> copy = FluentIterable.copyToList(iterable);
List<E> copy = FluentIterable.copyToList(iterable);
int counter = 0;
iterator=iterator()
Iterator<E> iterator = iterator();
Iterator<E> iterator = iterator();
List<E> copy = new ArrayList<>();
String[] args = {};
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
first=createFluentIterable(integers).first()
final Optional<Integer> first = createFluentIterable(integers).first();
final Optional<Integer> first = createFluentIterable(integers).first();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
first4=createFluentIterable(integers).first(4).asList()
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
final List<Integer> first4 = createFluentIterable(integers)
            .first(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Collections.<Integer>emptyList()
final List<Integer> integers = Collections.<Integer>emptyList();
final List<Integer> integers = Collections.<Integer>emptyList();
last=createFluentIterable(integers).last()
final Optional<Integer> last = createFluentIterable(integers).last();
final Optional<Integer> last = createFluentIterable(integers).last();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
last4=createFluentIterable(integers).last(4).asList()
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
final List<Integer> last4 = createFluentIterable(integers)
            .last(4)
            .asList();
integers=Arrays.asList(1,2,3,10,9,8)
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);
evenItems=createFluentIterable(integers).filter(i-- > i % 2 == 0).asList()
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
final List<Integer> evenItems = createFluentIterable(integers)
            .filter(i -> i % 2 == 0)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
longs=createFluentIterable(integers).map(Integer).asList()
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
final List<Long> longs = createFluentIterable(integers)
            .map(Integer::longValue)
            .asList();
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
consumer=mock(Consumer.class)
final Consumer<Integer> consumer = mock(Consumer.class);
final Consumer<Integer> consumer = mock(Consumer.class);
integers=Arrays.asList(1,2,3)
final List<Integer> integers = Arrays.asList(1, 2, 3);
final List<Integer> integers = Arrays.asList(1, 2, 3);
split=createFluentIterable(integers).spliterator()
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
final Spliterator<Integer> split = createFluentIterable(integers).spliterator();
MenuStore menuStore = new MenuStore();
ContentStore contentStore = new ContentStore();
MenuView menuView = new MenuView();
ContentView contentView = new ContentView();
ContentAction contentAction = (ContentAction) action;
MenuAction menuAction = (MenuAction) action;
ContentStore contentStore = (ContentStore) store;
MenuStore menuStore = (MenuStore) store;
toString=content.toString()
final String toString = content.toString();
toString=menuItem.toString()
final String toString = menuItem.toString();
String[] args = {};
final Constructor<Dispatcher> constructor;
final Constructor<Dispatcher> constructor;
field=Dispatcher.class.getDeclaredField("instance")
final Field field = Dispatcher.class.getDeclaredField("instance");
dispatcher=Dispatcher.getInstance()
final Dispatcher dispatcher = Dispatcher.getInstance();
store=mock(Store.class)
final Store store = mock(Store.class);
actionCaptor=ArgumentCaptor.forClass(Action.class)
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
final ArgumentCaptor<Action> actionCaptor = ArgumentCaptor.forClass(Action.class);
actions=actionCaptor.getAllValues()
final List<Action> actions = actionCaptor.getAllValues();
final List<Action> actions = actionCaptor.getAllValues();
menuActions=actions.stream().filter(a-- > a.getType().equals(ActionType.MENU_ITEM_SELECTED)).map(a-- > (MenuAction)a).collect(Collectors.toList())
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
final List<MenuAction> menuActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))
            .map(a -> (MenuAction) a)
            .collect(Collectors.toList());
contentActions=actions.stream().filter(a-- > a.getType().equals(ActionType.CONTENT_CHANGED)).map(a-- > (ContentAction)a).collect(Collectors.toList())
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final List<ContentAction> contentActions = actions.stream()
            .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))
            .map(a -> (ContentAction) a)
            .collect(Collectors.toList());
final ContentStore contentStore = new ContentStore();
view=mock(View.class)
final View view = mock(View.class);
final MenuStore menuStore = new MenuStore();
view=mock(View.class)
final View view = mock(View.class);
store=mock(ContentStore.class)
final ContentStore store = mock(ContentStore.class);
final ContentView view = new ContentView();
store=mock(MenuStore.class)
final MenuStore store = mock(MenuStore.class);
final MenuView view = new MenuView();
store=mock(Store.class)
final Store store = mock(Store.class);
final MenuView view = new MenuView();
PotionFactory factory = new PotionFactory();
AlchemistShop alchemistShop = new AlchemistShop();
potion=potions.get(type)
Potion potion = potions.get(type);
final AlchemistShop shop = new AlchemistShop();
bottomShelf=shop.getBottomShelf()
final List<Potion> bottomShelf = shop.getBottomShelf();
final List<Potion> bottomShelf = shop.getBottomShelf();
topShelf=shop.getTopShelf()
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> topShelf = shop.getTopShelf();
final List<Potion> allPotions = new ArrayList<>();
String[] args = {};
FrontController controller = new FrontController();
command=getCommand(request)
Command command = getCommand(request);
commandClass=getCommandClass(request)
Class commandClass = getCommandClass(request);
Class result;
final Exception cause = new Exception();
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final FrontController frontController = new FrontController();
final List<Object[]> parameters = new ArrayList<>();
final List<Object[]> parameters = new ArrayList<>();
AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final Object result = new Object();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IOException exception = new IOException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());
task=mock(AsyncTask.class)
final AsyncTask<Object> task = mock(AsyncTask.class);
final AsyncTask<Object> task = mock(AsyncTask.class);
final IllegalStateException exception = new IllegalStateException();
inOrder=inOrder(task)
final InOrder inOrder = inOrder(task);
Filter last = this;
String result = super.execute(order);
FilterManager filterManager = new FilterManager();
Client client = new Client();
JPanel panel = new JPanel();
Order order =
            new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),
                jtFields[2].getText(), jtAreas[1].getText());
rootPane=SwingUtilities.getRootPane(processButton)
JRootPane rootPane = SwingUtilities.getRootPane(processButton);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
String result = super.execute(order);
JPanel bot = new JPanel();
rootPane=SwingUtilities.getRootPane(del)
JRootPane rootPane = SwingUtilities.getRootPane(del);
temp=jt.getSelectedRow()
int temp = jt.getSelectedRow();
temp2=jt.getSelectedRowCount()
int temp2 = jt.getSelectedRowCount();
String[] args = {};
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
target=mock(Target.class)
final Target target = mock(Target.class);
final FilterManager filterManager = new FilterManager();
filter=mock(Filter.class)
final Filter filter = mock(Filter.class);
order=mock(Order.class)
final Order order = mock(Order.class);
final List<Object[]> testData = new ArrayList<>();
result=this.filter.execute(this.order)
final String result = this.filter.execute(this.order);
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
final Order order = new Order();
String tokenString = "4 3 2 - 1 + *";
Stack<Expression> stack = new Stack<>();
tokenList=tokenString.split(" ")
String[] tokenList = tokenString.split(" ");
rightExpression=stack.pop()
Expression rightExpression = stack.pop();
leftExpression=stack.pop()
Expression leftExpression = stack.pop();
operator=getOperatorInstance(s,leftExpression,rightExpression)
Expression operator = getOperatorInstance(s, leftExpression, rightExpression);
result=operator.interpret()
int result = operator.interpret();
NumberExpression resultExpression = new NumberExpression(result);
Expression i = new NumberExpression(s);
String[] args = {};
final List<Object[]> testData = new ArrayList<>();
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expression=this.factory.apply(this.first,this.second)
final E expression = this.factory.apply(this.first, this.second);
expectedValue=getFirst().interpret()
final int expectedValue = getFirst().interpret();
testStingValue=String.valueOf(expectedValue)
final String testStingValue = String.valueOf(expectedValue);
final NumberExpression numberExpression = new NumberExpression(testStingValue);
TreasureChest chest = new TreasureChest();
ringIterator=chest.iterator(ItemType.RING)
ItemIterator ringIterator = chest.iterator(ItemType.RING);
potionIterator=chest.iterator(ItemType.POTION)
ItemIterator potionIterator = chest.iterator(ItemType.POTION);
weaponIterator=chest.iterator(ItemType.WEAPON)
ItemIterator weaponIterator = chest.iterator(ItemType.WEAPON);
it=chest.iterator(ItemType.ANY)
ItemIterator it = chest.iterator(ItemType.ANY);
ArrayList<Item> list = new ArrayList<>();
items=chest.getItems()
List<Item> items = chest.getItems();
List<Item> items = chest.getItems();
boolean found = false;
int tempIdx = idx;
String[] args = {};
final List<Object[]> parameters = new ArrayList<>();
final TreasureChest chest = new TreasureChest();
iterator=chest.iterator(expectedItem.getType())
final ItemIterator iterator = chest.iterator(expectedItem.getType());
item=iterator.next()
final Item item = iterator.next();
name=item.toString()
final String name = item.toString();
final TreasureChest chest = new TreasureChest();
items=chest.getItems()
final List<Item> items = chest.getItems();
final List<Item> items = chest.getItems();
final boolean sameType = this.expectedItem.getType() == item.getType();
sameName=this.expectedItem.toString().equals(item.toString())
final boolean sameName = this.expectedItem.toString().equals(item.toString());
CakeViewImpl cakeView = new CakeViewImpl(cakeBakingService);
CakeInfo cake1 =
        new CakeInfo(new CakeToppingInfo("candies", 0), Arrays.asList(new CakeLayerInfo(
            "chocolate", 0), new CakeLayerInfo("banana", 0), new CakeLayerInfo("strawberry", 0)));
CakeInfo cake2 =
        new CakeInfo(new CakeToppingInfo("cherry", 0), Arrays.asList(
            new CakeLayerInfo("vanilla", 0), new CakeLayerInfo("lemon", 0), new CakeLayerInfo(
                "strawberry", 0)));
allToppings=getAvailableToppingEntities()
List<CakeTopping> allToppings = getAvailableToppingEntities();
List<CakeTopping> allToppings = getAvailableToppingEntities();
matchingToppings=allToppings.stream().filter((t)-- > t.getName().equals(cakeInfo.cakeToppingInfo.name)).collect(Collectors.toList())
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
List<CakeTopping> matchingToppings =
        allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name))
            .collect(Collectors.toList());
allLayers=getAvailableLayerEntities()
List<CakeLayer> allLayers = getAvailableLayerEntities();
List<CakeLayer> allLayers = getAvailableLayerEntities();
Set<CakeLayer> foundLayers = new HashSet<>();
found=allLayers.stream().filter((layer)-- > layer.getName().equals(info.name)).findFirst()
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
Optional<CakeLayer> found =
          allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();
toppingBean=context.getBean(CakeToppingDao.class)
CakeToppingDao toppingBean = context.getBean(CakeToppingDao.class);
topping=toppingBean.findOne(matchingToppings.iterator().next().getId())
CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().getId());
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
Cake cake = new Cake();
layerBean=context.getBean(CakeLayerDao.class)
CakeLayerDao layerBean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeTopping> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
topping=iterator.next()
CakeTopping topping = iterator.next();
bean=context.getBean(CakeToppingDao.class)
CakeToppingDao bean = context.getBean(CakeToppingDao.class);
List<CakeToppingInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeTopping> iterator = bean.findAll().iterator();
Iterator<CakeTopping> iterator = bean.findAll().iterator();
next=iterator.next()
CakeTopping next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayer> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
bean=context.getBean(CakeLayerDao.class)
CakeLayerDao bean = context.getBean(CakeLayerDao.class);
List<CakeLayerInfo> result = new ArrayList<>();
iterator=bean.findAll().iterator()
Iterator<CakeLayer> iterator = bean.findAll().iterator();
Iterator<CakeLayer> iterator = bean.findAll().iterator();
next=iterator.next()
CakeLayer next = iterator.next();
cakeBean=context.getBean(CakeDao.class)
CakeDao cakeBean = context.getBean(CakeDao.class);
List<CakeInfo> result = new ArrayList<>();
iterator=cakeBean.findAll().iterator()
Iterator<Cake> iterator = cakeBean.findAll().iterator();
Iterator<Cake> iterator = cakeBean.findAll().iterator();
cake=iterator.next()
Cake cake = iterator.next();
CakeToppingInfo cakeToppingInfo =
          new CakeToppingInfo(cake.getTopping().getId(), cake.getTopping().getName(), cake
              .getTopping().getCalories());
ArrayList<CakeLayerInfo> cakeLayerInfos = new ArrayList<>();
CakeInfo cakeInfo = new CakeInfo(cake.getId(), cakeToppingInfo, cakeLayerInfos);
int total = cakeToppingInfo != null ? cakeToppingInfo.calories : 0;
String[] args = {};
final CakeBakingException exception = new CakeBakingException();
final String expectedMessage = "message";
final CakeBakingException exception = new CakeBakingException(expectedMessage);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialLayers=service.getAvailableLayers()
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
final List<CakeLayerInfo> initialLayers = service.getAvailableLayers();
availableLayers=service.getAvailableLayers()
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final List<CakeLayerInfo> availableLayers = service.getAvailableLayers();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialToppings=service.getAvailableToppings()
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
final List<CakeToppingInfo> initialToppings = service.getAvailableToppings();
availableToppings=service.getAvailableToppings()
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final List<CakeToppingInfo> availableToppings = service.getAvailableToppings();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeLayerInfo layer3 = new CakeLayerInfo("Layer3", 2000);
allCakes=service.getAllCakes()
final List<CakeInfo> allCakes = service.getAllCakes();
final List<CakeInfo> allCakes = service.getAllCakes();
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final CakeToppingInfo missingTopping = new CakeToppingInfo("Topping1", 1000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo missingLayer = new CakeLayerInfo("Layer2", 2000);
final CakeBakingServiceImpl service = new CakeBakingServiceImpl();
initialCakes=service.getAllCakes()
final List<CakeInfo> initialCakes = service.getAllCakes();
final List<CakeInfo> initialCakes = service.getAllCakes();
final CakeToppingInfo topping1 = new CakeToppingInfo("Topping1", 1000);
final CakeToppingInfo topping2 = new CakeToppingInfo("Topping2", 2000);
final CakeLayerInfo layer1 = new CakeLayerInfo("Layer1", 1000);
final CakeLayerInfo layer2 = new CakeLayerInfo("Layer2", 2000);
final Cake cake = new Cake();
expectedId=Long.valueOf(1234L)
final Long expectedId = Long.valueOf(1234L);
final Cake cake = new Cake();
final CakeTopping expectedTopping = new CakeTopping("DummyTopping", 1000);
final Cake cake = new Cake();
final Set<CakeLayer> expectedLayers = new HashSet<>();
final Cake cake = new Cake();
final Set<CakeLayer> initialLayers = new HashSet<>();
final CakeLayer newLayer = new CakeLayer("layer3", 3000);
final Set<CakeLayer> expectedLayers = new HashSet<>();
final CakeTopping topping = new CakeTopping("topping", 20);
final CakeLayer layer = new CakeLayer("layer", 100);
final Cake cake = new Cake();
final String expected = "id=1234 topping=id=2345 name=topping calories=20 " 
            + "layers=[id=3456 name=layer calories=100]";
final List<CakeLayerInfo> layers = new ArrayList<>();
final List<CakeInfo> cakes = new ArrayList<>();
final CakeInfo cake = new CakeInfo(new CakeToppingInfo("topping", 1000), layers);
bakingService=mock(CakeBakingService.class)
final CakeBakingService bakingService = mock(CakeBakingService.class);
final CakeViewImpl cakeView = new CakeViewImpl(bakingService);
HolderNaive holderNaive = new HolderNaive();
heavy=holderNaive.getHeavy()
Heavy heavy = holderNaive.getHeavy();
HolderThreadSafe holderThreadSafe = new HolderThreadSafe();
another=holderThreadSafe.getHeavy()
Heavy another = holderThreadSafe.getHeavy();
Java8Holder java8Holder = new Java8Holder();
next=java8Holder.getHeavy()
Heavy next = java8Holder.getHeavy();
String[] args = {};
holderField=HolderNaive.class.getDeclaredField("heavy")
final Field holderField = HolderNaive.class.getDeclaredField("heavy");
holderField=HolderThreadSafe.class.getDeclaredField("heavy")
final Field holderField = HolderThreadSafe.class.getDeclaredField("heavy");
holderField=Java8Holder.class.getDeclaredField("heavy")
final Field holderField = Java8Holder.class.getDeclaredField("heavy");
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);
supplierClass=supplier.getClass()
final Class<? extends Supplier> supplierClass = supplier.getClass();
final Class<? extends Supplier> supplierClass = supplier.getClass();
instanceField=supplierClass.getDeclaredField("heavyInstance")
final Field instanceField = supplierClass.getDeclaredField("heavyInstance");
Party party = new PartyImpl();
Hobbit hobbit = new Hobbit();
Wizard wizard = new Wizard();
Rogue rogue = new Rogue();
Hunter hunter = new Hunter();
String[] args = {};
partyMember1=mock(PartyMember.class)
final PartyMember partyMember1 = mock(PartyMember.class);
partyMember2=mock(PartyMember.class)
final PartyMember partyMember2 = mock(PartyMember.class);
final PartyImpl party = new PartyImpl();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
party=mock(Party.class)
final Party party = mock(Party.class);
member=this.memberSupplier.get()
final PartyMember member = this.memberSupplier.get();
memberClass=member.getClass()
final Class<? extends PartyMember> memberClass = member.getClass();
final Class<? extends PartyMember> memberClass = member.getClass();
Stack<StarMemento> states = new Stack<>();
Star star = new Star(StarType.SUN, 10000000, 500000);
StarMementoInternal state = new StarMementoInternal();
StarMementoInternal state = (StarMementoInternal) memento;
String[] args = {};
final Star star = new Star(StarType.SUN, 1, 2);
final Star star = new Star(StarType.SUN, 1, 2);
firstMemento=star.getMemento()
final StarMemento firstMemento = star.getMemento();
secondMemento=star.getMemento()
final StarMemento secondMemento = star.getMemento();
thirdMemento=star.getMemento()
final StarMemento thirdMemento = star.getMemento();
CamelContext context = new DefaultCamelContext();
String[] args = {};
GiantModel giant = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
GiantView view = new GiantView();
GiantController controller = new GiantController(giant, view);
String[] args = {};
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
view=mock(GiantView.class)
final GiantView view = mock(GiantView.class);
final GiantController controller = new GiantController(model, view);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantModel model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);
final GiantView view = new GiantView();
model=mock(GiantModel.class)
final GiantModel model = mock(GiantModel.class);
FileLoader loader = new FileLoader();
FileSelectorJFrame jFrame = new FileSelectorJFrame();
FileSelectorPresenter presenter = new FileSelectorPresenter(jFrame);
BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)));
StringBuilder sb = new StringBuilder();
String line;
JScrollPane pane = new JScrollPane(area);
data=loader.loadData()
String data = loader.loadData();
String[] args = {};
final FileLoader fileLoader = new FileLoader();
String expectedFile = "Stamatis";
User user = new User("user", 24, Sex.FEMALE, "foobar.com");
IllegalStateException e = new IllegalStateException();
String[] args = {};
User tom = new User(null, 21, Sex.MALE, "tom@foo.bar");
User john = new User("John", 17, Sex.MALE, "john@qwe.bar");
User sarah = new User("Sarah", 42, Sex.FEMALE, "sarah@det.org");
validated=Validator.of(sarah).validate(getName,Objects,"name cannot be null").validate(User,age-- > age > 21,"user is underaged").validate(User,sex-- > sex == Sex.FEMALE,"user is not female").validate(User,email-- > email.contains("@"),"email does not contain @ sign").get()
User validated = Validator.of(sarah).validate(User::getName, Objects::nonNull, "name cannot be null")
        .validate(User::getAge, age -> age > 21, "user is underaged")
        .validate(User::getSex, sex -> sex == Sex.FEMALE, "user is not female")
        .validate(User::getEmail, email -> email.contains("@"), "email does not contain @ sign")
        .get();
LoadBalancer loadBalancer1 = new LoadBalancer();
LoadBalancer loadBalancer2 = new LoadBalancer();
server=servers.get(lastServedId++)
Server server = servers.get(lastServedId++);
String[] args = {};
final LoadBalancer firstBalancer = new LoadBalancer();
final LoadBalancer secondBalancer = new LoadBalancer();
server=mock(Server.class)
final Server server = mock(Server.class);
final LoadBalancer loadBalancer = new LoadBalancer();
final Request request = new Request("test");
String[] args = {};
nazgul=Nazgul.getInstance(name)
final Nazgul nazgul = Nazgul.getInstance(name);
obj=container.newTransientInstance(SimpleObject.class)
final SimpleObject obj = container.newTransientInstance(SimpleObject.class);
final SimpleObject simpleObject = new SimpleObject();
seq=context.sequence("create")
final Sequence seq = context.sequence("create");
obj=simpleObjects.create("Foobar")
final SimpleObject obj = simpleObjects.create("Foobar");
all=Lists.newArrayList()
final List<SimpleObject> all = Lists.newArrayList();
list=simpleObjects.listAll()
final List<SimpleObject> list = simpleObjects.listAll();
final List<SimpleObject> list = simpleObjects.listAll();
String name = "Foobar";
paramName=checkParam("name",ec,String.class)
String paramName = checkParam("name", ec, String.class);
paramNumber=defaultParam("number",ec,3)
final int paramNumber = defaultParam("number", ec, 3);
fs=new SimpleObjectCreate().setName(names.get(i))
final SimpleObjectCreate fs = new SimpleObjectCreate().setName(names.get(i));
isft=IsisSystemForTest.getElseNull()
IsisSystemForTest isft = IsisSystemForTest.getElseNull();
final IsisConfigurationForJdoIntegTests testConfiguration =
          new IsisConfigurationForJdoIntegTests();
findAll=service(SimpleObjects.class).listAll()
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
final List<SimpleObject> findAll = service(SimpleObjects.class).listAll();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
name=simpleObjectWrapped.getName()
final String name = simpleObjectWrapped.getName();
title=container.titleOf(simpleObjectWrapped)
final String title = container.titleOf(simpleObjectWrapped);
RecreateSimpleObjects fs = new RecreateSimpleObjects();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
simpleObject=wrap(all.get(0))
SimpleObject simpleObject = wrap(all.get(0));
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
all=wrap(simpleObjects).listAll()
final List<SimpleObject> all = wrap(simpleObjects).listAll();
final List<SimpleObject> all = wrap(simpleObjects).listAll();
FixtureScript fs = new SimpleObjectsTearDown();
causalChain=Throwables.getCausalChain(item)
final List<Throwable> causalChain = Throwables.getCausalChain(item);
final List<Throwable> causalChain = Throwables.getCausalChain(item);
settings=Bootstrap.getSettings()
IBootstrapSettings settings = Bootstrap.getSettings();
final AuthenticatedWebSessionForIsis s =
        (AuthenticatedWebSessionForIsis) super.newSession(request, response);
requestParameters=request.getRequestParameters()
IRequestParameters requestParameters = request.getRequestParameters();
user=requestParameters.getParameterValue("user")
final org.apache.wicket.util.string.StringValue user =
        requestParameters.getParameterValue("user");
password=requestParameters.getParameterValue("pass")
final org.apache.wicket.util.string.StringValue password =
        requestParameters.getParameterValue("pass");
uname=servletRequest.getParameter("user")
String uname = servletRequest.getParameter("user");
final Module isisDefaults = super.newIsisWicketModule();
final Module overrides = new AbstractModule() {
      @Override
      protected void configure() {
        bind(String.class).annotatedWith(Names.named("applicationName")).toInstance("Simple App");
        bind(String.class).annotatedWith(Names.named("applicationCss")).toInstance(
            "css/application.css");
        bind(String.class).annotatedWith(Names.named("applicationJs")).toInstance(
            "scripts/application.js");
        bind(String.class).annotatedWith(Names.named("welcomeMessage")).toInstance(
            readLines(getClass(), "welcome.html"));
        bind(String.class).annotatedWith(Names.named("aboutMessage")).toInstance("Simple App");
        bind(InputStream.class).annotatedWith(Names.named("metaInfManifest")).toProvider(
            Providers.of(getServletContext().getResourceAsStream("/META-INF/MANIFEST.MF")));
      }
    };
readLines=Resources.readLines(Resources.getResource(contextClass,resourceName),Charset.defaultCharset())
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
List<String> readLines =
          Resources.readLines(Resources.getResource(contextClass, resourceName),
              Charset.defaultCharset());
Node root =
        new NodeImpl("1", new NodeImpl("11", new NodeImpl("111", NullNode.getInstance(),
            NullNode.getInstance()), NullNode.getInstance()), new NodeImpl("12",
            NullNode.getInstance(), new NodeImpl("122", NullNode.getInstance(),
                NullNode.getInstance())));
String[] args = {};
instance=NullNode.getInstance()
final NullNode instance = NullNode.getInstance();
node=NullNode.getInstance()
final NullNode node = NullNode.getInstance();
final NodeImpl level1B = new NodeImpl("level1_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2B = new NodeImpl("level2_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3A = new NodeImpl("level3_a", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level3B = new NodeImpl("level3_b", NullNode.getInstance(), NullNode.getInstance());
final NodeImpl level2A = new NodeImpl("level2_a", level3A, level3B);
final NodeImpl level1A = new NodeImpl("level1_a", level2A, level2B);
inOrder=Mockito.inOrder(getStdOutMock())
final InOrder inOrder = Mockito.inOrder(getStdOutMock());
level1=TREE_ROOT.getLeft()
final Node level1 = TREE_ROOT.getLeft();
level2=level1.getLeft()
final Node level2 = level1.getLeft();
level3=level2.getLeft()
final Node level3 = level2.getLeft();
level1=TREE_ROOT.getRight()
final Node level1 = TREE_ROOT.getRight();
OliphauntPool pool = new OliphauntPool();
oliphaunt1=pool.checkOut()
Oliphaunt oliphaunt1 = pool.checkOut();
oliphaunt2=pool.checkOut()
Oliphaunt oliphaunt2 = pool.checkOut();
oliphaunt3=pool.checkOut()
Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunt5=pool.checkOut()
Oliphaunt oliphaunt5 = pool.checkOut();
instance=available.iterator().next()
T instance = available.iterator().next();
String[] args = {};
final OliphauntPool pool = new OliphauntPool();
expectedOliphaunt=pool.checkOut()
final Oliphaunt expectedOliphaunt = pool.checkOut();
oliphaunt=pool.checkOut()
final Oliphaunt oliphaunt = pool.checkOut();
final OliphauntPool pool = new OliphauntPool();
firstOliphaunt=pool.checkOut()
final Oliphaunt firstOliphaunt = pool.checkOut();
secondOliphaunt=pool.checkOut()
final Oliphaunt secondOliphaunt = pool.checkOut();
oliphaunt3=pool.checkOut()
final Oliphaunt oliphaunt3 = pool.checkOut();
oliphaunt4=pool.checkOut()
final Oliphaunt oliphaunt4 = pool.checkOut();
oliphaunts=Arrays.asList(pool.checkOut(),pool.checkOut())
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());
Weather weather = new Weather();
GWeather gWeather = new GWeather();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
enumValues=WeatherType.values()
WeatherType[] enumValues = WeatherType.values();
String[] args = {};
final ArrayList<Object[]> testData = new ArrayList<>();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
observer=mock(Race.class)
final Race observer = mock(Race.class);
final GWeather weather = new GWeather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
observer=this.factory.get()
final O observer = this.factory.get();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
final ArrayList<Object[]> testData = new ArrayList<>();
observer=this.factory.get()
final O observer = this.factory.get();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
observer=mock(WeatherObserver.class)
final WeatherObserver observer = mock(WeatherObserver.class);
final Weather weather = new Weather();
inOrder=inOrder(observer,getStdOutMock())
final InOrder inOrder = inOrder(observer, getStdOutMock());
weatherTypes=WeatherType.values()
final WeatherType[] weatherTypes = WeatherType.values();
MessageQueue queue = new SimpleMessageQueue(10000);
final Producer producer = new Producer("PRODUCER_1", queue);
final Consumer consumer = new Consumer("CONSUMER_1", queue);
Message msg;
sender=msg.getHeader(Headers.SENDER)
String sender = msg.getHeader(Headers.SENDER);
body=msg.getBody()
String body = msg.getBody();
Message msg = new SimpleMessage();
String[] args = {};
final Message[] messages = new Message[]{
        createMessage("you", "Hello!"),
        createMessage("me", "Hi!"),
        Message.POISON_PILL,
        createMessage("late_for_the_party", "Hello? Anyone here?"),
    };
final MessageQueue queue = new SimpleMessageQueue(messages.length);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final SimpleMessage msg = new SimpleMessage();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
messageCaptor=ArgumentCaptor.forClass(Message.class)
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
message=messageCaptor.getValue()
final Message message = messageCaptor.getValue();
publishPoint=mock(MqPublishPoint.class)
final MqPublishPoint publishPoint = mock(MqPublishPoint.class);
final Producer producer = new Producer("producer", publishPoint);
final SimpleMessage message = new SimpleMessage();
final String senderName = "test";
final SimpleMessage message = new SimpleMessage();
headers=message.getHeaders()
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
final Map<Message.Headers, String> headers = message.getHeaders();
Stew stew = new Stew(1, 2, 3, 4);
ImmutableStew immutableStew = new ImmutableStew(2, 4, 3, 6);
String[] args = {};
final Stew stew = new Stew(1, 2, 3, 4);
final String message = "Mixing the stew we find: 1 potatoes, 2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Stew stew = new Stew(1, 2, 3, 4);
final ImmutableStew stew = new ImmutableStew(1, 2, 3, 4);
final String expectedMessage = "Mixing the immutable stew we find: 1 potatoes, "
        + "2 carrots, 3 meat and 4 peppers";
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ItemQueue queue = new ItemQueue();
executorService=Executors.newFixedThreadPool(5)
ExecutorService executorService = Executors.newFixedThreadPool(5);
final Producer producer = new Producer("Producer_" + i, queue);
final Consumer consumer = new Consumer("Consumer_" + i, queue);
item=queue.take()
Item item = queue.take();
Item item = new Item(name, itemId++);
Random random = new Random();
String[] args = {};
queue=spy(new ItemQueue())
final ItemQueue queue = spy(new ItemQueue());
final Consumer consumer = new Consumer("consumer", queue);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
queue=mock(ItemQueue.class)
final ItemQueue queue = mock(ItemQueue.class);
final Producer producer = new Producer("producer", queue);
Prototype charProto = new Character();
Character mageProto = new Character(Type.MAGE, charProto);
Character warProto = new Character(Type.WARRIOR, charProto);
Character rogueProto = new Character(Type.ROGUE, charProto);
Character mag = new Character("Player_1", mageProto);
Character warrior = new Character("Player_2", warProto);
Character rogue = new Character("Player_3", rogueProto);
Character rogueDouble = new Character("Player_4", rogue);
containsValue=properties.containsKey(stat)
boolean containsValue = properties.containsKey(stat);
StringBuilder builder = new StringBuilder();
value=this.get(stat)
Integer value = this.get(stat);
String[] args = {};
final Character prototype = new Character();
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character mage = new Character(Type.MAGE, prototype);
expectedValue=stat.ordinal()
final Integer expectedValue = stat.ordinal();
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
final Character prototype = new Character();
final Character stupid = new Character(Type.ROGUE, prototype);
final Character weak = new Character("weak", prototype);
HeroFactory factory;
Mage mage;
Warlord warlord;
Beast beast;
String[] args = {};
mage=mock(Mage.class)
final Mage mage = mock(Mage.class);
warlord=mock(Warlord.class)
final Warlord warlord = mock(Warlord.class);
beast=mock(Beast.class)
final Beast beast = mock(Beast.class);
final HeroFactoryImpl factory = new HeroFactoryImpl(mage, warlord, beast);
clone=this.testedPrototype.clone()
final Object clone = this.testedPrototype.clone();
WizardTowerProxy tower = new WizardTowerProxy();
String[] args = {};
final String[] wizardNames = {"Gandalf", "Dumbledore", "Oz", "Merlin"};
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTowerProxy tower = new WizardTowerProxy();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
final Wizard[] wizards = new Wizard[]{
        new Wizard("Gandalf"),
        new Wizard("Dumbledore"),
        new Wizard("Oz"),
        new Wizard("Merlin")
    };
final WizardTower tower = new WizardTower();
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
CamelContext context = new DefaultCamelContext();
template=context.createProducerTemplate()
ProducerTemplate template = context.createProducerTemplate();
String[] args = {};
LoggingHandler loggingHandler = new LoggingHandler();
NioServerSocketChannel channel = new NioServerSocketChannel(port, handler);
NioDatagramChannel channel = new NioDatagramChannel(port, handler);
AppClient appClient = new AppClient();
outputStream=socket.getOutputStream()
OutputStream outputStream = socket.getOutputStream();
PrintWriter writer = new PrintWriter(outputStream);
byte[] data = new byte[1024];
read=inputStream.read(data,0,data.length)
int read = inputStream.read(data, 0, data.length);
String message = clientName + " - Log request: " + i;
DatagramPacket request =
              new DatagramPacket(message.getBytes(), message.getBytes().length, remoteAddress);
byte[] data = new byte[1024];
DatagramPacket reply = new DatagramPacket(data, data.length);
DatagramPacket datagram = (DatagramPacket) readObject;
DatagramPacket replyPacket = new DatagramPacket(ByteBuffer.wrap(ACK));
buffer=ByteBuffer.wrap(ACK)
ByteBuffer buffer = ByteBuffer.wrap(ACK);
pendingWrites=channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = channelToPendingWrites.get(key.channel());
pendingWrite=pendingWrites.poll()
Object pendingWrite = pendingWrites.poll();
pendingWrites=this.channelToPendingWrites.get(key.channel())
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
Queue<Object> pendingWrites = this.channelToPendingWrites.get(key.channel());
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
sender=((DatagramChannel)key.channel()).receive(buffer)
SocketAddress sender = ((DatagramChannel) key.channel()).receive(buffer);
DatagramPacket packet = new DatagramPacket(buffer);
DatagramPacket pendingPacket = (DatagramPacket) pendingWrite;
key=channel.getJavaChannel().register(selector,channel.getInterestedOps())
SelectionKey key = channel.getJavaChannel().register(selector, channel.getInterestedOps());
keys=selector.selectedKeys()
Set<SelectionKey> keys = selector.selectedKeys();
Set<SelectionKey> keys = selector.selectedKeys();
iterator=keys.iterator()
Iterator<SelectionKey> iterator = keys.iterator();
Iterator<SelectionKey> iterator = keys.iterator();
key=iterator.next()
SelectionKey key = iterator.next();
iterator=pendingCommands.iterator()
Iterator<Runnable> iterator = pendingCommands.iterator();
Iterator<Runnable> iterator = pendingCommands.iterator();
command=iterator.next()
Runnable command = iterator.next();
AbstractNioChannel channel = (AbstractNioChannel) key.attachment();
readObject=((AbstractNioChannel)key.attachment()).read(key)
Object readObject = ((AbstractNioChannel) key.attachment()).read(key);
ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();
socketChannel=serverSocketChannel.accept()
SocketChannel socketChannel = serverSocketChannel.accept();
readKey=socketChannel.register(selector,SelectionKey.OP_READ)
SelectionKey readKey = socketChannel.register(selector, SelectionKey.OP_READ);
SocketChannel socketChannel = (SocketChannel) key.channel();
buffer=ByteBuffer.allocate(1024)
ByteBuffer buffer = ByteBuffer.allocate(1024);
read=socketChannel.read(buffer)
int read = socketChannel.read(buffer);
ByteBuffer pendingBuffer = (ByteBuffer) pendingWrite;
App app = new App(new ThreadPoolDispatcher(2));
AppClient client = new AppClient();
App app = new App(new SameThreadDispatcher());
AppClient client = new AppClient();
executeService=Executors.newFixedThreadPool(10)
ExecutorService executeService = Executors.newFixedThreadPool(10);
ReaderWriterLock lock = new ReaderWriterLock();
String[] args = {};
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
Reader reader1 = new Reader("Reader 1", lock.readLock());
Writer writer1 = new Writer("Writer 1", lock.writeLock());
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
reader1=spy(new Reader("Reader 1",lock.readLock()))
Reader reader1 = spy(new Reader("Reader 1", lock.readLock()));
reader2=spy(new Reader("Reader 2",lock.readLock()))
Reader reader2 = spy(new Reader("Reader 2", lock.readLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
executeService=Executors.newFixedThreadPool(2)
ExecutorService executeService = Executors.newFixedThreadPool(2);
ReaderWriterLock lock = new ReaderWriterLock();
writer1=spy(new Writer("Writer 1",lock.writeLock()))
Writer writer1 = spy(new Writer("Writer 1", lock.writeLock()));
writer2=spy(new Writer("Writer 2",lock.writeLock()))
Writer writer2 = spy(new Writer("Writer 2", lock.writeLock()));
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
        "applicationContext.xml");
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
BasicDataSource basicDataSource = new BasicDataSource();
LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();
Properties properties = new Properties();
JpaTransactionManager transactionManager = new JpaTransactionManager();
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
        AppConfig.class);
repository=context.getBean(PersonRepository.class)
PersonRepository repository = context.getBean(PersonRepository.class);
Person peter = new Person("Peter", "Sagan", 17);
Person nasta = new Person("Nasta", "Kuzminova", 25);
Person john = new Person("John", "lawrence", 35);
Person terry = new Person("Terry", "Law", 36);
List<Person> persons = (List<Person>) repository.findAll();
List<Person> persons = (List<Person>) repository.findAll();
p=repository.findOne(new PersonSpecifications.NameEqualSpec("John"))
Person p = repository.findOne(new PersonSpecifications.NameEqualSpec("John"));
final int prime = 31;
int result = 1;
Person other = (Person) obj;
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
resultSet=dataSource.getConnection().createStatement().executeQuery("SELECT 1")
ResultSet resultSet = dataSource.getConnection().createStatement().executeQuery("SELECT 1");
String result = null;
String expected = "1";
String[] args = {};
actuals=Lists.newArrayList(repository.findAll())
List<Person> actuals = Lists.newArrayList(repository.findAll());
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
terry=repository.findByName("Terry")
Person terry = repository.findByName("Terry");
persons=repository.findAll(new PersonSpecifications.AgeBetweenSpec(20,40))
List<Person> persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));
actual=repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"))
Person actual = repository.findOne(new PersonSpecifications.NameEqualSpec("Terry"));
String[] args = {};
inOrder=inOrder(getStdOutMock())
final InOrder inOrder = inOrder(getStdOutMock());
King k = new King();
Queen q = new Queen();
ArrayList<Royalty> guests = new ArrayList<>();
boolean anotherDay = true;
String[] args = {};
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final King king = new King();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
final Queen queen = new Queen();
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
royalty=mock(Royalty.class)
final Royalty royalty = mock(Royalty.class);
final Servant servant = new Servant("test");
goodMoodRoyalty=mock(Royalty.class)
final Royalty goodMoodRoyalty = mock(Royalty.class);
badMoodRoyalty=mock(Royalty.class)
final Royalty badMoodRoyalty = mock(Royalty.class);
final ArrayList<Royalty> goodCompany = new ArrayList<>();
final ArrayList<Royalty> badCompany = new ArrayList<>();
Spell spell1 = new Spell("Ice dart");
Spell spell2 = new Spell("Invisibility");
Spell spell3 = new Spell("Stun bolt");
Spell spell4 = new Spell("Confusion");
Spell spell5 = new Spell("Darkness");
Spell spell6 = new Spell("Fireball");
Spell spell7 = new Spell("Enchant weapon");
Spell spell8 = new Spell("Rock armour");
Spell spell9 = new Spell("Light");
Spell spell10 = new Spell("Bee swarm");
Spell spell11 = new Spell("Haste");
Spell spell12 = new Spell("Levitation");
Spell spell13 = new Spell("Magic lock");
Spell spell14 = new Spell("Summon hell bat");
Spell spell15 = new Spell("Water walking");
Spell spell16 = new Spell("Magic storm");
Spell spell17 = new Spell("Entangle");
SpellDao spellDao = new SpellDaoImpl();
SpellbookDao spellbookDao = new SpellbookDaoImpl();
Spellbook spellbook1 = new Spellbook("Book of Orgymon");
Spellbook spellbook2 = new Spellbook("Book of Aras");
Spellbook spellbook3 = new Spellbook("Book of Kritior");
Spellbook spellbook4 = new Spellbook("Book of Tamaex");
Spellbook spellbook5 = new Spellbook("Book of Idores");
Spellbook spellbook6 = new Spellbook("Book of Opaen");
Spellbook spellbook7 = new Spellbook("Book of Kihione");
WizardDao wizardDao = new WizardDaoImpl();
Wizard wizard1 = new Wizard("Aderlard Boud");
Wizard wizard2 = new Wizard("Anaxis Bajraktari");
Wizard wizard3 = new Wizard("Xuban Munoa");
Wizard wizard4 = new Wizard("Blasius Dehooge");
MagicService service =
        new MagicServiceImpl(new WizardDaoImpl(), new SpellbookDaoImpl(), new SpellDaoImpl());
wizardsWithSpellbook=service.findWizardsWithSpellbook("Book of Idores")
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");
wizardsWithSpell=service.findWizardsWithSpell("Fireball")
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
E result = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
session=getSession()
Session session = getSession();
Transaction tx = null;
List<E> result = null;
List<E> result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
spellbook=spellbookDao.findByName(name)
Spellbook spellbook = spellbookDao.findByName(name);
spell=spellDao.findByName(name)
Spell spell = spellDao.findByName(name);
spellbook=spell.getSpellbook()
Spellbook spellbook = spell.getSpellbook();
session=getSession()
Session session = getSession();
Transaction tx = null;
Spell result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Spellbook result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
session=getSession()
Session session = getSession();
Transaction tx = null;
Wizard result = null;
criteria=session.createCriteria(persistentClass)
Criteria criteria = session.createCriteria(persistentClass);
String[] args = {};
className=dao.persistentClass.getSimpleName()
final String className = dao.persistentClass.getSimpleName();
entityName=String.format("%s%d",className,ID_GENERATOR.incrementAndGet())
final String entityName = String.format("%s%d", className, ID_GENERATOR.incrementAndGet());
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
byId=this.dao.find(entity.getId())
final E byId = this.dao.find(entity.getId());
originalEntities=this.dao.findAll()
final List<E> originalEntities = this.dao.findAll();
final List<E> originalEntities = this.dao.findAll();
entitiesLeft=this.dao.findAll()
final List<E> entitiesLeft = this.dao.findAll();
final List<E> entitiesLeft = this.dao.findAll();
all=this.dao.findAll()
final List<E> all = this.dao.findAll();
final List<E> all = this.dao.findAll();
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
expectedId=Long.valueOf(1)
final Long expectedId = Long.valueOf(1);
entity=this.factory.apply("name")
final E entity = this.factory.apply("name");
final String expectedName = "new name";
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
final String bookname = "bookname";
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
final Set<Wizard> wizards = new HashSet<>();
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpellbook(bookname)
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final List<Wizard> result = service.findWizardsWithSpellbook(bookname);
final Set<Wizard> wizards = new HashSet<>();
spellbook=mock(Spellbook.class)
final Spellbook spellbook = mock(Spellbook.class);
spellbookDao=mock(SpellbookDao.class)
final SpellbookDao spellbookDao = mock(SpellbookDao.class);
wizardDao=mock(WizardDao.class)
final WizardDao wizardDao = mock(WizardDao.class);
spell=mock(Spell.class)
final Spell spell = mock(Spell.class);
final String spellName = "spellname";
spellDao=mock(SpellDao.class)
final SpellDao spellDao = mock(SpellDao.class);
final MagicServiceImpl service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);
result=service.findWizardsWithSpell(spellName)
final List<Wizard> result = service.findWizardsWithSpell(spellName);
final List<Wizard> result = service.findWizardsWithSpell(spellName);
dao=getDao()
final SpellDaoImpl dao = getDao();
allSpells=dao.findAll()
final List<Spell> allSpells = dao.findAll();
final List<Spell> allSpells = dao.findAll();
spellByName=dao.findByName(spell.getName())
final Spell spellByName = dao.findByName(spell.getName());
dao=getDao()
final SpellbookDaoImpl dao = getDao();
allBooks=dao.findAll()
final List<Spellbook> allBooks = dao.findAll();
final List<Spellbook> allBooks = dao.findAll();
spellByName=dao.findByName(book.getName())
final Spellbook spellByName = dao.findByName(book.getName());
dao=getDao()
final WizardDaoImpl dao = getDao();
allWizards=dao.findAll()
final List<Wizard> allWizards = dao.findAll();
final List<Wizard> allWizards = dao.findAll();
byName=dao.findByName(spell.getName())
final Wizard byName = dao.findByName(spell.getName());
service=ServiceLocator.getService("jndi/serviceA")
Service service = ServiceLocator.getService("jndi/serviceA");
Service cachedService = null;
serviceObj=serviceCache.getService(serviceJndiName)
Service serviceObj = serviceCache.getService(serviceJndiName);
InitContext ctx = new InitContext();
String[] args = {};
final String[] serviceNames = new String[]{
        "jndi/serviceA", "jndi/serviceB"
    };
service=ServiceLocator.getService(serviceName)
final Service service = ServiceLocator.getService(serviceName);
ivoryTower1=IvoryTower.getInstance()
IvoryTower ivoryTower1 = IvoryTower.getInstance();
ivoryTower2=IvoryTower.getInstance()
IvoryTower ivoryTower2 = IvoryTower.getInstance();
threadSafeIvoryTower1=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower1 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
threadSafeIvoryTower2=ThreadSafeLazyLoadedIvoryTower.getInstance()
ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower2 =
        ThreadSafeLazyLoadedIvoryTower.getInstance();
EnumIvoryTower enumIvoryTower1 = EnumIvoryTower.INSTANCE;
EnumIvoryTower enumIvoryTower2 = EnumIvoryTower.INSTANCE;
dcl1=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();
dcl2=ThreadSafeDoubleCheckLocking.getInstance()
ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();
demandHolderIdiom=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom =
        InitializingOnDemandHolderIdiom.getInstance();
demandHolderIdiom2=InitializingOnDemandHolderIdiom.getInstance()
InitializingOnDemandHolderIdiom demandHolderIdiom2 =
        InitializingOnDemandHolderIdiom.getInstance();
ThreadSafeDoubleCheckLocking result = instance;
String[] args = {};
instance1=this.singletonInstanceMethod.get()
S instance1 = this.singletonInstanceMethod.get();
instance2=this.singletonInstanceMethod.get()
S instance2 = this.singletonInstanceMethod.get();
instance3=this.singletonInstanceMethod.get()
S instance3 = this.singletonInstanceMethod.get();
final List<Callable<S>> tasks = new ArrayList<>();
int i = 0
creatures=Arrays.asList(new Goblin(),new Octopus(),new Dragon(),new Shark(),new Troll(),new KillerBee())
List<Creature> creatures =
        Arrays.asList(new Goblin(), new Octopus(), new Dragon(), new Shark(), new Troll(),
            new KillerBee());
walkingCreatures=creatures.stream().filter(new MovementSelector(Movement.WALKING)).collect(Collectors.toList())
List<Creature> walkingCreatures =
        creatures.stream().filter(new MovementSelector(Movement.WALKING))
            .collect(Collectors.toList());
darkCreatures=creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList())
List<Creature> darkCreatures =
        creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList());
redAndFlyingCreatures=creatures.stream().filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING))).collect(Collectors.toList())
List<Creature> redAndFlyingCreatures =
        creatures.stream()
            .filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING)))
            .collect(Collectors.toList());
String[] args = {};
toString=this.testedCreature.toString()
final String toString = this.testedCreature.toString();
greenCreature=mock(Creature.class)
final Creature greenCreature = mock(Creature.class);
redCreature=mock(Creature.class)
final Creature redCreature = mock(Creature.class);
final ColorSelector greenSelector = new ColorSelector(Color.GREEN);
swimmingCreature=mock(Creature.class)
final Creature swimmingCreature = mock(Creature.class);
flyingCreature=mock(Creature.class)
final Creature flyingCreature = mock(Creature.class);
final MovementSelector swimmingSelector = new MovementSelector(Movement.SWIMMING);
normalCreature=mock(Creature.class)
final Creature normalCreature = mock(Creature.class);
smallCreature=mock(Creature.class)
final Creature smallCreature = mock(Creature.class);
final SizeSelector normalSelector = new SizeSelector(Size.NORMAL);
Mammoth mammoth = new Mammoth();
String[] args = {};
inOrder=Mockito.inOrder(this.stdOutMock)
final InOrder inOrder = Mockito.inOrder(this.stdOutMock);
final Mammoth mammoth = new Mammoth();
toString=new Mammoth().toString()
final String toString = new Mammoth().toString();
warrior=CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin").withWeapon("Sword").noAbilities().build()
Character warrior =
        CharacterStepBuilder.newBuilder().name("Amberjill").fighterClass("Paladin")
            .withWeapon("Sword").noAbilities().build();
mage=CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer").withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport").noMoreAbilities().build()
Character mage =
        CharacterStepBuilder.newBuilder().name("Riobard").wizardClass("Sorcerer")
            .withSpell("Fireball").withAbility("Fire Aura").withAbility("Teleport")
            .noMoreAbilities().build();
thief=CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build()
Character thief =
        CharacterStepBuilder.newBuilder().name("Desmond").fighterClass("Rogue").noWeapon().build();
StringBuilder sb = new StringBuilder();
Character character = new Character(name);
String[] args = {};
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").withAbility("invisibility").withAbility("wisdom").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .withAbility("invisibility")
        .withAbility("wisdom")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").noSpell().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .noSpell()
        .build();
character=CharacterStepBuilder.newBuilder().name("Merlin").wizardClass("alchemist").withSpell("poison").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Merlin")
        .wizardClass("alchemist")
        .withSpell("poison")
        .noAbilities()
        .build();
character=CharacterStepBuilder.newBuilder().name("Cuauhtemoc").fighterClass("aztec").withWeapon("spear").withAbility("speed").withAbility("strength").noMoreAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Cuauhtemoc")
        .fighterClass("aztec")
        .withWeapon("spear")
        .withAbility("speed")
        .withAbility("strength")
        .noMoreAbilities()
        .build();
abilities=character.getAbilities()
final List<String> abilities = character.getAbilities();
final List<String> abilities = character.getAbilities();
character=CharacterStepBuilder.newBuilder().name("Poor warrior").fighterClass("none").noWeapon().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Poor warrior")
        .fighterClass("none")
        .noWeapon()
        .build();
character=CharacterStepBuilder.newBuilder().name("Weak warrior").fighterClass("none").withWeapon("Slingshot").noAbilities().build()
final Character character = CharacterStepBuilder.newBuilder()
        .name("Weak warrior")
        .fighterClass("none")
        .withWeapon("Slingshot")
        .noAbilities()
        .build();
DragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());
String[] args = {};
strategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy strategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(strategy);
initialStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy initialStrategy = mock(DragonSlayingStrategy.class);
final DragonSlayer dragonSlayer = new DragonSlayer(initialStrategy);
newStrategy=mock(DragonSlayingStrategy.class)
final DragonSlayingStrategy newStrategy = mock(DragonSlayingStrategy.class);
HalflingThief thief = new HalflingThief(new HitAndRunMethod());
target=pickTarget()
String target = pickTarget();
String[] args = {};
method=mock(StealingMethod.class)
final StealingMethod method = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(method);
initialMethod=mock(StealingMethod.class)
final StealingMethod initialMethod = mock(StealingMethod.class);
final HalflingThief thief = new HalflingThief(initialMethod);
newMethod=mock(StealingMethod.class)
final StealingMethod newMethod = mock(StealingMethod.class);
inOrder=inOrder(this.stdOutMock)
final InOrder inOrder = inOrder(this.stdOutMock);
List<Task> tasks = new ArrayList<>();
executor=Executors.newFixedThreadPool(3)
ExecutorService executor = Executors.newFixedThreadPool(3);
Runnable worker = new Worker(tasks.get(i));
String[] args = {};
service=Executors.newFixedThreadPool(THREAD_COUNT)
final ExecutorService service = Executors.newFixedThreadPool(THREAD_COUNT);
final List<Callable<Integer>> tasks = new ArrayList<>();
int i = 0
task=mock(Task.class)
final Task task = mock(Task.class);
final Worker worker = new Worker(task);
RainbowFish fishV1 = new RainbowFish("Zed", 10, 11, 12);
deserializedFishV1=RainbowFishSerializer.readV1("fish1.out")
RainbowFish deserializedFishV1 = RainbowFishSerializer.readV1("fish1.out");
RainbowFishV2 fishV2 = new RainbowFishV2("Scar", 5, 12, 15, true, true, true);
deserializedFishV2=RainbowFishSerializer.readV1("fish2.out")
RainbowFish deserializedFishV2 = RainbowFishSerializer.readV1("fish2.out");
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
Map<String, String> map = new HashMap<>();
FileOutputStream fileOut = new FileOutputStream(filename);
ObjectOutputStream objOut = new ObjectOutputStream(fileOut);
FileInputStream fileIn = new FileInputStream(filename);
ObjectInputStream objIn = new ObjectInputStream(fileIn);
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
Map<String, String> map = (Map<String, String>) objIn.readObject();
String[] args = {};
File file1 = new File("fish1.out");
File file2 = new File("fish2.out");
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
outputFile=this.testFolder.newFile()
final File outputFile = this.testFolder.newFile();
fish=RainbowFishSerializer.readV1(outputFile.getPath())
final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());
final RainbowFish fish = new RainbowFish("name", 1, 2, 3);
final RainbowFishV2 fish = new RainbowFishV2("name", 1, 2, 3, false, true, false);
BallItem ballItem = new BallItem();
BallThread ballThread = new BallThread();
String[] args = {};
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
inOrder=inOrder(ballThread)
final InOrder inOrder = inOrder(ballThread);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallItem ballItem = new BallItem();
ballThread=mock(BallThread.class)
final BallThread ballThread = mock(BallThread.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
ballItem=mock(BallItem.class)
final BallItem ballItem = mock(BallItem.class);
final BallThread ballThread = new BallThread();
exceptionHandler=mock(UncaughtExceptionHandler.class)
final UncaughtExceptionHandler exceptionHandler = mock(UncaughtExceptionHandler.class);
statA=HeroStat.valueOf(10,5,0)
HeroStat statA = HeroStat.valueOf(10, 5, 0);
statB=HeroStat.valueOf(10,5,0)
HeroStat statB = HeroStat.valueOf(10, 5, 0);
statC=HeroStat.valueOf(5,1,8)
HeroStat statC = HeroStat.valueOf(5, 1, 8);
final int prime = 31;
int result = 1;
HeroStat other = (HeroStat) obj;
String[] args = {};
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatA=HeroStat.valueOf(3,9,2)
HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);
heroStatB=HeroStat.valueOf(3,9,2)
HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);
heroStatC=HeroStat.valueOf(3,9,8)
HeroStat heroStatC = HeroStat.valueOf(3, 9, 8);
Commander commander =
        new Commander(new Sergeant(new Soldier(), new Soldier(), new Soldier()), new Sergeant(
            new Soldier(), new Soldier(), new Soldier()));
String[] args = {};
final Unit[] children = new Unit[5];
unit=this.factory.apply(children)
final U unit = this.factory.apply(children);
visitor=mock(UnitVisitor.class)
final UnitVisitor visitor = mock(UnitVisitor.class);

Diff of 74c0ab90ac259edeccac72ce627c0b2d411fcfdc and 70fffc5ca37a9327cc122a39595b536db1efdab1:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 212
	--> recency = months
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 6
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 74c0ab90ac259edeccac72ce627c0b2d411fcfdc to 70fffc5ca37a9327cc122a39595b536db1efdab1

************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository iluwatar/java-design-patterns = 78

Bernardo Sulzbach added type argument method count = 0
	--> recency = null
Bernardo Sulzbach added wildcard count = 0
	--> recency = null
Bernardo Sulzbach added type declaration count = 212
	--> recency = months
Bernardo Sulzbach added type parameter method count = 0
	--> recency = null
Bernardo Sulzbach added type parameter field count = 0
	--> recency = null
Bernardo Sulzbach added diamond count = 6
	--> recency = months
Bernardo Sulzbach added method invocation count = 0
	--> recency = null
Bernardo Sulzbach added implicit method invocation count = 0
	--> recency = null
Bernardo Sulzbach added class instantiation count = 0
	--> recency = null
Bernardo Sulzbach added nested count = 0
	--> recency = null
Bernardo Sulzbach added bounds count = 0
	--> recency = null
